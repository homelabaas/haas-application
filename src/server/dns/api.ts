/**
 * DNS Api
 * Allows DNS management
 *
 * OpenAPI spec version: 1.0.0
 * Contact: geoff.rich@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require("request");
import http = require("http");
import Promise = require("bluebird");

let defaultBasePath = "http://localhost:8080/api";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class Configuration {
    /**
    * Array of DNS Forwarders
    */
    "dnsforwarders"?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "dnsforwarders",
            "baseName": "dnsforwarders",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return Configuration.attributeTypeMap;
    }
}

export class ErrorResponse {
    "code": number;
    "message": string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ErrorResponse.attributeTypeMap;
    }
}

export class GeneralResponse {
    "message": string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return GeneralResponse.attributeTypeMap;
    }
}

export class NewZone {
    "name"?: string;
    /**
    * Time in seconds
    */
    "TTL"?: number;
    "adminEmail"?: string;
    "nsaddress"?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: "name",
            baseName: "name",
            type: "string"
        },
        {
            name: "TTL",
            baseName: "TTL",
            type: "number"
        },
        {
            name: "adminEmail",
            baseName: "adminEmail",
            type: "string"
        },
        {
            name: "nsaddress",
            baseName: "nsaddress",
            type: "string"
        }    ];

    public static getAttributeTypeMap() {
        return NewZone.attributeTypeMap;
    }
}

export class Record {
    public "name"?: string;
    public "recordtype"?: string;
    public "address"?: string;

    public static discriminator: string | undefined = undefined;

    public static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: "name",
            baseName: "name",
            type: "string"
        },
        {
            name: "recordtype",
            baseName: "recordtype",
            type: "string"
        },
        {
            name: "address",
            baseName: "address",
            type: "string"
        }    ];

    public static getAttributeTypeMap() {
        return Record.attributeTypeMap;
    }
}

export class Zone {
    public "name"?: string;
    /**
    * Time in seconds
    */
    public "TTL"?: number;
    public "adminEmail"?: string;

    public static discriminator: string | undefined = undefined;

    public static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: "name",
            baseName: "name",
            type: "string"
        },
        {
            name: "TTL",
            baseName: "TTL",
            type: "number"
        },
        {
            name: "adminEmail",
            baseName: "adminEmail",
            type: "string"
        }    ];

    public static getAttributeTypeMap() {
        return Zone.attributeTypeMap;
    }
}

const enumsMap: {[index: string]: any} = {
};

const typeMap: {[index: string]: any} = {
    Configuration,
    ErrorResponse,
    GeneralResponse,
    NewZone,
    Record,
    Zone,
};

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = "";
    public password: string = "";

    public applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = "";

    constructor(private location: string, private paramName: string) {
    }

    public applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location === "query") {
            (requestOptions.qs as any)[this.paramName] = this.apiKey;
        } else if (this.location === "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = "";

    public applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = "";
    public password: string = "";

    public applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders: any = {};
    protected _useQuerystring: boolean = false;

    protected authentications = {
        default: new VoidAuth() as Authentication,
    };

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }
    /**
     *
     * @summary Add a new record to a zone
     * @param id ID of the zone to get the records from
     * @param body Record to add
     * @param {*} [options] Override http request options.
     */
    public addRecordForZoneId(id: string, body: Record, options: any = {}): Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + "/zones/{id}/records"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling addRecordForZoneId.");
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling addRecordForZoneId.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Record")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Add a single zone
     * @param body Record to add
     * @param {*} [options] Override http request options.
     */
    public addZone(body: NewZone, options: any = {}): Promise<{ response: http.ClientResponse; body: GeneralResponse;  }> {
        const localVarPath = this.basePath + "/zones";
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling addZone.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "NewZone")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeneralResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeneralResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Delete a record from a zone
     * @param id ID of the zone to delete the record from
     * @param body Record to delete
     * @param {*} [options] Override http request options.
     */
    public deleteRecordForZoneId(id: string, body: Record, options: any = {}): Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + "/zones/{id}/records/delete"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling deleteRecordForZoneId.");
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling deleteRecordForZoneId.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "POST",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Record")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Delete a single zone
     * @param id ID of the zone to delete
     * @param {*} [options] Override http request options.
     */
    public deleteZoneById(id: string, options: any = {}): Promise<{ response: http.ClientResponse; body: GeneralResponse;  }> {
        const localVarPath = this.basePath + "/zones/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling deleteZoneById.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "DELETE",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeneralResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeneralResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Get all dns zones
     * @param {*} [options] Override http request options.
     */
    public getAllZones(options: any = {}): Promise<{ response: http.ClientResponse; body: Zone[];  }> {
        const localVarPath = this.basePath + "/zones";
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Zone[];  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Zone>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Get current configuration
     * @param {*} [options] Override http request options.
     */
    public getConfig(options: any = {}): Promise<{ response: http.ClientResponse; body: Configuration;  }> {
        const localVarPath = this.basePath + "/config";
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Configuration;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Configuration");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Returns the DNS records for a single zone
     * @param id ID of the zone to add the record to
     * @param {*} [options] Override http request options.
     */
    public getRecordsByZoneId(id: string, options: any = {}): Promise<{ response: http.ClientResponse; body: Record[];  }> {
        const localVarPath = this.basePath + "/zones/{id}/records"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling getRecordsByZoneId.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Record[];  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Record>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Return a single zone
     * @param id ID of the zone to fetch
     * @param {*} [options] Override http request options.
     */
    public getZoneById(id: string, options: any = {}): Promise<{ response: http.ClientResponse; body: Zone;  }> {
        const localVarPath = this.basePath + "/zones/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error("Required parameter id was null or undefined when calling getZoneById.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "GET",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Zone;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Zone");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Modify current configuration
     * @param body Configuration settings to change
     * @param {*} [options] Override http request options.
     */
    public setConfig(body: Configuration, options: any = {}): Promise<{ response: http.ClientResponse; body: GeneralResponse;  }> {
        const localVarPath = this.basePath + "/config";
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling setConfig.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Configuration")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeneralResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeneralResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @summary Set a single zone
     * @param body Record to set values to
     * @param {*} [options] Override http request options.
     */
    public setZone(body: Zone, options: any = {}): Promise<{ response: http.ClientResponse; body: GeneralResponse;  }> {
        const localVarPath = this.basePath + "/zones";
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error("Required parameter body was null or undefined when calling setZone.");
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: "PUT",
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Zone")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: GeneralResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "GeneralResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
}
