declare module vspherevsan {
   interface vsanhealthService {
      addHandler(handler: Function): void;
      removeHandler(handler: Function): void;
      serializeObject(obj: Object, name: string): Node;
      deserializeObject(obj: Node): Object;
      xs: {
         AnyType: {
            (options?: vsanhealthService.xs.AnyType): vsanhealthService.xs.AnyType;
         };
         AnyURI: {
            (options?: vsanhealthService.xs.AnyURI): vsanhealthService.xs.AnyURI;
         };
         Base64Binary: {
            (options?: vsanhealthService.xs.Base64Binary): vsanhealthService.xs.Base64Binary;
         };
         Boolean: {
            (options?: vsanhealthService.xs.Boolean): vsanhealthService.xs.Boolean;
         };
         Byte: {
            (options?: vsanhealthService.xs.Byte): vsanhealthService.xs.Byte;
         };
         DateTime: {
            (options?: vsanhealthService.xs.DateTime): vsanhealthService.xs.DateTime;
         };
         Double: {
            (options?: vsanhealthService.xs.Double): vsanhealthService.xs.Double;
         };
         Float: {
            (options?: vsanhealthService.xs.Float): vsanhealthService.xs.Float;
         };
         ID: {
            (options?: vsanhealthService.xs.ID): vsanhealthService.xs.ID;
         };
         Int: {
            (options?: vsanhealthService.xs.Int): vsanhealthService.xs.Int;
         };
         Integer: {
            (options?: vsanhealthService.xs.Integer): vsanhealthService.xs.Integer;
         };
         Long: {
            (options?: vsanhealthService.xs.Long): vsanhealthService.xs.Long;
         };
         NCName: {
            (options?: vsanhealthService.xs.NCName): vsanhealthService.xs.NCName;
         };
         NegativeInteger: {
            (options?: vsanhealthService.xs.NegativeInteger): vsanhealthService.xs.NegativeInteger;
         };
         NonNegativeInteger: {
            (options?: vsanhealthService.xs.NonNegativeInteger): vsanhealthService.xs.NonNegativeInteger;
         };
         NonPositiveInteger: {
            (options?: vsanhealthService.xs.NonPositiveInteger): vsanhealthService.xs.NonPositiveInteger;
         };
         PositiveInteger: {
            (options?: vsanhealthService.xs.PositiveInteger): vsanhealthService.xs.PositiveInteger;
         };
         QName: {
            (options?: vsanhealthService.xs.QName): vsanhealthService.xs.QName;
         };
         Short: {
            (options?: vsanhealthService.xs.Short): vsanhealthService.xs.Short;
         };
         String: {
            (options?: vsanhealthService.xs.String): vsanhealthService.xs.String;
         };
         UnsignedLong: {
            (options?: vsanhealthService.xs.UnsignedLong): vsanhealthService.xs.UnsignedLong;
         };
      }
      vim: {
         VsanStorageComplianceResultStorageComplianceStatus: {
            "compliant": string;
            "nonCompliant": string;
            "unknown": string;
            "notApplicable": string;
         };
         VsanStorageComplianceResult: {
            (options?: vsanhealthService.vim.VsanStorageComplianceResult): vsanhealthService.vim.VsanStorageComplianceResult;
         };
         VsanStorageOperationalStatus: {
            (options?: vsanhealthService.vim.VsanStorageOperationalStatus): vsanhealthService.vim.VsanStorageOperationalStatus;
         };
         VsanStoragePolicyStatus: {
            (options?: vsanhealthService.vim.VsanStoragePolicyStatus): vsanhealthService.vim.VsanStoragePolicyStatus;
         };
         ArrayOfVsanStoragePolicyStatus: {
            (options?: vsanhealthService.vim.ArrayOfVsanStoragePolicyStatus): vsanhealthService.vim.ArrayOfVsanStoragePolicyStatus;
         };
         VimClusterVSANPreferredFaultDomainInfo: {
            (options?: vsanhealthService.vim.VimClusterVSANPreferredFaultDomainInfo): vsanhealthService.vim.VimClusterVSANPreferredFaultDomainInfo;
         };
         VimClusterVSANStretchedClusterCapability: {
            (options?: vsanhealthService.vim.VimClusterVSANStretchedClusterCapability): vsanhealthService.vim.VimClusterVSANStretchedClusterCapability;
         };
         ArrayOfVimClusterVSANStretchedClusterCapability: {
            (options?: vsanhealthService.vim.ArrayOfVimClusterVSANStretchedClusterCapability): vsanhealthService.vim.ArrayOfVimClusterVSANStretchedClusterCapability;
         };
         VimClusterVSANStretchedClusterConfigIssueInfoVSANStretchedClusterConfigIssueEnum: {
            "ClusterWithoutOneWitnessHost": string;
            "ClusterWithoutTwoDataFaultDomains": string;
            "ClusterWithMultipleUnicastAgents": string;
            "WitnessPreferredFaultDomainInvalid": string;
            "WitnessPreferredFaultDomainNotExist": string;
            "WitnessInsideVcCluster": string;
            "WitnessFaultDomainInvalid": string;
            "HostUnicastAgentUnset": string;
            "WitnessWithNoDiskMapping": string;
            "HostWithNoStretchedClusterSupport": string;
            "HostWithInvalidUnicastAgent": string;
         };
         VimClusterVSANStretchedClusterFaultDomainConfig: {
            (options?: vsanhealthService.vim.VimClusterVSANStretchedClusterFaultDomainConfig): vsanhealthService.vim.VimClusterVSANStretchedClusterFaultDomainConfig;
         };
         VSANStretchedClusterHostVirtualApplianceStatus: {
            (options?: vsanhealthService.vim.VSANStretchedClusterHostVirtualApplianceStatus): vsanhealthService.vim.VSANStretchedClusterHostVirtualApplianceStatus;
         };
         VimClusterVSANWitnessHostInfo: {
            (options?: vsanhealthService.vim.VimClusterVSANWitnessHostInfo): vsanhealthService.vim.VimClusterVSANWitnessHostInfo;
         };
         ArrayOfVimClusterVSANWitnessHostInfo: {
            (options?: vsanhealthService.vim.ArrayOfVimClusterVSANWitnessHostInfo): vsanhealthService.vim.ArrayOfVimClusterVSANWitnessHostInfo;
         };
         VsanAttachToSrOperation: {
            (options?: vsanhealthService.vim.VsanAttachToSrOperation): vsanhealthService.vim.VsanAttachToSrOperation;
         };
         ArrayOfVsanAttachToSrOperation: {
            (options?: vsanhealthService.vim.ArrayOfVsanAttachToSrOperation): vsanhealthService.vim.ArrayOfVsanAttachToSrOperation;
         };
         VsanClusterAdvCfgSyncHostResult: {
            (options?: vsanhealthService.vim.VsanClusterAdvCfgSyncHostResult): vsanhealthService.vim.VsanClusterAdvCfgSyncHostResult;
         };
         ArrayOfVsanClusterAdvCfgSyncHostResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterAdvCfgSyncHostResult): vsanhealthService.vim.ArrayOfVsanClusterAdvCfgSyncHostResult;
         };
         VsanClusterAdvCfgSyncResult: {
            (options?: vsanhealthService.vim.VsanClusterAdvCfgSyncResult): vsanhealthService.vim.VsanClusterAdvCfgSyncResult;
         };
         ArrayOfVsanClusterAdvCfgSyncResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterAdvCfgSyncResult): vsanhealthService.vim.ArrayOfVsanClusterAdvCfgSyncResult;
         };
         VsanClusterBalancePerDiskInfo: {
            (options?: vsanhealthService.vim.VsanClusterBalancePerDiskInfo): vsanhealthService.vim.VsanClusterBalancePerDiskInfo;
         };
         ArrayOfVsanClusterBalancePerDiskInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterBalancePerDiskInfo): vsanhealthService.vim.ArrayOfVsanClusterBalancePerDiskInfo;
         };
         VsanClusterBalanceSummary: {
            (options?: vsanhealthService.vim.VsanClusterBalanceSummary): vsanhealthService.vim.VsanClusterBalanceSummary;
         };
         VsanClusterClomdLivenessResult: {
            (options?: vsanhealthService.vim.VsanClusterClomdLivenessResult): vsanhealthService.vim.VsanClusterClomdLivenessResult;
         };
         VsanClusterConfig: {
            (options?: vsanhealthService.vim.VsanClusterConfig): vsanhealthService.vim.VsanClusterConfig;
         };
         ArrayOfVsanClusterConfig: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterConfig): vsanhealthService.vim.ArrayOfVsanClusterConfig;
         };
         VsanClusterCreateVmHealthTestResult: {
            (options?: vsanhealthService.vim.VsanClusterCreateVmHealthTestResult): vsanhealthService.vim.VsanClusterCreateVmHealthTestResult;
         };
         ArrayOfVsanClusterCreateVmHealthTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterCreateVmHealthTestResult): vsanhealthService.vim.ArrayOfVsanClusterCreateVmHealthTestResult;
         };
         VsanClusterHclInfo: {
            (options?: vsanhealthService.vim.VsanClusterHclInfo): vsanhealthService.vim.VsanClusterHclInfo;
         };
         VsanClusterHealthActionVsanClusterHealthActionIdEnum: {
            "RepairClusterObjectsAction": string;
            "UploadHclDb": string;
            "UpdateHclDbFromInternet": string;
            "EnableHealthService": string;
            "DiskBalance": string;
            "StopDiskBalance": string;
            "RemediateDedup": string;
            "UpgradeVsanDiskFormat": string;
            "EnableIscsiTargetService": string;
         };
         VsanClusterHealthAction: {
            (options?: vsanhealthService.vim.VsanClusterHealthAction): vsanhealthService.vim.VsanClusterHealthAction;
         };
         ArrayOfVsanClusterHealthAction: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthAction): vsanhealthService.vim.ArrayOfVsanClusterHealthAction;
         };
         VsanClusterHealthConfigs: {
            (options?: vsanhealthService.vim.VsanClusterHealthConfigs): vsanhealthService.vim.VsanClusterHealthConfigs;
         };
         VsanClusterHealthGroup: {
            (options?: vsanhealthService.vim.VsanClusterHealthGroup): vsanhealthService.vim.VsanClusterHealthGroup;
         };
         ArrayOfVsanClusterHealthGroup: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthGroup): vsanhealthService.vim.ArrayOfVsanClusterHealthGroup;
         };
         VsanClusterHealthResultBase: {
            (options?: vsanhealthService.vim.VsanClusterHealthResultBase): vsanhealthService.vim.VsanClusterHealthResultBase;
         };
         ArrayOfVsanClusterHealthResultBase: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthResultBase): vsanhealthService.vim.ArrayOfVsanClusterHealthResultBase;
         };
         VsanClusterHealthResultColumnInfo: {
            (options?: vsanhealthService.vim.VsanClusterHealthResultColumnInfo): vsanhealthService.vim.VsanClusterHealthResultColumnInfo;
         };
         ArrayOfVsanClusterHealthResultColumnInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthResultColumnInfo): vsanhealthService.vim.ArrayOfVsanClusterHealthResultColumnInfo;
         };
         VsanClusterHealthResultKeyValuePair: {
            (options?: vsanhealthService.vim.VsanClusterHealthResultKeyValuePair): vsanhealthService.vim.VsanClusterHealthResultKeyValuePair;
         };
         ArrayOfVsanClusterHealthResultKeyValuePair: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthResultKeyValuePair): vsanhealthService.vim.ArrayOfVsanClusterHealthResultKeyValuePair;
         };
         VsanClusterHealthResultRow: {
            (options?: vsanhealthService.vim.VsanClusterHealthResultRow): vsanhealthService.vim.VsanClusterHealthResultRow;
         };
         ArrayOfVsanClusterHealthResultRow: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthResultRow): vsanhealthService.vim.ArrayOfVsanClusterHealthResultRow;
         };
         VsanClusterHealthResultTable: {
            (options?: vsanhealthService.vim.VsanClusterHealthResultTable): vsanhealthService.vim.VsanClusterHealthResultTable;
         };
         VsanClusterHealthSummary: {
            (options?: vsanhealthService.vim.VsanClusterHealthSummary): vsanhealthService.vim.VsanClusterHealthSummary;
         };
         VsanClusterHealthSystemObjectsRepairResult: {
            (options?: vsanhealthService.vim.VsanClusterHealthSystemObjectsRepairResult): vsanhealthService.vim.VsanClusterHealthSystemObjectsRepairResult;
         };
         VsanClusterHealthSystemStatusResult: {
            (options?: vsanhealthService.vim.VsanClusterHealthSystemStatusResult): vsanhealthService.vim.VsanClusterHealthSystemStatusResult;
         };
         VsanClusterHealthSystemVersionResult: {
            (options?: vsanhealthService.vim.VsanClusterHealthSystemVersionResult): vsanhealthService.vim.VsanClusterHealthSystemVersionResult;
         };
         VsanClusterHealthTest: {
            (options?: vsanhealthService.vim.VsanClusterHealthTest): vsanhealthService.vim.VsanClusterHealthTest;
         };
         ArrayOfVsanClusterHealthTest: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHealthTest): vsanhealthService.vim.ArrayOfVsanClusterHealthTest;
         };
         VsanClusterHostVmknicMapping: {
            (options?: vsanhealthService.vim.VsanClusterHostVmknicMapping): vsanhealthService.vim.VsanClusterHostVmknicMapping;
         };
         ArrayOfVsanClusterHostVmknicMapping: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterHostVmknicMapping): vsanhealthService.vim.ArrayOfVsanClusterHostVmknicMapping;
         };
         VsanClusterLimitHealthResult: {
            (options?: vsanhealthService.vim.VsanClusterLimitHealthResult): vsanhealthService.vim.VsanClusterLimitHealthResult;
         };
         VsanClusterNetworkHealthResult: {
            (options?: vsanhealthService.vim.VsanClusterNetworkHealthResult): vsanhealthService.vim.VsanClusterNetworkHealthResult;
         };
         VsanClusterNetworkLoadTestResult: {
            (options?: vsanhealthService.vim.VsanClusterNetworkLoadTestResult): vsanhealthService.vim.VsanClusterNetworkLoadTestResult;
         };
         ArrayOfVsanClusterNetworkLoadTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterNetworkLoadTestResult): vsanhealthService.vim.ArrayOfVsanClusterNetworkLoadTestResult;
         };
         VsanClusterNetworkPartitionInfo: {
            (options?: vsanhealthService.vim.VsanClusterNetworkPartitionInfo): vsanhealthService.vim.VsanClusterNetworkPartitionInfo;
         };
         ArrayOfVsanClusterNetworkPartitionInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterNetworkPartitionInfo): vsanhealthService.vim.ArrayOfVsanClusterNetworkPartitionInfo;
         };
         VsanClusterProactiveTestResult: {
            (options?: vsanhealthService.vim.VsanClusterProactiveTestResult): vsanhealthService.vim.VsanClusterProactiveTestResult;
         };
         VsanClusterTelemetryProxyConfig: {
            (options?: vsanhealthService.vim.VsanClusterTelemetryProxyConfig): vsanhealthService.vim.VsanClusterTelemetryProxyConfig;
         };
         VsanClusterVMsHealthOverallResult: {
            (options?: vsanhealthService.vim.VsanClusterVMsHealthOverallResult): vsanhealthService.vim.VsanClusterVMsHealthOverallResult;
         };
         VsanClusterVMsHealthSummaryResult: {
            (options?: vsanhealthService.vim.VsanClusterVMsHealthSummaryResult): vsanhealthService.vim.VsanClusterVMsHealthSummaryResult;
         };
         ArrayOfVsanClusterVMsHealthSummaryResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterVMsHealthSummaryResult): vsanhealthService.vim.ArrayOfVsanClusterVMsHealthSummaryResult;
         };
         VsanClusterVmdkLoadTestResult: {
            (options?: vsanhealthService.vim.VsanClusterVmdkLoadTestResult): vsanhealthService.vim.VsanClusterVmdkLoadTestResult;
         };
         ArrayOfVsanClusterVmdkLoadTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterVmdkLoadTestResult): vsanhealthService.vim.ArrayOfVsanClusterVmdkLoadTestResult;
         };
         VsanClusterWhatifHostFailuresResult: {
            (options?: vsanhealthService.vim.VsanClusterWhatifHostFailuresResult): vsanhealthService.vim.VsanClusterWhatifHostFailuresResult;
         };
         ArrayOfVsanClusterWhatifHostFailuresResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanClusterWhatifHostFailuresResult): vsanhealthService.vim.ArrayOfVsanClusterWhatifHostFailuresResult;
         };
         VsanDiskFormatConversionCheckResult: {
            (options?: vsanhealthService.vim.VsanDiskFormatConversionCheckResult): vsanhealthService.vim.VsanDiskFormatConversionCheckResult;
         };
         VsanDiskFormatConversionSpec: {
            (options?: vsanhealthService.vim.VsanDiskFormatConversionSpec): vsanhealthService.vim.VsanDiskFormatConversionSpec;
         };
         VimClusterVsanDiskMappingsConfigSpec: {
            (options?: vsanhealthService.vim.VimClusterVsanDiskMappingsConfigSpec): vsanhealthService.vim.VimClusterVsanDiskMappingsConfigSpec;
         };
         VimClusterVsanFaultDomainSpec: {
            (options?: vsanhealthService.vim.VimClusterVsanFaultDomainSpec): vsanhealthService.vim.VimClusterVsanFaultDomainSpec;
         };
         ArrayOfVimClusterVsanFaultDomainSpec: {
            (options?: vsanhealthService.vim.ArrayOfVimClusterVsanFaultDomainSpec): vsanhealthService.vim.ArrayOfVimClusterVsanFaultDomainSpec;
         };
         VimClusterVsanFaultDomainsConfigSpec: {
            (options?: vsanhealthService.vim.VimClusterVsanFaultDomainsConfigSpec): vsanhealthService.vim.VimClusterVsanFaultDomainsConfigSpec;
         };
         VsanHealthExtMgmtPreCheckResult: {
            (options?: vsanhealthService.vim.VsanHealthExtMgmtPreCheckResult): vsanhealthService.vim.VsanHealthExtMgmtPreCheckResult;
         };
         VsanHostClomdLivenessResult: {
            (options?: vsanhealthService.vim.VsanHostClomdLivenessResult): vsanhealthService.vim.VsanHostClomdLivenessResult;
         };
         ArrayOfVsanHostClomdLivenessResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostClomdLivenessResult): vsanhealthService.vim.ArrayOfVsanHostClomdLivenessResult;
         };
         VsanHostCreateVmHealthTestResult: {
            (options?: vsanhealthService.vim.VsanHostCreateVmHealthTestResult): vsanhealthService.vim.VsanHostCreateVmHealthTestResult;
         };
         ArrayOfVsanHostCreateVmHealthTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostCreateVmHealthTestResult): vsanhealthService.vim.ArrayOfVsanHostCreateVmHealthTestResult;
         };
         VimClusterVsanHostDiskMappingVsanDiskGroupCreationType: {
            "allflash": string;
            "hybrid": string;
         };
         VimClusterVsanHostDiskMapping: {
            (options?: vsanhealthService.vim.VimClusterVsanHostDiskMapping): vsanhealthService.vim.VimClusterVsanHostDiskMapping;
         };
         ArrayOfVimClusterVsanHostDiskMapping: {
            (options?: vsanhealthService.vim.ArrayOfVimClusterVsanHostDiskMapping): vsanhealthService.vim.ArrayOfVimClusterVsanHostDiskMapping;
         };
         VsanHostHealthSystemVersionResult: {
            (options?: vsanhealthService.vim.VsanHostHealthSystemVersionResult): vsanhealthService.vim.VsanHostHealthSystemVersionResult;
         };
         ArrayOfVsanHostHealthSystemVersionResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostHealthSystemVersionResult): vsanhealthService.vim.ArrayOfVsanHostHealthSystemVersionResult;
         };
         VsanIscsiHomeObjectSpec: {
            (options?: vsanhealthService.vim.VsanIscsiHomeObjectSpec): vsanhealthService.vim.VsanIscsiHomeObjectSpec;
         };
         VsanIscsiInitiatorGroup: {
            (options?: vsanhealthService.vim.VsanIscsiInitiatorGroup): vsanhealthService.vim.VsanIscsiInitiatorGroup;
         };
         ArrayOfVsanIscsiInitiatorGroup: {
            (options?: vsanhealthService.vim.ArrayOfVsanIscsiInitiatorGroup): vsanhealthService.vim.ArrayOfVsanIscsiInitiatorGroup;
         };
         VsanIscsiLUN: {
            (options?: vsanhealthService.vim.VsanIscsiLUN): vsanhealthService.vim.VsanIscsiLUN;
         };
         ArrayOfVsanIscsiLUN: {
            (options?: vsanhealthService.vim.ArrayOfVsanIscsiLUN): vsanhealthService.vim.ArrayOfVsanIscsiLUN;
         };
         VsanIscsiLUNCommonInfoVsanIscsiLUNStatus: {
            "Online": string;
            "Offline": string;
         };
         VsanIscsiLUNCommonInfo: {
            (options?: vsanhealthService.vim.VsanIscsiLUNCommonInfo): vsanhealthService.vim.VsanIscsiLUNCommonInfo;
         };
         VsanIscsiLUNSpec: {
            (options?: vsanhealthService.vim.VsanIscsiLUNSpec): vsanhealthService.vim.VsanIscsiLUNSpec;
         };
         VsanIscsiTarget: {
            (options?: vsanhealthService.vim.VsanIscsiTarget): vsanhealthService.vim.VsanIscsiTarget;
         };
         ArrayOfVsanIscsiTarget: {
            (options?: vsanhealthService.vim.ArrayOfVsanIscsiTarget): vsanhealthService.vim.ArrayOfVsanIscsiTarget;
         };
         VsanIscsiTargetAuthSpecVsanIscsiTargetAuthType: {
            "NoAuth": string;
            "CHAP": string;
            "CHAP_Mutual": string;
         };
         VsanIscsiTargetAuthSpec: {
            (options?: vsanhealthService.vim.VsanIscsiTargetAuthSpec): vsanhealthService.vim.VsanIscsiTargetAuthSpec;
         };
         VsanIscsiTargetBasicInfo: {
            (options?: vsanhealthService.vim.VsanIscsiTargetBasicInfo): vsanhealthService.vim.VsanIscsiTargetBasicInfo;
         };
         ArrayOfVsanIscsiTargetBasicInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanIscsiTargetBasicInfo): vsanhealthService.vim.ArrayOfVsanIscsiTargetBasicInfo;
         };
         VsanIscsiTargetCommonInfo: {
            (options?: vsanhealthService.vim.VsanIscsiTargetCommonInfo): vsanhealthService.vim.VsanIscsiTargetCommonInfo;
         };
         VsanIscsiTargetServiceConfig: {
            (options?: vsanhealthService.vim.VsanIscsiTargetServiceConfig): vsanhealthService.vim.VsanIscsiTargetServiceConfig;
         };
         VsanIscsiTargetServiceDefaultConfigSpec: {
            (options?: vsanhealthService.vim.VsanIscsiTargetServiceDefaultConfigSpec): vsanhealthService.vim.VsanIscsiTargetServiceDefaultConfigSpec;
         };
         VsanIscsiTargetServiceSpec: {
            (options?: vsanhealthService.vim.VsanIscsiTargetServiceSpec): vsanhealthService.vim.VsanIscsiTargetServiceSpec;
         };
         VsanIscsiTargetSpec: {
            (options?: vsanhealthService.vim.VsanIscsiTargetSpec): vsanhealthService.vim.VsanIscsiTargetSpec;
         };
         VsanObjectIdentity: {
            (options?: vsanhealthService.vim.VsanObjectIdentity): vsanhealthService.vim.VsanObjectIdentity;
         };
         ArrayOfVsanObjectIdentity: {
            (options?: vsanhealthService.vim.ArrayOfVsanObjectIdentity): vsanhealthService.vim.ArrayOfVsanObjectIdentity;
         };
         VsanObjectIdentityAndHealth: {
            (options?: vsanhealthService.vim.VsanObjectIdentityAndHealth): vsanhealthService.vim.VsanObjectIdentityAndHealth;
         };
         VsanObjectInformation: {
            (options?: vsanhealthService.vim.VsanObjectInformation): vsanhealthService.vim.VsanObjectInformation;
         };
         ArrayOfVsanObjectInformation: {
            (options?: vsanhealthService.vim.ArrayOfVsanObjectInformation): vsanhealthService.vim.ArrayOfVsanObjectInformation;
         };
         VsanObjectQuerySpec: {
            (options?: vsanhealthService.vim.VsanObjectQuerySpec): vsanhealthService.vim.VsanObjectQuerySpec;
         };
         ArrayOfVsanObjectQuerySpec: {
            (options?: vsanhealthService.vim.ArrayOfVsanObjectQuerySpec): vsanhealthService.vim.ArrayOfVsanObjectQuerySpec;
         };
         VsanObjectSpaceSummaryVsanObjectTypeEnum: {
            "vmswap": string;
            "vdisk": string;
            "namespace": string;
            "vmem": string;
            "statsdb": string;
            "iscsiTarget": string;
            "iscsiLun": string;
            "other": string;
            "fileSystemOverhead": string;
            "dedupOverhead": string;
            "checksumOverhead": string;
         };
         VsanObjectSpaceSummary: {
            (options?: vsanhealthService.vim.VsanObjectSpaceSummary): vsanhealthService.vim.VsanObjectSpaceSummary;
         };
         ArrayOfVsanObjectSpaceSummary: {
            (options?: vsanhealthService.vim.ArrayOfVsanObjectSpaceSummary): vsanhealthService.vim.ArrayOfVsanObjectSpaceSummary;
         };
         VsanPerfEntityMetricCSV: {
            (options?: vsanhealthService.vim.VsanPerfEntityMetricCSV): vsanhealthService.vim.VsanPerfEntityMetricCSV;
         };
         ArrayOfVsanPerfEntityMetricCSV: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfEntityMetricCSV): vsanhealthService.vim.ArrayOfVsanPerfEntityMetricCSV;
         };
         VsanPerfEntityType: {
            (options?: vsanhealthService.vim.VsanPerfEntityType): vsanhealthService.vim.VsanPerfEntityType;
         };
         ArrayOfVsanPerfEntityType: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfEntityType): vsanhealthService.vim.ArrayOfVsanPerfEntityType;
         };
         VsanPerfGraphVsanPerfStatsUnitType: {
            "number": string;
            "time_ms": string;
            "percentage": string;
            "size_bytes": string;
            "rate_bytes": string;
         };
         VsanPerfGraph: {
            (options?: vsanhealthService.vim.VsanPerfGraph): vsanhealthService.vim.VsanPerfGraph;
         };
         ArrayOfVsanPerfGraph: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfGraph): vsanhealthService.vim.ArrayOfVsanPerfGraph;
         };
         VsanPerfMasterInformation: {
            (options?: vsanhealthService.vim.VsanPerfMasterInformation): vsanhealthService.vim.VsanPerfMasterInformation;
         };
         VsanPerfMemberInfo: {
            (options?: vsanhealthService.vim.VsanPerfMemberInfo): vsanhealthService.vim.VsanPerfMemberInfo;
         };
         ArrayOfVsanPerfMemberInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfMemberInfo): vsanhealthService.vim.ArrayOfVsanPerfMemberInfo;
         };
         VsanPerfMetricIdVsanPerfSummaryType: {
            "average": string;
            "maximum": string;
            "minimum": string;
            "latest": string;
            "summation": string;
            "none": string;
         };
         VsanPerfMetricIdVsanPerfStatsType: {
            "absolute": string;
            "delta": string;
            "rate": string;
         };
         VsanPerfMetricId: {
            (options?: vsanhealthService.vim.VsanPerfMetricId): vsanhealthService.vim.VsanPerfMetricId;
         };
         ArrayOfVsanPerfMetricId: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfMetricId): vsanhealthService.vim.ArrayOfVsanPerfMetricId;
         };
         VsanPerfMetricSeriesCSV: {
            (options?: vsanhealthService.vim.VsanPerfMetricSeriesCSV): vsanhealthService.vim.VsanPerfMetricSeriesCSV;
         };
         ArrayOfVsanPerfMetricSeriesCSV: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfMetricSeriesCSV): vsanhealthService.vim.ArrayOfVsanPerfMetricSeriesCSV;
         };
         VsanPerfNodeInformation: {
            (options?: vsanhealthService.vim.VsanPerfNodeInformation): vsanhealthService.vim.VsanPerfNodeInformation;
         };
         ArrayOfVsanPerfNodeInformation: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfNodeInformation): vsanhealthService.vim.ArrayOfVsanPerfNodeInformation;
         };
         VsanPerfQuerySpec: {
            (options?: vsanhealthService.vim.VsanPerfQuerySpec): vsanhealthService.vim.VsanPerfQuerySpec;
         };
         ArrayOfVsanPerfQuerySpec: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfQuerySpec): vsanhealthService.vim.ArrayOfVsanPerfQuerySpec;
         };
         VsanPerfThresholdVsanPerfThresholdDirectionType: {
            "upper": string;
            "lower": string;
         };
         VsanPerfThreshold: {
            (options?: vsanhealthService.vim.VsanPerfThreshold): vsanhealthService.vim.VsanPerfThreshold;
         };
         VsanPerfTopEntities: {
            (options?: vsanhealthService.vim.VsanPerfTopEntities): vsanhealthService.vim.VsanPerfTopEntities;
         };
         VsanPerfTopEntity: {
            (options?: vsanhealthService.vim.VsanPerfTopEntity): vsanhealthService.vim.VsanPerfTopEntity;
         };
         ArrayOfVsanPerfTopEntity: {
            (options?: vsanhealthService.vim.ArrayOfVsanPerfTopEntity): vsanhealthService.vim.ArrayOfVsanPerfTopEntity;
         };
         VsanPerfDeleteStatsObjectTaskRequestType: {
            (options?: vsanhealthService.vim.VsanPerfDeleteStatsObjectTaskRequestType): vsanhealthService.vim.VsanPerfDeleteStatsObjectTaskRequestType;
         };
         VsanSpaceUsage: {
            (options?: vsanhealthService.vim.VsanSpaceUsage): vsanhealthService.vim.VsanSpaceUsage;
         };
         VsanSpaceUsageDetailResult: {
            (options?: vsanhealthService.vim.VsanSpaceUsageDetailResult): vsanhealthService.vim.VsanSpaceUsageDetailResult;
         };
         VsanStorageWorkloadType: {
            (options?: vsanhealthService.vim.VsanStorageWorkloadType): vsanhealthService.vim.VsanStorageWorkloadType;
         };
         ArrayOfVsanStorageWorkloadType: {
            (options?: vsanhealthService.vim.ArrayOfVsanStorageWorkloadType): vsanhealthService.vim.ArrayOfVsanStorageWorkloadType;
         };
         VsanUpgradeStatusEx: {
            (options?: vsanhealthService.vim.VsanUpgradeStatusEx): vsanhealthService.vim.VsanUpgradeStatusEx;
         };
         VsanVcClusterHealthSystemVsanHealthLogLevelEnum: {
            "INFO": string;
            "WARNING": string;
            "ERROR": string;
            "DEBUG": string;
            "CRITICAL": string;
         };
         VsanVsanClusterPcapGroup: {
            (options?: vsanhealthService.vim.VsanVsanClusterPcapGroup): vsanhealthService.vim.VsanVsanClusterPcapGroup;
         };
         ArrayOfVsanVsanClusterPcapGroup: {
            (options?: vsanhealthService.vim.ArrayOfVsanVsanClusterPcapGroup): vsanhealthService.vim.ArrayOfVsanVsanClusterPcapGroup;
         };
         VsanVsanClusterPcapResult: {
            (options?: vsanhealthService.vim.VsanVsanClusterPcapResult): vsanhealthService.vim.VsanVsanClusterPcapResult;
         };
         VimClusterVsanWitnessSpec: {
            (options?: vsanhealthService.vim.VimClusterVsanWitnessSpec): vsanhealthService.vim.VimClusterVsanWitnessSpec;
         };
         VsanNodeNotMaster: {
            (options?: vsanhealthService.vim.VsanNodeNotMaster): vsanhealthService.vim.VsanNodeNotMaster;
         };
         VimHostVSANStretchedClusterHostCapability: {
            (options?: vsanhealthService.vim.VimHostVSANStretchedClusterHostCapability): vsanhealthService.vim.VimHostVSANStretchedClusterHostCapability;
         };
         VsanFailedRepairObjectResult: {
            (options?: vsanhealthService.vim.VsanFailedRepairObjectResult): vsanhealthService.vim.VsanFailedRepairObjectResult;
         };
         ArrayOfVsanFailedRepairObjectResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanFailedRepairObjectResult): vsanhealthService.vim.ArrayOfVsanFailedRepairObjectResult;
         };
         VsanHclControllerInfo: {
            (options?: vsanhealthService.vim.VsanHclControllerInfo): vsanhealthService.vim.VsanHclControllerInfo;
         };
         ArrayOfVsanHclControllerInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanHclControllerInfo): vsanhealthService.vim.ArrayOfVsanHclControllerInfo;
         };
         VsanHostCimProviderInfo: {
            (options?: vsanhealthService.vim.VsanHostCimProviderInfo): vsanhealthService.vim.VsanHostCimProviderInfo;
         };
         VsanHostHclInfo: {
            (options?: vsanhealthService.vim.VsanHostHclInfo): vsanhealthService.vim.VsanHostHclInfo;
         };
         ArrayOfVsanHostHclInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostHclInfo): vsanhealthService.vim.ArrayOfVsanHostHclInfo;
         };
         VsanHostHealthSystemStatusResult: {
            (options?: vsanhealthService.vim.VsanHostHealthSystemStatusResult): vsanhealthService.vim.VsanHostHealthSystemStatusResult;
         };
         ArrayOfVsanHostHealthSystemStatusResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostHealthSystemStatusResult): vsanhealthService.vim.ArrayOfVsanHostHealthSystemStatusResult;
         };
         VsanHostVirtualApplianceInfo: {
            (options?: vsanhealthService.vim.VsanHostVirtualApplianceInfo): vsanhealthService.vim.VsanHostVirtualApplianceInfo;
         };
         ArrayOfVsanHostVirtualApplianceInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostVirtualApplianceInfo): vsanhealthService.vim.ArrayOfVsanHostVirtualApplianceInfo;
         };
         VsanHostVmdkLoadTestResult: {
            (options?: vsanhealthService.vim.VsanHostVmdkLoadTestResult): vsanhealthService.vim.VsanHostVmdkLoadTestResult;
         };
         ArrayOfVsanHostVmdkLoadTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostVmdkLoadTestResult): vsanhealthService.vim.ArrayOfVsanHostVmdkLoadTestResult;
         };
         VsanLimitHealthResult: {
            (options?: vsanhealthService.vim.VsanLimitHealthResult): vsanhealthService.vim.VsanLimitHealthResult;
         };
         ArrayOfVsanLimitHealthResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanLimitHealthResult): vsanhealthService.vim.ArrayOfVsanLimitHealthResult;
         };
         VsanNetworkHealthResult: {
            (options?: vsanhealthService.vim.VsanNetworkHealthResult): vsanhealthService.vim.VsanNetworkHealthResult;
         };
         ArrayOfVsanNetworkHealthResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanNetworkHealthResult): vsanhealthService.vim.ArrayOfVsanNetworkHealthResult;
         };
         VsanNetworkLoadTestResult: {
            (options?: vsanhealthService.vim.VsanNetworkLoadTestResult): vsanhealthService.vim.VsanNetworkLoadTestResult;
         };
         ArrayOfVsanNetworkLoadTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanNetworkLoadTestResult): vsanhealthService.vim.ArrayOfVsanNetworkLoadTestResult;
         };
         VsanNetworkPeerHealthResult: {
            (options?: vsanhealthService.vim.VsanNetworkPeerHealthResult): vsanhealthService.vim.VsanNetworkPeerHealthResult;
         };
         ArrayOfVsanNetworkPeerHealthResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanNetworkPeerHealthResult): vsanhealthService.vim.ArrayOfVsanNetworkPeerHealthResult;
         };
         VsanObjectHealthVsanObjectHealthState: {
            "inaccessible": string;
            "reducedavailabilitywithnorebuild": string;
            "reducedavailabilitywithnorebuilddelaytimer": string;
            "reducedavailabilitywithactiverebuild": string;
            "datamove": string;
            "nonavailabilityrelatedreconfig": string;
            "nonavailabilityrelatedincompliance": string;
            "healthy": string;
         };
         VsanObjectHealth: {
            (options?: vsanhealthService.vim.VsanObjectHealth): vsanhealthService.vim.VsanObjectHealth;
         };
         ArrayOfVsanObjectHealth: {
            (options?: vsanhealthService.vim.ArrayOfVsanObjectHealth): vsanhealthService.vim.ArrayOfVsanObjectHealth;
         };
         VsanObjectOverallHealth: {
            (options?: vsanhealthService.vim.VsanObjectOverallHealth): vsanhealthService.vim.VsanObjectOverallHealth;
         };
         VsanPhysicalDiskHealth: {
            (options?: vsanhealthService.vim.VsanPhysicalDiskHealth): vsanhealthService.vim.VsanPhysicalDiskHealth;
         };
         ArrayOfVsanPhysicalDiskHealth: {
            (options?: vsanhealthService.vim.ArrayOfVsanPhysicalDiskHealth): vsanhealthService.vim.ArrayOfVsanPhysicalDiskHealth;
         };
         VsanPhysicalDiskHealthSummary: {
            (options?: vsanhealthService.vim.VsanPhysicalDiskHealthSummary): vsanhealthService.vim.VsanPhysicalDiskHealthSummary;
         };
         ArrayOfVsanPhysicalDiskHealthSummary: {
            (options?: vsanhealthService.vim.ArrayOfVsanPhysicalDiskHealthSummary): vsanhealthService.vim.ArrayOfVsanPhysicalDiskHealthSummary;
         };
         VsanProactiveRebalanceInfoEx: {
            (options?: vsanhealthService.vim.VsanProactiveRebalanceInfoEx): vsanhealthService.vim.VsanProactiveRebalanceInfoEx;
         };
         VsanQueryResultHostInfo: {
            (options?: vsanhealthService.vim.VsanQueryResultHostInfo): vsanhealthService.vim.VsanQueryResultHostInfo;
         };
         ArrayOfVsanQueryResultHostInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanQueryResultHostInfo): vsanhealthService.vim.ArrayOfVsanQueryResultHostInfo;
         };
         VsanRepairObjectsResult: {
            (options?: vsanhealthService.vim.VsanRepairObjectsResult): vsanhealthService.vim.VsanRepairObjectsResult;
         };
         VsanResourceHealth: {
            (options?: vsanhealthService.vim.VsanResourceHealth): vsanhealthService.vim.VsanResourceHealth;
         };
         ArrayOfVsanResourceHealth: {
            (options?: vsanhealthService.vim.ArrayOfVsanResourceHealth): vsanhealthService.vim.ArrayOfVsanResourceHealth;
         };
         VsanVmdkIOLoadSpec: {
            (options?: vsanhealthService.vim.VsanVmdkIOLoadSpec): vsanhealthService.vim.VsanVmdkIOLoadSpec;
         };
         ArrayOfVsanVmdkIOLoadSpec: {
            (options?: vsanhealthService.vim.ArrayOfVsanVmdkIOLoadSpec): vsanhealthService.vim.ArrayOfVsanVmdkIOLoadSpec;
         };
         VsanVmdkLoadTestResult: {
            (options?: vsanhealthService.vim.VsanVmdkLoadTestResult): vsanhealthService.vim.VsanVmdkLoadTestResult;
         };
         ArrayOfVsanVmdkLoadTestResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanVmdkLoadTestResult): vsanhealthService.vim.ArrayOfVsanVmdkLoadTestResult;
         };
         VsanVmdkLoadTestSpec: {
            (options?: vsanhealthService.vim.VsanVmdkLoadTestSpec): vsanhealthService.vim.VsanVmdkLoadTestSpec;
         };
         ArrayOfVsanVmdkLoadTestSpec: {
            (options?: vsanhealthService.vim.ArrayOfVsanVmdkLoadTestSpec): vsanhealthService.vim.ArrayOfVsanVmdkLoadTestSpec;
         };
         VsanVsanPcapResult: {
            (options?: vsanhealthService.vim.VsanVsanPcapResult): vsanhealthService.vim.VsanVsanPcapResult;
         };
         ArrayOfVsanVsanPcapResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanVsanPcapResult): vsanhealthService.vim.ArrayOfVsanVsanPcapResult;
         };
         VsanConfigInfoEx: {
            (options?: vsanhealthService.vim.VsanConfigInfoEx): vsanhealthService.vim.VsanConfigInfoEx;
         };
         VsanDataEfficiencyConfig: {
            (options?: vsanhealthService.vim.VsanDataEfficiencyConfig): vsanhealthService.vim.VsanDataEfficiencyConfig;
         };
         VimVsanReconfigSpec: {
            (options?: vsanhealthService.vim.VimVsanReconfigSpec): vsanhealthService.vim.VimVsanReconfigSpec;
         };
         VimVsanVsanScanObjectsIssueVsanScanObjectsIssueType: {
            "BROKEN_CHAIN": string;
            "LEAKED_OBJECT": string;
            "UNKNOWN": string;
         };
         VimVsanHostDiskMapInfoEx: {
            (options?: vsanhealthService.vim.VimVsanHostDiskMapInfoEx): vsanhealthService.vim.VimVsanHostDiskMapInfoEx;
         };
         ArrayOfVimVsanHostDiskMapInfoEx: {
            (options?: vsanhealthService.vim.ArrayOfVimVsanHostDiskMapInfoEx): vsanhealthService.vim.ArrayOfVimVsanHostDiskMapInfoEx;
         };
         VimVsanHostDiskMappingCreationSpecDiskMappingCreationType: {
            "hybrid": string;
            "allFlash": string;
         };
         VimVsanHostDiskMappingCreationSpec: {
            (options?: vsanhealthService.vim.VimVsanHostDiskMappingCreationSpec): vsanhealthService.vim.VimVsanHostDiskMappingCreationSpec;
         };
         VsanHostIpConfigEx: {
            (options?: vsanhealthService.vim.VsanHostIpConfigEx): vsanhealthService.vim.VsanHostIpConfigEx;
         };
         VsanHostPortConfigExTrafficType: {
            "vsan": string;
            "witness": string;
         };
         VsanHostPortConfigEx: {
            (options?: vsanhealthService.vim.VsanHostPortConfigEx): vsanhealthService.vim.VsanHostPortConfigEx;
         };
         VimVsanHostVsanDiskManagementSystemCapability: {
            (options?: vsanhealthService.vim.VimVsanHostVsanDiskManagementSystemCapability): vsanhealthService.vim.VimVsanHostVsanDiskManagementSystemCapability;
         };
         VimVsanHostVsanHostCapability: {
            (options?: vsanhealthService.vim.VimVsanHostVsanHostCapability): vsanhealthService.vim.VimVsanHostVsanHostCapability;
         };
         ArrayOfVimVsanHostVsanHostCapability: {
            (options?: vsanhealthService.vim.ArrayOfVimVsanHostVsanHostCapability): vsanhealthService.vim.ArrayOfVimVsanHostVsanHostCapability;
         };
         VsanBrokenDiskChainIssue: {
            (options?: vsanhealthService.vim.VsanBrokenDiskChainIssue): vsanhealthService.vim.VsanBrokenDiskChainIssue;
         };
         VsanDiskUnhealthIssue: {
            (options?: vsanhealthService.vim.VsanDiskUnhealthIssue): vsanhealthService.vim.VsanDiskUnhealthIssue;
         };
         VsanHigherObjectsPresentDuringDowngradeIssue: {
            (options?: vsanhealthService.vim.VsanHigherObjectsPresentDuringDowngradeIssue): vsanhealthService.vim.VsanHigherObjectsPresentDuringDowngradeIssue;
         };
         VsanHostPropertyRetrieveIssue: {
            (options?: vsanhealthService.vim.VsanHostPropertyRetrieveIssue): vsanhealthService.vim.VsanHostPropertyRetrieveIssue;
         };
         VsanHostWithHybridDiskgroupIssue: {
            (options?: vsanhealthService.vim.VsanHostWithHybridDiskgroupIssue): vsanhealthService.vim.VsanHostWithHybridDiskgroupIssue;
         };
         VsanMixedEsxVersionIssue: {
            (options?: vsanhealthService.vim.VsanMixedEsxVersionIssue): vsanhealthService.vim.VsanMixedEsxVersionIssue;
         };
         VsanObjectInaccessibleIssue: {
            (options?: vsanhealthService.vim.VsanObjectInaccessibleIssue): vsanhealthService.vim.VsanObjectInaccessibleIssue;
         };
         VsanObjectPolicyIssue: {
            (options?: vsanhealthService.vim.VsanObjectPolicyIssue): vsanhealthService.vim.VsanObjectPolicyIssue;
         };
         VsanUnknownScanIssue: {
            (options?: vsanhealthService.vim.VsanUnknownScanIssue): vsanhealthService.vim.VsanUnknownScanIssue;
         };
         AboutInfo: {
            (options?: vsanhealthService.vim.AboutInfo): vsanhealthService.vim.AboutInfo;
         };
         AuthorizationDescription: {
            (options?: vsanhealthService.vim.AuthorizationDescription): vsanhealthService.vim.AuthorizationDescription;
         };
         Permission: {
            (options?: vsanhealthService.vim.Permission): vsanhealthService.vim.Permission;
         };
         ArrayOfPermission: {
            (options?: vsanhealthService.vim.ArrayOfPermission): vsanhealthService.vim.ArrayOfPermission;
         };
         AuthorizationRole: {
            (options?: vsanhealthService.vim.AuthorizationRole): vsanhealthService.vim.AuthorizationRole;
         };
         ArrayOfAuthorizationRole: {
            (options?: vsanhealthService.vim.ArrayOfAuthorizationRole): vsanhealthService.vim.ArrayOfAuthorizationRole;
         };
         AuthorizationPrivilege: {
            (options?: vsanhealthService.vim.AuthorizationPrivilege): vsanhealthService.vim.AuthorizationPrivilege;
         };
         ArrayOfAuthorizationPrivilege: {
            (options?: vsanhealthService.vim.ArrayOfAuthorizationPrivilege): vsanhealthService.vim.ArrayOfAuthorizationPrivilege;
         };
         PrivilegeAvailability: {
            (options?: vsanhealthService.vim.PrivilegeAvailability): vsanhealthService.vim.PrivilegeAvailability;
         };
         ArrayOfPrivilegeAvailability: {
            (options?: vsanhealthService.vim.ArrayOfPrivilegeAvailability): vsanhealthService.vim.ArrayOfPrivilegeAvailability;
         };
         EntityPrivilege: {
            (options?: vsanhealthService.vim.EntityPrivilege): vsanhealthService.vim.EntityPrivilege;
         };
         ArrayOfEntityPrivilege: {
            (options?: vsanhealthService.vim.ArrayOfEntityPrivilege): vsanhealthService.vim.ArrayOfEntityPrivilege;
         };
         UserPrivilegeResult: {
            (options?: vsanhealthService.vim.UserPrivilegeResult): vsanhealthService.vim.UserPrivilegeResult;
         };
         ArrayOfUserPrivilegeResult: {
            (options?: vsanhealthService.vim.ArrayOfUserPrivilegeResult): vsanhealthService.vim.ArrayOfUserPrivilegeResult;
         };
         BatchResultResult: {
            "success": string;
            "fail": string;
         };
         BatchResult: {
            (options?: vsanhealthService.vim.BatchResult): vsanhealthService.vim.BatchResult;
         };
         BoolPolicy: {
            (options?: vsanhealthService.vim.BoolPolicy): vsanhealthService.vim.BoolPolicy;
         };
         Capability: {
            (options?: vsanhealthService.vim.Capability): vsanhealthService.vim.Capability;
         };
         ClusterComputeResourceSummary: {
            (options?: vsanhealthService.vim.ClusterComputeResourceSummary): vsanhealthService.vim.ClusterComputeResourceSummary;
         };
         ComputeResourceSummary: {
            (options?: vsanhealthService.vim.ComputeResourceSummary): vsanhealthService.vim.ComputeResourceSummary;
         };
         ComputeResourceConfigInfo: {
            (options?: vsanhealthService.vim.ComputeResourceConfigInfo): vsanhealthService.vim.ComputeResourceConfigInfo;
         };
         ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState: {
            "licensed": string;
            "unlicensed": string;
            "unknown": string;
         };
         ComputeResourceHostSPBMLicenseInfo: {
            (options?: vsanhealthService.vim.ComputeResourceHostSPBMLicenseInfo): vsanhealthService.vim.ComputeResourceHostSPBMLicenseInfo;
         };
         ArrayOfComputeResourceHostSPBMLicenseInfo: {
            (options?: vsanhealthService.vim.ArrayOfComputeResourceHostSPBMLicenseInfo): vsanhealthService.vim.ArrayOfComputeResourceHostSPBMLicenseInfo;
         };
         ComputeResourceConfigSpec: {
            (options?: vsanhealthService.vim.ComputeResourceConfigSpec): vsanhealthService.vim.ComputeResourceConfigSpec;
         };
         ConfigSpecOperation: {
            "add": string;
            "edit": string;
            "remove": string;
         };
         CustomFieldDef: {
            (options?: vsanhealthService.vim.CustomFieldDef): vsanhealthService.vim.CustomFieldDef;
         };
         ArrayOfCustomFieldDef: {
            (options?: vsanhealthService.vim.ArrayOfCustomFieldDef): vsanhealthService.vim.ArrayOfCustomFieldDef;
         };
         CustomFieldValue: {
            (options?: vsanhealthService.vim.CustomFieldValue): vsanhealthService.vim.CustomFieldValue;
         };
         ArrayOfCustomFieldValue: {
            (options?: vsanhealthService.vim.ArrayOfCustomFieldValue): vsanhealthService.vim.ArrayOfCustomFieldValue;
         };
         CustomFieldStringValue: {
            (options?: vsanhealthService.vim.CustomFieldStringValue): vsanhealthService.vim.CustomFieldStringValue;
         };
         CustomizationSpecInfo: {
            (options?: vsanhealthService.vim.CustomizationSpecInfo): vsanhealthService.vim.CustomizationSpecInfo;
         };
         ArrayOfCustomizationSpecInfo: {
            (options?: vsanhealthService.vim.ArrayOfCustomizationSpecInfo): vsanhealthService.vim.ArrayOfCustomizationSpecInfo;
         };
         CustomizationSpecItem: {
            (options?: vsanhealthService.vim.CustomizationSpecItem): vsanhealthService.vim.CustomizationSpecItem;
         };
         DatacenterConfigInfo: {
            (options?: vsanhealthService.vim.DatacenterConfigInfo): vsanhealthService.vim.DatacenterConfigInfo;
         };
         DatacenterConfigSpec: {
            (options?: vsanhealthService.vim.DatacenterConfigSpec): vsanhealthService.vim.DatacenterConfigSpec;
         };
         DatastoreAccessible: {
            "True": string;
            "False": string;
         };
         DatastoreSummaryMaintenanceModeState: {
            "normal": string;
            "enteringMaintenance": string;
            "inMaintenance": string;
         };
         DatastoreSummary: {
            (options?: vsanhealthService.vim.DatastoreSummary): vsanhealthService.vim.DatastoreSummary;
         };
         DatastoreInfo: {
            (options?: vsanhealthService.vim.DatastoreInfo): vsanhealthService.vim.DatastoreInfo;
         };
         DatastoreCapability: {
            (options?: vsanhealthService.vim.DatastoreCapability): vsanhealthService.vim.DatastoreCapability;
         };
         DatastoreHostMount: {
            (options?: vsanhealthService.vim.DatastoreHostMount): vsanhealthService.vim.DatastoreHostMount;
         };
         ArrayOfDatastoreHostMount: {
            (options?: vsanhealthService.vim.ArrayOfDatastoreHostMount): vsanhealthService.vim.ArrayOfDatastoreHostMount;
         };
         DatastoreMountPathDatastorePair: {
            (options?: vsanhealthService.vim.DatastoreMountPathDatastorePair): vsanhealthService.vim.DatastoreMountPathDatastorePair;
         };
         ArrayOfDatastoreMountPathDatastorePair: {
            (options?: vsanhealthService.vim.ArrayOfDatastoreMountPathDatastorePair): vsanhealthService.vim.ArrayOfDatastoreMountPathDatastorePair;
         };
         DatastoreVVolContainerFailoverPair: {
            (options?: vsanhealthService.vim.DatastoreVVolContainerFailoverPair): vsanhealthService.vim.DatastoreVVolContainerFailoverPair;
         };
         ArrayOfDatastoreVVolContainerFailoverPair: {
            (options?: vsanhealthService.vim.ArrayOfDatastoreVVolContainerFailoverPair): vsanhealthService.vim.ArrayOfDatastoreVVolContainerFailoverPair;
         };
         Description: {
            (options?: vsanhealthService.vim.Description): vsanhealthService.vim.Description;
         };
         DiagnosticManagerLogCreator: {
            "vpxd": string;
            "vpxa": string;
            "hostd": string;
            "serverd": string;
            "install": string;
            "vpxClient": string;
            "recordLog": string;
         };
         DiagnosticManagerLogFormat: {
            "plain": string;
         };
         DiagnosticManagerLogDescriptor: {
            (options?: vsanhealthService.vim.DiagnosticManagerLogDescriptor): vsanhealthService.vim.DiagnosticManagerLogDescriptor;
         };
         ArrayOfDiagnosticManagerLogDescriptor: {
            (options?: vsanhealthService.vim.ArrayOfDiagnosticManagerLogDescriptor): vsanhealthService.vim.ArrayOfDiagnosticManagerLogDescriptor;
         };
         DiagnosticManagerLogHeader: {
            (options?: vsanhealthService.vim.DiagnosticManagerLogHeader): vsanhealthService.vim.DiagnosticManagerLogHeader;
         };
         DiagnosticManagerBundleInfo: {
            (options?: vsanhealthService.vim.DiagnosticManagerBundleInfo): vsanhealthService.vim.DiagnosticManagerBundleInfo;
         };
         ArrayOfDiagnosticManagerBundleInfo: {
            (options?: vsanhealthService.vim.ArrayOfDiagnosticManagerBundleInfo): vsanhealthService.vim.ArrayOfDiagnosticManagerBundleInfo;
         };
         DistributedVirtualSwitchProductSpecOperationType: {
            "preInstall": string;
            "upgrade": string;
            "notifyAvailableUpgrade": string;
            "proceedWithUpgrade": string;
            "updateBundleInfo": string;
         };
         DVSContactInfo: {
            (options?: vsanhealthService.vim.DVSContactInfo): vsanhealthService.vim.DVSContactInfo;
         };
         DistributedVirtualSwitchNicTeamingPolicyMode: {
            "loadbalance_ip": string;
            "loadbalance_srcmac": string;
            "loadbalance_srcid": string;
            "failover_explicit": string;
            "loadbalance_loadbased": string;
         };
         DVSNetworkResourceManagementCapability: {
            (options?: vsanhealthService.vim.DVSNetworkResourceManagementCapability): vsanhealthService.vim.DVSNetworkResourceManagementCapability;
         };
         DVSRollbackCapability: {
            (options?: vsanhealthService.vim.DVSRollbackCapability): vsanhealthService.vim.DVSRollbackCapability;
         };
         DVSBackupRestoreCapability: {
            (options?: vsanhealthService.vim.DVSBackupRestoreCapability): vsanhealthService.vim.DVSBackupRestoreCapability;
         };
         DVSFeatureCapability: {
            (options?: vsanhealthService.vim.DVSFeatureCapability): vsanhealthService.vim.DVSFeatureCapability;
         };
         DVSHealthCheckCapability: {
            (options?: vsanhealthService.vim.DVSHealthCheckCapability): vsanhealthService.vim.DVSHealthCheckCapability;
         };
         DVSCapability: {
            (options?: vsanhealthService.vim.DVSCapability): vsanhealthService.vim.DVSCapability;
         };
         DVSSummary: {
            (options?: vsanhealthService.vim.DVSSummary): vsanhealthService.vim.DVSSummary;
         };
         DVSPolicy: {
            (options?: vsanhealthService.vim.DVSPolicy): vsanhealthService.vim.DVSPolicy;
         };
         DVSUplinkPortPolicy: {
            (options?: vsanhealthService.vim.DVSUplinkPortPolicy): vsanhealthService.vim.DVSUplinkPortPolicy;
         };
         DVSNameArrayUplinkPortPolicy: {
            (options?: vsanhealthService.vim.DVSNameArrayUplinkPortPolicy): vsanhealthService.vim.DVSNameArrayUplinkPortPolicy;
         };
         DVSConfigSpec: {
            (options?: vsanhealthService.vim.DVSConfigSpec): vsanhealthService.vim.DVSConfigSpec;
         };
         DVSCreateSpec: {
            (options?: vsanhealthService.vim.DVSCreateSpec): vsanhealthService.vim.DVSCreateSpec;
         };
         DVSConfigInfo: {
            (options?: vsanhealthService.vim.DVSConfigInfo): vsanhealthService.vim.DVSConfigInfo;
         };
         DistributedVirtualSwitchNetworkResourceControlVersion: {
            "version2": string;
            "version3": string;
         };
         DistributedVirtualSwitchHostInfrastructureTrafficClass: {
            "management": string;
            "faultTolerance": string;
            "vmotion": string;
            "virtualMachine": string;
            "iSCSI": string;
            "nfs": string;
            "hbr": string;
            "vsan": string;
            "vdp": string;
         };
         DvsHostInfrastructureTrafficResourceAllocation: {
            (options?: vsanhealthService.vim.DvsHostInfrastructureTrafficResourceAllocation): vsanhealthService.vim.DvsHostInfrastructureTrafficResourceAllocation;
         };
         DvsHostInfrastructureTrafficResource: {
            (options?: vsanhealthService.vim.DvsHostInfrastructureTrafficResource): vsanhealthService.vim.DvsHostInfrastructureTrafficResource;
         };
         ArrayOfDvsHostInfrastructureTrafficResource: {
            (options?: vsanhealthService.vim.ArrayOfDvsHostInfrastructureTrafficResource): vsanhealthService.vim.ArrayOfDvsHostInfrastructureTrafficResource;
         };
         DVSHealthCheckConfig: {
            (options?: vsanhealthService.vim.DVSHealthCheckConfig): vsanhealthService.vim.DVSHealthCheckConfig;
         };
         ArrayOfDVSHealthCheckConfig: {
            (options?: vsanhealthService.vim.ArrayOfDVSHealthCheckConfig): vsanhealthService.vim.ArrayOfDVSHealthCheckConfig;
         };
         DvsResourceRuntimeInfo: {
            (options?: vsanhealthService.vim.DvsResourceRuntimeInfo): vsanhealthService.vim.DvsResourceRuntimeInfo;
         };
         DVSRuntimeInfo: {
            (options?: vsanhealthService.vim.DVSRuntimeInfo): vsanhealthService.vim.DVSRuntimeInfo;
         };
         DrsInjectorWorkloadCorrelationState: {
            "Correlated": string;
            "Uncorrelated": string;
         };
         EVCMode: {
            (options?: vsanhealthService.vim.EVCMode): vsanhealthService.vim.EVCMode;
         };
         ArrayOfEVCMode: {
            (options?: vsanhealthService.vim.ArrayOfEVCMode): vsanhealthService.vim.ArrayOfEVCMode;
         };
         ElementDescription: {
            (options?: vsanhealthService.vim.ElementDescription): vsanhealthService.vim.ElementDescription;
         };
         ArrayOfElementDescription: {
            (options?: vsanhealthService.vim.ArrayOfElementDescription): vsanhealthService.vim.ArrayOfElementDescription;
         };
         EnumDescription: {
            (options?: vsanhealthService.vim.EnumDescription): vsanhealthService.vim.EnumDescription;
         };
         ArrayOfEnumDescription: {
            (options?: vsanhealthService.vim.ArrayOfEnumDescription): vsanhealthService.vim.ArrayOfEnumDescription;
         };
         EnvironmentBrowserConfigOptionQuerySpec: {
            (options?: vsanhealthService.vim.EnvironmentBrowserConfigOptionQuerySpec): vsanhealthService.vim.EnvironmentBrowserConfigOptionQuerySpec;
         };
         ExtendedDescription: {
            (options?: vsanhealthService.vim.ExtendedDescription): vsanhealthService.vim.ExtendedDescription;
         };
         ExtendedElementDescription: {
            (options?: vsanhealthService.vim.ExtendedElementDescription): vsanhealthService.vim.ExtendedElementDescription;
         };
         ExtensionServerInfo: {
            (options?: vsanhealthService.vim.ExtensionServerInfo): vsanhealthService.vim.ExtensionServerInfo;
         };
         ArrayOfExtensionServerInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionServerInfo): vsanhealthService.vim.ArrayOfExtensionServerInfo;
         };
         ExtensionClientInfo: {
            (options?: vsanhealthService.vim.ExtensionClientInfo): vsanhealthService.vim.ExtensionClientInfo;
         };
         ArrayOfExtensionClientInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionClientInfo): vsanhealthService.vim.ArrayOfExtensionClientInfo;
         };
         ExtensionTaskTypeInfo: {
            (options?: vsanhealthService.vim.ExtensionTaskTypeInfo): vsanhealthService.vim.ExtensionTaskTypeInfo;
         };
         ArrayOfExtensionTaskTypeInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionTaskTypeInfo): vsanhealthService.vim.ArrayOfExtensionTaskTypeInfo;
         };
         ExtensionEventTypeInfo: {
            (options?: vsanhealthService.vim.ExtensionEventTypeInfo): vsanhealthService.vim.ExtensionEventTypeInfo;
         };
         ArrayOfExtensionEventTypeInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionEventTypeInfo): vsanhealthService.vim.ArrayOfExtensionEventTypeInfo;
         };
         ExtensionFaultTypeInfo: {
            (options?: vsanhealthService.vim.ExtensionFaultTypeInfo): vsanhealthService.vim.ExtensionFaultTypeInfo;
         };
         ArrayOfExtensionFaultTypeInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionFaultTypeInfo): vsanhealthService.vim.ArrayOfExtensionFaultTypeInfo;
         };
         ExtensionPrivilegeInfo: {
            (options?: vsanhealthService.vim.ExtensionPrivilegeInfo): vsanhealthService.vim.ExtensionPrivilegeInfo;
         };
         ArrayOfExtensionPrivilegeInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionPrivilegeInfo): vsanhealthService.vim.ArrayOfExtensionPrivilegeInfo;
         };
         ExtensionResourceInfo: {
            (options?: vsanhealthService.vim.ExtensionResourceInfo): vsanhealthService.vim.ExtensionResourceInfo;
         };
         ArrayOfExtensionResourceInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtensionResourceInfo): vsanhealthService.vim.ArrayOfExtensionResourceInfo;
         };
         ExtensionHealthInfo: {
            (options?: vsanhealthService.vim.ExtensionHealthInfo): vsanhealthService.vim.ExtensionHealthInfo;
         };
         ExtensionOvfConsumerInfo: {
            (options?: vsanhealthService.vim.ExtensionOvfConsumerInfo): vsanhealthService.vim.ExtensionOvfConsumerInfo;
         };
         Extension: {
            (options?: vsanhealthService.vim.Extension): vsanhealthService.vim.Extension;
         };
         ArrayOfExtension: {
            (options?: vsanhealthService.vim.ArrayOfExtension): vsanhealthService.vim.ArrayOfExtension;
         };
         ExtensionManagerIpAllocationUsage: {
            (options?: vsanhealthService.vim.ExtensionManagerIpAllocationUsage): vsanhealthService.vim.ExtensionManagerIpAllocationUsage;
         };
         ArrayOfExtensionManagerIpAllocationUsage: {
            (options?: vsanhealthService.vim.ArrayOfExtensionManagerIpAllocationUsage): vsanhealthService.vim.ArrayOfExtensionManagerIpAllocationUsage;
         };
         ReplicationVmState: {
            "none": string;
            "paused": string;
            "syncing": string;
            "idle": string;
            "active": string;
            "error": string;
         };
         ReplicationVmProgressInfo: {
            (options?: vsanhealthService.vim.ReplicationVmProgressInfo): vsanhealthService.vim.ReplicationVmProgressInfo;
         };
         HbrManagerReplicationVmInfo: {
            (options?: vsanhealthService.vim.HbrManagerReplicationVmInfo): vsanhealthService.vim.HbrManagerReplicationVmInfo;
         };
         QuiesceMode: {
            "application": string;
            "filesystem": string;
            "none": string;
         };
         HbrManagerVmReplicationCapability: {
            (options?: vsanhealthService.vim.HbrManagerVmReplicationCapability): vsanhealthService.vim.HbrManagerVmReplicationCapability;
         };
         ArrayOfHbrManagerVmReplicationCapability: {
            (options?: vsanhealthService.vim.ArrayOfHbrManagerVmReplicationCapability): vsanhealthService.vim.ArrayOfHbrManagerVmReplicationCapability;
         };
         HealthUpdateInfoComponentType: {
            "Memory": string;
            "Power": string;
            "Fan": string;
            "Network": string;
            "Storage": string;
         };
         HealthUpdateInfo: {
            (options?: vsanhealthService.vim.HealthUpdateInfo): vsanhealthService.vim.HealthUpdateInfo;
         };
         ArrayOfHealthUpdateInfo: {
            (options?: vsanhealthService.vim.ArrayOfHealthUpdateInfo): vsanhealthService.vim.ArrayOfHealthUpdateInfo;
         };
         HealthUpdate: {
            (options?: vsanhealthService.vim.HealthUpdate): vsanhealthService.vim.HealthUpdate;
         };
         ArrayOfHealthUpdate: {
            (options?: vsanhealthService.vim.ArrayOfHealthUpdate): vsanhealthService.vim.ArrayOfHealthUpdate;
         };
         HostServiceTicket: {
            (options?: vsanhealthService.vim.HostServiceTicket): vsanhealthService.vim.HostServiceTicket;
         };
         HostSystemConnectionState: {
            "connected": string;
            "notResponding": string;
            "disconnected": string;
         };
         HostSystemPowerState: {
            "poweredOn": string;
            "poweredOff": string;
            "standBy": string;
            "unknown": string;
         };
         HostStandbyMode: {
            "entering": string;
            "exiting": string;
            "in": string;
            "none": string;
         };
         HostCryptoState: {
            "incapable": string;
            "prepared": string;
            "safe": string;
         };
         HostSystemReconnectSpec: {
            (options?: vsanhealthService.vim.HostSystemReconnectSpec): vsanhealthService.vim.HostSystemReconnectSpec;
         };
         HttpNfcLeaseState: {
            "initializing": string;
            "ready": string;
            "done": string;
            "error": string;
         };
         HttpNfcLeaseDatastoreLeaseInfo: {
            (options?: vsanhealthService.vim.HttpNfcLeaseDatastoreLeaseInfo): vsanhealthService.vim.HttpNfcLeaseDatastoreLeaseInfo;
         };
         ArrayOfHttpNfcLeaseDatastoreLeaseInfo: {
            (options?: vsanhealthService.vim.ArrayOfHttpNfcLeaseDatastoreLeaseInfo): vsanhealthService.vim.ArrayOfHttpNfcLeaseDatastoreLeaseInfo;
         };
         HttpNfcLeaseHostInfo: {
            (options?: vsanhealthService.vim.HttpNfcLeaseHostInfo): vsanhealthService.vim.HttpNfcLeaseHostInfo;
         };
         ArrayOfHttpNfcLeaseHostInfo: {
            (options?: vsanhealthService.vim.ArrayOfHttpNfcLeaseHostInfo): vsanhealthService.vim.ArrayOfHttpNfcLeaseHostInfo;
         };
         HttpNfcLeaseInfo: {
            (options?: vsanhealthService.vim.HttpNfcLeaseInfo): vsanhealthService.vim.HttpNfcLeaseInfo;
         };
         HttpNfcLeaseDeviceUrl: {
            (options?: vsanhealthService.vim.HttpNfcLeaseDeviceUrl): vsanhealthService.vim.HttpNfcLeaseDeviceUrl;
         };
         ArrayOfHttpNfcLeaseDeviceUrl: {
            (options?: vsanhealthService.vim.ArrayOfHttpNfcLeaseDeviceUrl): vsanhealthService.vim.ArrayOfHttpNfcLeaseDeviceUrl;
         };
         HttpNfcLeaseManifestEntry: {
            (options?: vsanhealthService.vim.HttpNfcLeaseManifestEntry): vsanhealthService.vim.HttpNfcLeaseManifestEntry;
         };
         ArrayOfHttpNfcLeaseManifestEntry: {
            (options?: vsanhealthService.vim.ArrayOfHttpNfcLeaseManifestEntry): vsanhealthService.vim.ArrayOfHttpNfcLeaseManifestEntry;
         };
         ImportSpec: {
            (options?: vsanhealthService.vim.ImportSpec): vsanhealthService.vim.ImportSpec;
         };
         ArrayOfImportSpec: {
            (options?: vsanhealthService.vim.ArrayOfImportSpec): vsanhealthService.vim.ArrayOfImportSpec;
         };
         InheritablePolicy: {
            (options?: vsanhealthService.vim.InheritablePolicy): vsanhealthService.vim.InheritablePolicy;
         };
         IntExpression: {
            (options?: vsanhealthService.vim.IntExpression): vsanhealthService.vim.IntExpression;
         };
         IntPolicy: {
            (options?: vsanhealthService.vim.IntPolicy): vsanhealthService.vim.IntPolicy;
         };
         IoFilterInfo: {
            (options?: vsanhealthService.vim.IoFilterInfo): vsanhealthService.vim.IoFilterInfo;
         };
         HostIoFilterInfo: {
            (options?: vsanhealthService.vim.HostIoFilterInfo): vsanhealthService.vim.HostIoFilterInfo;
         };
         ArrayOfHostIoFilterInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostIoFilterInfo): vsanhealthService.vim.ArrayOfHostIoFilterInfo;
         };
         IoFilterOperation: {
            "install": string;
            "uninstall": string;
            "upgrade": string;
         };
         ClusterIoFilterInfo: {
            (options?: vsanhealthService.vim.ClusterIoFilterInfo): vsanhealthService.vim.ClusterIoFilterInfo;
         };
         ArrayOfClusterIoFilterInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterIoFilterInfo): vsanhealthService.vim.ArrayOfClusterIoFilterInfo;
         };
         IoFilterType: {
            "cache": string;
            "replication": string;
            "encryption": string;
            "compression": string;
            "inspection": string;
            "datastoreIoControl": string;
            "dataProvider": string;
         };
         IoFilterHostIssue: {
            (options?: vsanhealthService.vim.IoFilterHostIssue): vsanhealthService.vim.IoFilterHostIssue;
         };
         ArrayOfIoFilterHostIssue: {
            (options?: vsanhealthService.vim.ArrayOfIoFilterHostIssue): vsanhealthService.vim.ArrayOfIoFilterHostIssue;
         };
         IoFilterQueryIssueResult: {
            (options?: vsanhealthService.vim.IoFilterQueryIssueResult): vsanhealthService.vim.IoFilterQueryIssueResult;
         };
         IpAddress: {
            (options?: vsanhealthService.vim.IpAddress): vsanhealthService.vim.IpAddress;
         };
         IpPoolManagerIpAllocation: {
            (options?: vsanhealthService.vim.IpPoolManagerIpAllocation): vsanhealthService.vim.IpPoolManagerIpAllocation;
         };
         ArrayOfIpPoolManagerIpAllocation: {
            (options?: vsanhealthService.vim.ArrayOfIpPoolManagerIpAllocation): vsanhealthService.vim.ArrayOfIpPoolManagerIpAllocation;
         };
         IpRange: {
            (options?: vsanhealthService.vim.IpRange): vsanhealthService.vim.IpRange;
         };
         KeyValue: {
            (options?: vsanhealthService.vim.KeyValue): vsanhealthService.vim.KeyValue;
         };
         ArrayOfKeyValue: {
            (options?: vsanhealthService.vim.ArrayOfKeyValue): vsanhealthService.vim.ArrayOfKeyValue;
         };
         LatencySensitivitySensitivityLevel: {
            "low": string;
            "normal": string;
            "medium": string;
            "high": string;
            "custom": string;
         };
         LatencySensitivity: {
            (options?: vsanhealthService.vim.LatencySensitivity): vsanhealthService.vim.LatencySensitivity;
         };
         LicenseAssignmentManagerLicenseAssignment: {
            (options?: vsanhealthService.vim.LicenseAssignmentManagerLicenseAssignment): vsanhealthService.vim.LicenseAssignmentManagerLicenseAssignment;
         };
         ArrayOfLicenseAssignmentManagerLicenseAssignment: {
            (options?: vsanhealthService.vim.ArrayOfLicenseAssignmentManagerLicenseAssignment): vsanhealthService.vim.ArrayOfLicenseAssignmentManagerLicenseAssignment;
         };
         LicenseManagerState: {
            "initializing": string;
            "normal": string;
            "marginal": string;
            "fault": string;
         };
         LicenseManagerLicenseKey: {
            "esxFull": string;
            "esxVmtn": string;
            "esxExpress": string;
            "san": string;
            "iscsi": string;
            "nas": string;
            "vsmp": string;
            "backup": string;
            "vc": string;
            "vcExpress": string;
            "esxHost": string;
            "gsxHost": string;
            "serverHost": string;
            "drsPower": string;
            "vmotion": string;
            "drs": string;
            "das": string;
         };
         LicenseSource: {
            (options?: vsanhealthService.vim.LicenseSource): vsanhealthService.vim.LicenseSource;
         };
         LicenseServerSource: {
            (options?: vsanhealthService.vim.LicenseServerSource): vsanhealthService.vim.LicenseServerSource;
         };
         LocalLicenseSource: {
            (options?: vsanhealthService.vim.LocalLicenseSource): vsanhealthService.vim.LocalLicenseSource;
         };
         EvaluationLicenseSource: {
            (options?: vsanhealthService.vim.EvaluationLicenseSource): vsanhealthService.vim.EvaluationLicenseSource;
         };
         LicenseFeatureInfoUnit: {
            "host": string;
            "cpuCore": string;
            "cpuPackage": string;
            "server": string;
            "vm": string;
         };
         LicenseFeatureInfoState: {
            "enabled": string;
            "disabled": string;
            "optional": string;
         };
         LicenseFeatureInfoSourceRestriction: {
            "unrestricted": string;
            "served": string;
            "file": string;
         };
         LicenseFeatureInfo: {
            (options?: vsanhealthService.vim.LicenseFeatureInfo): vsanhealthService.vim.LicenseFeatureInfo;
         };
         ArrayOfLicenseFeatureInfo: {
            (options?: vsanhealthService.vim.ArrayOfLicenseFeatureInfo): vsanhealthService.vim.ArrayOfLicenseFeatureInfo;
         };
         LicenseReservationInfoState: {
            "notUsed": string;
            "noLicense": string;
            "unlicensedUse": string;
            "licensed": string;
         };
         LicenseReservationInfo: {
            (options?: vsanhealthService.vim.LicenseReservationInfo): vsanhealthService.vim.LicenseReservationInfo;
         };
         ArrayOfLicenseReservationInfo: {
            (options?: vsanhealthService.vim.ArrayOfLicenseReservationInfo): vsanhealthService.vim.ArrayOfLicenseReservationInfo;
         };
         LicenseAvailabilityInfo: {
            (options?: vsanhealthService.vim.LicenseAvailabilityInfo): vsanhealthService.vim.LicenseAvailabilityInfo;
         };
         ArrayOfLicenseAvailabilityInfo: {
            (options?: vsanhealthService.vim.ArrayOfLicenseAvailabilityInfo): vsanhealthService.vim.ArrayOfLicenseAvailabilityInfo;
         };
         LicenseDiagnostics: {
            (options?: vsanhealthService.vim.LicenseDiagnostics): vsanhealthService.vim.LicenseDiagnostics;
         };
         LicenseUsageInfo: {
            (options?: vsanhealthService.vim.LicenseUsageInfo): vsanhealthService.vim.LicenseUsageInfo;
         };
         LicenseManagerEvaluationInfo: {
            (options?: vsanhealthService.vim.LicenseManagerEvaluationInfo): vsanhealthService.vim.LicenseManagerEvaluationInfo;
         };
         HostLicensableResourceKey: {
            "numCpuPackages": string;
            "numCpuCores": string;
            "memorySize": string;
            "memoryForVms": string;
            "numVmsStarted": string;
            "numVmsStarting": string;
         };
         HostLicensableResourceInfo: {
            (options?: vsanhealthService.vim.HostLicensableResourceInfo): vsanhealthService.vim.HostLicensableResourceInfo;
         };
         LicenseManagerLicenseInfo: {
            (options?: vsanhealthService.vim.LicenseManagerLicenseInfo): vsanhealthService.vim.LicenseManagerLicenseInfo;
         };
         ArrayOfLicenseManagerLicenseInfo: {
            (options?: vsanhealthService.vim.ArrayOfLicenseManagerLicenseInfo): vsanhealthService.vim.ArrayOfLicenseManagerLicenseInfo;
         };
         LocalizationManagerMessageCatalog: {
            (options?: vsanhealthService.vim.LocalizationManagerMessageCatalog): vsanhealthService.vim.LocalizationManagerMessageCatalog;
         };
         ArrayOfLocalizationManagerMessageCatalog: {
            (options?: vsanhealthService.vim.ArrayOfLocalizationManagerMessageCatalog): vsanhealthService.vim.ArrayOfLocalizationManagerMessageCatalog;
         };
         LongPolicy: {
            (options?: vsanhealthService.vim.LongPolicy): vsanhealthService.vim.LongPolicy;
         };
         MacAddress: {
            (options?: vsanhealthService.vim.MacAddress): vsanhealthService.vim.MacAddress;
         };
         MacRange: {
            (options?: vsanhealthService.vim.MacRange): vsanhealthService.vim.MacRange;
         };
         ManagedEntityStatus: {
            "gray": string;
            "green": string;
            "yellow": string;
            "red": string;
         };
         MethodDescription: {
            (options?: vsanhealthService.vim.MethodDescription): vsanhealthService.vim.MethodDescription;
         };
         NegatableExpression: {
            (options?: vsanhealthService.vim.NegatableExpression): vsanhealthService.vim.NegatableExpression;
         };
         NetworkSummary: {
            (options?: vsanhealthService.vim.NetworkSummary): vsanhealthService.vim.NetworkSummary;
         };
         NumericRange: {
            (options?: vsanhealthService.vim.NumericRange): vsanhealthService.vim.NumericRange;
         };
         ArrayOfNumericRange: {
            (options?: vsanhealthService.vim.ArrayOfNumericRange): vsanhealthService.vim.ArrayOfNumericRange;
         };
         OpaqueNetworkSummary: {
            (options?: vsanhealthService.vim.OpaqueNetworkSummary): vsanhealthService.vim.OpaqueNetworkSummary;
         };
         OpaqueNetworkCapability: {
            (options?: vsanhealthService.vim.OpaqueNetworkCapability): vsanhealthService.vim.OpaqueNetworkCapability;
         };
         OvfConsumerOvfSection: {
            (options?: vsanhealthService.vim.OvfConsumerOvfSection): vsanhealthService.vim.OvfConsumerOvfSection;
         };
         ArrayOfOvfConsumerOvfSection: {
            (options?: vsanhealthService.vim.ArrayOfOvfConsumerOvfSection): vsanhealthService.vim.ArrayOfOvfConsumerOvfSection;
         };
         OvfConsumerOstNodeType: {
            "envelope": string;
            "virtualSystem": string;
            "virtualSystemCollection": string;
         };
         OvfConsumerOstNode: {
            (options?: vsanhealthService.vim.OvfConsumerOstNode): vsanhealthService.vim.OvfConsumerOstNode;
         };
         ArrayOfOvfConsumerOstNode: {
            (options?: vsanhealthService.vim.ArrayOfOvfConsumerOstNode): vsanhealthService.vim.ArrayOfOvfConsumerOstNode;
         };
         OvfOptionInfo: {
            (options?: vsanhealthService.vim.OvfOptionInfo): vsanhealthService.vim.OvfOptionInfo;
         };
         ArrayOfOvfOptionInfo: {
            (options?: vsanhealthService.vim.ArrayOfOvfOptionInfo): vsanhealthService.vim.ArrayOfOvfOptionInfo;
         };
         OvfDeploymentOption: {
            (options?: vsanhealthService.vim.OvfDeploymentOption): vsanhealthService.vim.OvfDeploymentOption;
         };
         ArrayOfOvfDeploymentOption: {
            (options?: vsanhealthService.vim.ArrayOfOvfDeploymentOption): vsanhealthService.vim.ArrayOfOvfDeploymentOption;
         };
         OvfManagerCommonParams: {
            (options?: vsanhealthService.vim.OvfManagerCommonParams): vsanhealthService.vim.OvfManagerCommonParams;
         };
         OvfValidateHostParams: {
            (options?: vsanhealthService.vim.OvfValidateHostParams): vsanhealthService.vim.OvfValidateHostParams;
         };
         OvfValidateHostResult: {
            (options?: vsanhealthService.vim.OvfValidateHostResult): vsanhealthService.vim.OvfValidateHostResult;
         };
         OvfParseDescriptorParams: {
            (options?: vsanhealthService.vim.OvfParseDescriptorParams): vsanhealthService.vim.OvfParseDescriptorParams;
         };
         OvfParseDescriptorResult: {
            (options?: vsanhealthService.vim.OvfParseDescriptorResult): vsanhealthService.vim.OvfParseDescriptorResult;
         };
         OvfNetworkInfo: {
            (options?: vsanhealthService.vim.OvfNetworkInfo): vsanhealthService.vim.OvfNetworkInfo;
         };
         ArrayOfOvfNetworkInfo: {
            (options?: vsanhealthService.vim.ArrayOfOvfNetworkInfo): vsanhealthService.vim.ArrayOfOvfNetworkInfo;
         };
         OvfCreateImportSpecParamsDiskProvisioningType: {
            "monolithicSparse": string;
            "monolithicFlat": string;
            "twoGbMaxExtentSparse": string;
            "twoGbMaxExtentFlat": string;
            "thin": string;
            "thick": string;
            "seSparse": string;
            "eagerZeroedThick": string;
            "sparse": string;
            "flat": string;
         };
         OvfCreateImportSpecParams: {
            (options?: vsanhealthService.vim.OvfCreateImportSpecParams): vsanhealthService.vim.OvfCreateImportSpecParams;
         };
         OvfResourceMap: {
            (options?: vsanhealthService.vim.OvfResourceMap): vsanhealthService.vim.OvfResourceMap;
         };
         ArrayOfOvfResourceMap: {
            (options?: vsanhealthService.vim.ArrayOfOvfResourceMap): vsanhealthService.vim.ArrayOfOvfResourceMap;
         };
         OvfNetworkMapping: {
            (options?: vsanhealthService.vim.OvfNetworkMapping): vsanhealthService.vim.OvfNetworkMapping;
         };
         ArrayOfOvfNetworkMapping: {
            (options?: vsanhealthService.vim.ArrayOfOvfNetworkMapping): vsanhealthService.vim.ArrayOfOvfNetworkMapping;
         };
         OvfCreateImportSpecResult: {
            (options?: vsanhealthService.vim.OvfCreateImportSpecResult): vsanhealthService.vim.OvfCreateImportSpecResult;
         };
         OvfFileItem: {
            (options?: vsanhealthService.vim.OvfFileItem): vsanhealthService.vim.OvfFileItem;
         };
         ArrayOfOvfFileItem: {
            (options?: vsanhealthService.vim.ArrayOfOvfFileItem): vsanhealthService.vim.ArrayOfOvfFileItem;
         };
         OvfCreateDescriptorParams: {
            (options?: vsanhealthService.vim.OvfCreateDescriptorParams): vsanhealthService.vim.OvfCreateDescriptorParams;
         };
         OvfCreateDescriptorResult: {
            (options?: vsanhealthService.vim.OvfCreateDescriptorResult): vsanhealthService.vim.OvfCreateDescriptorResult;
         };
         OvfFile: {
            (options?: vsanhealthService.vim.OvfFile): vsanhealthService.vim.OvfFile;
         };
         ArrayOfOvfFile: {
            (options?: vsanhealthService.vim.ArrayOfOvfFile): vsanhealthService.vim.ArrayOfOvfFile;
         };
         PasswordField: {
            (options?: vsanhealthService.vim.PasswordField): vsanhealthService.vim.PasswordField;
         };
         PerformanceDescription: {
            (options?: vsanhealthService.vim.PerformanceDescription): vsanhealthService.vim.PerformanceDescription;
         };
         PerfFormat: {
            "normal": string;
            "csv": string;
         };
         PerfProviderSummary: {
            (options?: vsanhealthService.vim.PerfProviderSummary): vsanhealthService.vim.PerfProviderSummary;
         };
         PerfSummaryType: {
            "average": string;
            "maximum": string;
            "minimum": string;
            "latest": string;
            "summation": string;
            "none": string;
         };
         PerfStatsType: {
            "absolute": string;
            "delta": string;
            "rate": string;
         };
         PerformanceManagerUnit: {
            "percent": string;
            "kiloBytes": string;
            "megaBytes": string;
            "megaHertz": string;
            "number": string;
            "microsecond": string;
            "millisecond": string;
            "second": string;
            "kiloBytesPerSecond": string;
            "megaBytesPerSecond": string;
            "watt": string;
            "joule": string;
            "teraBytes": string;
         };
         PerfCounterInfo: {
            (options?: vsanhealthService.vim.PerfCounterInfo): vsanhealthService.vim.PerfCounterInfo;
         };
         ArrayOfPerfCounterInfo: {
            (options?: vsanhealthService.vim.ArrayOfPerfCounterInfo): vsanhealthService.vim.ArrayOfPerfCounterInfo;
         };
         PerfMetricId: {
            (options?: vsanhealthService.vim.PerfMetricId): vsanhealthService.vim.PerfMetricId;
         };
         ArrayOfPerfMetricId: {
            (options?: vsanhealthService.vim.ArrayOfPerfMetricId): vsanhealthService.vim.ArrayOfPerfMetricId;
         };
         PerfQuerySpec: {
            (options?: vsanhealthService.vim.PerfQuerySpec): vsanhealthService.vim.PerfQuerySpec;
         };
         ArrayOfPerfQuerySpec: {
            (options?: vsanhealthService.vim.ArrayOfPerfQuerySpec): vsanhealthService.vim.ArrayOfPerfQuerySpec;
         };
         PerfSampleInfo: {
            (options?: vsanhealthService.vim.PerfSampleInfo): vsanhealthService.vim.PerfSampleInfo;
         };
         ArrayOfPerfSampleInfo: {
            (options?: vsanhealthService.vim.ArrayOfPerfSampleInfo): vsanhealthService.vim.ArrayOfPerfSampleInfo;
         };
         PerfMetricSeries: {
            (options?: vsanhealthService.vim.PerfMetricSeries): vsanhealthService.vim.PerfMetricSeries;
         };
         ArrayOfPerfMetricSeries: {
            (options?: vsanhealthService.vim.ArrayOfPerfMetricSeries): vsanhealthService.vim.ArrayOfPerfMetricSeries;
         };
         PerfMetricIntSeries: {
            (options?: vsanhealthService.vim.PerfMetricIntSeries): vsanhealthService.vim.PerfMetricIntSeries;
         };
         PerfMetricSeriesCSV: {
            (options?: vsanhealthService.vim.PerfMetricSeriesCSV): vsanhealthService.vim.PerfMetricSeriesCSV;
         };
         ArrayOfPerfMetricSeriesCSV: {
            (options?: vsanhealthService.vim.ArrayOfPerfMetricSeriesCSV): vsanhealthService.vim.ArrayOfPerfMetricSeriesCSV;
         };
         PerfEntityMetricBase: {
            (options?: vsanhealthService.vim.PerfEntityMetricBase): vsanhealthService.vim.PerfEntityMetricBase;
         };
         ArrayOfPerfEntityMetricBase: {
            (options?: vsanhealthService.vim.ArrayOfPerfEntityMetricBase): vsanhealthService.vim.ArrayOfPerfEntityMetricBase;
         };
         PerfEntityMetric: {
            (options?: vsanhealthService.vim.PerfEntityMetric): vsanhealthService.vim.PerfEntityMetric;
         };
         PerfEntityMetricCSV: {
            (options?: vsanhealthService.vim.PerfEntityMetricCSV): vsanhealthService.vim.PerfEntityMetricCSV;
         };
         PerfCompositeMetric: {
            (options?: vsanhealthService.vim.PerfCompositeMetric): vsanhealthService.vim.PerfCompositeMetric;
         };
         PerformanceManagerCounterLevelMapping: {
            (options?: vsanhealthService.vim.PerformanceManagerCounterLevelMapping): vsanhealthService.vim.PerformanceManagerCounterLevelMapping;
         };
         ArrayOfPerformanceManagerCounterLevelMapping: {
            (options?: vsanhealthService.vim.ArrayOfPerformanceManagerCounterLevelMapping): vsanhealthService.vim.ArrayOfPerformanceManagerCounterLevelMapping;
         };
         PerfInterval: {
            (options?: vsanhealthService.vim.PerfInterval): vsanhealthService.vim.PerfInterval;
         };
         ArrayOfPerfInterval: {
            (options?: vsanhealthService.vim.ArrayOfPerfInterval): vsanhealthService.vim.ArrayOfPerfInterval;
         };
         PosixUserSearchResult: {
            (options?: vsanhealthService.vim.PosixUserSearchResult): vsanhealthService.vim.PosixUserSearchResult;
         };
         PrivilegePolicyDef: {
            (options?: vsanhealthService.vim.PrivilegePolicyDef): vsanhealthService.vim.PrivilegePolicyDef;
         };
         ResourceAllocationInfo: {
            (options?: vsanhealthService.vim.ResourceAllocationInfo): vsanhealthService.vim.ResourceAllocationInfo;
         };
         ResourceAllocationOption: {
            (options?: vsanhealthService.vim.ResourceAllocationOption): vsanhealthService.vim.ResourceAllocationOption;
         };
         ResourceConfigOption: {
            (options?: vsanhealthService.vim.ResourceConfigOption): vsanhealthService.vim.ResourceConfigOption;
         };
         ResourceConfigSpec: {
            (options?: vsanhealthService.vim.ResourceConfigSpec): vsanhealthService.vim.ResourceConfigSpec;
         };
         ArrayOfResourceConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfResourceConfigSpec): vsanhealthService.vim.ArrayOfResourceConfigSpec;
         };
         DatabaseSizeParam: {
            (options?: vsanhealthService.vim.DatabaseSizeParam): vsanhealthService.vim.DatabaseSizeParam;
         };
         InventoryDescription: {
            (options?: vsanhealthService.vim.InventoryDescription): vsanhealthService.vim.InventoryDescription;
         };
         PerformanceStatisticsDescription: {
            (options?: vsanhealthService.vim.PerformanceStatisticsDescription): vsanhealthService.vim.PerformanceStatisticsDescription;
         };
         DatabaseSizeEstimate: {
            (options?: vsanhealthService.vim.DatabaseSizeEstimate): vsanhealthService.vim.DatabaseSizeEstimate;
         };
         ResourcePoolResourceUsage: {
            (options?: vsanhealthService.vim.ResourcePoolResourceUsage): vsanhealthService.vim.ResourcePoolResourceUsage;
         };
         ResourcePoolRuntimeInfo: {
            (options?: vsanhealthService.vim.ResourcePoolRuntimeInfo): vsanhealthService.vim.ResourcePoolRuntimeInfo;
         };
         ResourcePoolQuickStats: {
            (options?: vsanhealthService.vim.ResourcePoolQuickStats): vsanhealthService.vim.ResourcePoolQuickStats;
         };
         ResourcePoolSummary: {
            (options?: vsanhealthService.vim.ResourcePoolSummary): vsanhealthService.vim.ResourcePoolSummary;
         };
         SelectionSet: {
            (options?: vsanhealthService.vim.SelectionSet): vsanhealthService.vim.SelectionSet;
         };
         ArrayOfSelectionSet: {
            (options?: vsanhealthService.vim.ArrayOfSelectionSet): vsanhealthService.vim.ArrayOfSelectionSet;
         };
         ValidateMigrationTestType: {
            "sourceTests": string;
            "compatibilityTests": string;
            "diskAccessibilityTests": string;
            "resourceTests": string;
         };
         VMotionCompatibilityType: {
            "cpu": string;
            "software": string;
         };
         HostVMotionCompatibility: {
            (options?: vsanhealthService.vim.HostVMotionCompatibility): vsanhealthService.vim.HostVMotionCompatibility;
         };
         ArrayOfHostVMotionCompatibility: {
            (options?: vsanhealthService.vim.ArrayOfHostVMotionCompatibility): vsanhealthService.vim.ArrayOfHostVMotionCompatibility;
         };
         ProductComponentInfo: {
            (options?: vsanhealthService.vim.ProductComponentInfo): vsanhealthService.vim.ProductComponentInfo;
         };
         ArrayOfProductComponentInfo: {
            (options?: vsanhealthService.vim.ArrayOfProductComponentInfo): vsanhealthService.vim.ArrayOfProductComponentInfo;
         };
         ServiceContent: {
            (options?: vsanhealthService.vim.ServiceContent): vsanhealthService.vim.ServiceContent;
         };
         ServiceLocatorCredential: {
            (options?: vsanhealthService.vim.ServiceLocatorCredential): vsanhealthService.vim.ServiceLocatorCredential;
         };
         ServiceLocatorNamePassword: {
            (options?: vsanhealthService.vim.ServiceLocatorNamePassword): vsanhealthService.vim.ServiceLocatorNamePassword;
         };
         ServiceLocatorSAMLCredential: {
            (options?: vsanhealthService.vim.ServiceLocatorSAMLCredential): vsanhealthService.vim.ServiceLocatorSAMLCredential;
         };
         ServiceLocator: {
            (options?: vsanhealthService.vim.ServiceLocator): vsanhealthService.vim.ServiceLocator;
         };
         ArrayOfServiceLocator: {
            (options?: vsanhealthService.vim.ArrayOfServiceLocator): vsanhealthService.vim.ArrayOfServiceLocator;
         };
         ServiceManagerServiceInfo: {
            (options?: vsanhealthService.vim.ServiceManagerServiceInfo): vsanhealthService.vim.ServiceManagerServiceInfo;
         };
         ArrayOfServiceManagerServiceInfo: {
            (options?: vsanhealthService.vim.ArrayOfServiceManagerServiceInfo): vsanhealthService.vim.ArrayOfServiceManagerServiceInfo;
         };
         SessionManagerLocalTicket: {
            (options?: vsanhealthService.vim.SessionManagerLocalTicket): vsanhealthService.vim.SessionManagerLocalTicket;
         };
         SessionManagerGenericServiceTicket: {
            (options?: vsanhealthService.vim.SessionManagerGenericServiceTicket): vsanhealthService.vim.SessionManagerGenericServiceTicket;
         };
         SessionManagerServiceRequestSpec: {
            (options?: vsanhealthService.vim.SessionManagerServiceRequestSpec): vsanhealthService.vim.SessionManagerServiceRequestSpec;
         };
         SessionManagerVmomiServiceRequestSpec: {
            (options?: vsanhealthService.vim.SessionManagerVmomiServiceRequestSpec): vsanhealthService.vim.SessionManagerVmomiServiceRequestSpec;
         };
         SessionManagerHttpServiceRequestSpecMethod: {
            "httpOptions": string;
            "httpGet": string;
            "httpHead": string;
            "httpPost": string;
            "httpPut": string;
            "httpDelete": string;
            "httpTrace": string;
            "httpConnect": string;
         };
         SessionManagerHttpServiceRequestSpec: {
            (options?: vsanhealthService.vim.SessionManagerHttpServiceRequestSpec): vsanhealthService.vim.SessionManagerHttpServiceRequestSpec;
         };
         SharesLevel: {
            "low": string;
            "normal": string;
            "high": string;
            "custom": string;
         };
         SharesInfo: {
            (options?: vsanhealthService.vim.SharesInfo): vsanhealthService.vim.SharesInfo;
         };
         SharesOption: {
            (options?: vsanhealthService.vim.SharesOption): vsanhealthService.vim.SharesOption;
         };
         SimpleCommandEncoding: {
            "CSV": string;
            "HEX": string;
            "STRING": string;
         };
         SingleIp: {
            (options?: vsanhealthService.vim.SingleIp): vsanhealthService.vim.SingleIp;
         };
         SingleMac: {
            (options?: vsanhealthService.vim.SingleMac): vsanhealthService.vim.SingleMac;
         };
         StoragePodSummary: {
            (options?: vsanhealthService.vim.StoragePodSummary): vsanhealthService.vim.StoragePodSummary;
         };
         StorageIOAllocationInfo: {
            (options?: vsanhealthService.vim.StorageIOAllocationInfo): vsanhealthService.vim.StorageIOAllocationInfo;
         };
         StorageIOAllocationOption: {
            (options?: vsanhealthService.vim.StorageIOAllocationOption): vsanhealthService.vim.StorageIOAllocationOption;
         };
         StorageIORMThresholdMode: {
            "automatic": string;
            "manual": string;
         };
         StorageIORMInfo: {
            (options?: vsanhealthService.vim.StorageIORMInfo): vsanhealthService.vim.StorageIORMInfo;
         };
         StorageIORMConfigSpec: {
            (options?: vsanhealthService.vim.StorageIORMConfigSpec): vsanhealthService.vim.StorageIORMConfigSpec;
         };
         StorageIORMConfigOption: {
            (options?: vsanhealthService.vim.StorageIORMConfigOption): vsanhealthService.vim.StorageIORMConfigOption;
         };
         StoragePerformanceSummary: {
            (options?: vsanhealthService.vim.StoragePerformanceSummary): vsanhealthService.vim.StoragePerformanceSummary;
         };
         ArrayOfStoragePerformanceSummary: {
            (options?: vsanhealthService.vim.ArrayOfStoragePerformanceSummary): vsanhealthService.vim.ArrayOfStoragePerformanceSummary;
         };
         PodStorageDrsEntry: {
            (options?: vsanhealthService.vim.PodStorageDrsEntry): vsanhealthService.vim.PodStorageDrsEntry;
         };
         StorageResourceManagerStorageProfileStatistics: {
            (options?: vsanhealthService.vim.StorageResourceManagerStorageProfileStatistics): vsanhealthService.vim.StorageResourceManagerStorageProfileStatistics;
         };
         StringExpression: {
            (options?: vsanhealthService.vim.StringExpression): vsanhealthService.vim.StringExpression;
         };
         StringPolicy: {
            (options?: vsanhealthService.vim.StringPolicy): vsanhealthService.vim.StringPolicy;
         };
         Tag: {
            (options?: vsanhealthService.vim.Tag): vsanhealthService.vim.Tag;
         };
         ArrayOfTag: {
            (options?: vsanhealthService.vim.ArrayOfTag): vsanhealthService.vim.ArrayOfTag;
         };
         TaskDescription: {
            (options?: vsanhealthService.vim.TaskDescription): vsanhealthService.vim.TaskDescription;
         };
         TaskFilterSpecRecursionOption: {
            "self": string;
            "children": string;
            "all": string;
         };
         TaskFilterSpecTimeOption: {
            "queuedTime": string;
            "startedTime": string;
            "completedTime": string;
         };
         TaskFilterSpecByEntity: {
            (options?: vsanhealthService.vim.TaskFilterSpecByEntity): vsanhealthService.vim.TaskFilterSpecByEntity;
         };
         TaskFilterSpecByTime: {
            (options?: vsanhealthService.vim.TaskFilterSpecByTime): vsanhealthService.vim.TaskFilterSpecByTime;
         };
         TaskFilterSpecByUsername: {
            (options?: vsanhealthService.vim.TaskFilterSpecByUsername): vsanhealthService.vim.TaskFilterSpecByUsername;
         };
         TaskFilterSpec: {
            (options?: vsanhealthService.vim.TaskFilterSpec): vsanhealthService.vim.TaskFilterSpec;
         };
         TaskInfoState: {
            "queued": string;
            "running": string;
            "success": string;
            "error": string;
         };
         ArrayOfTaskInfoState: {
            (options?: vsanhealthService.vim.ArrayOfTaskInfoState): vsanhealthService.vim.ArrayOfTaskInfoState;
         };
         TaskInfo: {
            (options?: vsanhealthService.vim.TaskInfo): vsanhealthService.vim.TaskInfo;
         };
         ArrayOfTaskInfo: {
            (options?: vsanhealthService.vim.ArrayOfTaskInfo): vsanhealthService.vim.ArrayOfTaskInfo;
         };
         TaskReason: {
            (options?: vsanhealthService.vim.TaskReason): vsanhealthService.vim.TaskReason;
         };
         TaskReasonSystem: {
            (options?: vsanhealthService.vim.TaskReasonSystem): vsanhealthService.vim.TaskReasonSystem;
         };
         TaskReasonUser: {
            (options?: vsanhealthService.vim.TaskReasonUser): vsanhealthService.vim.TaskReasonUser;
         };
         TaskReasonAlarm: {
            (options?: vsanhealthService.vim.TaskReasonAlarm): vsanhealthService.vim.TaskReasonAlarm;
         };
         TaskReasonSchedule: {
            (options?: vsanhealthService.vim.TaskReasonSchedule): vsanhealthService.vim.TaskReasonSchedule;
         };
         TypeDescription: {
            (options?: vsanhealthService.vim.TypeDescription): vsanhealthService.vim.TypeDescription;
         };
         ArrayOfTypeDescription: {
            (options?: vsanhealthService.vim.ArrayOfTypeDescription): vsanhealthService.vim.ArrayOfTypeDescription;
         };
         UpdateVirtualMachineFilesResultFailedVmFileInfo: {
            (options?: vsanhealthService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo): vsanhealthService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo;
         };
         ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo: {
            (options?: vsanhealthService.vim.ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo): vsanhealthService.vim.ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo;
         };
         UpdateVirtualMachineFilesResult: {
            (options?: vsanhealthService.vim.UpdateVirtualMachineFilesResult): vsanhealthService.vim.UpdateVirtualMachineFilesResult;
         };
         UserSearchResult: {
            (options?: vsanhealthService.vim.UserSearchResult): vsanhealthService.vim.UserSearchResult;
         };
         ArrayOfUserSearchResult: {
            (options?: vsanhealthService.vim.ArrayOfUserSearchResult): vsanhealthService.vim.ArrayOfUserSearchResult;
         };
         UserSession: {
            (options?: vsanhealthService.vim.UserSession): vsanhealthService.vim.UserSession;
         };
         ArrayOfUserSession: {
            (options?: vsanhealthService.vim.ArrayOfUserSession): vsanhealthService.vim.ArrayOfUserSession;
         };
         VrpResourceAllocationInfo: {
            (options?: vsanhealthService.vim.VrpResourceAllocationInfo): vsanhealthService.vim.VrpResourceAllocationInfo;
         };
         VirtualResourcePoolSpec: {
            (options?: vsanhealthService.vim.VirtualResourcePoolSpec): vsanhealthService.vim.VirtualResourcePoolSpec;
         };
         VRPEditSpec: {
            (options?: vsanhealthService.vim.VRPEditSpec): vsanhealthService.vim.VRPEditSpec;
         };
         VirtualResourcePoolUsage: {
            (options?: vsanhealthService.vim.VirtualResourcePoolUsage): vsanhealthService.vim.VirtualResourcePoolUsage;
         };
         VVolVmConfigFileUpdateResultFailedVmConfigFileInfo: {
            (options?: vsanhealthService.vim.VVolVmConfigFileUpdateResultFailedVmConfigFileInfo): vsanhealthService.vim.VVolVmConfigFileUpdateResultFailedVmConfigFileInfo;
         };
         ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo: {
            (options?: vsanhealthService.vim.ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo): vsanhealthService.vim.ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo;
         };
         VVolVmConfigFileUpdateResult: {
            (options?: vsanhealthService.vim.VVolVmConfigFileUpdateResult): vsanhealthService.vim.VVolVmConfigFileUpdateResult;
         };
         VASAStorageArray: {
            (options?: vsanhealthService.vim.VASAStorageArray): vsanhealthService.vim.VASAStorageArray;
         };
         ArrayOfVASAStorageArray: {
            (options?: vsanhealthService.vim.ArrayOfVASAStorageArray): vsanhealthService.vim.ArrayOfVASAStorageArray;
         };
         VasaProviderContainerSpec: {
            (options?: vsanhealthService.vim.VasaProviderContainerSpec): vsanhealthService.vim.VasaProviderContainerSpec;
         };
         VimVasaProviderStatePerArray: {
            (options?: vsanhealthService.vim.VimVasaProviderStatePerArray): vsanhealthService.vim.VimVasaProviderStatePerArray;
         };
         ArrayOfVimVasaProviderStatePerArray: {
            (options?: vsanhealthService.vim.ArrayOfVimVasaProviderStatePerArray): vsanhealthService.vim.ArrayOfVimVasaProviderStatePerArray;
         };
         VimVasaProvider: {
            (options?: vsanhealthService.vim.VimVasaProvider): vsanhealthService.vim.VimVasaProvider;
         };
         VimVasaProviderInfo: {
            (options?: vsanhealthService.vim.VimVasaProviderInfo): vsanhealthService.vim.VimVasaProviderInfo;
         };
         ArrayOfVimVasaProviderInfo: {
            (options?: vsanhealthService.vim.ArrayOfVimVasaProviderInfo): vsanhealthService.vim.ArrayOfVimVasaProviderInfo;
         };
         VirtualAppVAppState: {
            "started": string;
            "stopped": string;
            "starting": string;
            "stopping": string;
         };
         VirtualAppSummary: {
            (options?: vsanhealthService.vim.VirtualAppSummary): vsanhealthService.vim.VirtualAppSummary;
         };
         VirtualAppLinkInfo: {
            (options?: vsanhealthService.vim.VirtualAppLinkInfo): vsanhealthService.vim.VirtualAppLinkInfo;
         };
         ArrayOfVirtualAppLinkInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualAppLinkInfo): vsanhealthService.vim.ArrayOfVirtualAppLinkInfo;
         };
         VirtualDiskType: {
            "preallocated": string;
            "thin": string;
            "seSparse": string;
            "rdm": string;
            "rdmp": string;
            "raw": string;
            "delta": string;
            "sparse2Gb": string;
            "thick2Gb": string;
            "eagerZeroedThick": string;
            "sparseMonolithic": string;
            "flatMonolithic": string;
            "thick": string;
         };
         VirtualDiskAdapterType: {
            "ide": string;
            "busLogic": string;
            "lsiLogic": string;
         };
         VirtualDiskSpec: {
            (options?: vsanhealthService.vim.VirtualDiskSpec): vsanhealthService.vim.VirtualDiskSpec;
         };
         FileBackedVirtualDiskSpec: {
            (options?: vsanhealthService.vim.FileBackedVirtualDiskSpec): vsanhealthService.vim.FileBackedVirtualDiskSpec;
         };
         SeSparseVirtualDiskSpec: {
            (options?: vsanhealthService.vim.SeSparseVirtualDiskSpec): vsanhealthService.vim.SeSparseVirtualDiskSpec;
         };
         DeviceBackedVirtualDiskSpec: {
            (options?: vsanhealthService.vim.DeviceBackedVirtualDiskSpec): vsanhealthService.vim.DeviceBackedVirtualDiskSpec;
         };
         StorageRequirement: {
            (options?: vsanhealthService.vim.StorageRequirement): vsanhealthService.vim.StorageRequirement;
         };
         ArrayOfStorageRequirement: {
            (options?: vsanhealthService.vim.ArrayOfStorageRequirement): vsanhealthService.vim.ArrayOfStorageRequirement;
         };
         VirtualMachinePowerState: {
            "poweredOff": string;
            "poweredOn": string;
            "suspended": string;
         };
         VirtualMachineAppHeartbeatStatusType: {
            "appStatusGray": string;
            "appStatusGreen": string;
            "appStatusRed": string;
         };
         VirtualMachineConnectionState: {
            "connected": string;
            "disconnected": string;
            "orphaned": string;
            "inaccessible": string;
            "invalid": string;
         };
         VirtualMachineMovePriority: {
            "lowPriority": string;
            "highPriority": string;
            "defaultPriority": string;
         };
         VirtualMachineTicket: {
            (options?: vsanhealthService.vim.VirtualMachineTicket): vsanhealthService.vim.VirtualMachineTicket;
         };
         VirtualMachineMksTicket: {
            (options?: vsanhealthService.vim.VirtualMachineMksTicket): vsanhealthService.vim.VirtualMachineMksTicket;
         };
         VirtualMachineFaultToleranceState: {
            "notConfigured": string;
            "disabled": string;
            "enabled": string;
            "needSecondary": string;
            "starting": string;
            "running": string;
         };
         VirtualMachineRecordReplayState: {
            "recording": string;
            "replaying": string;
            "inactive": string;
         };
         VirtualMachineNeedSecondaryReason: {
            "initializing": string;
            "divergence": string;
            "lostConnection": string;
            "partialHardwareFailure": string;
            "userAction": string;
            "checkpointError": string;
            "other": string;
         };
         VirtualMachineFaultToleranceType: {
            "unset": string;
            "recordReplay": string;
            "checkpointing": string;
         };
         VirtualMachineTicketType: {
            "mks": string;
            "device": string;
            "guestControl": string;
            "webmks": string;
         };
         VirtualMachineDisplayTopology: {
            (options?: vsanhealthService.vim.VirtualMachineDisplayTopology): vsanhealthService.vim.VirtualMachineDisplayTopology;
         };
         ArrayOfVirtualMachineDisplayTopology: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineDisplayTopology): vsanhealthService.vim.ArrayOfVirtualMachineDisplayTopology;
         };
         DiskChangeExtent: {
            (options?: vsanhealthService.vim.DiskChangeExtent): vsanhealthService.vim.DiskChangeExtent;
         };
         ArrayOfDiskChangeExtent: {
            (options?: vsanhealthService.vim.ArrayOfDiskChangeExtent): vsanhealthService.vim.ArrayOfDiskChangeExtent;
         };
         DiskChangeInfo: {
            (options?: vsanhealthService.vim.DiskChangeInfo): vsanhealthService.vim.DiskChangeInfo;
         };
         VirtualMachineWipeResult: {
            (options?: vsanhealthService.vim.VirtualMachineWipeResult): vsanhealthService.vim.VirtualMachineWipeResult;
         };
         VsanUpgradeSystemPreflightCheckIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue): vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue;
         };
         ArrayOfVsanUpgradeSystemPreflightCheckIssue: {
            (options?: vsanhealthService.vim.ArrayOfVsanUpgradeSystemPreflightCheckIssue): vsanhealthService.vim.ArrayOfVsanUpgradeSystemPreflightCheckIssue;
         };
         VsanUpgradeSystemHostsDisconnectedIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemHostsDisconnectedIssue): vsanhealthService.vim.VsanUpgradeSystemHostsDisconnectedIssue;
         };
         VsanUpgradeSystemMissingHostsInClusterIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemMissingHostsInClusterIssue): vsanhealthService.vim.VsanUpgradeSystemMissingHostsInClusterIssue;
         };
         VsanUpgradeSystemRogueHostsInClusterIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemRogueHostsInClusterIssue): vsanhealthService.vim.VsanUpgradeSystemRogueHostsInClusterIssue;
         };
         VsanUpgradeSystemWrongEsxVersionIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemWrongEsxVersionIssue): vsanhealthService.vim.VsanUpgradeSystemWrongEsxVersionIssue;
         };
         VsanUpgradeSystemAutoClaimEnabledOnHostsIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemAutoClaimEnabledOnHostsIssue): vsanhealthService.vim.VsanUpgradeSystemAutoClaimEnabledOnHostsIssue;
         };
         VsanUpgradeSystemAPIBrokenIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemAPIBrokenIssue): vsanhealthService.vim.VsanUpgradeSystemAPIBrokenIssue;
         };
         VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue): vsanhealthService.vim.VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue;
         };
         VsanUpgradeSystemNotEnoughFreeCapacityIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemNotEnoughFreeCapacityIssue): vsanhealthService.vim.VsanUpgradeSystemNotEnoughFreeCapacityIssue;
         };
         VsanUpgradeSystemNetworkPartitionInfo: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemNetworkPartitionInfo): vsanhealthService.vim.VsanUpgradeSystemNetworkPartitionInfo;
         };
         ArrayOfVsanUpgradeSystemNetworkPartitionInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanUpgradeSystemNetworkPartitionInfo): vsanhealthService.vim.ArrayOfVsanUpgradeSystemNetworkPartitionInfo;
         };
         VsanUpgradeSystemNetworkPartitionIssue: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemNetworkPartitionIssue): vsanhealthService.vim.VsanUpgradeSystemNetworkPartitionIssue;
         };
         VsanUpgradeSystemPreflightCheckResult: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemPreflightCheckResult): vsanhealthService.vim.VsanUpgradeSystemPreflightCheckResult;
         };
         VsanUpgradeSystemUpgradeHistoryItem: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryItem): vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryItem;
         };
         ArrayOfVsanUpgradeSystemUpgradeHistoryItem: {
            (options?: vsanhealthService.vim.ArrayOfVsanUpgradeSystemUpgradeHistoryItem): vsanhealthService.vim.ArrayOfVsanUpgradeSystemUpgradeHistoryItem;
         };
         VsanUpgradeSystemUpgradeHistoryDiskGroupOpType: {
            "add": string;
            "remove": string;
         };
         VsanUpgradeSystemUpgradeHistoryDiskGroupOp: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryDiskGroupOp): vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryDiskGroupOp;
         };
         VsanUpgradeSystemUpgradeHistoryPreflightFail: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryPreflightFail): vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryPreflightFail;
         };
         VsanUpgradeSystemUpgradeStatus: {
            (options?: vsanhealthService.vim.VsanUpgradeSystemUpgradeStatus): vsanhealthService.vim.VsanUpgradeSystemUpgradeStatus;
         };
         ActionParameter: {
            "targetName": string;
            "alarmName": string;
            "oldStatus": string;
            "newStatus": string;
            "triggeringSummary": string;
            "declaringSummary": string;
            "eventDescription": string;
            "target": string;
            "alarm": string;
         };
         Action: {
            (options?: vsanhealthService.vim.Action): vsanhealthService.vim.Action;
         };
         MethodActionArgument: {
            (options?: vsanhealthService.vim.MethodActionArgument): vsanhealthService.vim.MethodActionArgument;
         };
         ArrayOfMethodActionArgument: {
            (options?: vsanhealthService.vim.ArrayOfMethodActionArgument): vsanhealthService.vim.ArrayOfMethodActionArgument;
         };
         MethodAction: {
            (options?: vsanhealthService.vim.MethodAction): vsanhealthService.vim.MethodAction;
         };
         SendEmailAction: {
            (options?: vsanhealthService.vim.SendEmailAction): vsanhealthService.vim.SendEmailAction;
         };
         SendSNMPAction: {
            (options?: vsanhealthService.vim.SendSNMPAction): vsanhealthService.vim.SendSNMPAction;
         };
         RunScriptAction: {
            (options?: vsanhealthService.vim.RunScriptAction): vsanhealthService.vim.RunScriptAction;
         };
         CreateTaskAction: {
            (options?: vsanhealthService.vim.CreateTaskAction): vsanhealthService.vim.CreateTaskAction;
         };
         AlarmAction: {
            (options?: vsanhealthService.vim.AlarmAction): vsanhealthService.vim.AlarmAction;
         };
         ArrayOfAlarmAction: {
            (options?: vsanhealthService.vim.ArrayOfAlarmAction): vsanhealthService.vim.ArrayOfAlarmAction;
         };
         AlarmTriggeringActionTransitionSpec: {
            (options?: vsanhealthService.vim.AlarmTriggeringActionTransitionSpec): vsanhealthService.vim.AlarmTriggeringActionTransitionSpec;
         };
         ArrayOfAlarmTriggeringActionTransitionSpec: {
            (options?: vsanhealthService.vim.ArrayOfAlarmTriggeringActionTransitionSpec): vsanhealthService.vim.ArrayOfAlarmTriggeringActionTransitionSpec;
         };
         AlarmTriggeringAction: {
            (options?: vsanhealthService.vim.AlarmTriggeringAction): vsanhealthService.vim.AlarmTriggeringAction;
         };
         GroupAlarmAction: {
            (options?: vsanhealthService.vim.GroupAlarmAction): vsanhealthService.vim.GroupAlarmAction;
         };
         AlarmDescription: {
            (options?: vsanhealthService.vim.AlarmDescription): vsanhealthService.vim.AlarmDescription;
         };
         AlarmExpression: {
            (options?: vsanhealthService.vim.AlarmExpression): vsanhealthService.vim.AlarmExpression;
         };
         ArrayOfAlarmExpression: {
            (options?: vsanhealthService.vim.ArrayOfAlarmExpression): vsanhealthService.vim.ArrayOfAlarmExpression;
         };
         AndAlarmExpression: {
            (options?: vsanhealthService.vim.AndAlarmExpression): vsanhealthService.vim.AndAlarmExpression;
         };
         OrAlarmExpression: {
            (options?: vsanhealthService.vim.OrAlarmExpression): vsanhealthService.vim.OrAlarmExpression;
         };
         StateAlarmOperator: {
            "isEqual": string;
            "isUnequal": string;
         };
         StateAlarmExpression: {
            (options?: vsanhealthService.vim.StateAlarmExpression): vsanhealthService.vim.StateAlarmExpression;
         };
         EventAlarmExpressionComparisonOperator: {
            "equals": string;
            "notEqualTo": string;
            "startsWith": string;
            "doesNotStartWith": string;
            "endsWith": string;
            "doesNotEndWith": string;
         };
         EventAlarmExpressionComparison: {
            (options?: vsanhealthService.vim.EventAlarmExpressionComparison): vsanhealthService.vim.EventAlarmExpressionComparison;
         };
         ArrayOfEventAlarmExpressionComparison: {
            (options?: vsanhealthService.vim.ArrayOfEventAlarmExpressionComparison): vsanhealthService.vim.ArrayOfEventAlarmExpressionComparison;
         };
         EventAlarmExpression: {
            (options?: vsanhealthService.vim.EventAlarmExpression): vsanhealthService.vim.EventAlarmExpression;
         };
         MetricAlarmOperator: {
            "isAbove": string;
            "isBelow": string;
         };
         MetricAlarmExpression: {
            (options?: vsanhealthService.vim.MetricAlarmExpression): vsanhealthService.vim.MetricAlarmExpression;
         };
         AlarmInfo: {
            (options?: vsanhealthService.vim.AlarmInfo): vsanhealthService.vim.AlarmInfo;
         };
         AlarmSetting: {
            (options?: vsanhealthService.vim.AlarmSetting): vsanhealthService.vim.AlarmSetting;
         };
         AlarmSpec: {
            (options?: vsanhealthService.vim.AlarmSpec): vsanhealthService.vim.AlarmSpec;
         };
         AlarmState: {
            (options?: vsanhealthService.vim.AlarmState): vsanhealthService.vim.AlarmState;
         };
         ArrayOfAlarmState: {
            (options?: vsanhealthService.vim.ArrayOfAlarmState): vsanhealthService.vim.ArrayOfAlarmState;
         };
         ActionType: {
            "MigrationV1": string;
            "VmPowerV1": string;
            "HostPowerV1": string;
            "HostMaintenanceV1": string;
            "StorageMigrationV1": string;
            "StoragePlacementV1": string;
            "PlacementV1": string;
            "HostInfraUpdateHaV1": string;
         };
         ClusterAction: {
            (options?: vsanhealthService.vim.ClusterAction): vsanhealthService.vim.ClusterAction;
         };
         ArrayOfClusterAction: {
            (options?: vsanhealthService.vim.ArrayOfClusterAction): vsanhealthService.vim.ArrayOfClusterAction;
         };
         ClusterActionHistory: {
            (options?: vsanhealthService.vim.ClusterActionHistory): vsanhealthService.vim.ClusterActionHistory;
         };
         ArrayOfClusterActionHistory: {
            (options?: vsanhealthService.vim.ArrayOfClusterActionHistory): vsanhealthService.vim.ArrayOfClusterActionHistory;
         };
         ClusterAffinityRuleSpec: {
            (options?: vsanhealthService.vim.ClusterAffinityRuleSpec): vsanhealthService.vim.ClusterAffinityRuleSpec;
         };
         ClusterAntiAffinityRuleSpec: {
            (options?: vsanhealthService.vim.ClusterAntiAffinityRuleSpec): vsanhealthService.vim.ClusterAntiAffinityRuleSpec;
         };
         ClusterAttemptedVmInfo: {
            (options?: vsanhealthService.vim.ClusterAttemptedVmInfo): vsanhealthService.vim.ClusterAttemptedVmInfo;
         };
         ArrayOfClusterAttemptedVmInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterAttemptedVmInfo): vsanhealthService.vim.ArrayOfClusterAttemptedVmInfo;
         };
         ClusterConfigInfo: {
            (options?: vsanhealthService.vim.ClusterConfigInfo): vsanhealthService.vim.ClusterConfigInfo;
         };
         DrsBehavior: {
            "manual": string;
            "partiallyAutomated": string;
            "fullyAutomated": string;
         };
         ClusterDrsConfigInfo: {
            (options?: vsanhealthService.vim.ClusterDrsConfigInfo): vsanhealthService.vim.ClusterDrsConfigInfo;
         };
         ClusterDrsVmConfigInfo: {
            (options?: vsanhealthService.vim.ClusterDrsVmConfigInfo): vsanhealthService.vim.ClusterDrsVmConfigInfo;
         };
         ArrayOfClusterDrsVmConfigInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterDrsVmConfigInfo): vsanhealthService.vim.ArrayOfClusterDrsVmConfigInfo;
         };
         ClusterConfigInfoEx: {
            (options?: vsanhealthService.vim.ClusterConfigInfoEx): vsanhealthService.vim.ClusterConfigInfoEx;
         };
         DpmBehavior: {
            "manual": string;
            "automated": string;
         };
         ClusterDpmConfigInfo: {
            (options?: vsanhealthService.vim.ClusterDpmConfigInfo): vsanhealthService.vim.ClusterDpmConfigInfo;
         };
         ClusterDpmHostConfigInfo: {
            (options?: vsanhealthService.vim.ClusterDpmHostConfigInfo): vsanhealthService.vim.ClusterDpmHostConfigInfo;
         };
         ArrayOfClusterDpmHostConfigInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterDpmHostConfigInfo): vsanhealthService.vim.ArrayOfClusterDpmHostConfigInfo;
         };
         ClusterInfraUpdateHaConfigInfoBehaviorType: {
            "Manual": string;
            "Automated": string;
         };
         ClusterInfraUpdateHaConfigInfoRemediationType: {
            "QuarantineMode": string;
            "MaintenanceMode": string;
         };
         ClusterInfraUpdateHaConfigInfo: {
            (options?: vsanhealthService.vim.ClusterInfraUpdateHaConfigInfo): vsanhealthService.vim.ClusterInfraUpdateHaConfigInfo;
         };
         ClusterProactiveDrsConfigInfo: {
            (options?: vsanhealthService.vim.ClusterProactiveDrsConfigInfo): vsanhealthService.vim.ClusterProactiveDrsConfigInfo;
         };
         ClusterConfigSpec: {
            (options?: vsanhealthService.vim.ClusterConfigSpec): vsanhealthService.vim.ClusterConfigSpec;
         };
         ClusterDasVmConfigSpec: {
            (options?: vsanhealthService.vim.ClusterDasVmConfigSpec): vsanhealthService.vim.ClusterDasVmConfigSpec;
         };
         ArrayOfClusterDasVmConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfClusterDasVmConfigSpec): vsanhealthService.vim.ArrayOfClusterDasVmConfigSpec;
         };
         ClusterDrsVmConfigSpec: {
            (options?: vsanhealthService.vim.ClusterDrsVmConfigSpec): vsanhealthService.vim.ClusterDrsVmConfigSpec;
         };
         ArrayOfClusterDrsVmConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfClusterDrsVmConfigSpec): vsanhealthService.vim.ArrayOfClusterDrsVmConfigSpec;
         };
         ClusterConfigSpecEx: {
            (options?: vsanhealthService.vim.ClusterConfigSpecEx): vsanhealthService.vim.ClusterConfigSpecEx;
         };
         ClusterDpmHostConfigSpec: {
            (options?: vsanhealthService.vim.ClusterDpmHostConfigSpec): vsanhealthService.vim.ClusterDpmHostConfigSpec;
         };
         ArrayOfClusterDpmHostConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfClusterDpmHostConfigSpec): vsanhealthService.vim.ArrayOfClusterDpmHostConfigSpec;
         };
         ClusterGroupSpec: {
            (options?: vsanhealthService.vim.ClusterGroupSpec): vsanhealthService.vim.ClusterGroupSpec;
         };
         ArrayOfClusterGroupSpec: {
            (options?: vsanhealthService.vim.ArrayOfClusterGroupSpec): vsanhealthService.vim.ArrayOfClusterGroupSpec;
         };
         ClusterVmOrchestrationSpec: {
            (options?: vsanhealthService.vim.ClusterVmOrchestrationSpec): vsanhealthService.vim.ClusterVmOrchestrationSpec;
         };
         ArrayOfClusterVmOrchestrationSpec: {
            (options?: vsanhealthService.vim.ArrayOfClusterVmOrchestrationSpec): vsanhealthService.vim.ArrayOfClusterVmOrchestrationSpec;
         };
         ClusterDasAamHostInfo: {
            (options?: vsanhealthService.vim.ClusterDasAamHostInfo): vsanhealthService.vim.ClusterDasAamHostInfo;
         };
         ClusterDasAamNodeStateDasState: {
            "uninitialized": string;
            "initialized": string;
            "configuring": string;
            "unconfiguring": string;
            "running": string;
            "error": string;
            "agentShutdown": string;
            "nodeFailed": string;
         };
         ClusterDasAamNodeState: {
            (options?: vsanhealthService.vim.ClusterDasAamNodeState): vsanhealthService.vim.ClusterDasAamNodeState;
         };
         ArrayOfClusterDasAamNodeState: {
            (options?: vsanhealthService.vim.ArrayOfClusterDasAamNodeState): vsanhealthService.vim.ArrayOfClusterDasAamNodeState;
         };
         ClusterDasAdmissionControlInfo: {
            (options?: vsanhealthService.vim.ClusterDasAdmissionControlInfo): vsanhealthService.vim.ClusterDasAdmissionControlInfo;
         };
         ClusterDasAdmissionControlPolicy: {
            (options?: vsanhealthService.vim.ClusterDasAdmissionControlPolicy): vsanhealthService.vim.ClusterDasAdmissionControlPolicy;
         };
         ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo: {
            (options?: vsanhealthService.vim.ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo): vsanhealthService.vim.ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo;
         };
         DasHeartbeatDatastoreInfo: {
            (options?: vsanhealthService.vim.DasHeartbeatDatastoreInfo): vsanhealthService.vim.DasHeartbeatDatastoreInfo;
         };
         ArrayOfDasHeartbeatDatastoreInfo: {
            (options?: vsanhealthService.vim.ArrayOfDasHeartbeatDatastoreInfo): vsanhealthService.vim.ArrayOfDasHeartbeatDatastoreInfo;
         };
         ClusterDasAdvancedRuntimeInfo: {
            (options?: vsanhealthService.vim.ClusterDasAdvancedRuntimeInfo): vsanhealthService.vim.ClusterDasAdvancedRuntimeInfo;
         };
         ClusterDasConfigInfoServiceState: {
            "disabled": string;
            "enabled": string;
         };
         ClusterDasConfigInfoVmMonitoringState: {
            "vmMonitoringDisabled": string;
            "vmMonitoringOnly": string;
            "vmAndAppMonitoring": string;
         };
         ClusterDasConfigInfoHBDatastoreCandidate: {
            "userSelectedDs": string;
            "allFeasibleDs": string;
            "allFeasibleDsWithUserPreference": string;
         };
         ClusterDasConfigInfo: {
            (options?: vsanhealthService.vim.ClusterDasConfigInfo): vsanhealthService.vim.ClusterDasConfigInfo;
         };
         ClusterDasData: {
            (options?: vsanhealthService.vim.ClusterDasData): vsanhealthService.vim.ClusterDasData;
         };
         ClusterDasDataSummary: {
            (options?: vsanhealthService.vim.ClusterDasDataSummary): vsanhealthService.vim.ClusterDasDataSummary;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo: {
            (options?: vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo): vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots: {
            (options?: vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots): vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;
         };
         ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots: {
            (options?: vsanhealthService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots): vsanhealthService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots: {
            (options?: vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots): vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots;
         };
         ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots: {
            (options?: vsanhealthService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots): vsanhealthService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfo: {
            (options?: vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfo): vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfo;
         };
         ClusterDasFdmAvailabilityState: {
            "uninitialized": string;
            "election": string;
            "master": string;
            "connectedToMaster": string;
            "networkPartitionedFromMaster": string;
            "networkIsolated": string;
            "hostDown": string;
            "initializationError": string;
            "uninitializationError": string;
            "fdmUnreachable": string;
         };
         ClusterDasFdmHostState: {
            (options?: vsanhealthService.vim.ClusterDasFdmHostState): vsanhealthService.vim.ClusterDasFdmHostState;
         };
         ClusterDasHostInfo: {
            (options?: vsanhealthService.vim.ClusterDasHostInfo): vsanhealthService.vim.ClusterDasHostInfo;
         };
         ClusterDasHostRecommendation: {
            (options?: vsanhealthService.vim.ClusterDasHostRecommendation): vsanhealthService.vim.ClusterDasHostRecommendation;
         };
         DasVmPriority: {
            "disabled": string;
            "low": string;
            "medium": string;
            "high": string;
         };
         ClusterDasVmConfigInfo: {
            (options?: vsanhealthService.vim.ClusterDasVmConfigInfo): vsanhealthService.vim.ClusterDasVmConfigInfo;
         };
         ArrayOfClusterDasVmConfigInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterDasVmConfigInfo): vsanhealthService.vim.ArrayOfClusterDasVmConfigInfo;
         };
         ClusterDasVmSettingsRestartPriority: {
            "disabled": string;
            "lowest": string;
            "low": string;
            "medium": string;
            "high": string;
            "highest": string;
            "clusterRestartPriority": string;
         };
         ClusterDasVmSettingsIsolationResponse: {
            "none": string;
            "powerOff": string;
            "shutdown": string;
            "clusterIsolationResponse": string;
         };
         ClusterDasVmSettings: {
            (options?: vsanhealthService.vim.ClusterDasVmSettings): vsanhealthService.vim.ClusterDasVmSettings;
         };
         ClusterDependencyRuleInfo: {
            (options?: vsanhealthService.vim.ClusterDependencyRuleInfo): vsanhealthService.vim.ClusterDependencyRuleInfo;
         };
         ClusterDrsFaultsFaultsByVm: {
            (options?: vsanhealthService.vim.ClusterDrsFaultsFaultsByVm): vsanhealthService.vim.ClusterDrsFaultsFaultsByVm;
         };
         ArrayOfClusterDrsFaultsFaultsByVm: {
            (options?: vsanhealthService.vim.ArrayOfClusterDrsFaultsFaultsByVm): vsanhealthService.vim.ArrayOfClusterDrsFaultsFaultsByVm;
         };
         ClusterDrsFaultsFaultsByVirtualDisk: {
            (options?: vsanhealthService.vim.ClusterDrsFaultsFaultsByVirtualDisk): vsanhealthService.vim.ClusterDrsFaultsFaultsByVirtualDisk;
         };
         ClusterDrsFaults: {
            (options?: vsanhealthService.vim.ClusterDrsFaults): vsanhealthService.vim.ClusterDrsFaults;
         };
         ArrayOfClusterDrsFaults: {
            (options?: vsanhealthService.vim.ArrayOfClusterDrsFaults): vsanhealthService.vim.ArrayOfClusterDrsFaults;
         };
         ClusterDrsMigration: {
            (options?: vsanhealthService.vim.ClusterDrsMigration): vsanhealthService.vim.ClusterDrsMigration;
         };
         ArrayOfClusterDrsMigration: {
            (options?: vsanhealthService.vim.ArrayOfClusterDrsMigration): vsanhealthService.vim.ArrayOfClusterDrsMigration;
         };
         DrsRecommendationReasonCode: {
            "fairnessCpuAvg": string;
            "fairnessMemAvg": string;
            "jointAffin": string;
            "antiAffin": string;
            "hostMaint": string;
         };
         ClusterDrsRecommendation: {
            (options?: vsanhealthService.vim.ClusterDrsRecommendation): vsanhealthService.vim.ClusterDrsRecommendation;
         };
         ArrayOfClusterDrsRecommendation: {
            (options?: vsanhealthService.vim.ArrayOfClusterDrsRecommendation): vsanhealthService.vim.ArrayOfClusterDrsRecommendation;
         };
         ClusterEVCManagerEVCState: {
            (options?: vsanhealthService.vim.ClusterEVCManagerEVCState): vsanhealthService.vim.ClusterEVCManagerEVCState;
         };
         ClusterEVCManagerCheckResult: {
            (options?: vsanhealthService.vim.ClusterEVCManagerCheckResult): vsanhealthService.vim.ClusterEVCManagerCheckResult;
         };
         ArrayOfClusterEVCManagerCheckResult: {
            (options?: vsanhealthService.vim.ArrayOfClusterEVCManagerCheckResult): vsanhealthService.vim.ArrayOfClusterEVCManagerCheckResult;
         };
         ClusterEnterMaintenanceResult: {
            (options?: vsanhealthService.vim.ClusterEnterMaintenanceResult): vsanhealthService.vim.ClusterEnterMaintenanceResult;
         };
         ClusterFailoverHostAdmissionControlInfoHostStatus: {
            (options?: vsanhealthService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus): vsanhealthService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus;
         };
         ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus: {
            (options?: vsanhealthService.vim.ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus): vsanhealthService.vim.ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus;
         };
         ClusterFailoverHostAdmissionControlInfo: {
            (options?: vsanhealthService.vim.ClusterFailoverHostAdmissionControlInfo): vsanhealthService.vim.ClusterFailoverHostAdmissionControlInfo;
         };
         ClusterFailoverHostAdmissionControlPolicy: {
            (options?: vsanhealthService.vim.ClusterFailoverHostAdmissionControlPolicy): vsanhealthService.vim.ClusterFailoverHostAdmissionControlPolicy;
         };
         ClusterFailoverLevelAdmissionControlInfo: {
            (options?: vsanhealthService.vim.ClusterFailoverLevelAdmissionControlInfo): vsanhealthService.vim.ClusterFailoverLevelAdmissionControlInfo;
         };
         ClusterFailoverLevelAdmissionControlPolicy: {
            (options?: vsanhealthService.vim.ClusterFailoverLevelAdmissionControlPolicy): vsanhealthService.vim.ClusterFailoverLevelAdmissionControlPolicy;
         };
         ClusterFailoverResourcesAdmissionControlInfo: {
            (options?: vsanhealthService.vim.ClusterFailoverResourcesAdmissionControlInfo): vsanhealthService.vim.ClusterFailoverResourcesAdmissionControlInfo;
         };
         ClusterFailoverResourcesAdmissionControlPolicy: {
            (options?: vsanhealthService.vim.ClusterFailoverResourcesAdmissionControlPolicy): vsanhealthService.vim.ClusterFailoverResourcesAdmissionControlPolicy;
         };
         ClusterGroupInfo: {
            (options?: vsanhealthService.vim.ClusterGroupInfo): vsanhealthService.vim.ClusterGroupInfo;
         };
         ArrayOfClusterGroupInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterGroupInfo): vsanhealthService.vim.ArrayOfClusterGroupInfo;
         };
         ClusterHostGroup: {
            (options?: vsanhealthService.vim.ClusterHostGroup): vsanhealthService.vim.ClusterHostGroup;
         };
         ClusterHostInfraUpdateHaModeActionOperationType: {
            "enterQuarantine": string;
            "exitQuarantine": string;
            "enterMaintenance": string;
         };
         ClusterHostInfraUpdateHaModeAction: {
            (options?: vsanhealthService.vim.ClusterHostInfraUpdateHaModeAction): vsanhealthService.vim.ClusterHostInfraUpdateHaModeAction;
         };
         HostPowerOperationType: {
            "powerOn": string;
            "powerOff": string;
         };
         ClusterHostPowerAction: {
            (options?: vsanhealthService.vim.ClusterHostPowerAction): vsanhealthService.vim.ClusterHostPowerAction;
         };
         ClusterHostRecommendation: {
            (options?: vsanhealthService.vim.ClusterHostRecommendation): vsanhealthService.vim.ClusterHostRecommendation;
         };
         ArrayOfClusterHostRecommendation: {
            (options?: vsanhealthService.vim.ArrayOfClusterHostRecommendation): vsanhealthService.vim.ArrayOfClusterHostRecommendation;
         };
         ClusterInitialPlacementAction: {
            (options?: vsanhealthService.vim.ClusterInitialPlacementAction): vsanhealthService.vim.ClusterInitialPlacementAction;
         };
         ClusterMigrationAction: {
            (options?: vsanhealthService.vim.ClusterMigrationAction): vsanhealthService.vim.ClusterMigrationAction;
         };
         ClusterNotAttemptedVmInfo: {
            (options?: vsanhealthService.vim.ClusterNotAttemptedVmInfo): vsanhealthService.vim.ClusterNotAttemptedVmInfo;
         };
         ArrayOfClusterNotAttemptedVmInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterNotAttemptedVmInfo): vsanhealthService.vim.ArrayOfClusterNotAttemptedVmInfo;
         };
         ClusterOrchestrationInfo: {
            (options?: vsanhealthService.vim.ClusterOrchestrationInfo): vsanhealthService.vim.ClusterOrchestrationInfo;
         };
         PlacementAction: {
            (options?: vsanhealthService.vim.PlacementAction): vsanhealthService.vim.PlacementAction;
         };
         PlacementResult: {
            (options?: vsanhealthService.vim.PlacementResult): vsanhealthService.vim.PlacementResult;
         };
         PlacementSpecPlacementType: {
            "create": string;
            "reconfigure": string;
            "relocate": string;
            "clone": string;
         };
         PlacementSpec: {
            (options?: vsanhealthService.vim.PlacementSpec): vsanhealthService.vim.PlacementSpec;
         };
         ArrayOfPlacementSpec: {
            (options?: vsanhealthService.vim.ArrayOfPlacementSpec): vsanhealthService.vim.ArrayOfPlacementSpec;
         };
         ClusterPowerOnVmOption: {
            "OverrideAutomationLevel": string;
            "ReserveResources": string;
         };
         ClusterPowerOnVmResult: {
            (options?: vsanhealthService.vim.ClusterPowerOnVmResult): vsanhealthService.vim.ClusterPowerOnVmResult;
         };
         RecommendationType: {
            "V1": string;
         };
         RecommendationReasonCode: {
            "fairnessCpuAvg": string;
            "fairnessMemAvg": string;
            "jointAffin": string;
            "antiAffin": string;
            "hostMaint": string;
            "enterStandby": string;
            "reservationCpu": string;
            "reservationMem": string;
            "powerOnVm": string;
            "powerSaving": string;
            "increaseCapacity": string;
            "checkResource": string;
            "unreservedCapacity": string;
            "vmHostHardAffinity": string;
            "vmHostSoftAffinity": string;
            "balanceDatastoreSpaceUsage": string;
            "balanceDatastoreIOLoad": string;
            "balanceDatastoreIOPSReservation": string;
            "datastoreMaint": string;
            "virtualDiskJointAffin": string;
            "virtualDiskAntiAffin": string;
            "datastoreSpaceOutage": string;
            "storagePlacement": string;
            "iolbDisabledInternal": string;
            "xvmotionPlacement": string;
            "networkBandwidthReservation": string;
            "hostInDegradation": string;
            "hostExitDegradation": string;
            "maxVmsConstraint": string;
            "ftConstraints": string;
         };
         ClusterRecommendation: {
            (options?: vsanhealthService.vim.ClusterRecommendation): vsanhealthService.vim.ClusterRecommendation;
         };
         ArrayOfClusterRecommendation: {
            (options?: vsanhealthService.vim.ArrayOfClusterRecommendation): vsanhealthService.vim.ArrayOfClusterRecommendation;
         };
         ClusterResourceUsageSummary: {
            (options?: vsanhealthService.vim.ClusterResourceUsageSummary): vsanhealthService.vim.ClusterResourceUsageSummary;
         };
         ClusterRuleInfo: {
            (options?: vsanhealthService.vim.ClusterRuleInfo): vsanhealthService.vim.ClusterRuleInfo;
         };
         ArrayOfClusterRuleInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterRuleInfo): vsanhealthService.vim.ArrayOfClusterRuleInfo;
         };
         ClusterRuleSpec: {
            (options?: vsanhealthService.vim.ClusterRuleSpec): vsanhealthService.vim.ClusterRuleSpec;
         };
         ArrayOfClusterRuleSpec: {
            (options?: vsanhealthService.vim.ArrayOfClusterRuleSpec): vsanhealthService.vim.ArrayOfClusterRuleSpec;
         };
         ClusterSlotPolicy: {
            (options?: vsanhealthService.vim.ClusterSlotPolicy): vsanhealthService.vim.ClusterSlotPolicy;
         };
         ClusterFixedSizeSlotPolicy: {
            (options?: vsanhealthService.vim.ClusterFixedSizeSlotPolicy): vsanhealthService.vim.ClusterFixedSizeSlotPolicy;
         };
         ClusterUsageSummary: {
            (options?: vsanhealthService.vim.ClusterUsageSummary): vsanhealthService.vim.ClusterUsageSummary;
         };
         ClusterVmComponentProtectionSettingsStorageVmReaction: {
            "disabled": string;
            "warning": string;
            "restartConservative": string;
            "restartAggressive": string;
            "clusterDefault": string;
         };
         ClusterVmComponentProtectionSettingsVmReactionOnAPDCleared: {
            "none": string;
            "reset": string;
            "useClusterDefault": string;
         };
         ClusterVmComponentProtectionSettings: {
            (options?: vsanhealthService.vim.ClusterVmComponentProtectionSettings): vsanhealthService.vim.ClusterVmComponentProtectionSettings;
         };
         ClusterVmGroup: {
            (options?: vsanhealthService.vim.ClusterVmGroup): vsanhealthService.vim.ClusterVmGroup;
         };
         ClusterVmHostRuleInfo: {
            (options?: vsanhealthService.vim.ClusterVmHostRuleInfo): vsanhealthService.vim.ClusterVmHostRuleInfo;
         };
         ClusterVmOrchestrationInfo: {
            (options?: vsanhealthService.vim.ClusterVmOrchestrationInfo): vsanhealthService.vim.ClusterVmOrchestrationInfo;
         };
         ArrayOfClusterVmOrchestrationInfo: {
            (options?: vsanhealthService.vim.ArrayOfClusterVmOrchestrationInfo): vsanhealthService.vim.ArrayOfClusterVmOrchestrationInfo;
         };
         ClusterVmReadinessReadyCondition: {
            "none": string;
            "poweredOn": string;
            "guestHbStatusGreen": string;
            "appHbStatusGreen": string;
            "useClusterDefault": string;
         };
         ClusterVmReadiness: {
            (options?: vsanhealthService.vim.ClusterVmReadiness): vsanhealthService.vim.ClusterVmReadiness;
         };
         ClusterVmToolsMonitoringSettings: {
            (options?: vsanhealthService.vim.ClusterVmToolsMonitoringSettings): vsanhealthService.vim.ClusterVmToolsMonitoringSettings;
         };
         DVPortConfigSpec: {
            (options?: vsanhealthService.vim.DVPortConfigSpec): vsanhealthService.vim.DVPortConfigSpec;
         };
         ArrayOfDVPortConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfDVPortConfigSpec): vsanhealthService.vim.ArrayOfDVPortConfigSpec;
         };
         DVPortConfigInfo: {
            (options?: vsanhealthService.vim.DVPortConfigInfo): vsanhealthService.vim.DVPortConfigInfo;
         };
         DVSTrafficShapingPolicy: {
            (options?: vsanhealthService.vim.DVSTrafficShapingPolicy): vsanhealthService.vim.DVSTrafficShapingPolicy;
         };
         DVSHostLocalPortInfo: {
            (options?: vsanhealthService.vim.DVSHostLocalPortInfo): vsanhealthService.vim.DVSHostLocalPortInfo;
         };
         DVSVendorSpecificConfig: {
            (options?: vsanhealthService.vim.DVSVendorSpecificConfig): vsanhealthService.vim.DVSVendorSpecificConfig;
         };
         DvsFilterParameter: {
            (options?: vsanhealthService.vim.DvsFilterParameter): vsanhealthService.vim.DvsFilterParameter;
         };
         DvsFilterOnFailure: {
            "failOpen": string;
            "failClosed": string;
         };
         DvsFilterConfig: {
            (options?: vsanhealthService.vim.DvsFilterConfig): vsanhealthService.vim.DvsFilterConfig;
         };
         ArrayOfDvsFilterConfig: {
            (options?: vsanhealthService.vim.ArrayOfDvsFilterConfig): vsanhealthService.vim.ArrayOfDvsFilterConfig;
         };
         DvsTrafficFilterConfig: {
            (options?: vsanhealthService.vim.DvsTrafficFilterConfig): vsanhealthService.vim.DvsTrafficFilterConfig;
         };
         DvsFilterConfigSpec: {
            (options?: vsanhealthService.vim.DvsFilterConfigSpec): vsanhealthService.vim.DvsFilterConfigSpec;
         };
         DvsTrafficFilterConfigSpec: {
            (options?: vsanhealthService.vim.DvsTrafficFilterConfigSpec): vsanhealthService.vim.DvsTrafficFilterConfigSpec;
         };
         DvsFilterPolicy: {
            (options?: vsanhealthService.vim.DvsFilterPolicy): vsanhealthService.vim.DvsFilterPolicy;
         };
         DVPortSetting: {
            (options?: vsanhealthService.vim.DVPortSetting): vsanhealthService.vim.DVPortSetting;
         };
         DVPortStatusVmDirectPathGen2InactiveReasonNetwork: {
            "portNptIncompatibleDvs": string;
            "portNptNoCompatibleNics": string;
            "portNptNoVirtualFunctionsAvailable": string;
            "portNptDisabledForPort": string;
         };
         DVPortStatusVmDirectPathGen2InactiveReasonOther: {
            "portNptIncompatibleHost": string;
            "portNptIncompatibleConnectee": string;
         };
         DVPortStatus: {
            (options?: vsanhealthService.vim.DVPortStatus): vsanhealthService.vim.DVPortStatus;
         };
         DVPortState: {
            (options?: vsanhealthService.vim.DVPortState): vsanhealthService.vim.DVPortState;
         };
         DistributedVirtualPort: {
            (options?: vsanhealthService.vim.DistributedVirtualPort): vsanhealthService.vim.DistributedVirtualPort;
         };
         ArrayOfDistributedVirtualPort: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualPort): vsanhealthService.vim.ArrayOfDistributedVirtualPort;
         };
         DistributedVirtualPortgroupPortgroupType: {
            "earlyBinding": string;
            "lateBinding": string;
            "ephemeral": string;
         };
         DVPortgroupPolicy: {
            (options?: vsanhealthService.vim.DVPortgroupPolicy): vsanhealthService.vim.DVPortgroupPolicy;
         };
         DistributedVirtualPortgroupMetaTagName: {
            "dvsName": string;
            "portgroupName": string;
            "portIndex": string;
         };
         DVPortgroupConfigSpec: {
            (options?: vsanhealthService.vim.DVPortgroupConfigSpec): vsanhealthService.vim.DVPortgroupConfigSpec;
         };
         ArrayOfDVPortgroupConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfDVPortgroupConfigSpec): vsanhealthService.vim.ArrayOfDVPortgroupConfigSpec;
         };
         DVPortgroupConfigInfo: {
            (options?: vsanhealthService.vim.DVPortgroupConfigInfo): vsanhealthService.vim.DVPortgroupConfigInfo;
         };
         DistributedVirtualPortgroupInfo: {
            (options?: vsanhealthService.vim.DistributedVirtualPortgroupInfo): vsanhealthService.vim.DistributedVirtualPortgroupInfo;
         };
         ArrayOfDistributedVirtualPortgroupInfo: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualPortgroupInfo): vsanhealthService.vim.ArrayOfDistributedVirtualPortgroupInfo;
         };
         DVPortgroupSelection: {
            (options?: vsanhealthService.vim.DVPortgroupSelection): vsanhealthService.vim.DVPortgroupSelection;
         };
         DistributedVirtualSwitchInfo: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchInfo): vsanhealthService.vim.DistributedVirtualSwitchInfo;
         };
         ArrayOfDistributedVirtualSwitchInfo: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchInfo): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchInfo;
         };
         DVSManagerDvsConfigTarget: {
            (options?: vsanhealthService.vim.DVSManagerDvsConfigTarget): vsanhealthService.vim.DVSManagerDvsConfigTarget;
         };
         DistributedVirtualSwitchManagerCompatibilityResult: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerCompatibilityResult): vsanhealthService.vim.DistributedVirtualSwitchManagerCompatibilityResult;
         };
         ArrayOfDistributedVirtualSwitchManagerCompatibilityResult: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchManagerCompatibilityResult): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchManagerCompatibilityResult;
         };
         DistributedVirtualSwitchManagerHostContainer: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainer): vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainer;
         };
         DistributedVirtualSwitchManagerHostDvsFilterSpec: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec): vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec;
         };
         ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec;
         };
         DistributedVirtualSwitchManagerHostArrayFilter: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerHostArrayFilter): vsanhealthService.vim.DistributedVirtualSwitchManagerHostArrayFilter;
         };
         DistributedVirtualSwitchManagerHostContainerFilter: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainerFilter): vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainerFilter;
         };
         DistributedVirtualSwitchManagerHostDvsMembershipFilter: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsMembershipFilter): vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsMembershipFilter;
         };
         DistributedVirtualSwitchManagerDvsProductSpec: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerDvsProductSpec): vsanhealthService.vim.DistributedVirtualSwitchManagerDvsProductSpec;
         };
         DistributedVirtualSwitchManagerImportResult: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchManagerImportResult): vsanhealthService.vim.DistributedVirtualSwitchManagerImportResult;
         };
         DVSSelection: {
            (options?: vsanhealthService.vim.DVSSelection): vsanhealthService.vim.DVSSelection;
         };
         EntityBackupConfig: {
            (options?: vsanhealthService.vim.EntityBackupConfig): vsanhealthService.vim.EntityBackupConfig;
         };
         ArrayOfEntityBackupConfig: {
            (options?: vsanhealthService.vim.ArrayOfEntityBackupConfig): vsanhealthService.vim.ArrayOfEntityBackupConfig;
         };
         EntityType: {
            "distributedVirtualSwitch": string;
            "distributedVirtualPortgroup": string;
         };
         EntityImportType: {
            "createEntityWithNewIdentifier": string;
            "createEntityWithOriginalIdentifier": string;
            "applyToEntitySpecified": string;
         };
         EntityBackup: {
            (options?: vsanhealthService.vim.EntityBackup): vsanhealthService.vim.EntityBackup;
         };
         DistributedVirtualSwitchHostMemberHostComponentState: {
            "up": string;
            "pending": string;
            "outOfSync": string;
            "warning": string;
            "disconnected": string;
            "down": string;
         };
         DistributedVirtualSwitchHostMemberConfigSpec: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigSpec): vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigSpec;
         };
         ArrayOfDistributedVirtualSwitchHostMemberConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostMemberConfigSpec): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostMemberConfigSpec;
         };
         DistributedVirtualSwitchHostMemberPnicSpec: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberPnicSpec): vsanhealthService.vim.DistributedVirtualSwitchHostMemberPnicSpec;
         };
         ArrayOfDistributedVirtualSwitchHostMemberPnicSpec: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostMemberPnicSpec): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostMemberPnicSpec;
         };
         DistributedVirtualSwitchHostMemberBacking: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberBacking): vsanhealthService.vim.DistributedVirtualSwitchHostMemberBacking;
         };
         DistributedVirtualSwitchHostMemberPnicBacking: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberPnicBacking): vsanhealthService.vim.DistributedVirtualSwitchHostMemberPnicBacking;
         };
         DistributedVirtualSwitchHostMemberRuntimeState: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberRuntimeState): vsanhealthService.vim.DistributedVirtualSwitchHostMemberRuntimeState;
         };
         DistributedVirtualSwitchHostMemberConfigInfo: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigInfo): vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigInfo;
         };
         HostMemberRuntimeInfo: {
            (options?: vsanhealthService.vim.HostMemberRuntimeInfo): vsanhealthService.vim.HostMemberRuntimeInfo;
         };
         ArrayOfHostMemberRuntimeInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostMemberRuntimeInfo): vsanhealthService.vim.ArrayOfHostMemberRuntimeInfo;
         };
         HostMemberHealthCheckResult: {
            (options?: vsanhealthService.vim.HostMemberHealthCheckResult): vsanhealthService.vim.HostMemberHealthCheckResult;
         };
         ArrayOfHostMemberHealthCheckResult: {
            (options?: vsanhealthService.vim.ArrayOfHostMemberHealthCheckResult): vsanhealthService.vim.ArrayOfHostMemberHealthCheckResult;
         };
         HostMemberUplinkHealthCheckResult: {
            (options?: vsanhealthService.vim.HostMemberUplinkHealthCheckResult): vsanhealthService.vim.HostMemberUplinkHealthCheckResult;
         };
         DistributedVirtualSwitchHostMember: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostMember): vsanhealthService.vim.DistributedVirtualSwitchHostMember;
         };
         ArrayOfDistributedVirtualSwitchHostMember: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostMember): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostMember;
         };
         DistributedVirtualSwitchHostProductSpec: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchHostProductSpec): vsanhealthService.vim.DistributedVirtualSwitchHostProductSpec;
         };
         ArrayOfDistributedVirtualSwitchHostProductSpec: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostProductSpec): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchHostProductSpec;
         };
         DistributedVirtualSwitchKeyedOpaqueBlob: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob): vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob;
         };
         ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob;
         };
         DVSNetworkResourcePoolAllocationInfo: {
            (options?: vsanhealthService.vim.DVSNetworkResourcePoolAllocationInfo): vsanhealthService.vim.DVSNetworkResourcePoolAllocationInfo;
         };
         DVSNetworkResourcePoolConfigSpec: {
            (options?: vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec): vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec;
         };
         ArrayOfDVSNetworkResourcePoolConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfDVSNetworkResourcePoolConfigSpec): vsanhealthService.vim.ArrayOfDVSNetworkResourcePoolConfigSpec;
         };
         DVSNetworkResourcePool: {
            (options?: vsanhealthService.vim.DVSNetworkResourcePool): vsanhealthService.vim.DVSNetworkResourcePool;
         };
         ArrayOfDVSNetworkResourcePool: {
            (options?: vsanhealthService.vim.ArrayOfDVSNetworkResourcePool): vsanhealthService.vim.ArrayOfDVSNetworkResourcePool;
         };
         DistributedVirtualSwitchPortConnecteeConnecteeType: {
            "pnic": string;
            "vmVnic": string;
            "hostConsoleVnic": string;
            "hostVmkVnic": string;
         };
         DistributedVirtualSwitchPortConnectee: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchPortConnectee): vsanhealthService.vim.DistributedVirtualSwitchPortConnectee;
         };
         DistributedVirtualSwitchPortConnection: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchPortConnection): vsanhealthService.vim.DistributedVirtualSwitchPortConnection;
         };
         DistributedVirtualSwitchPortCriteria: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchPortCriteria): vsanhealthService.vim.DistributedVirtualSwitchPortCriteria;
         };
         DistributedVirtualSwitchPortStatistics: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchPortStatistics): vsanhealthService.vim.DistributedVirtualSwitchPortStatistics;
         };
         DistributedVirtualSwitchProductSpec: {
            (options?: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
         };
         ArrayOfDistributedVirtualSwitchProductSpec: {
            (options?: vsanhealthService.vim.ArrayOfDistributedVirtualSwitchProductSpec): vsanhealthService.vim.ArrayOfDistributedVirtualSwitchProductSpec;
         };
         DvsNetworkRuleQualifier: {
            (options?: vsanhealthService.vim.DvsNetworkRuleQualifier): vsanhealthService.vim.DvsNetworkRuleQualifier;
         };
         ArrayOfDvsNetworkRuleQualifier: {
            (options?: vsanhealthService.vim.ArrayOfDvsNetworkRuleQualifier): vsanhealthService.vim.ArrayOfDvsNetworkRuleQualifier;
         };
         DvsNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsNetworkRuleAction): vsanhealthService.vim.DvsNetworkRuleAction;
         };
         DvsNetworkRuleDirectionType: {
            "incomingPackets": string;
            "outgoingPackets": string;
            "both": string;
         };
         DvsIpNetworkRuleQualifier: {
            (options?: vsanhealthService.vim.DvsIpNetworkRuleQualifier): vsanhealthService.vim.DvsIpNetworkRuleQualifier;
         };
         DvsIpPort: {
            (options?: vsanhealthService.vim.DvsIpPort): vsanhealthService.vim.DvsIpPort;
         };
         DvsSingleIpPort: {
            (options?: vsanhealthService.vim.DvsSingleIpPort): vsanhealthService.vim.DvsSingleIpPort;
         };
         DvsIpPortRange: {
            (options?: vsanhealthService.vim.DvsIpPortRange): vsanhealthService.vim.DvsIpPortRange;
         };
         DvsMacNetworkRuleQualifier: {
            (options?: vsanhealthService.vim.DvsMacNetworkRuleQualifier): vsanhealthService.vim.DvsMacNetworkRuleQualifier;
         };
         DvsSystemTrafficNetworkRuleQualifier: {
            (options?: vsanhealthService.vim.DvsSystemTrafficNetworkRuleQualifier): vsanhealthService.vim.DvsSystemTrafficNetworkRuleQualifier;
         };
         DvsDropNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsDropNetworkRuleAction): vsanhealthService.vim.DvsDropNetworkRuleAction;
         };
         DvsAcceptNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsAcceptNetworkRuleAction): vsanhealthService.vim.DvsAcceptNetworkRuleAction;
         };
         DvsUpdateTagNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsUpdateTagNetworkRuleAction): vsanhealthService.vim.DvsUpdateTagNetworkRuleAction;
         };
         DvsRateLimitNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsRateLimitNetworkRuleAction): vsanhealthService.vim.DvsRateLimitNetworkRuleAction;
         };
         DvsLogNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsLogNetworkRuleAction): vsanhealthService.vim.DvsLogNetworkRuleAction;
         };
         DvsGreEncapNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsGreEncapNetworkRuleAction): vsanhealthService.vim.DvsGreEncapNetworkRuleAction;
         };
         DvsMacRewriteNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsMacRewriteNetworkRuleAction): vsanhealthService.vim.DvsMacRewriteNetworkRuleAction;
         };
         DvsPuntNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsPuntNetworkRuleAction): vsanhealthService.vim.DvsPuntNetworkRuleAction;
         };
         DvsCopyNetworkRuleAction: {
            (options?: vsanhealthService.vim.DvsCopyNetworkRuleAction): vsanhealthService.vim.DvsCopyNetworkRuleAction;
         };
         DvsTrafficRule: {
            (options?: vsanhealthService.vim.DvsTrafficRule): vsanhealthService.vim.DvsTrafficRule;
         };
         ArrayOfDvsTrafficRule: {
            (options?: vsanhealthService.vim.ArrayOfDvsTrafficRule): vsanhealthService.vim.ArrayOfDvsTrafficRule;
         };
         DvsTrafficRuleset: {
            (options?: vsanhealthService.vim.DvsTrafficRuleset): vsanhealthService.vim.DvsTrafficRuleset;
         };
         DvsVmVnicResourceAllocation: {
            (options?: vsanhealthService.vim.DvsVmVnicResourceAllocation): vsanhealthService.vim.DvsVmVnicResourceAllocation;
         };
         DvsVmVnicResourcePoolConfigSpec: {
            (options?: vsanhealthService.vim.DvsVmVnicResourcePoolConfigSpec): vsanhealthService.vim.DvsVmVnicResourcePoolConfigSpec;
         };
         ArrayOfDvsVmVnicResourcePoolConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfDvsVmVnicResourcePoolConfigSpec): vsanhealthService.vim.ArrayOfDvsVmVnicResourcePoolConfigSpec;
         };
         DvsVnicAllocatedResource: {
            (options?: vsanhealthService.vim.DvsVnicAllocatedResource): vsanhealthService.vim.DvsVnicAllocatedResource;
         };
         ArrayOfDvsVnicAllocatedResource: {
            (options?: vsanhealthService.vim.ArrayOfDvsVnicAllocatedResource): vsanhealthService.vim.ArrayOfDvsVnicAllocatedResource;
         };
         DvsVmVnicNetworkResourcePoolRuntimeInfo: {
            (options?: vsanhealthService.vim.DvsVmVnicNetworkResourcePoolRuntimeInfo): vsanhealthService.vim.DvsVmVnicNetworkResourcePoolRuntimeInfo;
         };
         ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo: {
            (options?: vsanhealthService.vim.ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo): vsanhealthService.vim.ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo;
         };
         DVSVmVnicNetworkResourcePool: {
            (options?: vsanhealthService.vim.DVSVmVnicNetworkResourcePool): vsanhealthService.vim.DVSVmVnicNetworkResourcePool;
         };
         ArrayOfDVSVmVnicNetworkResourcePool: {
            (options?: vsanhealthService.vim.ArrayOfDVSVmVnicNetworkResourcePool): vsanhealthService.vim.ArrayOfDVSVmVnicNetworkResourcePool;
         };
         VMwareDVSFeatureCapability: {
            (options?: vsanhealthService.vim.VMwareDVSFeatureCapability): vsanhealthService.vim.VMwareDVSFeatureCapability;
         };
         VMwareDvsIpfixCapability: {
            (options?: vsanhealthService.vim.VMwareDvsIpfixCapability): vsanhealthService.vim.VMwareDvsIpfixCapability;
         };
         VMwareDvsLacpCapability: {
            (options?: vsanhealthService.vim.VMwareDvsLacpCapability): vsanhealthService.vim.VMwareDvsLacpCapability;
         };
         VMwareDVSHealthCheckCapability: {
            (options?: vsanhealthService.vim.VMwareDVSHealthCheckCapability): vsanhealthService.vim.VMwareDVSHealthCheckCapability;
         };
         VMwareDVSVspanCapability: {
            (options?: vsanhealthService.vim.VMwareDVSVspanCapability): vsanhealthService.vim.VMwareDVSVspanCapability;
         };
         VMwareVspanPort: {
            (options?: vsanhealthService.vim.VMwareVspanPort): vsanhealthService.vim.VMwareVspanPort;
         };
         VMwareVspanSession: {
            (options?: vsanhealthService.vim.VMwareVspanSession): vsanhealthService.vim.VMwareVspanSession;
         };
         ArrayOfVMwareVspanSession: {
            (options?: vsanhealthService.vim.ArrayOfVMwareVspanSession): vsanhealthService.vim.ArrayOfVMwareVspanSession;
         };
         VMwareIpfixConfig: {
            (options?: vsanhealthService.vim.VMwareIpfixConfig): vsanhealthService.vim.VMwareIpfixConfig;
         };
         VMwareDVSConfigInfo: {
            (options?: vsanhealthService.vim.VMwareDVSConfigInfo): vsanhealthService.vim.VMwareDVSConfigInfo;
         };
         VMwareDVSConfigSpec: {
            (options?: vsanhealthService.vim.VMwareDVSConfigSpec): vsanhealthService.vim.VMwareDVSConfigSpec;
         };
         VMwareUplinkPortOrderPolicy: {
            (options?: vsanhealthService.vim.VMwareUplinkPortOrderPolicy): vsanhealthService.vim.VMwareUplinkPortOrderPolicy;
         };
         DVSFailureCriteria: {
            (options?: vsanhealthService.vim.DVSFailureCriteria): vsanhealthService.vim.DVSFailureCriteria;
         };
         VmwareUplinkPortTeamingPolicy: {
            (options?: vsanhealthService.vim.VmwareUplinkPortTeamingPolicy): vsanhealthService.vim.VmwareUplinkPortTeamingPolicy;
         };
         VmwareDistributedVirtualSwitchVlanSpec: {
            (options?: vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanSpec): vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanSpec;
         };
         VmwareDistributedVirtualSwitchPvlanSpec: {
            (options?: vsanhealthService.vim.VmwareDistributedVirtualSwitchPvlanSpec): vsanhealthService.vim.VmwareDistributedVirtualSwitchPvlanSpec;
         };
         VmwareDistributedVirtualSwitchVlanIdSpec: {
            (options?: vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanIdSpec): vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanIdSpec;
         };
         VmwareDistributedVirtualSwitchTrunkVlanSpec: {
            (options?: vsanhealthService.vim.VmwareDistributedVirtualSwitchTrunkVlanSpec): vsanhealthService.vim.VmwareDistributedVirtualSwitchTrunkVlanSpec;
         };
         DVSSecurityPolicy: {
            (options?: vsanhealthService.vim.DVSSecurityPolicy): vsanhealthService.vim.DVSSecurityPolicy;
         };
         VMwareDVSPortSetting: {
            (options?: vsanhealthService.vim.VMwareDVSPortSetting): vsanhealthService.vim.VMwareDVSPortSetting;
         };
         VMwareDVSPortgroupPolicy: {
            (options?: vsanhealthService.vim.VMwareDVSPortgroupPolicy): vsanhealthService.vim.VMwareDVSPortgroupPolicy;
         };
         VmwareDistributedVirtualSwitchPvlanPortType: {
            "promiscuous": string;
            "isolated": string;
            "community": string;
         };
         VMwareDVSPvlanConfigSpec: {
            (options?: vsanhealthService.vim.VMwareDVSPvlanConfigSpec): vsanhealthService.vim.VMwareDVSPvlanConfigSpec;
         };
         ArrayOfVMwareDVSPvlanConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfVMwareDVSPvlanConfigSpec): vsanhealthService.vim.ArrayOfVMwareDVSPvlanConfigSpec;
         };
         VMwareDVSPvlanMapEntry: {
            (options?: vsanhealthService.vim.VMwareDVSPvlanMapEntry): vsanhealthService.vim.VMwareDVSPvlanMapEntry;
         };
         ArrayOfVMwareDVSPvlanMapEntry: {
            (options?: vsanhealthService.vim.ArrayOfVMwareDVSPvlanMapEntry): vsanhealthService.vim.ArrayOfVMwareDVSPvlanMapEntry;
         };
         VMwareDVSVspanConfigSpec: {
            (options?: vsanhealthService.vim.VMwareDVSVspanConfigSpec): vsanhealthService.vim.VMwareDVSVspanConfigSpec;
         };
         ArrayOfVMwareDVSVspanConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfVMwareDVSVspanConfigSpec): vsanhealthService.vim.ArrayOfVMwareDVSVspanConfigSpec;
         };
         VMwareDVSVspanSessionEncapType: {
            "gre": string;
            "erspan2": string;
            "erspan3": string;
         };
         VMwareDVSVspanSessionType: {
            "mixedDestMirror": string;
            "dvPortMirror": string;
            "remoteMirrorSource": string;
            "remoteMirrorDest": string;
            "encapsulatedRemoteMirrorSource": string;
         };
         VMwareDVSHealthCheckConfig: {
            (options?: vsanhealthService.vim.VMwareDVSHealthCheckConfig): vsanhealthService.vim.VMwareDVSHealthCheckConfig;
         };
         VMwareDVSVlanMtuHealthCheckConfig: {
            (options?: vsanhealthService.vim.VMwareDVSVlanMtuHealthCheckConfig): vsanhealthService.vim.VMwareDVSVlanMtuHealthCheckConfig;
         };
         VMwareDVSTeamingHealthCheckConfig: {
            (options?: vsanhealthService.vim.VMwareDVSTeamingHealthCheckConfig): vsanhealthService.vim.VMwareDVSTeamingHealthCheckConfig;
         };
         VMwareDVSVlanHealthCheckResult: {
            (options?: vsanhealthService.vim.VMwareDVSVlanHealthCheckResult): vsanhealthService.vim.VMwareDVSVlanHealthCheckResult;
         };
         VMwareDVSMtuHealthCheckResult: {
            (options?: vsanhealthService.vim.VMwareDVSMtuHealthCheckResult): vsanhealthService.vim.VMwareDVSMtuHealthCheckResult;
         };
         VMwareDVSTeamingMatchStatus: {
            "iphashMatch": string;
            "nonIphashMatch": string;
            "iphashMismatch": string;
            "nonIphashMismatch": string;
         };
         VMwareDVSTeamingHealthCheckResult: {
            (options?: vsanhealthService.vim.VMwareDVSTeamingHealthCheckResult): vsanhealthService.vim.VMwareDVSTeamingHealthCheckResult;
         };
         VMwareUplinkLacpPolicy: {
            (options?: vsanhealthService.vim.VMwareUplinkLacpPolicy): vsanhealthService.vim.VMwareUplinkLacpPolicy;
         };
         VMwareDvsLacpGroupConfig: {
            (options?: vsanhealthService.vim.VMwareDvsLacpGroupConfig): vsanhealthService.vim.VMwareDvsLacpGroupConfig;
         };
         ArrayOfVMwareDvsLacpGroupConfig: {
            (options?: vsanhealthService.vim.ArrayOfVMwareDvsLacpGroupConfig): vsanhealthService.vim.ArrayOfVMwareDvsLacpGroupConfig;
         };
         VMwareDvsLagVlanConfig: {
            (options?: vsanhealthService.vim.VMwareDvsLagVlanConfig): vsanhealthService.vim.VMwareDvsLagVlanConfig;
         };
         VMwareDvsLagIpfixConfig: {
            (options?: vsanhealthService.vim.VMwareDvsLagIpfixConfig): vsanhealthService.vim.VMwareDvsLagIpfixConfig;
         };
         VMwareUplinkLacpMode: {
            "active": string;
            "passive": string;
         };
         VMwareDvsLacpGroupSpec: {
            (options?: vsanhealthService.vim.VMwareDvsLacpGroupSpec): vsanhealthService.vim.VMwareDvsLacpGroupSpec;
         };
         ArrayOfVMwareDvsLacpGroupSpec: {
            (options?: vsanhealthService.vim.ArrayOfVMwareDvsLacpGroupSpec): vsanhealthService.vim.ArrayOfVMwareDvsLacpGroupSpec;
         };
         VMwareDvsLacpLoadBalanceAlgorithm: {
            "srcMac": string;
            "destMac": string;
            "srcDestMac": string;
            "destIpVlan": string;
            "srcIpVlan": string;
            "srcDestIpVlan": string;
            "destTcpUdpPort": string;
            "srcTcpUdpPort": string;
            "srcDestTcpUdpPort": string;
            "destIpTcpUdpPort": string;
            "srcIpTcpUdpPort": string;
            "srcDestIpTcpUdpPort": string;
            "destIpTcpUdpPortVlan": string;
            "srcIpTcpUdpPortVlan": string;
            "srcDestIpTcpUdpPortVlan": string;
            "destIp": string;
            "srcIp": string;
            "srcDestIp": string;
            "vlan": string;
            "srcPortId": string;
         };
         VMwareDvsLacpApiVersion: {
            "singleLag": string;
            "multipleLag": string;
         };
         VMwareDvsMulticastFilteringMode: {
            "legacyFiltering": string;
            "snooping": string;
         };
         CryptoKeyId: {
            (options?: vsanhealthService.vim.CryptoKeyId): vsanhealthService.vim.CryptoKeyId;
         };
         ArrayOfCryptoKeyId: {
            (options?: vsanhealthService.vim.ArrayOfCryptoKeyId): vsanhealthService.vim.ArrayOfCryptoKeyId;
         };
         CryptoKeyPlain: {
            (options?: vsanhealthService.vim.CryptoKeyPlain): vsanhealthService.vim.CryptoKeyPlain;
         };
         ArrayOfCryptoKeyPlain: {
            (options?: vsanhealthService.vim.ArrayOfCryptoKeyPlain): vsanhealthService.vim.ArrayOfCryptoKeyPlain;
         };
         CryptoKeyResult: {
            (options?: vsanhealthService.vim.CryptoKeyResult): vsanhealthService.vim.CryptoKeyResult;
         };
         ArrayOfCryptoKeyResult: {
            (options?: vsanhealthService.vim.ArrayOfCryptoKeyResult): vsanhealthService.vim.ArrayOfCryptoKeyResult;
         };
         CryptoManagerKmipCertificateInfo: {
            (options?: vsanhealthService.vim.CryptoManagerKmipCertificateInfo): vsanhealthService.vim.CryptoManagerKmipCertificateInfo;
         };
         CryptoManagerKmipServerStatus: {
            (options?: vsanhealthService.vim.CryptoManagerKmipServerStatus): vsanhealthService.vim.CryptoManagerKmipServerStatus;
         };
         ArrayOfCryptoManagerKmipServerStatus: {
            (options?: vsanhealthService.vim.ArrayOfCryptoManagerKmipServerStatus): vsanhealthService.vim.ArrayOfCryptoManagerKmipServerStatus;
         };
         CryptoManagerKmipClusterStatus: {
            (options?: vsanhealthService.vim.CryptoManagerKmipClusterStatus): vsanhealthService.vim.CryptoManagerKmipClusterStatus;
         };
         ArrayOfCryptoManagerKmipClusterStatus: {
            (options?: vsanhealthService.vim.ArrayOfCryptoManagerKmipClusterStatus): vsanhealthService.vim.ArrayOfCryptoManagerKmipClusterStatus;
         };
         CryptoManagerKmipServerCertInfo: {
            (options?: vsanhealthService.vim.CryptoManagerKmipServerCertInfo): vsanhealthService.vim.CryptoManagerKmipServerCertInfo;
         };
         CryptoSpec: {
            (options?: vsanhealthService.vim.CryptoSpec): vsanhealthService.vim.CryptoSpec;
         };
         CryptoSpecDecrypt: {
            (options?: vsanhealthService.vim.CryptoSpecDecrypt): vsanhealthService.vim.CryptoSpecDecrypt;
         };
         CryptoSpecDeepRecrypt: {
            (options?: vsanhealthService.vim.CryptoSpecDeepRecrypt): vsanhealthService.vim.CryptoSpecDeepRecrypt;
         };
         CryptoSpecEncrypt: {
            (options?: vsanhealthService.vim.CryptoSpecEncrypt): vsanhealthService.vim.CryptoSpecEncrypt;
         };
         CryptoSpecNoOp: {
            (options?: vsanhealthService.vim.CryptoSpecNoOp): vsanhealthService.vim.CryptoSpecNoOp;
         };
         CryptoSpecRegister: {
            (options?: vsanhealthService.vim.CryptoSpecRegister): vsanhealthService.vim.CryptoSpecRegister;
         };
         CryptoSpecShallowRecrypt: {
            (options?: vsanhealthService.vim.CryptoSpecShallowRecrypt): vsanhealthService.vim.CryptoSpecShallowRecrypt;
         };
         KeyProviderId: {
            (options?: vsanhealthService.vim.KeyProviderId): vsanhealthService.vim.KeyProviderId;
         };
         KmipClusterInfo: {
            (options?: vsanhealthService.vim.KmipClusterInfo): vsanhealthService.vim.KmipClusterInfo;
         };
         ArrayOfKmipClusterInfo: {
            (options?: vsanhealthService.vim.ArrayOfKmipClusterInfo): vsanhealthService.vim.ArrayOfKmipClusterInfo;
         };
         KmipServerInfo: {
            (options?: vsanhealthService.vim.KmipServerInfo): vsanhealthService.vim.KmipServerInfo;
         };
         ArrayOfKmipServerInfo: {
            (options?: vsanhealthService.vim.ArrayOfKmipServerInfo): vsanhealthService.vim.ArrayOfKmipServerInfo;
         };
         KmipServerSpec: {
            (options?: vsanhealthService.vim.KmipServerSpec): vsanhealthService.vim.KmipServerSpec;
         };
         KmipServerStatus: {
            (options?: vsanhealthService.vim.KmipServerStatus): vsanhealthService.vim.KmipServerStatus;
         };
         EventEventSeverity: {
            "error": string;
            "warning": string;
            "info": string;
            "user": string;
         };
         Event: {
            (options?: vsanhealthService.vim.Event): vsanhealthService.vim.Event;
         };
         ArrayOfEvent: {
            (options?: vsanhealthService.vim.ArrayOfEvent): vsanhealthService.vim.ArrayOfEvent;
         };
         GeneralEvent: {
            (options?: vsanhealthService.vim.GeneralEvent): vsanhealthService.vim.GeneralEvent;
         };
         GeneralHostInfoEvent: {
            (options?: vsanhealthService.vim.GeneralHostInfoEvent): vsanhealthService.vim.GeneralHostInfoEvent;
         };
         GeneralHostWarningEvent: {
            (options?: vsanhealthService.vim.GeneralHostWarningEvent): vsanhealthService.vim.GeneralHostWarningEvent;
         };
         GeneralHostErrorEvent: {
            (options?: vsanhealthService.vim.GeneralHostErrorEvent): vsanhealthService.vim.GeneralHostErrorEvent;
         };
         GeneralVmInfoEvent: {
            (options?: vsanhealthService.vim.GeneralVmInfoEvent): vsanhealthService.vim.GeneralVmInfoEvent;
         };
         GeneralVmWarningEvent: {
            (options?: vsanhealthService.vim.GeneralVmWarningEvent): vsanhealthService.vim.GeneralVmWarningEvent;
         };
         GeneralVmErrorEvent: {
            (options?: vsanhealthService.vim.GeneralVmErrorEvent): vsanhealthService.vim.GeneralVmErrorEvent;
         };
         GeneralUserEvent: {
            (options?: vsanhealthService.vim.GeneralUserEvent): vsanhealthService.vim.GeneralUserEvent;
         };
         ExtendedEventPair: {
            (options?: vsanhealthService.vim.ExtendedEventPair): vsanhealthService.vim.ExtendedEventPair;
         };
         ArrayOfExtendedEventPair: {
            (options?: vsanhealthService.vim.ArrayOfExtendedEventPair): vsanhealthService.vim.ArrayOfExtendedEventPair;
         };
         ExtendedEvent: {
            (options?: vsanhealthService.vim.ExtendedEvent): vsanhealthService.vim.ExtendedEvent;
         };
         HealthStatusChangedEvent: {
            (options?: vsanhealthService.vim.HealthStatusChangedEvent): vsanhealthService.vim.HealthStatusChangedEvent;
         };
         HostInventoryUnreadableEvent: {
            (options?: vsanhealthService.vim.HostInventoryUnreadableEvent): vsanhealthService.vim.HostInventoryUnreadableEvent;
         };
         DatacenterEvent: {
            (options?: vsanhealthService.vim.DatacenterEvent): vsanhealthService.vim.DatacenterEvent;
         };
         DatacenterCreatedEvent: {
            (options?: vsanhealthService.vim.DatacenterCreatedEvent): vsanhealthService.vim.DatacenterCreatedEvent;
         };
         DatacenterRenamedEvent: {
            (options?: vsanhealthService.vim.DatacenterRenamedEvent): vsanhealthService.vim.DatacenterRenamedEvent;
         };
         SessionEvent: {
            (options?: vsanhealthService.vim.SessionEvent): vsanhealthService.vim.SessionEvent;
         };
         ServerStartedSessionEvent: {
            (options?: vsanhealthService.vim.ServerStartedSessionEvent): vsanhealthService.vim.ServerStartedSessionEvent;
         };
         UserLoginSessionEvent: {
            (options?: vsanhealthService.vim.UserLoginSessionEvent): vsanhealthService.vim.UserLoginSessionEvent;
         };
         UserLogoutSessionEvent: {
            (options?: vsanhealthService.vim.UserLogoutSessionEvent): vsanhealthService.vim.UserLogoutSessionEvent;
         };
         BadUsernameSessionEvent: {
            (options?: vsanhealthService.vim.BadUsernameSessionEvent): vsanhealthService.vim.BadUsernameSessionEvent;
         };
         AlreadyAuthenticatedSessionEvent: {
            (options?: vsanhealthService.vim.AlreadyAuthenticatedSessionEvent): vsanhealthService.vim.AlreadyAuthenticatedSessionEvent;
         };
         NoAccessUserEvent: {
            (options?: vsanhealthService.vim.NoAccessUserEvent): vsanhealthService.vim.NoAccessUserEvent;
         };
         SessionTerminatedEvent: {
            (options?: vsanhealthService.vim.SessionTerminatedEvent): vsanhealthService.vim.SessionTerminatedEvent;
         };
         GlobalMessageChangedEvent: {
            (options?: vsanhealthService.vim.GlobalMessageChangedEvent): vsanhealthService.vim.GlobalMessageChangedEvent;
         };
         UpgradeEvent: {
            (options?: vsanhealthService.vim.UpgradeEvent): vsanhealthService.vim.UpgradeEvent;
         };
         InfoUpgradeEvent: {
            (options?: vsanhealthService.vim.InfoUpgradeEvent): vsanhealthService.vim.InfoUpgradeEvent;
         };
         WarningUpgradeEvent: {
            (options?: vsanhealthService.vim.WarningUpgradeEvent): vsanhealthService.vim.WarningUpgradeEvent;
         };
         ErrorUpgradeEvent: {
            (options?: vsanhealthService.vim.ErrorUpgradeEvent): vsanhealthService.vim.ErrorUpgradeEvent;
         };
         UserUpgradeEvent: {
            (options?: vsanhealthService.vim.UserUpgradeEvent): vsanhealthService.vim.UserUpgradeEvent;
         };
         HostEvent: {
            (options?: vsanhealthService.vim.HostEvent): vsanhealthService.vim.HostEvent;
         };
         HostDasEvent: {
            (options?: vsanhealthService.vim.HostDasEvent): vsanhealthService.vim.HostDasEvent;
         };
         HostConnectedEvent: {
            (options?: vsanhealthService.vim.HostConnectedEvent): vsanhealthService.vim.HostConnectedEvent;
         };
         HostDisconnectedEventReasonCode: {
            "sslThumbprintVerifyFailed": string;
            "licenseExpired": string;
            "agentUpgrade": string;
            "userRequest": string;
            "insufficientLicenses": string;
            "agentOutOfDate": string;
            "passwordDecryptFailure": string;
            "unknown": string;
            "vcVRAMCapacityExceeded": string;
         };
         HostDisconnectedEvent: {
            (options?: vsanhealthService.vim.HostDisconnectedEvent): vsanhealthService.vim.HostDisconnectedEvent;
         };
         HostSyncFailedEvent: {
            (options?: vsanhealthService.vim.HostSyncFailedEvent): vsanhealthService.vim.HostSyncFailedEvent;
         };
         HostConnectionLostEvent: {
            (options?: vsanhealthService.vim.HostConnectionLostEvent): vsanhealthService.vim.HostConnectionLostEvent;
         };
         HostReconnectionFailedEvent: {
            (options?: vsanhealthService.vim.HostReconnectionFailedEvent): vsanhealthService.vim.HostReconnectionFailedEvent;
         };
         HostCnxFailedNoConnectionEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedNoConnectionEvent): vsanhealthService.vim.HostCnxFailedNoConnectionEvent;
         };
         HostCnxFailedBadUsernameEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedBadUsernameEvent): vsanhealthService.vim.HostCnxFailedBadUsernameEvent;
         };
         HostCnxFailedBadVersionEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedBadVersionEvent): vsanhealthService.vim.HostCnxFailedBadVersionEvent;
         };
         HostCnxFailedAlreadyManagedEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedAlreadyManagedEvent): vsanhealthService.vim.HostCnxFailedAlreadyManagedEvent;
         };
         HostCnxFailedNoLicenseEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedNoLicenseEvent): vsanhealthService.vim.HostCnxFailedNoLicenseEvent;
         };
         HostCnxFailedNetworkErrorEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedNetworkErrorEvent): vsanhealthService.vim.HostCnxFailedNetworkErrorEvent;
         };
         HostRemovedEvent: {
            (options?: vsanhealthService.vim.HostRemovedEvent): vsanhealthService.vim.HostRemovedEvent;
         };
         HostCnxFailedCcagentUpgradeEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedCcagentUpgradeEvent): vsanhealthService.vim.HostCnxFailedCcagentUpgradeEvent;
         };
         HostCnxFailedBadCcagentEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedBadCcagentEvent): vsanhealthService.vim.HostCnxFailedBadCcagentEvent;
         };
         HostCnxFailedEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedEvent): vsanhealthService.vim.HostCnxFailedEvent;
         };
         HostCnxFailedAccountFailedEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedAccountFailedEvent): vsanhealthService.vim.HostCnxFailedAccountFailedEvent;
         };
         HostCnxFailedNoAccessEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedNoAccessEvent): vsanhealthService.vim.HostCnxFailedNoAccessEvent;
         };
         HostShutdownEvent: {
            (options?: vsanhealthService.vim.HostShutdownEvent): vsanhealthService.vim.HostShutdownEvent;
         };
         HostCnxFailedNotFoundEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedNotFoundEvent): vsanhealthService.vim.HostCnxFailedNotFoundEvent;
         };
         HostCnxFailedTimeoutEvent: {
            (options?: vsanhealthService.vim.HostCnxFailedTimeoutEvent): vsanhealthService.vim.HostCnxFailedTimeoutEvent;
         };
         HostUpgradeFailedEvent: {
            (options?: vsanhealthService.vim.HostUpgradeFailedEvent): vsanhealthService.vim.HostUpgradeFailedEvent;
         };
         EnteringMaintenanceModeEvent: {
            (options?: vsanhealthService.vim.EnteringMaintenanceModeEvent): vsanhealthService.vim.EnteringMaintenanceModeEvent;
         };
         EnteredMaintenanceModeEvent: {
            (options?: vsanhealthService.vim.EnteredMaintenanceModeEvent): vsanhealthService.vim.EnteredMaintenanceModeEvent;
         };
         ExitMaintenanceModeEvent: {
            (options?: vsanhealthService.vim.ExitMaintenanceModeEvent): vsanhealthService.vim.ExitMaintenanceModeEvent;
         };
         CanceledHostOperationEvent: {
            (options?: vsanhealthService.vim.CanceledHostOperationEvent): vsanhealthService.vim.CanceledHostOperationEvent;
         };
         TimedOutHostOperationEvent: {
            (options?: vsanhealthService.vim.TimedOutHostOperationEvent): vsanhealthService.vim.TimedOutHostOperationEvent;
         };
         HostDasEnabledEvent: {
            (options?: vsanhealthService.vim.HostDasEnabledEvent): vsanhealthService.vim.HostDasEnabledEvent;
         };
         HostDasDisabledEvent: {
            (options?: vsanhealthService.vim.HostDasDisabledEvent): vsanhealthService.vim.HostDasDisabledEvent;
         };
         HostDasEnablingEvent: {
            (options?: vsanhealthService.vim.HostDasEnablingEvent): vsanhealthService.vim.HostDasEnablingEvent;
         };
         HostDasDisablingEvent: {
            (options?: vsanhealthService.vim.HostDasDisablingEvent): vsanhealthService.vim.HostDasDisablingEvent;
         };
         HostDasErrorEventHostDasErrorReason: {
            "configFailed": string;
            "timeout": string;
            "communicationInitFailed": string;
            "healthCheckScriptFailed": string;
            "agentFailed": string;
            "agentShutdown": string;
            "isolationAddressUnpingable": string;
            "other": string;
         };
         HostDasErrorEvent: {
            (options?: vsanhealthService.vim.HostDasErrorEvent): vsanhealthService.vim.HostDasErrorEvent;
         };
         HostDasOkEvent: {
            (options?: vsanhealthService.vim.HostDasOkEvent): vsanhealthService.vim.HostDasOkEvent;
         };
         VcAgentUpgradedEvent: {
            (options?: vsanhealthService.vim.VcAgentUpgradedEvent): vsanhealthService.vim.VcAgentUpgradedEvent;
         };
         VcAgentUninstalledEvent: {
            (options?: vsanhealthService.vim.VcAgentUninstalledEvent): vsanhealthService.vim.VcAgentUninstalledEvent;
         };
         VcAgentUpgradeFailedEvent: {
            (options?: vsanhealthService.vim.VcAgentUpgradeFailedEvent): vsanhealthService.vim.VcAgentUpgradeFailedEvent;
         };
         VcAgentUninstallFailedEvent: {
            (options?: vsanhealthService.vim.VcAgentUninstallFailedEvent): vsanhealthService.vim.VcAgentUninstallFailedEvent;
         };
         HostAddedEvent: {
            (options?: vsanhealthService.vim.HostAddedEvent): vsanhealthService.vim.HostAddedEvent;
         };
         HostAddFailedEvent: {
            (options?: vsanhealthService.vim.HostAddFailedEvent): vsanhealthService.vim.HostAddFailedEvent;
         };
         HostIpChangedEvent: {
            (options?: vsanhealthService.vim.HostIpChangedEvent): vsanhealthService.vim.HostIpChangedEvent;
         };
         EnteringStandbyModeEvent: {
            (options?: vsanhealthService.vim.EnteringStandbyModeEvent): vsanhealthService.vim.EnteringStandbyModeEvent;
         };
         DrsEnteringStandbyModeEvent: {
            (options?: vsanhealthService.vim.DrsEnteringStandbyModeEvent): vsanhealthService.vim.DrsEnteringStandbyModeEvent;
         };
         EnteredStandbyModeEvent: {
            (options?: vsanhealthService.vim.EnteredStandbyModeEvent): vsanhealthService.vim.EnteredStandbyModeEvent;
         };
         DrsEnteredStandbyModeEvent: {
            (options?: vsanhealthService.vim.DrsEnteredStandbyModeEvent): vsanhealthService.vim.DrsEnteredStandbyModeEvent;
         };
         ExitingStandbyModeEvent: {
            (options?: vsanhealthService.vim.ExitingStandbyModeEvent): vsanhealthService.vim.ExitingStandbyModeEvent;
         };
         DrsExitingStandbyModeEvent: {
            (options?: vsanhealthService.vim.DrsExitingStandbyModeEvent): vsanhealthService.vim.DrsExitingStandbyModeEvent;
         };
         ExitedStandbyModeEvent: {
            (options?: vsanhealthService.vim.ExitedStandbyModeEvent): vsanhealthService.vim.ExitedStandbyModeEvent;
         };
         DrsExitedStandbyModeEvent: {
            (options?: vsanhealthService.vim.DrsExitedStandbyModeEvent): vsanhealthService.vim.DrsExitedStandbyModeEvent;
         };
         ExitStandbyModeFailedEvent: {
            (options?: vsanhealthService.vim.ExitStandbyModeFailedEvent): vsanhealthService.vim.ExitStandbyModeFailedEvent;
         };
         DrsExitStandbyModeFailedEvent: {
            (options?: vsanhealthService.vim.DrsExitStandbyModeFailedEvent): vsanhealthService.vim.DrsExitStandbyModeFailedEvent;
         };
         UpdatedAgentBeingRestartedEvent: {
            (options?: vsanhealthService.vim.UpdatedAgentBeingRestartedEvent): vsanhealthService.vim.UpdatedAgentBeingRestartedEvent;
         };
         AccountCreatedEvent: {
            (options?: vsanhealthService.vim.AccountCreatedEvent): vsanhealthService.vim.AccountCreatedEvent;
         };
         AccountRemovedEvent: {
            (options?: vsanhealthService.vim.AccountRemovedEvent): vsanhealthService.vim.AccountRemovedEvent;
         };
         UserPasswordChanged: {
            (options?: vsanhealthService.vim.UserPasswordChanged): vsanhealthService.vim.UserPasswordChanged;
         };
         AccountUpdatedEvent: {
            (options?: vsanhealthService.vim.AccountUpdatedEvent): vsanhealthService.vim.AccountUpdatedEvent;
         };
         UserAssignedToGroup: {
            (options?: vsanhealthService.vim.UserAssignedToGroup): vsanhealthService.vim.UserAssignedToGroup;
         };
         UserUnassignedFromGroup: {
            (options?: vsanhealthService.vim.UserUnassignedFromGroup): vsanhealthService.vim.UserUnassignedFromGroup;
         };
         DatastorePrincipalConfigured: {
            (options?: vsanhealthService.vim.DatastorePrincipalConfigured): vsanhealthService.vim.DatastorePrincipalConfigured;
         };
         VMFSDatastoreCreatedEvent: {
            (options?: vsanhealthService.vim.VMFSDatastoreCreatedEvent): vsanhealthService.vim.VMFSDatastoreCreatedEvent;
         };
         NASDatastoreCreatedEvent: {
            (options?: vsanhealthService.vim.NASDatastoreCreatedEvent): vsanhealthService.vim.NASDatastoreCreatedEvent;
         };
         LocalDatastoreCreatedEvent: {
            (options?: vsanhealthService.vim.LocalDatastoreCreatedEvent): vsanhealthService.vim.LocalDatastoreCreatedEvent;
         };
         VMFSDatastoreExtendedEvent: {
            (options?: vsanhealthService.vim.VMFSDatastoreExtendedEvent): vsanhealthService.vim.VMFSDatastoreExtendedEvent;
         };
         VMFSDatastoreExpandedEvent: {
            (options?: vsanhealthService.vim.VMFSDatastoreExpandedEvent): vsanhealthService.vim.VMFSDatastoreExpandedEvent;
         };
         DatastoreRemovedOnHostEvent: {
            (options?: vsanhealthService.vim.DatastoreRemovedOnHostEvent): vsanhealthService.vim.DatastoreRemovedOnHostEvent;
         };
         DatastoreRenamedOnHostEvent: {
            (options?: vsanhealthService.vim.DatastoreRenamedOnHostEvent): vsanhealthService.vim.DatastoreRenamedOnHostEvent;
         };
         DuplicateIpDetectedEvent: {
            (options?: vsanhealthService.vim.DuplicateIpDetectedEvent): vsanhealthService.vim.DuplicateIpDetectedEvent;
         };
         DatastoreDiscoveredEvent: {
            (options?: vsanhealthService.vim.DatastoreDiscoveredEvent): vsanhealthService.vim.DatastoreDiscoveredEvent;
         };
         DrsResourceConfigureFailedEvent: {
            (options?: vsanhealthService.vim.DrsResourceConfigureFailedEvent): vsanhealthService.vim.DrsResourceConfigureFailedEvent;
         };
         DrsResourceConfigureSyncedEvent: {
            (options?: vsanhealthService.vim.DrsResourceConfigureSyncedEvent): vsanhealthService.vim.DrsResourceConfigureSyncedEvent;
         };
         HostGetShortNameFailedEvent: {
            (options?: vsanhealthService.vim.HostGetShortNameFailedEvent): vsanhealthService.vim.HostGetShortNameFailedEvent;
         };
         HostShortNameToIpFailedEvent: {
            (options?: vsanhealthService.vim.HostShortNameToIpFailedEvent): vsanhealthService.vim.HostShortNameToIpFailedEvent;
         };
         HostIpToShortNameFailedEvent: {
            (options?: vsanhealthService.vim.HostIpToShortNameFailedEvent): vsanhealthService.vim.HostIpToShortNameFailedEvent;
         };
         HostPrimaryAgentNotShortNameEvent: {
            (options?: vsanhealthService.vim.HostPrimaryAgentNotShortNameEvent): vsanhealthService.vim.HostPrimaryAgentNotShortNameEvent;
         };
         HostNotInClusterEvent: {
            (options?: vsanhealthService.vim.HostNotInClusterEvent): vsanhealthService.vim.HostNotInClusterEvent;
         };
         HostIsolationIpPingFailedEvent: {
            (options?: vsanhealthService.vim.HostIsolationIpPingFailedEvent): vsanhealthService.vim.HostIsolationIpPingFailedEvent;
         };
         HostIpInconsistentEvent: {
            (options?: vsanhealthService.vim.HostIpInconsistentEvent): vsanhealthService.vim.HostIpInconsistentEvent;
         };
         HostUserWorldSwapNotEnabledEvent: {
            (options?: vsanhealthService.vim.HostUserWorldSwapNotEnabledEvent): vsanhealthService.vim.HostUserWorldSwapNotEnabledEvent;
         };
         HostNonCompliantEvent: {
            (options?: vsanhealthService.vim.HostNonCompliantEvent): vsanhealthService.vim.HostNonCompliantEvent;
         };
         HostCompliantEvent: {
            (options?: vsanhealthService.vim.HostCompliantEvent): vsanhealthService.vim.HostCompliantEvent;
         };
         HostComplianceCheckedEvent: {
            (options?: vsanhealthService.vim.HostComplianceCheckedEvent): vsanhealthService.vim.HostComplianceCheckedEvent;
         };
         ClusterComplianceCheckedEvent: {
            (options?: vsanhealthService.vim.ClusterComplianceCheckedEvent): vsanhealthService.vim.ClusterComplianceCheckedEvent;
         };
         ProfileEvent: {
            (options?: vsanhealthService.vim.ProfileEvent): vsanhealthService.vim.ProfileEvent;
         };
         ProfileCreatedEvent: {
            (options?: vsanhealthService.vim.ProfileCreatedEvent): vsanhealthService.vim.ProfileCreatedEvent;
         };
         ProfileRemovedEvent: {
            (options?: vsanhealthService.vim.ProfileRemovedEvent): vsanhealthService.vim.ProfileRemovedEvent;
         };
         ProfileAssociatedEvent: {
            (options?: vsanhealthService.vim.ProfileAssociatedEvent): vsanhealthService.vim.ProfileAssociatedEvent;
         };
         ProfileDissociatedEvent: {
            (options?: vsanhealthService.vim.ProfileDissociatedEvent): vsanhealthService.vim.ProfileDissociatedEvent;
         };
         HostConfigAppliedEvent: {
            (options?: vsanhealthService.vim.HostConfigAppliedEvent): vsanhealthService.vim.HostConfigAppliedEvent;
         };
         ProfileReferenceHostChangedEvent: {
            (options?: vsanhealthService.vim.ProfileReferenceHostChangedEvent): vsanhealthService.vim.ProfileReferenceHostChangedEvent;
         };
         ProfileChangedEvent: {
            (options?: vsanhealthService.vim.ProfileChangedEvent): vsanhealthService.vim.ProfileChangedEvent;
         };
         HostProfileAppliedEvent: {
            (options?: vsanhealthService.vim.HostProfileAppliedEvent): vsanhealthService.vim.HostProfileAppliedEvent;
         };
         HostShortNameInconsistentEvent: {
            (options?: vsanhealthService.vim.HostShortNameInconsistentEvent): vsanhealthService.vim.HostShortNameInconsistentEvent;
         };
         HostNoRedundantManagementNetworkEvent: {
            (options?: vsanhealthService.vim.HostNoRedundantManagementNetworkEvent): vsanhealthService.vim.HostNoRedundantManagementNetworkEvent;
         };
         HostNoAvailableNetworksEvent: {
            (options?: vsanhealthService.vim.HostNoAvailableNetworksEvent): vsanhealthService.vim.HostNoAvailableNetworksEvent;
         };
         HostExtraNetworksEvent: {
            (options?: vsanhealthService.vim.HostExtraNetworksEvent): vsanhealthService.vim.HostExtraNetworksEvent;
         };
         HostNoHAEnabledPortGroupsEvent: {
            (options?: vsanhealthService.vim.HostNoHAEnabledPortGroupsEvent): vsanhealthService.vim.HostNoHAEnabledPortGroupsEvent;
         };
         HostMissingNetworksEvent: {
            (options?: vsanhealthService.vim.HostMissingNetworksEvent): vsanhealthService.vim.HostMissingNetworksEvent;
         };
         VnicPortArgument: {
            (options?: vsanhealthService.vim.VnicPortArgument): vsanhealthService.vim.VnicPortArgument;
         };
         ArrayOfVnicPortArgument: {
            (options?: vsanhealthService.vim.ArrayOfVnicPortArgument): vsanhealthService.vim.ArrayOfVnicPortArgument;
         };
         HostVnicConnectedToCustomizedDVPortEvent: {
            (options?: vsanhealthService.vim.HostVnicConnectedToCustomizedDVPortEvent): vsanhealthService.vim.HostVnicConnectedToCustomizedDVPortEvent;
         };
         GhostDvsProxySwitchDetectedEvent: {
            (options?: vsanhealthService.vim.GhostDvsProxySwitchDetectedEvent): vsanhealthService.vim.GhostDvsProxySwitchDetectedEvent;
         };
         GhostDvsProxySwitchRemovedEvent: {
            (options?: vsanhealthService.vim.GhostDvsProxySwitchRemovedEvent): vsanhealthService.vim.GhostDvsProxySwitchRemovedEvent;
         };
         VmEvent: {
            (options?: vsanhealthService.vim.VmEvent): vsanhealthService.vim.VmEvent;
         };
         VmPoweredOffEvent: {
            (options?: vsanhealthService.vim.VmPoweredOffEvent): vsanhealthService.vim.VmPoweredOffEvent;
         };
         VmPoweredOnEvent: {
            (options?: vsanhealthService.vim.VmPoweredOnEvent): vsanhealthService.vim.VmPoweredOnEvent;
         };
         VmSuspendedEvent: {
            (options?: vsanhealthService.vim.VmSuspendedEvent): vsanhealthService.vim.VmSuspendedEvent;
         };
         VmStartingEvent: {
            (options?: vsanhealthService.vim.VmStartingEvent): vsanhealthService.vim.VmStartingEvent;
         };
         VmStoppingEvent: {
            (options?: vsanhealthService.vim.VmStoppingEvent): vsanhealthService.vim.VmStoppingEvent;
         };
         VmSuspendingEvent: {
            (options?: vsanhealthService.vim.VmSuspendingEvent): vsanhealthService.vim.VmSuspendingEvent;
         };
         VmResumingEvent: {
            (options?: vsanhealthService.vim.VmResumingEvent): vsanhealthService.vim.VmResumingEvent;
         };
         VmDisconnectedEvent: {
            (options?: vsanhealthService.vim.VmDisconnectedEvent): vsanhealthService.vim.VmDisconnectedEvent;
         };
         VmRemoteConsoleConnectedEvent: {
            (options?: vsanhealthService.vim.VmRemoteConsoleConnectedEvent): vsanhealthService.vim.VmRemoteConsoleConnectedEvent;
         };
         VmRemoteConsoleDisconnectedEvent: {
            (options?: vsanhealthService.vim.VmRemoteConsoleDisconnectedEvent): vsanhealthService.vim.VmRemoteConsoleDisconnectedEvent;
         };
         VmDiscoveredEvent: {
            (options?: vsanhealthService.vim.VmDiscoveredEvent): vsanhealthService.vim.VmDiscoveredEvent;
         };
         VmOrphanedEvent: {
            (options?: vsanhealthService.vim.VmOrphanedEvent): vsanhealthService.vim.VmOrphanedEvent;
         };
         VmBeingCreatedEvent: {
            (options?: vsanhealthService.vim.VmBeingCreatedEvent): vsanhealthService.vim.VmBeingCreatedEvent;
         };
         VmCreatedEvent: {
            (options?: vsanhealthService.vim.VmCreatedEvent): vsanhealthService.vim.VmCreatedEvent;
         };
         VmStartRecordingEvent: {
            (options?: vsanhealthService.vim.VmStartRecordingEvent): vsanhealthService.vim.VmStartRecordingEvent;
         };
         VmEndRecordingEvent: {
            (options?: vsanhealthService.vim.VmEndRecordingEvent): vsanhealthService.vim.VmEndRecordingEvent;
         };
         VmStartReplayingEvent: {
            (options?: vsanhealthService.vim.VmStartReplayingEvent): vsanhealthService.vim.VmStartReplayingEvent;
         };
         VmEndReplayingEvent: {
            (options?: vsanhealthService.vim.VmEndReplayingEvent): vsanhealthService.vim.VmEndReplayingEvent;
         };
         VmRegisteredEvent: {
            (options?: vsanhealthService.vim.VmRegisteredEvent): vsanhealthService.vim.VmRegisteredEvent;
         };
         VmAutoRenameEvent: {
            (options?: vsanhealthService.vim.VmAutoRenameEvent): vsanhealthService.vim.VmAutoRenameEvent;
         };
         VmBeingHotMigratedEvent: {
            (options?: vsanhealthService.vim.VmBeingHotMigratedEvent): vsanhealthService.vim.VmBeingHotMigratedEvent;
         };
         VmResettingEvent: {
            (options?: vsanhealthService.vim.VmResettingEvent): vsanhealthService.vim.VmResettingEvent;
         };
         VmStaticMacConflictEvent: {
            (options?: vsanhealthService.vim.VmStaticMacConflictEvent): vsanhealthService.vim.VmStaticMacConflictEvent;
         };
         VmMacConflictEvent: {
            (options?: vsanhealthService.vim.VmMacConflictEvent): vsanhealthService.vim.VmMacConflictEvent;
         };
         VmBeingDeployedEvent: {
            (options?: vsanhealthService.vim.VmBeingDeployedEvent): vsanhealthService.vim.VmBeingDeployedEvent;
         };
         VmDeployFailedEvent: {
            (options?: vsanhealthService.vim.VmDeployFailedEvent): vsanhealthService.vim.VmDeployFailedEvent;
         };
         VmDeployedEvent: {
            (options?: vsanhealthService.vim.VmDeployedEvent): vsanhealthService.vim.VmDeployedEvent;
         };
         VmMacChangedEvent: {
            (options?: vsanhealthService.vim.VmMacChangedEvent): vsanhealthService.vim.VmMacChangedEvent;
         };
         VmMacAssignedEvent: {
            (options?: vsanhealthService.vim.VmMacAssignedEvent): vsanhealthService.vim.VmMacAssignedEvent;
         };
         VmUuidConflictEvent: {
            (options?: vsanhealthService.vim.VmUuidConflictEvent): vsanhealthService.vim.VmUuidConflictEvent;
         };
         VmInstanceUuidConflictEvent: {
            (options?: vsanhealthService.vim.VmInstanceUuidConflictEvent): vsanhealthService.vim.VmInstanceUuidConflictEvent;
         };
         VmBeingMigratedEvent: {
            (options?: vsanhealthService.vim.VmBeingMigratedEvent): vsanhealthService.vim.VmBeingMigratedEvent;
         };
         VmFailedMigrateEvent: {
            (options?: vsanhealthService.vim.VmFailedMigrateEvent): vsanhealthService.vim.VmFailedMigrateEvent;
         };
         VmMigratedEvent: {
            (options?: vsanhealthService.vim.VmMigratedEvent): vsanhealthService.vim.VmMigratedEvent;
         };
         VmUnsupportedStartingEvent: {
            (options?: vsanhealthService.vim.VmUnsupportedStartingEvent): vsanhealthService.vim.VmUnsupportedStartingEvent;
         };
         DrsVmMigratedEvent: {
            (options?: vsanhealthService.vim.DrsVmMigratedEvent): vsanhealthService.vim.DrsVmMigratedEvent;
         };
         DrsVmPoweredOnEvent: {
            (options?: vsanhealthService.vim.DrsVmPoweredOnEvent): vsanhealthService.vim.DrsVmPoweredOnEvent;
         };
         DrsRuleViolationEvent: {
            (options?: vsanhealthService.vim.DrsRuleViolationEvent): vsanhealthService.vim.DrsRuleViolationEvent;
         };
         DrsSoftRuleViolationEvent: {
            (options?: vsanhealthService.vim.DrsSoftRuleViolationEvent): vsanhealthService.vim.DrsSoftRuleViolationEvent;
         };
         DrsRuleComplianceEvent: {
            (options?: vsanhealthService.vim.DrsRuleComplianceEvent): vsanhealthService.vim.DrsRuleComplianceEvent;
         };
         VmRelocateSpecEvent: {
            (options?: vsanhealthService.vim.VmRelocateSpecEvent): vsanhealthService.vim.VmRelocateSpecEvent;
         };
         VmBeingRelocatedEvent: {
            (options?: vsanhealthService.vim.VmBeingRelocatedEvent): vsanhealthService.vim.VmBeingRelocatedEvent;
         };
         VmRelocatedEvent: {
            (options?: vsanhealthService.vim.VmRelocatedEvent): vsanhealthService.vim.VmRelocatedEvent;
         };
         VmRelocateFailedEvent: {
            (options?: vsanhealthService.vim.VmRelocateFailedEvent): vsanhealthService.vim.VmRelocateFailedEvent;
         };
         VmEmigratingEvent: {
            (options?: vsanhealthService.vim.VmEmigratingEvent): vsanhealthService.vim.VmEmigratingEvent;
         };
         VmCloneEvent: {
            (options?: vsanhealthService.vim.VmCloneEvent): vsanhealthService.vim.VmCloneEvent;
         };
         VmBeingClonedEvent: {
            (options?: vsanhealthService.vim.VmBeingClonedEvent): vsanhealthService.vim.VmBeingClonedEvent;
         };
         VmBeingClonedNoFolderEvent: {
            (options?: vsanhealthService.vim.VmBeingClonedNoFolderEvent): vsanhealthService.vim.VmBeingClonedNoFolderEvent;
         };
         VmCloneFailedEvent: {
            (options?: vsanhealthService.vim.VmCloneFailedEvent): vsanhealthService.vim.VmCloneFailedEvent;
         };
         VmClonedEvent: {
            (options?: vsanhealthService.vim.VmClonedEvent): vsanhealthService.vim.VmClonedEvent;
         };
         VmResourceReallocatedEvent: {
            (options?: vsanhealthService.vim.VmResourceReallocatedEvent): vsanhealthService.vim.VmResourceReallocatedEvent;
         };
         VmRenamedEvent: {
            (options?: vsanhealthService.vim.VmRenamedEvent): vsanhealthService.vim.VmRenamedEvent;
         };
         VmDateRolledBackEvent: {
            (options?: vsanhealthService.vim.VmDateRolledBackEvent): vsanhealthService.vim.VmDateRolledBackEvent;
         };
         VmNoNetworkAccessEvent: {
            (options?: vsanhealthService.vim.VmNoNetworkAccessEvent): vsanhealthService.vim.VmNoNetworkAccessEvent;
         };
         VmDiskFailedEvent: {
            (options?: vsanhealthService.vim.VmDiskFailedEvent): vsanhealthService.vim.VmDiskFailedEvent;
         };
         VmFailedToPowerOnEvent: {
            (options?: vsanhealthService.vim.VmFailedToPowerOnEvent): vsanhealthService.vim.VmFailedToPowerOnEvent;
         };
         VmFailedToPowerOffEvent: {
            (options?: vsanhealthService.vim.VmFailedToPowerOffEvent): vsanhealthService.vim.VmFailedToPowerOffEvent;
         };
         VmFailedToSuspendEvent: {
            (options?: vsanhealthService.vim.VmFailedToSuspendEvent): vsanhealthService.vim.VmFailedToSuspendEvent;
         };
         VmFailedToResetEvent: {
            (options?: vsanhealthService.vim.VmFailedToResetEvent): vsanhealthService.vim.VmFailedToResetEvent;
         };
         VmFailedToShutdownGuestEvent: {
            (options?: vsanhealthService.vim.VmFailedToShutdownGuestEvent): vsanhealthService.vim.VmFailedToShutdownGuestEvent;
         };
         VmFailedToRebootGuestEvent: {
            (options?: vsanhealthService.vim.VmFailedToRebootGuestEvent): vsanhealthService.vim.VmFailedToRebootGuestEvent;
         };
         VmFailedToStandbyGuestEvent: {
            (options?: vsanhealthService.vim.VmFailedToStandbyGuestEvent): vsanhealthService.vim.VmFailedToStandbyGuestEvent;
         };
         VmRemovedEvent: {
            (options?: vsanhealthService.vim.VmRemovedEvent): vsanhealthService.vim.VmRemovedEvent;
         };
         VmGuestShutdownEvent: {
            (options?: vsanhealthService.vim.VmGuestShutdownEvent): vsanhealthService.vim.VmGuestShutdownEvent;
         };
         VmGuestRebootEvent: {
            (options?: vsanhealthService.vim.VmGuestRebootEvent): vsanhealthService.vim.VmGuestRebootEvent;
         };
         VmGuestStandbyEvent: {
            (options?: vsanhealthService.vim.VmGuestStandbyEvent): vsanhealthService.vim.VmGuestStandbyEvent;
         };
         VmUpgradingEvent: {
            (options?: vsanhealthService.vim.VmUpgradingEvent): vsanhealthService.vim.VmUpgradingEvent;
         };
         VmUpgradeCompleteEvent: {
            (options?: vsanhealthService.vim.VmUpgradeCompleteEvent): vsanhealthService.vim.VmUpgradeCompleteEvent;
         };
         VmUpgradeFailedEvent: {
            (options?: vsanhealthService.vim.VmUpgradeFailedEvent): vsanhealthService.vim.VmUpgradeFailedEvent;
         };
         VmRestartedOnAlternateHostEvent: {
            (options?: vsanhealthService.vim.VmRestartedOnAlternateHostEvent): vsanhealthService.vim.VmRestartedOnAlternateHostEvent;
         };
         VmReconfiguredEvent: {
            (options?: vsanhealthService.vim.VmReconfiguredEvent): vsanhealthService.vim.VmReconfiguredEvent;
         };
         VmMessageEvent: {
            (options?: vsanhealthService.vim.VmMessageEvent): vsanhealthService.vim.VmMessageEvent;
         };
         VmMessageWarningEvent: {
            (options?: vsanhealthService.vim.VmMessageWarningEvent): vsanhealthService.vim.VmMessageWarningEvent;
         };
         VmMessageErrorEvent: {
            (options?: vsanhealthService.vim.VmMessageErrorEvent): vsanhealthService.vim.VmMessageErrorEvent;
         };
         VmConfigMissingEvent: {
            (options?: vsanhealthService.vim.VmConfigMissingEvent): vsanhealthService.vim.VmConfigMissingEvent;
         };
         VmPowerOffOnIsolationEvent: {
            (options?: vsanhealthService.vim.VmPowerOffOnIsolationEvent): vsanhealthService.vim.VmPowerOffOnIsolationEvent;
         };
         VmShutdownOnIsolationEventOperation: {
            "shutdown": string;
            "poweredOff": string;
         };
         VmShutdownOnIsolationEvent: {
            (options?: vsanhealthService.vim.VmShutdownOnIsolationEvent): vsanhealthService.vim.VmShutdownOnIsolationEvent;
         };
         VmFailoverFailed: {
            (options?: vsanhealthService.vim.VmFailoverFailed): vsanhealthService.vim.VmFailoverFailed;
         };
         VmDasBeingResetEventReasonCode: {
            "vmtoolsHeartbeatFailure": string;
            "appHeartbeatFailure": string;
            "appImmediateResetRequest": string;
            "vmcpResetApdCleared": string;
         };
         VmDasBeingResetEvent: {
            (options?: vsanhealthService.vim.VmDasBeingResetEvent): vsanhealthService.vim.VmDasBeingResetEvent;
         };
         VmDasResetFailedEvent: {
            (options?: vsanhealthService.vim.VmDasResetFailedEvent): vsanhealthService.vim.VmDasResetFailedEvent;
         };
         VmMaxRestartCountReached: {
            (options?: vsanhealthService.vim.VmMaxRestartCountReached): vsanhealthService.vim.VmMaxRestartCountReached;
         };
         VmMaxFTRestartCountReached: {
            (options?: vsanhealthService.vim.VmMaxFTRestartCountReached): vsanhealthService.vim.VmMaxFTRestartCountReached;
         };
         VmDasBeingResetWithScreenshotEvent: {
            (options?: vsanhealthService.vim.VmDasBeingResetWithScreenshotEvent): vsanhealthService.vim.VmDasBeingResetWithScreenshotEvent;
         };
         NotEnoughResourcesToStartVmEvent: {
            (options?: vsanhealthService.vim.NotEnoughResourcesToStartVmEvent): vsanhealthService.vim.NotEnoughResourcesToStartVmEvent;
         };
         VmUuidAssignedEvent: {
            (options?: vsanhealthService.vim.VmUuidAssignedEvent): vsanhealthService.vim.VmUuidAssignedEvent;
         };
         VmInstanceUuidAssignedEvent: {
            (options?: vsanhealthService.vim.VmInstanceUuidAssignedEvent): vsanhealthService.vim.VmInstanceUuidAssignedEvent;
         };
         VmUuidChangedEvent: {
            (options?: vsanhealthService.vim.VmUuidChangedEvent): vsanhealthService.vim.VmUuidChangedEvent;
         };
         VmInstanceUuidChangedEvent: {
            (options?: vsanhealthService.vim.VmInstanceUuidChangedEvent): vsanhealthService.vim.VmInstanceUuidChangedEvent;
         };
         VmWwnConflictEvent: {
            (options?: vsanhealthService.vim.VmWwnConflictEvent): vsanhealthService.vim.VmWwnConflictEvent;
         };
         VmAcquiredMksTicketEvent: {
            (options?: vsanhealthService.vim.VmAcquiredMksTicketEvent): vsanhealthService.vim.VmAcquiredMksTicketEvent;
         };
         VmAcquiredTicketEvent: {
            (options?: vsanhealthService.vim.VmAcquiredTicketEvent): vsanhealthService.vim.VmAcquiredTicketEvent;
         };
         VmGuestOSCrashedEvent: {
            (options?: vsanhealthService.vim.VmGuestOSCrashedEvent): vsanhealthService.vim.VmGuestOSCrashedEvent;
         };
         HostWwnConflictEvent: {
            (options?: vsanhealthService.vim.HostWwnConflictEvent): vsanhealthService.vim.HostWwnConflictEvent;
         };
         VmWwnAssignedEvent: {
            (options?: vsanhealthService.vim.VmWwnAssignedEvent): vsanhealthService.vim.VmWwnAssignedEvent;
         };
         VmWwnChangedEvent: {
            (options?: vsanhealthService.vim.VmWwnChangedEvent): vsanhealthService.vim.VmWwnChangedEvent;
         };
         VmSecondaryAddedEvent: {
            (options?: vsanhealthService.vim.VmSecondaryAddedEvent): vsanhealthService.vim.VmSecondaryAddedEvent;
         };
         VmFaultToleranceTurnedOffEvent: {
            (options?: vsanhealthService.vim.VmFaultToleranceTurnedOffEvent): vsanhealthService.vim.VmFaultToleranceTurnedOffEvent;
         };
         VmFaultToleranceStateChangedEvent: {
            (options?: vsanhealthService.vim.VmFaultToleranceStateChangedEvent): vsanhealthService.vim.VmFaultToleranceStateChangedEvent;
         };
         VmSecondaryDisabledEvent: {
            (options?: vsanhealthService.vim.VmSecondaryDisabledEvent): vsanhealthService.vim.VmSecondaryDisabledEvent;
         };
         VmSecondaryDisabledBySystemEvent: {
            (options?: vsanhealthService.vim.VmSecondaryDisabledBySystemEvent): vsanhealthService.vim.VmSecondaryDisabledBySystemEvent;
         };
         VmSecondaryEnabledEvent: {
            (options?: vsanhealthService.vim.VmSecondaryEnabledEvent): vsanhealthService.vim.VmSecondaryEnabledEvent;
         };
         VmStartingSecondaryEvent: {
            (options?: vsanhealthService.vim.VmStartingSecondaryEvent): vsanhealthService.vim.VmStartingSecondaryEvent;
         };
         VmSecondaryStartedEvent: {
            (options?: vsanhealthService.vim.VmSecondaryStartedEvent): vsanhealthService.vim.VmSecondaryStartedEvent;
         };
         VmFailedUpdatingSecondaryConfig: {
            (options?: vsanhealthService.vim.VmFailedUpdatingSecondaryConfig): vsanhealthService.vim.VmFailedUpdatingSecondaryConfig;
         };
         VmFailedStartingSecondaryEventFailureReason: {
            "incompatibleHost": string;
            "loginFailed": string;
            "registerVmFailed": string;
            "migrateFailed": string;
         };
         VmFailedStartingSecondaryEvent: {
            (options?: vsanhealthService.vim.VmFailedStartingSecondaryEvent): vsanhealthService.vim.VmFailedStartingSecondaryEvent;
         };
         VmTimedoutStartingSecondaryEvent: {
            (options?: vsanhealthService.vim.VmTimedoutStartingSecondaryEvent): vsanhealthService.vim.VmTimedoutStartingSecondaryEvent;
         };
         VmNoCompatibleHostForSecondaryEvent: {
            (options?: vsanhealthService.vim.VmNoCompatibleHostForSecondaryEvent): vsanhealthService.vim.VmNoCompatibleHostForSecondaryEvent;
         };
         VmPrimaryFailoverEvent: {
            (options?: vsanhealthService.vim.VmPrimaryFailoverEvent): vsanhealthService.vim.VmPrimaryFailoverEvent;
         };
         VmFaultToleranceVmTerminatedEvent: {
            (options?: vsanhealthService.vim.VmFaultToleranceVmTerminatedEvent): vsanhealthService.vim.VmFaultToleranceVmTerminatedEvent;
         };
         HostWwnChangedEvent: {
            (options?: vsanhealthService.vim.HostWwnChangedEvent): vsanhealthService.vim.HostWwnChangedEvent;
         };
         HostAdminDisableEvent: {
            (options?: vsanhealthService.vim.HostAdminDisableEvent): vsanhealthService.vim.HostAdminDisableEvent;
         };
         HostAdminEnableEvent: {
            (options?: vsanhealthService.vim.HostAdminEnableEvent): vsanhealthService.vim.HostAdminEnableEvent;
         };
         HostEnableAdminFailedEvent: {
            (options?: vsanhealthService.vim.HostEnableAdminFailedEvent): vsanhealthService.vim.HostEnableAdminFailedEvent;
         };
         VmFailedRelayoutOnVmfs2DatastoreEvent: {
            (options?: vsanhealthService.vim.VmFailedRelayoutOnVmfs2DatastoreEvent): vsanhealthService.vim.VmFailedRelayoutOnVmfs2DatastoreEvent;
         };
         VmFailedRelayoutEvent: {
            (options?: vsanhealthService.vim.VmFailedRelayoutEvent): vsanhealthService.vim.VmFailedRelayoutEvent;
         };
         VmRelayoutSuccessfulEvent: {
            (options?: vsanhealthService.vim.VmRelayoutSuccessfulEvent): vsanhealthService.vim.VmRelayoutSuccessfulEvent;
         };
         VmRelayoutUpToDateEvent: {
            (options?: vsanhealthService.vim.VmRelayoutUpToDateEvent): vsanhealthService.vim.VmRelayoutUpToDateEvent;
         };
         VmConnectedEvent: {
            (options?: vsanhealthService.vim.VmConnectedEvent): vsanhealthService.vim.VmConnectedEvent;
         };
         VmPoweringOnWithCustomizedDVPortEvent: {
            (options?: vsanhealthService.vim.VmPoweringOnWithCustomizedDVPortEvent): vsanhealthService.vim.VmPoweringOnWithCustomizedDVPortEvent;
         };
         VmDasUpdateErrorEvent: {
            (options?: vsanhealthService.vim.VmDasUpdateErrorEvent): vsanhealthService.vim.VmDasUpdateErrorEvent;
         };
         NoMaintenanceModeDrsRecommendationForVM: {
            (options?: vsanhealthService.vim.NoMaintenanceModeDrsRecommendationForVM): vsanhealthService.vim.NoMaintenanceModeDrsRecommendationForVM;
         };
         VmDasUpdateOkEvent: {
            (options?: vsanhealthService.vim.VmDasUpdateOkEvent): vsanhealthService.vim.VmDasUpdateOkEvent;
         };
         ScheduledTaskEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskEvent): vsanhealthService.vim.ScheduledTaskEvent;
         };
         ScheduledTaskCreatedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskCreatedEvent): vsanhealthService.vim.ScheduledTaskCreatedEvent;
         };
         ScheduledTaskStartedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskStartedEvent): vsanhealthService.vim.ScheduledTaskStartedEvent;
         };
         ScheduledTaskRemovedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskRemovedEvent): vsanhealthService.vim.ScheduledTaskRemovedEvent;
         };
         ScheduledTaskReconfiguredEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskReconfiguredEvent): vsanhealthService.vim.ScheduledTaskReconfiguredEvent;
         };
         ScheduledTaskCompletedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskCompletedEvent): vsanhealthService.vim.ScheduledTaskCompletedEvent;
         };
         ScheduledTaskFailedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskFailedEvent): vsanhealthService.vim.ScheduledTaskFailedEvent;
         };
         ScheduledTaskEmailCompletedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskEmailCompletedEvent): vsanhealthService.vim.ScheduledTaskEmailCompletedEvent;
         };
         ScheduledTaskEmailFailedEvent: {
            (options?: vsanhealthService.vim.ScheduledTaskEmailFailedEvent): vsanhealthService.vim.ScheduledTaskEmailFailedEvent;
         };
         AlarmEvent: {
            (options?: vsanhealthService.vim.AlarmEvent): vsanhealthService.vim.AlarmEvent;
         };
         AlarmCreatedEvent: {
            (options?: vsanhealthService.vim.AlarmCreatedEvent): vsanhealthService.vim.AlarmCreatedEvent;
         };
         AlarmStatusChangedEvent: {
            (options?: vsanhealthService.vim.AlarmStatusChangedEvent): vsanhealthService.vim.AlarmStatusChangedEvent;
         };
         AlarmActionTriggeredEvent: {
            (options?: vsanhealthService.vim.AlarmActionTriggeredEvent): vsanhealthService.vim.AlarmActionTriggeredEvent;
         };
         AlarmEmailCompletedEvent: {
            (options?: vsanhealthService.vim.AlarmEmailCompletedEvent): vsanhealthService.vim.AlarmEmailCompletedEvent;
         };
         AlarmEmailFailedEvent: {
            (options?: vsanhealthService.vim.AlarmEmailFailedEvent): vsanhealthService.vim.AlarmEmailFailedEvent;
         };
         AlarmSnmpCompletedEvent: {
            (options?: vsanhealthService.vim.AlarmSnmpCompletedEvent): vsanhealthService.vim.AlarmSnmpCompletedEvent;
         };
         AlarmSnmpFailedEvent: {
            (options?: vsanhealthService.vim.AlarmSnmpFailedEvent): vsanhealthService.vim.AlarmSnmpFailedEvent;
         };
         AlarmScriptCompleteEvent: {
            (options?: vsanhealthService.vim.AlarmScriptCompleteEvent): vsanhealthService.vim.AlarmScriptCompleteEvent;
         };
         AlarmScriptFailedEvent: {
            (options?: vsanhealthService.vim.AlarmScriptFailedEvent): vsanhealthService.vim.AlarmScriptFailedEvent;
         };
         AlarmRemovedEvent: {
            (options?: vsanhealthService.vim.AlarmRemovedEvent): vsanhealthService.vim.AlarmRemovedEvent;
         };
         AlarmReconfiguredEvent: {
            (options?: vsanhealthService.vim.AlarmReconfiguredEvent): vsanhealthService.vim.AlarmReconfiguredEvent;
         };
         AlarmAcknowledgedEvent: {
            (options?: vsanhealthService.vim.AlarmAcknowledgedEvent): vsanhealthService.vim.AlarmAcknowledgedEvent;
         };
         AlarmClearedEvent: {
            (options?: vsanhealthService.vim.AlarmClearedEvent): vsanhealthService.vim.AlarmClearedEvent;
         };
         CustomFieldEvent: {
            (options?: vsanhealthService.vim.CustomFieldEvent): vsanhealthService.vim.CustomFieldEvent;
         };
         CustomFieldDefEvent: {
            (options?: vsanhealthService.vim.CustomFieldDefEvent): vsanhealthService.vim.CustomFieldDefEvent;
         };
         CustomFieldDefAddedEvent: {
            (options?: vsanhealthService.vim.CustomFieldDefAddedEvent): vsanhealthService.vim.CustomFieldDefAddedEvent;
         };
         CustomFieldDefRemovedEvent: {
            (options?: vsanhealthService.vim.CustomFieldDefRemovedEvent): vsanhealthService.vim.CustomFieldDefRemovedEvent;
         };
         CustomFieldDefRenamedEvent: {
            (options?: vsanhealthService.vim.CustomFieldDefRenamedEvent): vsanhealthService.vim.CustomFieldDefRenamedEvent;
         };
         CustomFieldValueChangedEvent: {
            (options?: vsanhealthService.vim.CustomFieldValueChangedEvent): vsanhealthService.vim.CustomFieldValueChangedEvent;
         };
         AuthorizationEvent: {
            (options?: vsanhealthService.vim.AuthorizationEvent): vsanhealthService.vim.AuthorizationEvent;
         };
         PermissionEvent: {
            (options?: vsanhealthService.vim.PermissionEvent): vsanhealthService.vim.PermissionEvent;
         };
         PermissionAddedEvent: {
            (options?: vsanhealthService.vim.PermissionAddedEvent): vsanhealthService.vim.PermissionAddedEvent;
         };
         PermissionUpdatedEvent: {
            (options?: vsanhealthService.vim.PermissionUpdatedEvent): vsanhealthService.vim.PermissionUpdatedEvent;
         };
         PermissionRemovedEvent: {
            (options?: vsanhealthService.vim.PermissionRemovedEvent): vsanhealthService.vim.PermissionRemovedEvent;
         };
         RoleEvent: {
            (options?: vsanhealthService.vim.RoleEvent): vsanhealthService.vim.RoleEvent;
         };
         RoleAddedEvent: {
            (options?: vsanhealthService.vim.RoleAddedEvent): vsanhealthService.vim.RoleAddedEvent;
         };
         RoleUpdatedEvent: {
            (options?: vsanhealthService.vim.RoleUpdatedEvent): vsanhealthService.vim.RoleUpdatedEvent;
         };
         RoleRemovedEvent: {
            (options?: vsanhealthService.vim.RoleRemovedEvent): vsanhealthService.vim.RoleRemovedEvent;
         };
         DatastoreEvent: {
            (options?: vsanhealthService.vim.DatastoreEvent): vsanhealthService.vim.DatastoreEvent;
         };
         DatastoreDestroyedEvent: {
            (options?: vsanhealthService.vim.DatastoreDestroyedEvent): vsanhealthService.vim.DatastoreDestroyedEvent;
         };
         DatastoreRenamedEvent: {
            (options?: vsanhealthService.vim.DatastoreRenamedEvent): vsanhealthService.vim.DatastoreRenamedEvent;
         };
         DatastoreCapacityIncreasedEvent: {
            (options?: vsanhealthService.vim.DatastoreCapacityIncreasedEvent): vsanhealthService.vim.DatastoreCapacityIncreasedEvent;
         };
         DatastoreDuplicatedEvent: {
            (options?: vsanhealthService.vim.DatastoreDuplicatedEvent): vsanhealthService.vim.DatastoreDuplicatedEvent;
         };
         DatastoreFileEvent: {
            (options?: vsanhealthService.vim.DatastoreFileEvent): vsanhealthService.vim.DatastoreFileEvent;
         };
         DatastoreFileCopiedEvent: {
            (options?: vsanhealthService.vim.DatastoreFileCopiedEvent): vsanhealthService.vim.DatastoreFileCopiedEvent;
         };
         DatastoreFileMovedEvent: {
            (options?: vsanhealthService.vim.DatastoreFileMovedEvent): vsanhealthService.vim.DatastoreFileMovedEvent;
         };
         DatastoreFileDeletedEvent: {
            (options?: vsanhealthService.vim.DatastoreFileDeletedEvent): vsanhealthService.vim.DatastoreFileDeletedEvent;
         };
         NonVIWorkloadDetectedOnDatastoreEvent: {
            (options?: vsanhealthService.vim.NonVIWorkloadDetectedOnDatastoreEvent): vsanhealthService.vim.NonVIWorkloadDetectedOnDatastoreEvent;
         };
         DatastoreIORMReconfiguredEvent: {
            (options?: vsanhealthService.vim.DatastoreIORMReconfiguredEvent): vsanhealthService.vim.DatastoreIORMReconfiguredEvent;
         };
         TaskEvent: {
            (options?: vsanhealthService.vim.TaskEvent): vsanhealthService.vim.TaskEvent;
         };
         TaskTimeoutEvent: {
            (options?: vsanhealthService.vim.TaskTimeoutEvent): vsanhealthService.vim.TaskTimeoutEvent;
         };
         LicenseEvent: {
            (options?: vsanhealthService.vim.LicenseEvent): vsanhealthService.vim.LicenseEvent;
         };
         ServerLicenseExpiredEvent: {
            (options?: vsanhealthService.vim.ServerLicenseExpiredEvent): vsanhealthService.vim.ServerLicenseExpiredEvent;
         };
         HostLicenseExpiredEvent: {
            (options?: vsanhealthService.vim.HostLicenseExpiredEvent): vsanhealthService.vim.HostLicenseExpiredEvent;
         };
         VMotionLicenseExpiredEvent: {
            (options?: vsanhealthService.vim.VMotionLicenseExpiredEvent): vsanhealthService.vim.VMotionLicenseExpiredEvent;
         };
         NoLicenseEvent: {
            (options?: vsanhealthService.vim.NoLicenseEvent): vsanhealthService.vim.NoLicenseEvent;
         };
         LicenseServerUnavailableEvent: {
            (options?: vsanhealthService.vim.LicenseServerUnavailableEvent): vsanhealthService.vim.LicenseServerUnavailableEvent;
         };
         LicenseServerAvailableEvent: {
            (options?: vsanhealthService.vim.LicenseServerAvailableEvent): vsanhealthService.vim.LicenseServerAvailableEvent;
         };
         LicenseExpiredEvent: {
            (options?: vsanhealthService.vim.LicenseExpiredEvent): vsanhealthService.vim.LicenseExpiredEvent;
         };
         InvalidEditionEvent: {
            (options?: vsanhealthService.vim.InvalidEditionEvent): vsanhealthService.vim.InvalidEditionEvent;
         };
         HostInventoryFullEvent: {
            (options?: vsanhealthService.vim.HostInventoryFullEvent): vsanhealthService.vim.HostInventoryFullEvent;
         };
         LicenseRestrictedEvent: {
            (options?: vsanhealthService.vim.LicenseRestrictedEvent): vsanhealthService.vim.LicenseRestrictedEvent;
         };
         IncorrectHostInformationEvent: {
            (options?: vsanhealthService.vim.IncorrectHostInformationEvent): vsanhealthService.vim.IncorrectHostInformationEvent;
         };
         UnlicensedVirtualMachinesEvent: {
            (options?: vsanhealthService.vim.UnlicensedVirtualMachinesEvent): vsanhealthService.vim.UnlicensedVirtualMachinesEvent;
         };
         UnlicensedVirtualMachinesFoundEvent: {
            (options?: vsanhealthService.vim.UnlicensedVirtualMachinesFoundEvent): vsanhealthService.vim.UnlicensedVirtualMachinesFoundEvent;
         };
         AllVirtualMachinesLicensedEvent: {
            (options?: vsanhealthService.vim.AllVirtualMachinesLicensedEvent): vsanhealthService.vim.AllVirtualMachinesLicensedEvent;
         };
         LicenseNonComplianceEvent: {
            (options?: vsanhealthService.vim.LicenseNonComplianceEvent): vsanhealthService.vim.LicenseNonComplianceEvent;
         };
         MigrationEvent: {
            (options?: vsanhealthService.vim.MigrationEvent): vsanhealthService.vim.MigrationEvent;
         };
         MigrationWarningEvent: {
            (options?: vsanhealthService.vim.MigrationWarningEvent): vsanhealthService.vim.MigrationWarningEvent;
         };
         MigrationErrorEvent: {
            (options?: vsanhealthService.vim.MigrationErrorEvent): vsanhealthService.vim.MigrationErrorEvent;
         };
         MigrationHostWarningEvent: {
            (options?: vsanhealthService.vim.MigrationHostWarningEvent): vsanhealthService.vim.MigrationHostWarningEvent;
         };
         MigrationHostErrorEvent: {
            (options?: vsanhealthService.vim.MigrationHostErrorEvent): vsanhealthService.vim.MigrationHostErrorEvent;
         };
         MigrationResourceWarningEvent: {
            (options?: vsanhealthService.vim.MigrationResourceWarningEvent): vsanhealthService.vim.MigrationResourceWarningEvent;
         };
         MigrationResourceErrorEvent: {
            (options?: vsanhealthService.vim.MigrationResourceErrorEvent): vsanhealthService.vim.MigrationResourceErrorEvent;
         };
         ClusterEvent: {
            (options?: vsanhealthService.vim.ClusterEvent): vsanhealthService.vim.ClusterEvent;
         };
         DasEnabledEvent: {
            (options?: vsanhealthService.vim.DasEnabledEvent): vsanhealthService.vim.DasEnabledEvent;
         };
         DasDisabledEvent: {
            (options?: vsanhealthService.vim.DasDisabledEvent): vsanhealthService.vim.DasDisabledEvent;
         };
         DasAdmissionControlDisabledEvent: {
            (options?: vsanhealthService.vim.DasAdmissionControlDisabledEvent): vsanhealthService.vim.DasAdmissionControlDisabledEvent;
         };
         DasAdmissionControlEnabledEvent: {
            (options?: vsanhealthService.vim.DasAdmissionControlEnabledEvent): vsanhealthService.vim.DasAdmissionControlEnabledEvent;
         };
         DasHostFailedEvent: {
            (options?: vsanhealthService.vim.DasHostFailedEvent): vsanhealthService.vim.DasHostFailedEvent;
         };
         DasHostIsolatedEvent: {
            (options?: vsanhealthService.vim.DasHostIsolatedEvent): vsanhealthService.vim.DasHostIsolatedEvent;
         };
         DasClusterIsolatedEvent: {
            (options?: vsanhealthService.vim.DasClusterIsolatedEvent): vsanhealthService.vim.DasClusterIsolatedEvent;
         };
         DasAgentUnavailableEvent: {
            (options?: vsanhealthService.vim.DasAgentUnavailableEvent): vsanhealthService.vim.DasAgentUnavailableEvent;
         };
         DasAgentFoundEvent: {
            (options?: vsanhealthService.vim.DasAgentFoundEvent): vsanhealthService.vim.DasAgentFoundEvent;
         };
         InsufficientFailoverResourcesEvent: {
            (options?: vsanhealthService.vim.InsufficientFailoverResourcesEvent): vsanhealthService.vim.InsufficientFailoverResourcesEvent;
         };
         FailoverLevelRestored: {
            (options?: vsanhealthService.vim.FailoverLevelRestored): vsanhealthService.vim.FailoverLevelRestored;
         };
         ClusterOvercommittedEvent: {
            (options?: vsanhealthService.vim.ClusterOvercommittedEvent): vsanhealthService.vim.ClusterOvercommittedEvent;
         };
         HostOvercommittedEvent: {
            (options?: vsanhealthService.vim.HostOvercommittedEvent): vsanhealthService.vim.HostOvercommittedEvent;
         };
         ClusterStatusChangedEvent: {
            (options?: vsanhealthService.vim.ClusterStatusChangedEvent): vsanhealthService.vim.ClusterStatusChangedEvent;
         };
         HostStatusChangedEvent: {
            (options?: vsanhealthService.vim.HostStatusChangedEvent): vsanhealthService.vim.HostStatusChangedEvent;
         };
         ClusterCreatedEvent: {
            (options?: vsanhealthService.vim.ClusterCreatedEvent): vsanhealthService.vim.ClusterCreatedEvent;
         };
         ClusterDestroyedEvent: {
            (options?: vsanhealthService.vim.ClusterDestroyedEvent): vsanhealthService.vim.ClusterDestroyedEvent;
         };
         DrsEnabledEvent: {
            (options?: vsanhealthService.vim.DrsEnabledEvent): vsanhealthService.vim.DrsEnabledEvent;
         };
         DrsDisabledEvent: {
            (options?: vsanhealthService.vim.DrsDisabledEvent): vsanhealthService.vim.DrsDisabledEvent;
         };
         ClusterReconfiguredEvent: {
            (options?: vsanhealthService.vim.ClusterReconfiguredEvent): vsanhealthService.vim.ClusterReconfiguredEvent;
         };
         HostMonitoringStateChangedEvent: {
            (options?: vsanhealthService.vim.HostMonitoringStateChangedEvent): vsanhealthService.vim.HostMonitoringStateChangedEvent;
         };
         VmHealthMonitoringStateChangedEvent: {
            (options?: vsanhealthService.vim.VmHealthMonitoringStateChangedEvent): vsanhealthService.vim.VmHealthMonitoringStateChangedEvent;
         };
         ResourcePoolEvent: {
            (options?: vsanhealthService.vim.ResourcePoolEvent): vsanhealthService.vim.ResourcePoolEvent;
         };
         ResourcePoolCreatedEvent: {
            (options?: vsanhealthService.vim.ResourcePoolCreatedEvent): vsanhealthService.vim.ResourcePoolCreatedEvent;
         };
         ResourcePoolDestroyedEvent: {
            (options?: vsanhealthService.vim.ResourcePoolDestroyedEvent): vsanhealthService.vim.ResourcePoolDestroyedEvent;
         };
         ResourcePoolMovedEvent: {
            (options?: vsanhealthService.vim.ResourcePoolMovedEvent): vsanhealthService.vim.ResourcePoolMovedEvent;
         };
         ResourcePoolReconfiguredEvent: {
            (options?: vsanhealthService.vim.ResourcePoolReconfiguredEvent): vsanhealthService.vim.ResourcePoolReconfiguredEvent;
         };
         ResourceViolatedEvent: {
            (options?: vsanhealthService.vim.ResourceViolatedEvent): vsanhealthService.vim.ResourceViolatedEvent;
         };
         VmResourcePoolMovedEvent: {
            (options?: vsanhealthService.vim.VmResourcePoolMovedEvent): vsanhealthService.vim.VmResourcePoolMovedEvent;
         };
         TemplateUpgradeEvent: {
            (options?: vsanhealthService.vim.TemplateUpgradeEvent): vsanhealthService.vim.TemplateUpgradeEvent;
         };
         TemplateBeingUpgradedEvent: {
            (options?: vsanhealthService.vim.TemplateBeingUpgradedEvent): vsanhealthService.vim.TemplateBeingUpgradedEvent;
         };
         TemplateUpgradeFailedEvent: {
            (options?: vsanhealthService.vim.TemplateUpgradeFailedEvent): vsanhealthService.vim.TemplateUpgradeFailedEvent;
         };
         TemplateUpgradedEvent: {
            (options?: vsanhealthService.vim.TemplateUpgradedEvent): vsanhealthService.vim.TemplateUpgradedEvent;
         };
         CustomizationEvent: {
            (options?: vsanhealthService.vim.CustomizationEvent): vsanhealthService.vim.CustomizationEvent;
         };
         CustomizationStartedEvent: {
            (options?: vsanhealthService.vim.CustomizationStartedEvent): vsanhealthService.vim.CustomizationStartedEvent;
         };
         CustomizationSucceeded: {
            (options?: vsanhealthService.vim.CustomizationSucceeded): vsanhealthService.vim.CustomizationSucceeded;
         };
         CustomizationFailed: {
            (options?: vsanhealthService.vim.CustomizationFailed): vsanhealthService.vim.CustomizationFailed;
         };
         CustomizationUnknownFailure: {
            (options?: vsanhealthService.vim.CustomizationUnknownFailure): vsanhealthService.vim.CustomizationUnknownFailure;
         };
         CustomizationSysprepFailed: {
            (options?: vsanhealthService.vim.CustomizationSysprepFailed): vsanhealthService.vim.CustomizationSysprepFailed;
         };
         CustomizationLinuxIdentityFailed: {
            (options?: vsanhealthService.vim.CustomizationLinuxIdentityFailed): vsanhealthService.vim.CustomizationLinuxIdentityFailed;
         };
         CustomizationNetworkSetupFailed: {
            (options?: vsanhealthService.vim.CustomizationNetworkSetupFailed): vsanhealthService.vim.CustomizationNetworkSetupFailed;
         };
         LockerMisconfiguredEvent: {
            (options?: vsanhealthService.vim.LockerMisconfiguredEvent): vsanhealthService.vim.LockerMisconfiguredEvent;
         };
         LockerReconfiguredEvent: {
            (options?: vsanhealthService.vim.LockerReconfiguredEvent): vsanhealthService.vim.LockerReconfiguredEvent;
         };
         NoDatastoresConfiguredEvent: {
            (options?: vsanhealthService.vim.NoDatastoresConfiguredEvent): vsanhealthService.vim.NoDatastoresConfiguredEvent;
         };
         AdminPasswordNotChangedEvent: {
            (options?: vsanhealthService.vim.AdminPasswordNotChangedEvent): vsanhealthService.vim.AdminPasswordNotChangedEvent;
         };
         HostInAuditModeEvent: {
            (options?: vsanhealthService.vim.HostInAuditModeEvent): vsanhealthService.vim.HostInAuditModeEvent;
         };
         LocalTSMEnabledEvent: {
            (options?: vsanhealthService.vim.LocalTSMEnabledEvent): vsanhealthService.vim.LocalTSMEnabledEvent;
         };
         RemoteTSMEnabledEvent: {
            (options?: vsanhealthService.vim.RemoteTSMEnabledEvent): vsanhealthService.vim.RemoteTSMEnabledEvent;
         };
         VimAccountPasswordChangedEvent: {
            (options?: vsanhealthService.vim.VimAccountPasswordChangedEvent): vsanhealthService.vim.VimAccountPasswordChangedEvent;
         };
         IScsiBootFailureEvent: {
            (options?: vsanhealthService.vim.IScsiBootFailureEvent): vsanhealthService.vim.IScsiBootFailureEvent;
         };
         DvsHealthStatusChangeEvent: {
            (options?: vsanhealthService.vim.DvsHealthStatusChangeEvent): vsanhealthService.vim.DvsHealthStatusChangeEvent;
         };
         NetworkRollbackEvent: {
            (options?: vsanhealthService.vim.NetworkRollbackEvent): vsanhealthService.vim.NetworkRollbackEvent;
         };
         UplinkPortVlanTrunkedEvent: {
            (options?: vsanhealthService.vim.UplinkPortVlanTrunkedEvent): vsanhealthService.vim.UplinkPortVlanTrunkedEvent;
         };
         UplinkPortVlanUntrunkedEvent: {
            (options?: vsanhealthService.vim.UplinkPortVlanUntrunkedEvent): vsanhealthService.vim.UplinkPortVlanUntrunkedEvent;
         };
         MtuMatchEvent: {
            (options?: vsanhealthService.vim.MtuMatchEvent): vsanhealthService.vim.MtuMatchEvent;
         };
         MtuMismatchEvent: {
            (options?: vsanhealthService.vim.MtuMismatchEvent): vsanhealthService.vim.MtuMismatchEvent;
         };
         UplinkPortMtuNotSupportEvent: {
            (options?: vsanhealthService.vim.UplinkPortMtuNotSupportEvent): vsanhealthService.vim.UplinkPortMtuNotSupportEvent;
         };
         UplinkPortMtuSupportEvent: {
            (options?: vsanhealthService.vim.UplinkPortMtuSupportEvent): vsanhealthService.vim.UplinkPortMtuSupportEvent;
         };
         TeamingMatchEvent: {
            (options?: vsanhealthService.vim.TeamingMatchEvent): vsanhealthService.vim.TeamingMatchEvent;
         };
         TeamingMisMatchEvent: {
            (options?: vsanhealthService.vim.TeamingMisMatchEvent): vsanhealthService.vim.TeamingMisMatchEvent;
         };
         DvsEventPortBlockState: {
            "unset": string;
            "blocked": string;
            "unblocked": string;
            "unknown": string;
         };
         DvsEvent: {
            (options?: vsanhealthService.vim.DvsEvent): vsanhealthService.vim.DvsEvent;
         };
         DvsCreatedEvent: {
            (options?: vsanhealthService.vim.DvsCreatedEvent): vsanhealthService.vim.DvsCreatedEvent;
         };
         DvsRenamedEvent: {
            (options?: vsanhealthService.vim.DvsRenamedEvent): vsanhealthService.vim.DvsRenamedEvent;
         };
         DvsReconfiguredEvent: {
            (options?: vsanhealthService.vim.DvsReconfiguredEvent): vsanhealthService.vim.DvsReconfiguredEvent;
         };
         DvsUpgradeAvailableEvent: {
            (options?: vsanhealthService.vim.DvsUpgradeAvailableEvent): vsanhealthService.vim.DvsUpgradeAvailableEvent;
         };
         DvsUpgradeInProgressEvent: {
            (options?: vsanhealthService.vim.DvsUpgradeInProgressEvent): vsanhealthService.vim.DvsUpgradeInProgressEvent;
         };
         DvsUpgradeRejectedEvent: {
            (options?: vsanhealthService.vim.DvsUpgradeRejectedEvent): vsanhealthService.vim.DvsUpgradeRejectedEvent;
         };
         DvsUpgradedEvent: {
            (options?: vsanhealthService.vim.DvsUpgradedEvent): vsanhealthService.vim.DvsUpgradedEvent;
         };
         DvsHostJoinedEvent: {
            (options?: vsanhealthService.vim.DvsHostJoinedEvent): vsanhealthService.vim.DvsHostJoinedEvent;
         };
         DvsHostLeftEvent: {
            (options?: vsanhealthService.vim.DvsHostLeftEvent): vsanhealthService.vim.DvsHostLeftEvent;
         };
         DvsOutOfSyncHostArgument: {
            (options?: vsanhealthService.vim.DvsOutOfSyncHostArgument): vsanhealthService.vim.DvsOutOfSyncHostArgument;
         };
         ArrayOfDvsOutOfSyncHostArgument: {
            (options?: vsanhealthService.vim.ArrayOfDvsOutOfSyncHostArgument): vsanhealthService.vim.ArrayOfDvsOutOfSyncHostArgument;
         };
         OutOfSyncDvsHost: {
            (options?: vsanhealthService.vim.OutOfSyncDvsHost): vsanhealthService.vim.OutOfSyncDvsHost;
         };
         DvsHostWentOutOfSyncEvent: {
            (options?: vsanhealthService.vim.DvsHostWentOutOfSyncEvent): vsanhealthService.vim.DvsHostWentOutOfSyncEvent;
         };
         DvsHostBackInSyncEvent: {
            (options?: vsanhealthService.vim.DvsHostBackInSyncEvent): vsanhealthService.vim.DvsHostBackInSyncEvent;
         };
         DvsHostStatusUpdated: {
            (options?: vsanhealthService.vim.DvsHostStatusUpdated): vsanhealthService.vim.DvsHostStatusUpdated;
         };
         DvsPortCreatedEvent: {
            (options?: vsanhealthService.vim.DvsPortCreatedEvent): vsanhealthService.vim.DvsPortCreatedEvent;
         };
         DvsPortReconfiguredEvent: {
            (options?: vsanhealthService.vim.DvsPortReconfiguredEvent): vsanhealthService.vim.DvsPortReconfiguredEvent;
         };
         DvsPortDeletedEvent: {
            (options?: vsanhealthService.vim.DvsPortDeletedEvent): vsanhealthService.vim.DvsPortDeletedEvent;
         };
         DvsPortConnectedEvent: {
            (options?: vsanhealthService.vim.DvsPortConnectedEvent): vsanhealthService.vim.DvsPortConnectedEvent;
         };
         DvsPortDisconnectedEvent: {
            (options?: vsanhealthService.vim.DvsPortDisconnectedEvent): vsanhealthService.vim.DvsPortDisconnectedEvent;
         };
         DvsPortVendorSpecificStateChangeEvent: {
            (options?: vsanhealthService.vim.DvsPortVendorSpecificStateChangeEvent): vsanhealthService.vim.DvsPortVendorSpecificStateChangeEvent;
         };
         DvsPortRuntimeChangeEvent: {
            (options?: vsanhealthService.vim.DvsPortRuntimeChangeEvent): vsanhealthService.vim.DvsPortRuntimeChangeEvent;
         };
         DvsPortLinkUpEvent: {
            (options?: vsanhealthService.vim.DvsPortLinkUpEvent): vsanhealthService.vim.DvsPortLinkUpEvent;
         };
         DvsPortLinkDownEvent: {
            (options?: vsanhealthService.vim.DvsPortLinkDownEvent): vsanhealthService.vim.DvsPortLinkDownEvent;
         };
         DvsPortJoinPortgroupEvent: {
            (options?: vsanhealthService.vim.DvsPortJoinPortgroupEvent): vsanhealthService.vim.DvsPortJoinPortgroupEvent;
         };
         DvsPortLeavePortgroupEvent: {
            (options?: vsanhealthService.vim.DvsPortLeavePortgroupEvent): vsanhealthService.vim.DvsPortLeavePortgroupEvent;
         };
         DvsPortBlockedEvent: {
            (options?: vsanhealthService.vim.DvsPortBlockedEvent): vsanhealthService.vim.DvsPortBlockedEvent;
         };
         DvsPortUnblockedEvent: {
            (options?: vsanhealthService.vim.DvsPortUnblockedEvent): vsanhealthService.vim.DvsPortUnblockedEvent;
         };
         DvsPortEnteredPassthruEvent: {
            (options?: vsanhealthService.vim.DvsPortEnteredPassthruEvent): vsanhealthService.vim.DvsPortEnteredPassthruEvent;
         };
         DvsPortExitedPassthruEvent: {
            (options?: vsanhealthService.vim.DvsPortExitedPassthruEvent): vsanhealthService.vim.DvsPortExitedPassthruEvent;
         };
         DvsDestroyedEvent: {
            (options?: vsanhealthService.vim.DvsDestroyedEvent): vsanhealthService.vim.DvsDestroyedEvent;
         };
         DvsMergedEvent: {
            (options?: vsanhealthService.vim.DvsMergedEvent): vsanhealthService.vim.DvsMergedEvent;
         };
         HostLocalPortCreatedEvent: {
            (options?: vsanhealthService.vim.HostLocalPortCreatedEvent): vsanhealthService.vim.HostLocalPortCreatedEvent;
         };
         RollbackEvent: {
            (options?: vsanhealthService.vim.RollbackEvent): vsanhealthService.vim.RollbackEvent;
         };
         RecoveryEvent: {
            (options?: vsanhealthService.vim.RecoveryEvent): vsanhealthService.vim.RecoveryEvent;
         };
         DvsImportEvent: {
            (options?: vsanhealthService.vim.DvsImportEvent): vsanhealthService.vim.DvsImportEvent;
         };
         DvsRestoreEvent: {
            (options?: vsanhealthService.vim.DvsRestoreEvent): vsanhealthService.vim.DvsRestoreEvent;
         };
         VmVnicPoolReservationViolationRaiseEvent: {
            (options?: vsanhealthService.vim.VmVnicPoolReservationViolationRaiseEvent): vsanhealthService.vim.VmVnicPoolReservationViolationRaiseEvent;
         };
         VmVnicPoolReservationViolationClearEvent: {
            (options?: vsanhealthService.vim.VmVnicPoolReservationViolationClearEvent): vsanhealthService.vim.VmVnicPoolReservationViolationClearEvent;
         };
         DVPortgroupEvent: {
            (options?: vsanhealthService.vim.DVPortgroupEvent): vsanhealthService.vim.DVPortgroupEvent;
         };
         DVPortgroupCreatedEvent: {
            (options?: vsanhealthService.vim.DVPortgroupCreatedEvent): vsanhealthService.vim.DVPortgroupCreatedEvent;
         };
         DVPortgroupRenamedEvent: {
            (options?: vsanhealthService.vim.DVPortgroupRenamedEvent): vsanhealthService.vim.DVPortgroupRenamedEvent;
         };
         DVPortgroupReconfiguredEvent: {
            (options?: vsanhealthService.vim.DVPortgroupReconfiguredEvent): vsanhealthService.vim.DVPortgroupReconfiguredEvent;
         };
         DVPortgroupDestroyedEvent: {
            (options?: vsanhealthService.vim.DVPortgroupDestroyedEvent): vsanhealthService.vim.DVPortgroupDestroyedEvent;
         };
         DvpgImportEvent: {
            (options?: vsanhealthService.vim.DvpgImportEvent): vsanhealthService.vim.DvpgImportEvent;
         };
         DvpgRestoreEvent: {
            (options?: vsanhealthService.vim.DvpgRestoreEvent): vsanhealthService.vim.DvpgRestoreEvent;
         };
         DrsInvocationFailedEvent: {
            (options?: vsanhealthService.vim.DrsInvocationFailedEvent): vsanhealthService.vim.DrsInvocationFailedEvent;
         };
         DrsRecoveredFromFailureEvent: {
            (options?: vsanhealthService.vim.DrsRecoveredFromFailureEvent): vsanhealthService.vim.DrsRecoveredFromFailureEvent;
         };
         VmReloadFromPathEvent: {
            (options?: vsanhealthService.vim.VmReloadFromPathEvent): vsanhealthService.vim.VmReloadFromPathEvent;
         };
         VmReloadFromPathFailedEvent: {
            (options?: vsanhealthService.vim.VmReloadFromPathFailedEvent): vsanhealthService.vim.VmReloadFromPathFailedEvent;
         };
         VmRequirementsExceedCurrentEVCModeEvent: {
            (options?: vsanhealthService.vim.VmRequirementsExceedCurrentEVCModeEvent): vsanhealthService.vim.VmRequirementsExceedCurrentEVCModeEvent;
         };
         EventArgument: {
            (options?: vsanhealthService.vim.EventArgument): vsanhealthService.vim.EventArgument;
         };
         RoleEventArgument: {
            (options?: vsanhealthService.vim.RoleEventArgument): vsanhealthService.vim.RoleEventArgument;
         };
         EntityEventArgument: {
            (options?: vsanhealthService.vim.EntityEventArgument): vsanhealthService.vim.EntityEventArgument;
         };
         ManagedEntityEventArgument: {
            (options?: vsanhealthService.vim.ManagedEntityEventArgument): vsanhealthService.vim.ManagedEntityEventArgument;
         };
         FolderEventArgument: {
            (options?: vsanhealthService.vim.FolderEventArgument): vsanhealthService.vim.FolderEventArgument;
         };
         DatacenterEventArgument: {
            (options?: vsanhealthService.vim.DatacenterEventArgument): vsanhealthService.vim.DatacenterEventArgument;
         };
         ComputeResourceEventArgument: {
            (options?: vsanhealthService.vim.ComputeResourceEventArgument): vsanhealthService.vim.ComputeResourceEventArgument;
         };
         ResourcePoolEventArgument: {
            (options?: vsanhealthService.vim.ResourcePoolEventArgument): vsanhealthService.vim.ResourcePoolEventArgument;
         };
         HostEventArgument: {
            (options?: vsanhealthService.vim.HostEventArgument): vsanhealthService.vim.HostEventArgument;
         };
         ArrayOfHostEventArgument: {
            (options?: vsanhealthService.vim.ArrayOfHostEventArgument): vsanhealthService.vim.ArrayOfHostEventArgument;
         };
         VmEventArgument: {
            (options?: vsanhealthService.vim.VmEventArgument): vsanhealthService.vim.VmEventArgument;
         };
         ArrayOfVmEventArgument: {
            (options?: vsanhealthService.vim.ArrayOfVmEventArgument): vsanhealthService.vim.ArrayOfVmEventArgument;
         };
         DatastoreEventArgument: {
            (options?: vsanhealthService.vim.DatastoreEventArgument): vsanhealthService.vim.DatastoreEventArgument;
         };
         NetworkEventArgument: {
            (options?: vsanhealthService.vim.NetworkEventArgument): vsanhealthService.vim.NetworkEventArgument;
         };
         AlarmEventArgument: {
            (options?: vsanhealthService.vim.AlarmEventArgument): vsanhealthService.vim.AlarmEventArgument;
         };
         ScheduledTaskEventArgument: {
            (options?: vsanhealthService.vim.ScheduledTaskEventArgument): vsanhealthService.vim.ScheduledTaskEventArgument;
         };
         ProfileEventArgument: {
            (options?: vsanhealthService.vim.ProfileEventArgument): vsanhealthService.vim.ProfileEventArgument;
         };
         DvsEventArgument: {
            (options?: vsanhealthService.vim.DvsEventArgument): vsanhealthService.vim.DvsEventArgument;
         };
         ChangesInfoEventArgument: {
            (options?: vsanhealthService.vim.ChangesInfoEventArgument): vsanhealthService.vim.ChangesInfoEventArgument;
         };
         ArrayOfChangesInfoEventArgument: {
            (options?: vsanhealthService.vim.ArrayOfChangesInfoEventArgument): vsanhealthService.vim.ArrayOfChangesInfoEventArgument;
         };
         EventCategory: {
            "info": string;
            "warning": string;
            "error": string;
            "user": string;
         };
         EventArgDesc: {
            (options?: vsanhealthService.vim.EventArgDesc): vsanhealthService.vim.EventArgDesc;
         };
         ArrayOfEventArgDesc: {
            (options?: vsanhealthService.vim.ArrayOfEventArgDesc): vsanhealthService.vim.ArrayOfEventArgDesc;
         };
         EventDescriptionEventDetail: {
            (options?: vsanhealthService.vim.EventDescriptionEventDetail): vsanhealthService.vim.EventDescriptionEventDetail;
         };
         ArrayOfEventDescriptionEventDetail: {
            (options?: vsanhealthService.vim.ArrayOfEventDescriptionEventDetail): vsanhealthService.vim.ArrayOfEventDescriptionEventDetail;
         };
         EventDescription: {
            (options?: vsanhealthService.vim.EventDescription): vsanhealthService.vim.EventDescription;
         };
         EventEx: {
            (options?: vsanhealthService.vim.EventEx): vsanhealthService.vim.EventEx;
         };
         EventFilterSpecRecursionOption: {
            "self": string;
            "children": string;
            "all": string;
         };
         EventFilterSpecByEntity: {
            (options?: vsanhealthService.vim.EventFilterSpecByEntity): vsanhealthService.vim.EventFilterSpecByEntity;
         };
         EventFilterSpecByTime: {
            (options?: vsanhealthService.vim.EventFilterSpecByTime): vsanhealthService.vim.EventFilterSpecByTime;
         };
         EventFilterSpecByUsername: {
            (options?: vsanhealthService.vim.EventFilterSpecByUsername): vsanhealthService.vim.EventFilterSpecByUsername;
         };
         EventFilterSpec: {
            (options?: vsanhealthService.vim.EventFilterSpec): vsanhealthService.vim.EventFilterSpec;
         };
         ExtExtendedProductInfo: {
            (options?: vsanhealthService.vim.ExtExtendedProductInfo): vsanhealthService.vim.ExtExtendedProductInfo;
         };
         ManagedByInfo: {
            (options?: vsanhealthService.vim.ManagedByInfo): vsanhealthService.vim.ManagedByInfo;
         };
         ExtManagedEntityInfo: {
            (options?: vsanhealthService.vim.ExtManagedEntityInfo): vsanhealthService.vim.ExtManagedEntityInfo;
         };
         ArrayOfExtManagedEntityInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtManagedEntityInfo): vsanhealthService.vim.ArrayOfExtManagedEntityInfo;
         };
         ExtSolutionManagerInfoTabInfo: {
            (options?: vsanhealthService.vim.ExtSolutionManagerInfoTabInfo): vsanhealthService.vim.ExtSolutionManagerInfoTabInfo;
         };
         ArrayOfExtSolutionManagerInfoTabInfo: {
            (options?: vsanhealthService.vim.ArrayOfExtSolutionManagerInfoTabInfo): vsanhealthService.vim.ArrayOfExtSolutionManagerInfoTabInfo;
         };
         ExtSolutionManagerInfo: {
            (options?: vsanhealthService.vim.ExtSolutionManagerInfo): vsanhealthService.vim.ExtSolutionManagerInfo;
         };
         ActiveDirectoryFault: {
            (options?: vsanhealthService.vim.ActiveDirectoryFault): vsanhealthService.vim.ActiveDirectoryFault;
         };
         ActiveVMsBlockingEVC: {
            (options?: vsanhealthService.vim.ActiveVMsBlockingEVC): vsanhealthService.vim.ActiveVMsBlockingEVC;
         };
         AdminDisabled: {
            (options?: vsanhealthService.vim.AdminDisabled): vsanhealthService.vim.AdminDisabled;
         };
         AdminNotDisabled: {
            (options?: vsanhealthService.vim.AdminNotDisabled): vsanhealthService.vim.AdminNotDisabled;
         };
         AffinityType: {
            "memory": string;
            "cpu": string;
         };
         AffinityConfigured: {
            (options?: vsanhealthService.vim.AffinityConfigured): vsanhealthService.vim.AffinityConfigured;
         };
         AgentInstallFailedReason: {
            "NotEnoughSpaceOnDevice": string;
            "PrepareToUpgradeFailed": string;
            "AgentNotRunning": string;
            "AgentNotReachable": string;
            "InstallTimedout": string;
            "SignatureVerificationFailed": string;
            "AgentUploadFailed": string;
            "AgentUploadTimedout": string;
            "UnknownInstallerError": string;
         };
         AgentInstallFailed: {
            (options?: vsanhealthService.vim.AgentInstallFailed): vsanhealthService.vim.AgentInstallFailed;
         };
         AlreadyBeingManaged: {
            (options?: vsanhealthService.vim.AlreadyBeingManaged): vsanhealthService.vim.AlreadyBeingManaged;
         };
         AlreadyConnected: {
            (options?: vsanhealthService.vim.AlreadyConnected): vsanhealthService.vim.AlreadyConnected;
         };
         AlreadyExists: {
            (options?: vsanhealthService.vim.AlreadyExists): vsanhealthService.vim.AlreadyExists;
         };
         AlreadyUpgraded: {
            (options?: vsanhealthService.vim.AlreadyUpgraded): vsanhealthService.vim.AlreadyUpgraded;
         };
         AnswerFileUpdateFailure: {
            (options?: vsanhealthService.vim.AnswerFileUpdateFailure): vsanhealthService.vim.AnswerFileUpdateFailure;
         };
         ArrayOfAnswerFileUpdateFailure: {
            (options?: vsanhealthService.vim.ArrayOfAnswerFileUpdateFailure): vsanhealthService.vim.ArrayOfAnswerFileUpdateFailure;
         };
         AnswerFileUpdateFailed: {
            (options?: vsanhealthService.vim.AnswerFileUpdateFailed): vsanhealthService.vim.AnswerFileUpdateFailed;
         };
         ApplicationQuiesceFault: {
            (options?: vsanhealthService.vim.ApplicationQuiesceFault): vsanhealthService.vim.ApplicationQuiesceFault;
         };
         AuthMinimumAdminPermission: {
            (options?: vsanhealthService.vim.AuthMinimumAdminPermission): vsanhealthService.vim.AuthMinimumAdminPermission;
         };
         BackupBlobReadFailure: {
            (options?: vsanhealthService.vim.BackupBlobReadFailure): vsanhealthService.vim.BackupBlobReadFailure;
         };
         BackupBlobWriteFailure: {
            (options?: vsanhealthService.vim.BackupBlobWriteFailure): vsanhealthService.vim.BackupBlobWriteFailure;
         };
         BlockedByFirewall: {
            (options?: vsanhealthService.vim.BlockedByFirewall): vsanhealthService.vim.BlockedByFirewall;
         };
         CAMServerRefusedConnection: {
            (options?: vsanhealthService.vim.CAMServerRefusedConnection): vsanhealthService.vim.CAMServerRefusedConnection;
         };
         CannotAccessFile: {
            (options?: vsanhealthService.vim.CannotAccessFile): vsanhealthService.vim.CannotAccessFile;
         };
         CannotAccessLocalSource: {
            (options?: vsanhealthService.vim.CannotAccessLocalSource): vsanhealthService.vim.CannotAccessLocalSource;
         };
         CannotAccessNetwork: {
            (options?: vsanhealthService.vim.CannotAccessNetwork): vsanhealthService.vim.CannotAccessNetwork;
         };
         CannotAccessVmComponent: {
            (options?: vsanhealthService.vim.CannotAccessVmComponent): vsanhealthService.vim.CannotAccessVmComponent;
         };
         CannotAccessVmConfig: {
            (options?: vsanhealthService.vim.CannotAccessVmConfig): vsanhealthService.vim.CannotAccessVmConfig;
         };
         CannotAccessVmDevice: {
            (options?: vsanhealthService.vim.CannotAccessVmDevice): vsanhealthService.vim.CannotAccessVmDevice;
         };
         CannotAccessVmDisk: {
            (options?: vsanhealthService.vim.CannotAccessVmDisk): vsanhealthService.vim.CannotAccessVmDisk;
         };
         CannotAddHostWithFTVmAsStandalone: {
            (options?: vsanhealthService.vim.CannotAddHostWithFTVmAsStandalone): vsanhealthService.vim.CannotAddHostWithFTVmAsStandalone;
         };
         CannotAddHostWithFTVmToDifferentCluster: {
            (options?: vsanhealthService.vim.CannotAddHostWithFTVmToDifferentCluster): vsanhealthService.vim.CannotAddHostWithFTVmToDifferentCluster;
         };
         CannotAddHostWithFTVmToNonHACluster: {
            (options?: vsanhealthService.vim.CannotAddHostWithFTVmToNonHACluster): vsanhealthService.vim.CannotAddHostWithFTVmToNonHACluster;
         };
         CannotChangeDrsBehaviorForFtSecondary: {
            (options?: vsanhealthService.vim.CannotChangeDrsBehaviorForFtSecondary): vsanhealthService.vim.CannotChangeDrsBehaviorForFtSecondary;
         };
         CannotChangeHaSettingsForFtSecondary: {
            (options?: vsanhealthService.vim.CannotChangeHaSettingsForFtSecondary): vsanhealthService.vim.CannotChangeHaSettingsForFtSecondary;
         };
         CannotChangeVsanClusterUuid: {
            (options?: vsanhealthService.vim.CannotChangeVsanClusterUuid): vsanhealthService.vim.CannotChangeVsanClusterUuid;
         };
         CannotChangeVsanNodeUuid: {
            (options?: vsanhealthService.vim.CannotChangeVsanNodeUuid): vsanhealthService.vim.CannotChangeVsanNodeUuid;
         };
         CannotComputeFTCompatibleHosts: {
            (options?: vsanhealthService.vim.CannotComputeFTCompatibleHosts): vsanhealthService.vim.CannotComputeFTCompatibleHosts;
         };
         CannotCreateFile: {
            (options?: vsanhealthService.vim.CannotCreateFile): vsanhealthService.vim.CannotCreateFile;
         };
         CannotDecryptPasswords: {
            (options?: vsanhealthService.vim.CannotDecryptPasswords): vsanhealthService.vim.CannotDecryptPasswords;
         };
         CannotDeleteFile: {
            (options?: vsanhealthService.vim.CannotDeleteFile): vsanhealthService.vim.CannotDeleteFile;
         };
         CannotDisableDrsOnClustersWithVApps: {
            (options?: vsanhealthService.vim.CannotDisableDrsOnClustersWithVApps): vsanhealthService.vim.CannotDisableDrsOnClustersWithVApps;
         };
         CannotDisableSnapshot: {
            (options?: vsanhealthService.vim.CannotDisableSnapshot): vsanhealthService.vim.CannotDisableSnapshot;
         };
         CannotDisconnectHostWithFaultToleranceVm: {
            (options?: vsanhealthService.vim.CannotDisconnectHostWithFaultToleranceVm): vsanhealthService.vim.CannotDisconnectHostWithFaultToleranceVm;
         };
         CannotEnableVmcpForClusterReason: {
            "APDTimeoutDisabled": string;
            "IncompatibleHostVersion": string;
         };
         CannotEnableVmcpForCluster: {
            (options?: vsanhealthService.vim.CannotEnableVmcpForCluster): vsanhealthService.vim.CannotEnableVmcpForCluster;
         };
         CannotModifyConfigCpuRequirements: {
            (options?: vsanhealthService.vim.CannotModifyConfigCpuRequirements): vsanhealthService.vim.CannotModifyConfigCpuRequirements;
         };
         CannotMoveFaultToleranceVmMoveType: {
            "resourcePool": string;
            "cluster": string;
         };
         CannotMoveFaultToleranceVm: {
            (options?: vsanhealthService.vim.CannotMoveFaultToleranceVm): vsanhealthService.vim.CannotMoveFaultToleranceVm;
         };
         CannotMoveHostWithFaultToleranceVm: {
            (options?: vsanhealthService.vim.CannotMoveHostWithFaultToleranceVm): vsanhealthService.vim.CannotMoveHostWithFaultToleranceVm;
         };
         CannotMoveVmWithDeltaDisk: {
            (options?: vsanhealthService.vim.CannotMoveVmWithDeltaDisk): vsanhealthService.vim.CannotMoveVmWithDeltaDisk;
         };
         CannotMoveVmWithNativeDeltaDisk: {
            (options?: vsanhealthService.vim.CannotMoveVmWithNativeDeltaDisk): vsanhealthService.vim.CannotMoveVmWithNativeDeltaDisk;
         };
         CannotMoveVsanEnabledHost: {
            (options?: vsanhealthService.vim.CannotMoveVsanEnabledHost): vsanhealthService.vim.CannotMoveVsanEnabledHost;
         };
         CannotPlaceWithoutPrerequisiteMoves: {
            (options?: vsanhealthService.vim.CannotPlaceWithoutPrerequisiteMoves): vsanhealthService.vim.CannotPlaceWithoutPrerequisiteMoves;
         };
         CannotPowerOffVmInClusterOperation: {
            "suspend": string;
            "powerOff": string;
            "guestShutdown": string;
            "guestSuspend": string;
         };
         CannotPowerOffVmInCluster: {
            (options?: vsanhealthService.vim.CannotPowerOffVmInCluster): vsanhealthService.vim.CannotPowerOffVmInCluster;
         };
         CannotReconfigureVsanWhenHaEnabled: {
            (options?: vsanhealthService.vim.CannotReconfigureVsanWhenHaEnabled): vsanhealthService.vim.CannotReconfigureVsanWhenHaEnabled;
         };
         CannotUseNetworkReason: {
            "NetworkReservationNotSupported": string;
            "MismatchedNetworkPolicies": string;
            "MismatchedDvsVersionOrVendor": string;
            "VMotionToUnsupportedNetworkType": string;
         };
         CannotUseNetwork: {
            (options?: vsanhealthService.vim.CannotUseNetwork): vsanhealthService.vim.CannotUseNetwork;
         };
         ClockSkew: {
            (options?: vsanhealthService.vim.ClockSkew): vsanhealthService.vim.ClockSkew;
         };
         CloneFromSnapshotNotSupported: {
            (options?: vsanhealthService.vim.CloneFromSnapshotNotSupported): vsanhealthService.vim.CloneFromSnapshotNotSupported;
         };
         CollectorAddressUnset: {
            (options?: vsanhealthService.vim.CollectorAddressUnset): vsanhealthService.vim.CollectorAddressUnset;
         };
         ConcurrentAccess: {
            (options?: vsanhealthService.vim.ConcurrentAccess): vsanhealthService.vim.ConcurrentAccess;
         };
         ConflictingConfigurationConfig: {
            (options?: vsanhealthService.vim.ConflictingConfigurationConfig): vsanhealthService.vim.ConflictingConfigurationConfig;
         };
         ArrayOfConflictingConfigurationConfig: {
            (options?: vsanhealthService.vim.ArrayOfConflictingConfigurationConfig): vsanhealthService.vim.ArrayOfConflictingConfigurationConfig;
         };
         ConflictingConfiguration: {
            (options?: vsanhealthService.vim.ConflictingConfiguration): vsanhealthService.vim.ConflictingConfiguration;
         };
         ConflictingDatastoreFound: {
            (options?: vsanhealthService.vim.ConflictingDatastoreFound): vsanhealthService.vim.ConflictingDatastoreFound;
         };
         ConnectedIso: {
            (options?: vsanhealthService.vim.ConnectedIso): vsanhealthService.vim.ConnectedIso;
         };
         CpuCompatibilityUnknown: {
            (options?: vsanhealthService.vim.CpuCompatibilityUnknown): vsanhealthService.vim.CpuCompatibilityUnknown;
         };
         CpuHotPlugNotSupported: {
            (options?: vsanhealthService.vim.CpuHotPlugNotSupported): vsanhealthService.vim.CpuHotPlugNotSupported;
         };
         CpuIncompatible: {
            (options?: vsanhealthService.vim.CpuIncompatible): vsanhealthService.vim.CpuIncompatible;
         };
         CpuIncompatible1ECX: {
            (options?: vsanhealthService.vim.CpuIncompatible1ECX): vsanhealthService.vim.CpuIncompatible1ECX;
         };
         CpuIncompatible81EDX: {
            (options?: vsanhealthService.vim.CpuIncompatible81EDX): vsanhealthService.vim.CpuIncompatible81EDX;
         };
         CustomizationFault: {
            (options?: vsanhealthService.vim.CustomizationFault): vsanhealthService.vim.CustomizationFault;
         };
         CustomizationPending: {
            (options?: vsanhealthService.vim.CustomizationPending): vsanhealthService.vim.CustomizationPending;
         };
         DVPortNotSupported: {
            (options?: vsanhealthService.vim.DVPortNotSupported): vsanhealthService.vim.DVPortNotSupported;
         };
         DasConfigFaultDasConfigFaultReason: {
            "HostNetworkMisconfiguration": string;
            "HostMisconfiguration": string;
            "InsufficientPrivileges": string;
            "NoPrimaryAgentAvailable": string;
            "Other": string;
            "NoDatastoresConfigured": string;
            "CreateConfigVvolFailed": string;
            "VSanNotSupportedOnHost": string;
            "DasNetworkMisconfiguration": string;
         };
         DasConfigFault: {
            (options?: vsanhealthService.vim.DasConfigFault): vsanhealthService.vim.DasConfigFault;
         };
         DatabaseError: {
            (options?: vsanhealthService.vim.DatabaseError): vsanhealthService.vim.DatabaseError;
         };
         DatacenterMismatchArgument: {
            (options?: vsanhealthService.vim.DatacenterMismatchArgument): vsanhealthService.vim.DatacenterMismatchArgument;
         };
         ArrayOfDatacenterMismatchArgument: {
            (options?: vsanhealthService.vim.ArrayOfDatacenterMismatchArgument): vsanhealthService.vim.ArrayOfDatacenterMismatchArgument;
         };
         DatacenterMismatch: {
            (options?: vsanhealthService.vim.DatacenterMismatch): vsanhealthService.vim.DatacenterMismatch;
         };
         DatastoreNotWritableOnHost: {
            (options?: vsanhealthService.vim.DatastoreNotWritableOnHost): vsanhealthService.vim.DatastoreNotWritableOnHost;
         };
         DeltaDiskFormatNotSupported: {
            (options?: vsanhealthService.vim.DeltaDiskFormatNotSupported): vsanhealthService.vim.DeltaDiskFormatNotSupported;
         };
         DestinationSwitchFull: {
            (options?: vsanhealthService.vim.DestinationSwitchFull): vsanhealthService.vim.DestinationSwitchFull;
         };
         DestinationVsanDisabled: {
            (options?: vsanhealthService.vim.DestinationVsanDisabled): vsanhealthService.vim.DestinationVsanDisabled;
         };
         DeviceBackingNotSupported: {
            (options?: vsanhealthService.vim.DeviceBackingNotSupported): vsanhealthService.vim.DeviceBackingNotSupported;
         };
         DeviceControllerNotSupported: {
            (options?: vsanhealthService.vim.DeviceControllerNotSupported): vsanhealthService.vim.DeviceControllerNotSupported;
         };
         DeviceHotPlugNotSupported: {
            (options?: vsanhealthService.vim.DeviceHotPlugNotSupported): vsanhealthService.vim.DeviceHotPlugNotSupported;
         };
         DeviceNotFound: {
            (options?: vsanhealthService.vim.DeviceNotFound): vsanhealthService.vim.DeviceNotFound;
         };
         DeviceNotSupportedReason: {
            "host": string;
            "guest": string;
         };
         DeviceNotSupported: {
            (options?: vsanhealthService.vim.DeviceNotSupported): vsanhealthService.vim.DeviceNotSupported;
         };
         DeviceUnsupportedForVmPlatform: {
            (options?: vsanhealthService.vim.DeviceUnsupportedForVmPlatform): vsanhealthService.vim.DeviceUnsupportedForVmPlatform;
         };
         DeviceUnsupportedForVmVersion: {
            (options?: vsanhealthService.vim.DeviceUnsupportedForVmVersion): vsanhealthService.vim.DeviceUnsupportedForVmVersion;
         };
         DigestNotSupported: {
            (options?: vsanhealthService.vim.DigestNotSupported): vsanhealthService.vim.DigestNotSupported;
         };
         DirectoryNotEmpty: {
            (options?: vsanhealthService.vim.DirectoryNotEmpty): vsanhealthService.vim.DirectoryNotEmpty;
         };
         DisableAdminNotSupported: {
            (options?: vsanhealthService.vim.DisableAdminNotSupported): vsanhealthService.vim.DisableAdminNotSupported;
         };
         DisallowedChangeByServiceDisallowedChange: {
            "hotExtendDisk": string;
         };
         DisallowedChangeByService: {
            (options?: vsanhealthService.vim.DisallowedChangeByService): vsanhealthService.vim.DisallowedChangeByService;
         };
         DisallowedDiskModeChange: {
            (options?: vsanhealthService.vim.DisallowedDiskModeChange): vsanhealthService.vim.DisallowedDiskModeChange;
         };
         DisallowedMigrationDeviceAttached: {
            (options?: vsanhealthService.vim.DisallowedMigrationDeviceAttached): vsanhealthService.vim.DisallowedMigrationDeviceAttached;
         };
         DisallowedOperationOnFailoverHost: {
            (options?: vsanhealthService.vim.DisallowedOperationOnFailoverHost): vsanhealthService.vim.DisallowedOperationOnFailoverHost;
         };
         DisconnectedHostsBlockingEVC: {
            (options?: vsanhealthService.vim.DisconnectedHostsBlockingEVC): vsanhealthService.vim.DisconnectedHostsBlockingEVC;
         };
         DiskHasPartitions: {
            (options?: vsanhealthService.vim.DiskHasPartitions): vsanhealthService.vim.DiskHasPartitions;
         };
         DiskIsLastRemainingNonSSD: {
            (options?: vsanhealthService.vim.DiskIsLastRemainingNonSSD): vsanhealthService.vim.DiskIsLastRemainingNonSSD;
         };
         DiskIsNonLocal: {
            (options?: vsanhealthService.vim.DiskIsNonLocal): vsanhealthService.vim.DiskIsNonLocal;
         };
         DiskIsUSB: {
            (options?: vsanhealthService.vim.DiskIsUSB): vsanhealthService.vim.DiskIsUSB;
         };
         DiskMoveTypeNotSupported: {
            (options?: vsanhealthService.vim.DiskMoveTypeNotSupported): vsanhealthService.vim.DiskMoveTypeNotSupported;
         };
         DiskNotSupported: {
            (options?: vsanhealthService.vim.DiskNotSupported): vsanhealthService.vim.DiskNotSupported;
         };
         DiskTooSmall: {
            (options?: vsanhealthService.vim.DiskTooSmall): vsanhealthService.vim.DiskTooSmall;
         };
         DomainNotFound: {
            (options?: vsanhealthService.vim.DomainNotFound): vsanhealthService.vim.DomainNotFound;
         };
         DrsDisabledOnVm: {
            (options?: vsanhealthService.vim.DrsDisabledOnVm): vsanhealthService.vim.DrsDisabledOnVm;
         };
         DrsVmotionIncompatibleFault: {
            (options?: vsanhealthService.vim.DrsVmotionIncompatibleFault): vsanhealthService.vim.DrsVmotionIncompatibleFault;
         };
         DuplicateDisks: {
            (options?: vsanhealthService.vim.DuplicateDisks): vsanhealthService.vim.DuplicateDisks;
         };
         DuplicateName: {
            (options?: vsanhealthService.vim.DuplicateName): vsanhealthService.vim.DuplicateName;
         };
         DuplicateVsanNetworkInterface: {
            (options?: vsanhealthService.vim.DuplicateVsanNetworkInterface): vsanhealthService.vim.DuplicateVsanNetworkInterface;
         };
         DvsApplyOperationFaultFaultOnObject: {
            (options?: vsanhealthService.vim.DvsApplyOperationFaultFaultOnObject): vsanhealthService.vim.DvsApplyOperationFaultFaultOnObject;
         };
         ArrayOfDvsApplyOperationFaultFaultOnObject: {
            (options?: vsanhealthService.vim.ArrayOfDvsApplyOperationFaultFaultOnObject): vsanhealthService.vim.ArrayOfDvsApplyOperationFaultFaultOnObject;
         };
         DvsApplyOperationFault: {
            (options?: vsanhealthService.vim.DvsApplyOperationFault): vsanhealthService.vim.DvsApplyOperationFault;
         };
         DvsFault: {
            (options?: vsanhealthService.vim.DvsFault): vsanhealthService.vim.DvsFault;
         };
         DvsNotAuthorized: {
            (options?: vsanhealthService.vim.DvsNotAuthorized): vsanhealthService.vim.DvsNotAuthorized;
         };
         DvsOperationBulkFaultFaultOnHost: {
            (options?: vsanhealthService.vim.DvsOperationBulkFaultFaultOnHost): vsanhealthService.vim.DvsOperationBulkFaultFaultOnHost;
         };
         ArrayOfDvsOperationBulkFaultFaultOnHost: {
            (options?: vsanhealthService.vim.ArrayOfDvsOperationBulkFaultFaultOnHost): vsanhealthService.vim.ArrayOfDvsOperationBulkFaultFaultOnHost;
         };
         DvsOperationBulkFault: {
            (options?: vsanhealthService.vim.DvsOperationBulkFault): vsanhealthService.vim.DvsOperationBulkFault;
         };
         DvsScopeViolated: {
            (options?: vsanhealthService.vim.DvsScopeViolated): vsanhealthService.vim.DvsScopeViolated;
         };
         EVCAdmissionFailed: {
            (options?: vsanhealthService.vim.EVCAdmissionFailed): vsanhealthService.vim.EVCAdmissionFailed;
         };
         EVCAdmissionFailedCPUFeaturesForMode: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedCPUFeaturesForMode): vsanhealthService.vim.EVCAdmissionFailedCPUFeaturesForMode;
         };
         EVCAdmissionFailedCPUModel: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedCPUModel): vsanhealthService.vim.EVCAdmissionFailedCPUModel;
         };
         EVCAdmissionFailedCPUModelForMode: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedCPUModelForMode): vsanhealthService.vim.EVCAdmissionFailedCPUModelForMode;
         };
         EVCAdmissionFailedCPUVendor: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedCPUVendor): vsanhealthService.vim.EVCAdmissionFailedCPUVendor;
         };
         EVCAdmissionFailedCPUVendorUnknown: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedCPUVendorUnknown): vsanhealthService.vim.EVCAdmissionFailedCPUVendorUnknown;
         };
         EVCAdmissionFailedHostDisconnected: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedHostDisconnected): vsanhealthService.vim.EVCAdmissionFailedHostDisconnected;
         };
         EVCAdmissionFailedHostSoftware: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedHostSoftware): vsanhealthService.vim.EVCAdmissionFailedHostSoftware;
         };
         EVCAdmissionFailedHostSoftwareForMode: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedHostSoftwareForMode): vsanhealthService.vim.EVCAdmissionFailedHostSoftwareForMode;
         };
         EVCAdmissionFailedVmActive: {
            (options?: vsanhealthService.vim.EVCAdmissionFailedVmActive): vsanhealthService.vim.EVCAdmissionFailedVmActive;
         };
         EVCConfigFault: {
            (options?: vsanhealthService.vim.EVCConfigFault): vsanhealthService.vim.EVCConfigFault;
         };
         EVCModeIllegalByVendor: {
            (options?: vsanhealthService.vim.EVCModeIllegalByVendor): vsanhealthService.vim.EVCModeIllegalByVendor;
         };
         EVCModeUnsupportedByHosts: {
            (options?: vsanhealthService.vim.EVCModeUnsupportedByHosts): vsanhealthService.vim.EVCModeUnsupportedByHosts;
         };
         EVCUnsupportedByHostHardware: {
            (options?: vsanhealthService.vim.EVCUnsupportedByHostHardware): vsanhealthService.vim.EVCUnsupportedByHostHardware;
         };
         EVCUnsupportedByHostSoftware: {
            (options?: vsanhealthService.vim.EVCUnsupportedByHostSoftware): vsanhealthService.vim.EVCUnsupportedByHostSoftware;
         };
         EightHostLimitViolated: {
            (options?: vsanhealthService.vim.EightHostLimitViolated): vsanhealthService.vim.EightHostLimitViolated;
         };
         ExpiredAddonLicense: {
            (options?: vsanhealthService.vim.ExpiredAddonLicense): vsanhealthService.vim.ExpiredAddonLicense;
         };
         ExpiredEditionLicense: {
            (options?: vsanhealthService.vim.ExpiredEditionLicense): vsanhealthService.vim.ExpiredEditionLicense;
         };
         ExpiredFeatureLicense: {
            (options?: vsanhealthService.vim.ExpiredFeatureLicense): vsanhealthService.vim.ExpiredFeatureLicense;
         };
         ExtendedFault: {
            (options?: vsanhealthService.vim.ExtendedFault): vsanhealthService.vim.ExtendedFault;
         };
         FailToEnableSPBM: {
            (options?: vsanhealthService.vim.FailToEnableSPBM): vsanhealthService.vim.FailToEnableSPBM;
         };
         FailToLockFaultToleranceVMs: {
            (options?: vsanhealthService.vim.FailToLockFaultToleranceVMs): vsanhealthService.vim.FailToLockFaultToleranceVMs;
         };
         FaultToleranceAntiAffinityViolated: {
            (options?: vsanhealthService.vim.FaultToleranceAntiAffinityViolated): vsanhealthService.vim.FaultToleranceAntiAffinityViolated;
         };
         FaultToleranceCannotEditMem: {
            (options?: vsanhealthService.vim.FaultToleranceCannotEditMem): vsanhealthService.vim.FaultToleranceCannotEditMem;
         };
         FaultToleranceCpuIncompatible: {
            (options?: vsanhealthService.vim.FaultToleranceCpuIncompatible): vsanhealthService.vim.FaultToleranceCpuIncompatible;
         };
         FaultToleranceNeedsThickDisk: {
            (options?: vsanhealthService.vim.FaultToleranceNeedsThickDisk): vsanhealthService.vim.FaultToleranceNeedsThickDisk;
         };
         FaultToleranceNotLicensed: {
            (options?: vsanhealthService.vim.FaultToleranceNotLicensed): vsanhealthService.vim.FaultToleranceNotLicensed;
         };
         FaultToleranceNotSameBuild: {
            (options?: vsanhealthService.vim.FaultToleranceNotSameBuild): vsanhealthService.vim.FaultToleranceNotSameBuild;
         };
         FaultTolerancePrimaryPowerOnNotAttempted: {
            (options?: vsanhealthService.vim.FaultTolerancePrimaryPowerOnNotAttempted): vsanhealthService.vim.FaultTolerancePrimaryPowerOnNotAttempted;
         };
         FaultToleranceVmNotDasProtected: {
            (options?: vsanhealthService.vim.FaultToleranceVmNotDasProtected): vsanhealthService.vim.FaultToleranceVmNotDasProtected;
         };
         FcoeFault: {
            (options?: vsanhealthService.vim.FcoeFault): vsanhealthService.vim.FcoeFault;
         };
         FcoeFaultPnicHasNoPortSet: {
            (options?: vsanhealthService.vim.FcoeFaultPnicHasNoPortSet): vsanhealthService.vim.FcoeFaultPnicHasNoPortSet;
         };
         FeatureRequirementsNotMet: {
            (options?: vsanhealthService.vim.FeatureRequirementsNotMet): vsanhealthService.vim.FeatureRequirementsNotMet;
         };
         FileAlreadyExists: {
            (options?: vsanhealthService.vim.FileAlreadyExists): vsanhealthService.vim.FileAlreadyExists;
         };
         FileBackedPortNotSupported: {
            (options?: vsanhealthService.vim.FileBackedPortNotSupported): vsanhealthService.vim.FileBackedPortNotSupported;
         };
         FileFault: {
            (options?: vsanhealthService.vim.FileFault): vsanhealthService.vim.FileFault;
         };
         FileLocked: {
            (options?: vsanhealthService.vim.FileLocked): vsanhealthService.vim.FileLocked;
         };
         FileNameTooLong: {
            (options?: vsanhealthService.vim.FileNameTooLong): vsanhealthService.vim.FileNameTooLong;
         };
         FileNotFound: {
            (options?: vsanhealthService.vim.FileNotFound): vsanhealthService.vim.FileNotFound;
         };
         FileNotWritable: {
            (options?: vsanhealthService.vim.FileNotWritable): vsanhealthService.vim.FileNotWritable;
         };
         FileTooLarge: {
            (options?: vsanhealthService.vim.FileTooLarge): vsanhealthService.vim.FileTooLarge;
         };
         FilesystemQuiesceFault: {
            (options?: vsanhealthService.vim.FilesystemQuiesceFault): vsanhealthService.vim.FilesystemQuiesceFault;
         };
         FilterInUse: {
            (options?: vsanhealthService.vim.FilterInUse): vsanhealthService.vim.FilterInUse;
         };
         FtIssuesOnHostHostSelectionType: {
            "user": string;
            "vc": string;
            "drs": string;
         };
         FtIssuesOnHost: {
            (options?: vsanhealthService.vim.FtIssuesOnHost): vsanhealthService.vim.FtIssuesOnHost;
         };
         FullStorageVMotionNotSupported: {
            (options?: vsanhealthService.vim.FullStorageVMotionNotSupported): vsanhealthService.vim.FullStorageVMotionNotSupported;
         };
         GatewayConnectFault: {
            (options?: vsanhealthService.vim.GatewayConnectFault): vsanhealthService.vim.GatewayConnectFault;
         };
         GatewayHostNotReachable: {
            (options?: vsanhealthService.vim.GatewayHostNotReachable): vsanhealthService.vim.GatewayHostNotReachable;
         };
         GatewayNotFound: {
            (options?: vsanhealthService.vim.GatewayNotFound): vsanhealthService.vim.GatewayNotFound;
         };
         GatewayNotReachable: {
            (options?: vsanhealthService.vim.GatewayNotReachable): vsanhealthService.vim.GatewayNotReachable;
         };
         GatewayOperationRefused: {
            (options?: vsanhealthService.vim.GatewayOperationRefused): vsanhealthService.vim.GatewayOperationRefused;
         };
         GatewayToHostAuthFault: {
            (options?: vsanhealthService.vim.GatewayToHostAuthFault): vsanhealthService.vim.GatewayToHostAuthFault;
         };
         GatewayToHostConnectFault: {
            (options?: vsanhealthService.vim.GatewayToHostConnectFault): vsanhealthService.vim.GatewayToHostConnectFault;
         };
         GatewayToHostTrustVerifyFault: {
            (options?: vsanhealthService.vim.GatewayToHostTrustVerifyFault): vsanhealthService.vim.GatewayToHostTrustVerifyFault;
         };
         GenericDrsFault: {
            (options?: vsanhealthService.vim.GenericDrsFault): vsanhealthService.vim.GenericDrsFault;
         };
         GenericVmConfigFault: {
            (options?: vsanhealthService.vim.GenericVmConfigFault): vsanhealthService.vim.GenericVmConfigFault;
         };
         GuestAuthenticationChallenge: {
            (options?: vsanhealthService.vim.GuestAuthenticationChallenge): vsanhealthService.vim.GuestAuthenticationChallenge;
         };
         GuestComponentsOutOfDate: {
            (options?: vsanhealthService.vim.GuestComponentsOutOfDate): vsanhealthService.vim.GuestComponentsOutOfDate;
         };
         GuestMultipleMappings: {
            (options?: vsanhealthService.vim.GuestMultipleMappings): vsanhealthService.vim.GuestMultipleMappings;
         };
         GuestOperationsFault: {
            (options?: vsanhealthService.vim.GuestOperationsFault): vsanhealthService.vim.GuestOperationsFault;
         };
         GuestOperationsUnavailable: {
            (options?: vsanhealthService.vim.GuestOperationsUnavailable): vsanhealthService.vim.GuestOperationsUnavailable;
         };
         GuestPermissionDenied: {
            (options?: vsanhealthService.vim.GuestPermissionDenied): vsanhealthService.vim.GuestPermissionDenied;
         };
         GuestProcessNotFound: {
            (options?: vsanhealthService.vim.GuestProcessNotFound): vsanhealthService.vim.GuestProcessNotFound;
         };
         GuestRegistryFault: {
            (options?: vsanhealthService.vim.GuestRegistryFault): vsanhealthService.vim.GuestRegistryFault;
         };
         GuestRegistryKeyAlreadyExists: {
            (options?: vsanhealthService.vim.GuestRegistryKeyAlreadyExists): vsanhealthService.vim.GuestRegistryKeyAlreadyExists;
         };
         GuestRegistryKeyFault: {
            (options?: vsanhealthService.vim.GuestRegistryKeyFault): vsanhealthService.vim.GuestRegistryKeyFault;
         };
         GuestRegistryKeyHasSubkeys: {
            (options?: vsanhealthService.vim.GuestRegistryKeyHasSubkeys): vsanhealthService.vim.GuestRegistryKeyHasSubkeys;
         };
         GuestRegistryKeyInvalid: {
            (options?: vsanhealthService.vim.GuestRegistryKeyInvalid): vsanhealthService.vim.GuestRegistryKeyInvalid;
         };
         GuestRegistryKeyParentVolatile: {
            (options?: vsanhealthService.vim.GuestRegistryKeyParentVolatile): vsanhealthService.vim.GuestRegistryKeyParentVolatile;
         };
         GuestRegistryValueFault: {
            (options?: vsanhealthService.vim.GuestRegistryValueFault): vsanhealthService.vim.GuestRegistryValueFault;
         };
         GuestRegistryValueNotFound: {
            (options?: vsanhealthService.vim.GuestRegistryValueNotFound): vsanhealthService.vim.GuestRegistryValueNotFound;
         };
         HAErrorsAtDest: {
            (options?: vsanhealthService.vim.HAErrorsAtDest): vsanhealthService.vim.HAErrorsAtDest;
         };
         HeterogenousHostsBlockingEVC: {
            (options?: vsanhealthService.vim.HeterogenousHostsBlockingEVC): vsanhealthService.vim.HeterogenousHostsBlockingEVC;
         };
         HostAccessRestrictedToManagementServer: {
            (options?: vsanhealthService.vim.HostAccessRestrictedToManagementServer): vsanhealthService.vim.HostAccessRestrictedToManagementServer;
         };
         HostConfigFailed: {
            (options?: vsanhealthService.vim.HostConfigFailed): vsanhealthService.vim.HostConfigFailed;
         };
         HostConfigFault: {
            (options?: vsanhealthService.vim.HostConfigFault): vsanhealthService.vim.HostConfigFault;
         };
         HostConnectFault: {
            (options?: vsanhealthService.vim.HostConnectFault): vsanhealthService.vim.HostConnectFault;
         };
         HostHasComponentFailureHostComponentType: {
            "Datastore": string;
         };
         HostHasComponentFailure: {
            (options?: vsanhealthService.vim.HostHasComponentFailure): vsanhealthService.vim.HostHasComponentFailure;
         };
         HostInDomain: {
            (options?: vsanhealthService.vim.HostInDomain): vsanhealthService.vim.HostInDomain;
         };
         HostIncompatibleForFaultToleranceReason: {
            "product": string;
            "processor": string;
         };
         HostIncompatibleForFaultTolerance: {
            (options?: vsanhealthService.vim.HostIncompatibleForFaultTolerance): vsanhealthService.vim.HostIncompatibleForFaultTolerance;
         };
         HostIncompatibleForRecordReplayReason: {
            "product": string;
            "processor": string;
         };
         HostIncompatibleForRecordReplay: {
            (options?: vsanhealthService.vim.HostIncompatibleForRecordReplay): vsanhealthService.vim.HostIncompatibleForRecordReplay;
         };
         HostInventoryFull: {
            (options?: vsanhealthService.vim.HostInventoryFull): vsanhealthService.vim.HostInventoryFull;
         };
         HostPowerOpFailed: {
            (options?: vsanhealthService.vim.HostPowerOpFailed): vsanhealthService.vim.HostPowerOpFailed;
         };
         HostSpecificationOperationFailed: {
            (options?: vsanhealthService.vim.HostSpecificationOperationFailed): vsanhealthService.vim.HostSpecificationOperationFailed;
         };
         HotSnapshotMoveNotSupported: {
            (options?: vsanhealthService.vim.HotSnapshotMoveNotSupported): vsanhealthService.vim.HotSnapshotMoveNotSupported;
         };
         IDEDiskNotSupported: {
            (options?: vsanhealthService.vim.IDEDiskNotSupported): vsanhealthService.vim.IDEDiskNotSupported;
         };
         IORMNotSupportedHostOnDatastore: {
            (options?: vsanhealthService.vim.IORMNotSupportedHostOnDatastore): vsanhealthService.vim.IORMNotSupportedHostOnDatastore;
         };
         ImportHostAddFailure: {
            (options?: vsanhealthService.vim.ImportHostAddFailure): vsanhealthService.vim.ImportHostAddFailure;
         };
         ImportOperationBulkFaultFaultOnImport: {
            (options?: vsanhealthService.vim.ImportOperationBulkFaultFaultOnImport): vsanhealthService.vim.ImportOperationBulkFaultFaultOnImport;
         };
         ArrayOfImportOperationBulkFaultFaultOnImport: {
            (options?: vsanhealthService.vim.ArrayOfImportOperationBulkFaultFaultOnImport): vsanhealthService.vim.ArrayOfImportOperationBulkFaultFaultOnImport;
         };
         ImportOperationBulkFault: {
            (options?: vsanhealthService.vim.ImportOperationBulkFault): vsanhealthService.vim.ImportOperationBulkFault;
         };
         InUseFeatureManipulationDisallowed: {
            (options?: vsanhealthService.vim.InUseFeatureManipulationDisallowed): vsanhealthService.vim.InUseFeatureManipulationDisallowed;
         };
         InaccessibleDatastore: {
            (options?: vsanhealthService.vim.InaccessibleDatastore): vsanhealthService.vim.InaccessibleDatastore;
         };
         InaccessibleFTMetadataDatastore: {
            (options?: vsanhealthService.vim.InaccessibleFTMetadataDatastore): vsanhealthService.vim.InaccessibleFTMetadataDatastore;
         };
         InaccessibleVFlashSource: {
            (options?: vsanhealthService.vim.InaccessibleVFlashSource): vsanhealthService.vim.InaccessibleVFlashSource;
         };
         IncompatibleDefaultDevice: {
            (options?: vsanhealthService.vim.IncompatibleDefaultDevice): vsanhealthService.vim.IncompatibleDefaultDevice;
         };
         IncompatibleHostForFtSecondary: {
            (options?: vsanhealthService.vim.IncompatibleHostForFtSecondary): vsanhealthService.vim.IncompatibleHostForFtSecondary;
         };
         IncompatibleHostForVmReplicationIncompatibleReason: {
            "rpo": string;
            "netCompression": string;
         };
         IncompatibleHostForVmReplication: {
            (options?: vsanhealthService.vim.IncompatibleHostForVmReplication): vsanhealthService.vim.IncompatibleHostForVmReplication;
         };
         IncompatibleSetting: {
            (options?: vsanhealthService.vim.IncompatibleSetting): vsanhealthService.vim.IncompatibleSetting;
         };
         IncorrectFileType: {
            (options?: vsanhealthService.vim.IncorrectFileType): vsanhealthService.vim.IncorrectFileType;
         };
         IncorrectHostInformation: {
            (options?: vsanhealthService.vim.IncorrectHostInformation): vsanhealthService.vim.IncorrectHostInformation;
         };
         IndependentDiskVMotionNotSupported: {
            (options?: vsanhealthService.vim.IndependentDiskVMotionNotSupported): vsanhealthService.vim.IndependentDiskVMotionNotSupported;
         };
         InsufficientAgentVmsDeployed: {
            (options?: vsanhealthService.vim.InsufficientAgentVmsDeployed): vsanhealthService.vim.InsufficientAgentVmsDeployed;
         };
         InsufficientCpuResourcesFault: {
            (options?: vsanhealthService.vim.InsufficientCpuResourcesFault): vsanhealthService.vim.InsufficientCpuResourcesFault;
         };
         InsufficientDisks: {
            (options?: vsanhealthService.vim.InsufficientDisks): vsanhealthService.vim.InsufficientDisks;
         };
         InsufficientFailoverResourcesFault: {
            (options?: vsanhealthService.vim.InsufficientFailoverResourcesFault): vsanhealthService.vim.InsufficientFailoverResourcesFault;
         };
         InsufficientGraphicsResourcesFault: {
            (options?: vsanhealthService.vim.InsufficientGraphicsResourcesFault): vsanhealthService.vim.InsufficientGraphicsResourcesFault;
         };
         InsufficientHostCapacityFault: {
            (options?: vsanhealthService.vim.InsufficientHostCapacityFault): vsanhealthService.vim.InsufficientHostCapacityFault;
         };
         InsufficientHostCpuCapacityFault: {
            (options?: vsanhealthService.vim.InsufficientHostCpuCapacityFault): vsanhealthService.vim.InsufficientHostCpuCapacityFault;
         };
         InsufficientHostMemoryCapacityFault: {
            (options?: vsanhealthService.vim.InsufficientHostMemoryCapacityFault): vsanhealthService.vim.InsufficientHostMemoryCapacityFault;
         };
         InsufficientMemoryResourcesFault: {
            (options?: vsanhealthService.vim.InsufficientMemoryResourcesFault): vsanhealthService.vim.InsufficientMemoryResourcesFault;
         };
         InsufficientNetworkCapacity: {
            (options?: vsanhealthService.vim.InsufficientNetworkCapacity): vsanhealthService.vim.InsufficientNetworkCapacity;
         };
         InsufficientNetworkResourcePoolCapacity: {
            (options?: vsanhealthService.vim.InsufficientNetworkResourcePoolCapacity): vsanhealthService.vim.InsufficientNetworkResourcePoolCapacity;
         };
         InsufficientPerCpuCapacity: {
            (options?: vsanhealthService.vim.InsufficientPerCpuCapacity): vsanhealthService.vim.InsufficientPerCpuCapacity;
         };
         InsufficientResourcesFault: {
            (options?: vsanhealthService.vim.InsufficientResourcesFault): vsanhealthService.vim.InsufficientResourcesFault;
         };
         InsufficientStandbyCpuResource: {
            (options?: vsanhealthService.vim.InsufficientStandbyCpuResource): vsanhealthService.vim.InsufficientStandbyCpuResource;
         };
         InsufficientStandbyMemoryResource: {
            (options?: vsanhealthService.vim.InsufficientStandbyMemoryResource): vsanhealthService.vim.InsufficientStandbyMemoryResource;
         };
         InsufficientStandbyResource: {
            (options?: vsanhealthService.vim.InsufficientStandbyResource): vsanhealthService.vim.InsufficientStandbyResource;
         };
         InsufficientStorageIops: {
            (options?: vsanhealthService.vim.InsufficientStorageIops): vsanhealthService.vim.InsufficientStorageIops;
         };
         InsufficientStorageSpace: {
            (options?: vsanhealthService.vim.InsufficientStorageSpace): vsanhealthService.vim.InsufficientStorageSpace;
         };
         InsufficientVFlashResourcesFault: {
            (options?: vsanhealthService.vim.InsufficientVFlashResourcesFault): vsanhealthService.vim.InsufficientVFlashResourcesFault;
         };
         InvalidAffinitySettingFault: {
            (options?: vsanhealthService.vim.InvalidAffinitySettingFault): vsanhealthService.vim.InvalidAffinitySettingFault;
         };
         InvalidBmcRole: {
            (options?: vsanhealthService.vim.InvalidBmcRole): vsanhealthService.vim.InvalidBmcRole;
         };
         InvalidBundle: {
            (options?: vsanhealthService.vim.InvalidBundle): vsanhealthService.vim.InvalidBundle;
         };
         InvalidCAMCertificate: {
            (options?: vsanhealthService.vim.InvalidCAMCertificate): vsanhealthService.vim.InvalidCAMCertificate;
         };
         InvalidCAMServer: {
            (options?: vsanhealthService.vim.InvalidCAMServer): vsanhealthService.vim.InvalidCAMServer;
         };
         InvalidClientCertificate: {
            (options?: vsanhealthService.vim.InvalidClientCertificate): vsanhealthService.vim.InvalidClientCertificate;
         };
         InvalidController: {
            (options?: vsanhealthService.vim.InvalidController): vsanhealthService.vim.InvalidController;
         };
         InvalidDasConfigArgumentEntryForInvalidArgument: {
            "admissionControl": string;
            "userHeartbeatDs": string;
            "vmConfig": string;
         };
         InvalidDasConfigArgument: {
            (options?: vsanhealthService.vim.InvalidDasConfigArgument): vsanhealthService.vim.InvalidDasConfigArgument;
         };
         InvalidDasRestartPriorityForFtVm: {
            (options?: vsanhealthService.vim.InvalidDasRestartPriorityForFtVm): vsanhealthService.vim.InvalidDasRestartPriorityForFtVm;
         };
         InvalidDatastore: {
            (options?: vsanhealthService.vim.InvalidDatastore): vsanhealthService.vim.InvalidDatastore;
         };
         InvalidDatastorePath: {
            (options?: vsanhealthService.vim.InvalidDatastorePath): vsanhealthService.vim.InvalidDatastorePath;
         };
         InvalidDatastoreState: {
            (options?: vsanhealthService.vim.InvalidDatastoreState): vsanhealthService.vim.InvalidDatastoreState;
         };
         InvalidDeviceBacking: {
            (options?: vsanhealthService.vim.InvalidDeviceBacking): vsanhealthService.vim.InvalidDeviceBacking;
         };
         InvalidDeviceOperation: {
            (options?: vsanhealthService.vim.InvalidDeviceOperation): vsanhealthService.vim.InvalidDeviceOperation;
         };
         InvalidDeviceSpec: {
            (options?: vsanhealthService.vim.InvalidDeviceSpec): vsanhealthService.vim.InvalidDeviceSpec;
         };
         InvalidDiskFormat: {
            (options?: vsanhealthService.vim.InvalidDiskFormat): vsanhealthService.vim.InvalidDiskFormat;
         };
         InvalidDrsBehaviorForFtVm: {
            (options?: vsanhealthService.vim.InvalidDrsBehaviorForFtVm): vsanhealthService.vim.InvalidDrsBehaviorForFtVm;
         };
         InvalidEditionLicense: {
            (options?: vsanhealthService.vim.InvalidEditionLicense): vsanhealthService.vim.InvalidEditionLicense;
         };
         InvalidEvent: {
            (options?: vsanhealthService.vim.InvalidEvent): vsanhealthService.vim.InvalidEvent;
         };
         InvalidFolder: {
            (options?: vsanhealthService.vim.InvalidFolder): vsanhealthService.vim.InvalidFolder;
         };
         InvalidFormat: {
            (options?: vsanhealthService.vim.InvalidFormat): vsanhealthService.vim.InvalidFormat;
         };
         InvalidGuestLogin: {
            (options?: vsanhealthService.vim.InvalidGuestLogin): vsanhealthService.vim.InvalidGuestLogin;
         };
         InvalidHostConnectionState: {
            (options?: vsanhealthService.vim.InvalidHostConnectionState): vsanhealthService.vim.InvalidHostConnectionState;
         };
         InvalidHostName: {
            (options?: vsanhealthService.vim.InvalidHostName): vsanhealthService.vim.InvalidHostName;
         };
         InvalidHostState: {
            (options?: vsanhealthService.vim.InvalidHostState): vsanhealthService.vim.InvalidHostState;
         };
         InvalidIndexArgument: {
            (options?: vsanhealthService.vim.InvalidIndexArgument): vsanhealthService.vim.InvalidIndexArgument;
         };
         InvalidIpfixConfig: {
            (options?: vsanhealthService.vim.InvalidIpfixConfig): vsanhealthService.vim.InvalidIpfixConfig;
         };
         InvalidIpmiLoginInfo: {
            (options?: vsanhealthService.vim.InvalidIpmiLoginInfo): vsanhealthService.vim.InvalidIpmiLoginInfo;
         };
         InvalidIpmiMacAddress: {
            (options?: vsanhealthService.vim.InvalidIpmiMacAddress): vsanhealthService.vim.InvalidIpmiMacAddress;
         };
         InvalidLicense: {
            (options?: vsanhealthService.vim.InvalidLicense): vsanhealthService.vim.InvalidLicense;
         };
         InvalidLocale: {
            (options?: vsanhealthService.vim.InvalidLocale): vsanhealthService.vim.InvalidLocale;
         };
         InvalidLogin: {
            (options?: vsanhealthService.vim.InvalidLogin): vsanhealthService.vim.InvalidLogin;
         };
         InvalidName: {
            (options?: vsanhealthService.vim.InvalidName): vsanhealthService.vim.InvalidName;
         };
         InvalidNasCredentials: {
            (options?: vsanhealthService.vim.InvalidNasCredentials): vsanhealthService.vim.InvalidNasCredentials;
         };
         InvalidNetworkInType: {
            (options?: vsanhealthService.vim.InvalidNetworkInType): vsanhealthService.vim.InvalidNetworkInType;
         };
         InvalidNetworkResource: {
            (options?: vsanhealthService.vim.InvalidNetworkResource): vsanhealthService.vim.InvalidNetworkResource;
         };
         InvalidOperationOnSecondaryVm: {
            (options?: vsanhealthService.vim.InvalidOperationOnSecondaryVm): vsanhealthService.vim.InvalidOperationOnSecondaryVm;
         };
         InvalidPowerState: {
            (options?: vsanhealthService.vim.InvalidPowerState): vsanhealthService.vim.InvalidPowerState;
         };
         InvalidPrivilege: {
            (options?: vsanhealthService.vim.InvalidPrivilege): vsanhealthService.vim.InvalidPrivilege;
         };
         InvalidProfileReferenceHostReason: {
            "incompatibleVersion": string;
            "missingReferenceHost": string;
         };
         InvalidProfileReferenceHost: {
            (options?: vsanhealthService.vim.InvalidProfileReferenceHost): vsanhealthService.vim.InvalidProfileReferenceHost;
         };
         InvalidPropertyType: {
            (options?: vsanhealthService.vim.InvalidPropertyType): vsanhealthService.vim.InvalidPropertyType;
         };
         InvalidPropertyValue: {
            (options?: vsanhealthService.vim.InvalidPropertyValue): vsanhealthService.vim.InvalidPropertyValue;
         };
         InvalidResourcePoolStructureFault: {
            (options?: vsanhealthService.vim.InvalidResourcePoolStructureFault): vsanhealthService.vim.InvalidResourcePoolStructureFault;
         };
         InvalidSnapshotFormat: {
            (options?: vsanhealthService.vim.InvalidSnapshotFormat): vsanhealthService.vim.InvalidSnapshotFormat;
         };
         InvalidState: {
            (options?: vsanhealthService.vim.InvalidState): vsanhealthService.vim.InvalidState;
         };
         InvalidVmConfig: {
            (options?: vsanhealthService.vim.InvalidVmConfig): vsanhealthService.vim.InvalidVmConfig;
         };
         InvalidVmState: {
            (options?: vsanhealthService.vim.InvalidVmState): vsanhealthService.vim.InvalidVmState;
         };
         InventoryHasStandardAloneHosts: {
            (options?: vsanhealthService.vim.InventoryHasStandardAloneHosts): vsanhealthService.vim.InventoryHasStandardAloneHosts;
         };
         IpHostnameGeneratorError: {
            (options?: vsanhealthService.vim.IpHostnameGeneratorError): vsanhealthService.vim.IpHostnameGeneratorError;
         };
         IscsiFault: {
            (options?: vsanhealthService.vim.IscsiFault): vsanhealthService.vim.IscsiFault;
         };
         IscsiFaultInvalidVnic: {
            (options?: vsanhealthService.vim.IscsiFaultInvalidVnic): vsanhealthService.vim.IscsiFaultInvalidVnic;
         };
         IscsiFaultPnicInUse: {
            (options?: vsanhealthService.vim.IscsiFaultPnicInUse): vsanhealthService.vim.IscsiFaultPnicInUse;
         };
         IscsiFaultVnicAlreadyBound: {
            (options?: vsanhealthService.vim.IscsiFaultVnicAlreadyBound): vsanhealthService.vim.IscsiFaultVnicAlreadyBound;
         };
         IscsiFaultVnicHasActivePaths: {
            (options?: vsanhealthService.vim.IscsiFaultVnicHasActivePaths): vsanhealthService.vim.IscsiFaultVnicHasActivePaths;
         };
         IscsiFaultVnicHasMultipleUplinks: {
            (options?: vsanhealthService.vim.IscsiFaultVnicHasMultipleUplinks): vsanhealthService.vim.IscsiFaultVnicHasMultipleUplinks;
         };
         IscsiFaultVnicHasNoUplinks: {
            (options?: vsanhealthService.vim.IscsiFaultVnicHasNoUplinks): vsanhealthService.vim.IscsiFaultVnicHasNoUplinks;
         };
         IscsiFaultVnicHasWrongUplink: {
            (options?: vsanhealthService.vim.IscsiFaultVnicHasWrongUplink): vsanhealthService.vim.IscsiFaultVnicHasWrongUplink;
         };
         IscsiFaultVnicInUse: {
            (options?: vsanhealthService.vim.IscsiFaultVnicInUse): vsanhealthService.vim.IscsiFaultVnicInUse;
         };
         IscsiFaultVnicIsLastPath: {
            (options?: vsanhealthService.vim.IscsiFaultVnicIsLastPath): vsanhealthService.vim.IscsiFaultVnicIsLastPath;
         };
         IscsiFaultVnicNotBound: {
            (options?: vsanhealthService.vim.IscsiFaultVnicNotBound): vsanhealthService.vim.IscsiFaultVnicNotBound;
         };
         IscsiFaultVnicNotFound: {
            (options?: vsanhealthService.vim.IscsiFaultVnicNotFound): vsanhealthService.vim.IscsiFaultVnicNotFound;
         };
         LargeRDMConversionNotSupported: {
            (options?: vsanhealthService.vim.LargeRDMConversionNotSupported): vsanhealthService.vim.LargeRDMConversionNotSupported;
         };
         LargeRDMNotSupportedOnDatastore: {
            (options?: vsanhealthService.vim.LargeRDMNotSupportedOnDatastore): vsanhealthService.vim.LargeRDMNotSupportedOnDatastore;
         };
         LegacyNetworkInterfaceInUse: {
            (options?: vsanhealthService.vim.LegacyNetworkInterfaceInUse): vsanhealthService.vim.LegacyNetworkInterfaceInUse;
         };
         LicenseAssignmentFailedReason: {
            "keyEntityMismatch": string;
            "downgradeDisallowed": string;
            "inventoryNotManageableByVirtualCenter": string;
            "hostsUnmanageableByVirtualCenterWithoutLicenseServer": string;
         };
         LicenseAssignmentFailed: {
            (options?: vsanhealthService.vim.LicenseAssignmentFailed): vsanhealthService.vim.LicenseAssignmentFailed;
         };
         LicenseDowngradeDisallowed: {
            (options?: vsanhealthService.vim.LicenseDowngradeDisallowed): vsanhealthService.vim.LicenseDowngradeDisallowed;
         };
         LicenseEntityNotFound: {
            (options?: vsanhealthService.vim.LicenseEntityNotFound): vsanhealthService.vim.LicenseEntityNotFound;
         };
         LicenseExpired: {
            (options?: vsanhealthService.vim.LicenseExpired): vsanhealthService.vim.LicenseExpired;
         };
         LicenseKeyEntityMismatch: {
            (options?: vsanhealthService.vim.LicenseKeyEntityMismatch): vsanhealthService.vim.LicenseKeyEntityMismatch;
         };
         LicenseRestricted: {
            (options?: vsanhealthService.vim.LicenseRestricted): vsanhealthService.vim.LicenseRestricted;
         };
         LicenseServerUnavailable: {
            (options?: vsanhealthService.vim.LicenseServerUnavailable): vsanhealthService.vim.LicenseServerUnavailable;
         };
         LicenseSourceUnavailable: {
            (options?: vsanhealthService.vim.LicenseSourceUnavailable): vsanhealthService.vim.LicenseSourceUnavailable;
         };
         LimitExceeded: {
            (options?: vsanhealthService.vim.LimitExceeded): vsanhealthService.vim.LimitExceeded;
         };
         LinuxVolumeNotClean: {
            (options?: vsanhealthService.vim.LinuxVolumeNotClean): vsanhealthService.vim.LinuxVolumeNotClean;
         };
         LogBundlingFailed: {
            (options?: vsanhealthService.vim.LogBundlingFailed): vsanhealthService.vim.LogBundlingFailed;
         };
         MaintenanceModeFileMove: {
            (options?: vsanhealthService.vim.MaintenanceModeFileMove): vsanhealthService.vim.MaintenanceModeFileMove;
         };
         MemoryFileFormatNotSupportedByDatastore: {
            (options?: vsanhealthService.vim.MemoryFileFormatNotSupportedByDatastore): vsanhealthService.vim.MemoryFileFormatNotSupportedByDatastore;
         };
         MemoryHotPlugNotSupported: {
            (options?: vsanhealthService.vim.MemoryHotPlugNotSupported): vsanhealthService.vim.MemoryHotPlugNotSupported;
         };
         MemorySizeNotRecommended: {
            (options?: vsanhealthService.vim.MemorySizeNotRecommended): vsanhealthService.vim.MemorySizeNotRecommended;
         };
         MemorySizeNotSupported: {
            (options?: vsanhealthService.vim.MemorySizeNotSupported): vsanhealthService.vim.MemorySizeNotSupported;
         };
         MemorySizeNotSupportedByDatastore: {
            (options?: vsanhealthService.vim.MemorySizeNotSupportedByDatastore): vsanhealthService.vim.MemorySizeNotSupportedByDatastore;
         };
         MemorySnapshotOnIndependentDisk: {
            (options?: vsanhealthService.vim.MemorySnapshotOnIndependentDisk): vsanhealthService.vim.MemorySnapshotOnIndependentDisk;
         };
         MethodAlreadyDisabledFault: {
            (options?: vsanhealthService.vim.MethodAlreadyDisabledFault): vsanhealthService.vim.MethodAlreadyDisabledFault;
         };
         MethodDisabled: {
            (options?: vsanhealthService.vim.MethodDisabled): vsanhealthService.vim.MethodDisabled;
         };
         MigrationDisabled: {
            (options?: vsanhealthService.vim.MigrationDisabled): vsanhealthService.vim.MigrationDisabled;
         };
         MigrationFault: {
            (options?: vsanhealthService.vim.MigrationFault): vsanhealthService.vim.MigrationFault;
         };
         MigrationFeatureNotSupported: {
            (options?: vsanhealthService.vim.MigrationFeatureNotSupported): vsanhealthService.vim.MigrationFeatureNotSupported;
         };
         MigrationNotReady: {
            (options?: vsanhealthService.vim.MigrationNotReady): vsanhealthService.vim.MigrationNotReady;
         };
         MismatchedBundle: {
            (options?: vsanhealthService.vim.MismatchedBundle): vsanhealthService.vim.MismatchedBundle;
         };
         MismatchedNetworkPolicies: {
            (options?: vsanhealthService.vim.MismatchedNetworkPolicies): vsanhealthService.vim.MismatchedNetworkPolicies;
         };
         MismatchedVMotionNetworkNames: {
            (options?: vsanhealthService.vim.MismatchedVMotionNetworkNames): vsanhealthService.vim.MismatchedVMotionNetworkNames;
         };
         MissingBmcSupport: {
            (options?: vsanhealthService.vim.MissingBmcSupport): vsanhealthService.vim.MissingBmcSupport;
         };
         MissingController: {
            (options?: vsanhealthService.vim.MissingController): vsanhealthService.vim.MissingController;
         };
         MissingIpPool: {
            (options?: vsanhealthService.vim.MissingIpPool): vsanhealthService.vim.MissingIpPool;
         };
         MissingLinuxCustResources: {
            (options?: vsanhealthService.vim.MissingLinuxCustResources): vsanhealthService.vim.MissingLinuxCustResources;
         };
         MissingNetworkIpConfig: {
            (options?: vsanhealthService.vim.MissingNetworkIpConfig): vsanhealthService.vim.MissingNetworkIpConfig;
         };
         MissingPowerOffConfiguration: {
            (options?: vsanhealthService.vim.MissingPowerOffConfiguration): vsanhealthService.vim.MissingPowerOffConfiguration;
         };
         MissingPowerOnConfiguration: {
            (options?: vsanhealthService.vim.MissingPowerOnConfiguration): vsanhealthService.vim.MissingPowerOnConfiguration;
         };
         MissingWindowsCustResources: {
            (options?: vsanhealthService.vim.MissingWindowsCustResources): vsanhealthService.vim.MissingWindowsCustResources;
         };
         MksConnectionLimitReached: {
            (options?: vsanhealthService.vim.MksConnectionLimitReached): vsanhealthService.vim.MksConnectionLimitReached;
         };
         MountError: {
            (options?: vsanhealthService.vim.MountError): vsanhealthService.vim.MountError;
         };
         MultiWriterNotSupported: {
            (options?: vsanhealthService.vim.MultiWriterNotSupported): vsanhealthService.vim.MultiWriterNotSupported;
         };
         MultipleCertificatesVerifyFaultThumbprintData: {
            (options?: vsanhealthService.vim.MultipleCertificatesVerifyFaultThumbprintData): vsanhealthService.vim.MultipleCertificatesVerifyFaultThumbprintData;
         };
         ArrayOfMultipleCertificatesVerifyFaultThumbprintData: {
            (options?: vsanhealthService.vim.ArrayOfMultipleCertificatesVerifyFaultThumbprintData): vsanhealthService.vim.ArrayOfMultipleCertificatesVerifyFaultThumbprintData;
         };
         MultipleCertificatesVerifyFault: {
            (options?: vsanhealthService.vim.MultipleCertificatesVerifyFault): vsanhealthService.vim.MultipleCertificatesVerifyFault;
         };
         MultipleSnapshotsNotSupported: {
            (options?: vsanhealthService.vim.MultipleSnapshotsNotSupported): vsanhealthService.vim.MultipleSnapshotsNotSupported;
         };
         NamespaceFull: {
            (options?: vsanhealthService.vim.NamespaceFull): vsanhealthService.vim.NamespaceFull;
         };
         NamespaceLimitReached: {
            (options?: vsanhealthService.vim.NamespaceLimitReached): vsanhealthService.vim.NamespaceLimitReached;
         };
         NamespaceWriteProtected: {
            (options?: vsanhealthService.vim.NamespaceWriteProtected): vsanhealthService.vim.NamespaceWriteProtected;
         };
         NasConfigFault: {
            (options?: vsanhealthService.vim.NasConfigFault): vsanhealthService.vim.NasConfigFault;
         };
         NasConnectionLimitReached: {
            (options?: vsanhealthService.vim.NasConnectionLimitReached): vsanhealthService.vim.NasConnectionLimitReached;
         };
         NasSessionCredentialConflict: {
            (options?: vsanhealthService.vim.NasSessionCredentialConflict): vsanhealthService.vim.NasSessionCredentialConflict;
         };
         NasVolumeNotMounted: {
            (options?: vsanhealthService.vim.NasVolumeNotMounted): vsanhealthService.vim.NasVolumeNotMounted;
         };
         NetworkCopyFault: {
            (options?: vsanhealthService.vim.NetworkCopyFault): vsanhealthService.vim.NetworkCopyFault;
         };
         NetworkDisruptedAndConfigRolledBack: {
            (options?: vsanhealthService.vim.NetworkDisruptedAndConfigRolledBack): vsanhealthService.vim.NetworkDisruptedAndConfigRolledBack;
         };
         NetworkInaccessible: {
            (options?: vsanhealthService.vim.NetworkInaccessible): vsanhealthService.vim.NetworkInaccessible;
         };
         NetworksMayNotBeTheSame: {
            (options?: vsanhealthService.vim.NetworksMayNotBeTheSame): vsanhealthService.vim.NetworksMayNotBeTheSame;
         };
         NicSettingMismatch: {
            (options?: vsanhealthService.vim.NicSettingMismatch): vsanhealthService.vim.NicSettingMismatch;
         };
         NoActiveHostInCluster: {
            (options?: vsanhealthService.vim.NoActiveHostInCluster): vsanhealthService.vim.NoActiveHostInCluster;
         };
         NoAvailableIp: {
            (options?: vsanhealthService.vim.NoAvailableIp): vsanhealthService.vim.NoAvailableIp;
         };
         NoClientCertificate: {
            (options?: vsanhealthService.vim.NoClientCertificate): vsanhealthService.vim.NoClientCertificate;
         };
         NoCompatibleDatastore: {
            (options?: vsanhealthService.vim.NoCompatibleDatastore): vsanhealthService.vim.NoCompatibleDatastore;
         };
         NoCompatibleHardAffinityHost: {
            (options?: vsanhealthService.vim.NoCompatibleHardAffinityHost): vsanhealthService.vim.NoCompatibleHardAffinityHost;
         };
         NoCompatibleHost: {
            (options?: vsanhealthService.vim.NoCompatibleHost): vsanhealthService.vim.NoCompatibleHost;
         };
         NoCompatibleHostWithAccessToDevice: {
            (options?: vsanhealthService.vim.NoCompatibleHostWithAccessToDevice): vsanhealthService.vim.NoCompatibleHostWithAccessToDevice;
         };
         NoCompatibleSoftAffinityHost: {
            (options?: vsanhealthService.vim.NoCompatibleSoftAffinityHost): vsanhealthService.vim.NoCompatibleSoftAffinityHost;
         };
         NoConnectedDatastore: {
            (options?: vsanhealthService.vim.NoConnectedDatastore): vsanhealthService.vim.NoConnectedDatastore;
         };
         NoDiskFound: {
            (options?: vsanhealthService.vim.NoDiskFound): vsanhealthService.vim.NoDiskFound;
         };
         NoDiskSpace: {
            (options?: vsanhealthService.vim.NoDiskSpace): vsanhealthService.vim.NoDiskSpace;
         };
         NoDisksToCustomize: {
            (options?: vsanhealthService.vim.NoDisksToCustomize): vsanhealthService.vim.NoDisksToCustomize;
         };
         NoGateway: {
            (options?: vsanhealthService.vim.NoGateway): vsanhealthService.vim.NoGateway;
         };
         NoGuestHeartbeat: {
            (options?: vsanhealthService.vim.NoGuestHeartbeat): vsanhealthService.vim.NoGuestHeartbeat;
         };
         NoHost: {
            (options?: vsanhealthService.vim.NoHost): vsanhealthService.vim.NoHost;
         };
         NoHostSuitableForFtSecondary: {
            (options?: vsanhealthService.vim.NoHostSuitableForFtSecondary): vsanhealthService.vim.NoHostSuitableForFtSecondary;
         };
         NoLicenseServerConfigured: {
            (options?: vsanhealthService.vim.NoLicenseServerConfigured): vsanhealthService.vim.NoLicenseServerConfigured;
         };
         NoPeerHostFound: {
            (options?: vsanhealthService.vim.NoPeerHostFound): vsanhealthService.vim.NoPeerHostFound;
         };
         NoPermission: {
            (options?: vsanhealthService.vim.NoPermission): vsanhealthService.vim.NoPermission;
         };
         NoPermissionOnAD: {
            (options?: vsanhealthService.vim.NoPermissionOnAD): vsanhealthService.vim.NoPermissionOnAD;
         };
         NoPermissionOnHost: {
            (options?: vsanhealthService.vim.NoPermissionOnHost): vsanhealthService.vim.NoPermissionOnHost;
         };
         NoPermissionOnNasVolume: {
            (options?: vsanhealthService.vim.NoPermissionOnNasVolume): vsanhealthService.vim.NoPermissionOnNasVolume;
         };
         NoSubjectName: {
            (options?: vsanhealthService.vim.NoSubjectName): vsanhealthService.vim.NoSubjectName;
         };
         NoVcManagedIpConfigured: {
            (options?: vsanhealthService.vim.NoVcManagedIpConfigured): vsanhealthService.vim.NoVcManagedIpConfigured;
         };
         NoVirtualNic: {
            (options?: vsanhealthService.vim.NoVirtualNic): vsanhealthService.vim.NoVirtualNic;
         };
         NoVmInVApp: {
            (options?: vsanhealthService.vim.NoVmInVApp): vsanhealthService.vim.NoVmInVApp;
         };
         NonADUserRequired: {
            (options?: vsanhealthService.vim.NonADUserRequired): vsanhealthService.vim.NonADUserRequired;
         };
         NonHomeRDMVMotionNotSupported: {
            (options?: vsanhealthService.vim.NonHomeRDMVMotionNotSupported): vsanhealthService.vim.NonHomeRDMVMotionNotSupported;
         };
         NonPersistentDisksNotSupported: {
            (options?: vsanhealthService.vim.NonPersistentDisksNotSupported): vsanhealthService.vim.NonPersistentDisksNotSupported;
         };
         NonVmwareOuiMacNotSupportedHost: {
            (options?: vsanhealthService.vim.NonVmwareOuiMacNotSupportedHost): vsanhealthService.vim.NonVmwareOuiMacNotSupportedHost;
         };
         NotADirectory: {
            (options?: vsanhealthService.vim.NotADirectory): vsanhealthService.vim.NotADirectory;
         };
         NotAFile: {
            (options?: vsanhealthService.vim.NotAFile): vsanhealthService.vim.NotAFile;
         };
         NotAuthenticated: {
            (options?: vsanhealthService.vim.NotAuthenticated): vsanhealthService.vim.NotAuthenticated;
         };
         NotEnoughCpus: {
            (options?: vsanhealthService.vim.NotEnoughCpus): vsanhealthService.vim.NotEnoughCpus;
         };
         NotEnoughLogicalCpus: {
            (options?: vsanhealthService.vim.NotEnoughLogicalCpus): vsanhealthService.vim.NotEnoughLogicalCpus;
         };
         NotFound: {
            (options?: vsanhealthService.vim.NotFound): vsanhealthService.vim.NotFound;
         };
         NotSupportedDeviceForFTDeviceType: {
            "virtualVmxnet3": string;
            "paraVirtualSCSIController": string;
         };
         NotSupportedDeviceForFT: {
            (options?: vsanhealthService.vim.NotSupportedDeviceForFT): vsanhealthService.vim.NotSupportedDeviceForFT;
         };
         NotSupportedHost: {
            (options?: vsanhealthService.vim.NotSupportedHost): vsanhealthService.vim.NotSupportedHost;
         };
         NotSupportedHostForChecksum: {
            (options?: vsanhealthService.vim.NotSupportedHostForChecksum): vsanhealthService.vim.NotSupportedHostForChecksum;
         };
         NotSupportedHostForVFlash: {
            (options?: vsanhealthService.vim.NotSupportedHostForVFlash): vsanhealthService.vim.NotSupportedHostForVFlash;
         };
         NotSupportedHostForVmcp: {
            (options?: vsanhealthService.vim.NotSupportedHostForVmcp): vsanhealthService.vim.NotSupportedHostForVmcp;
         };
         NotSupportedHostForVmemFile: {
            (options?: vsanhealthService.vim.NotSupportedHostForVmemFile): vsanhealthService.vim.NotSupportedHostForVmemFile;
         };
         NotSupportedHostForVsan: {
            (options?: vsanhealthService.vim.NotSupportedHostForVsan): vsanhealthService.vim.NotSupportedHostForVsan;
         };
         NotSupportedHostInCluster: {
            (options?: vsanhealthService.vim.NotSupportedHostInCluster): vsanhealthService.vim.NotSupportedHostInCluster;
         };
         NotSupportedHostInDvs: {
            (options?: vsanhealthService.vim.NotSupportedHostInDvs): vsanhealthService.vim.NotSupportedHostInDvs;
         };
         NotSupportedHostInHACluster: {
            (options?: vsanhealthService.vim.NotSupportedHostInHACluster): vsanhealthService.vim.NotSupportedHostInHACluster;
         };
         NotUserConfigurableProperty: {
            (options?: vsanhealthService.vim.NotUserConfigurableProperty): vsanhealthService.vim.NotUserConfigurableProperty;
         };
         NumVirtualCoresPerSocketNotSupported: {
            (options?: vsanhealthService.vim.NumVirtualCoresPerSocketNotSupported): vsanhealthService.vim.NumVirtualCoresPerSocketNotSupported;
         };
         NumVirtualCpusExceedsLimit: {
            (options?: vsanhealthService.vim.NumVirtualCpusExceedsLimit): vsanhealthService.vim.NumVirtualCpusExceedsLimit;
         };
         NumVirtualCpusIncompatibleReason: {
            "recordReplay": string;
            "faultTolerance": string;
         };
         NumVirtualCpusIncompatible: {
            (options?: vsanhealthService.vim.NumVirtualCpusIncompatible): vsanhealthService.vim.NumVirtualCpusIncompatible;
         };
         NumVirtualCpusNotSupported: {
            (options?: vsanhealthService.vim.NumVirtualCpusNotSupported): vsanhealthService.vim.NumVirtualCpusNotSupported;
         };
         OperationDisabledByGuest: {
            (options?: vsanhealthService.vim.OperationDisabledByGuest): vsanhealthService.vim.OperationDisabledByGuest;
         };
         OperationDisallowedOnHost: {
            (options?: vsanhealthService.vim.OperationDisallowedOnHost): vsanhealthService.vim.OperationDisallowedOnHost;
         };
         OperationNotSupportedByGuest: {
            (options?: vsanhealthService.vim.OperationNotSupportedByGuest): vsanhealthService.vim.OperationNotSupportedByGuest;
         };
         OutOfBounds: {
            (options?: vsanhealthService.vim.OutOfBounds): vsanhealthService.vim.OutOfBounds;
         };
         OvfAttribute: {
            (options?: vsanhealthService.vim.OvfAttribute): vsanhealthService.vim.OvfAttribute;
         };
         OvfConnectedDevice: {
            (options?: vsanhealthService.vim.OvfConnectedDevice): vsanhealthService.vim.OvfConnectedDevice;
         };
         OvfConnectedDeviceFloppy: {
            (options?: vsanhealthService.vim.OvfConnectedDeviceFloppy): vsanhealthService.vim.OvfConnectedDeviceFloppy;
         };
         OvfConnectedDeviceIso: {
            (options?: vsanhealthService.vim.OvfConnectedDeviceIso): vsanhealthService.vim.OvfConnectedDeviceIso;
         };
         OvfConstraint: {
            (options?: vsanhealthService.vim.OvfConstraint): vsanhealthService.vim.OvfConstraint;
         };
         OvfConsumerCallbackFault: {
            (options?: vsanhealthService.vim.OvfConsumerCallbackFault): vsanhealthService.vim.OvfConsumerCallbackFault;
         };
         OvfConsumerCommunicationError: {
            (options?: vsanhealthService.vim.OvfConsumerCommunicationError): vsanhealthService.vim.OvfConsumerCommunicationError;
         };
         OvfConsumerFault: {
            (options?: vsanhealthService.vim.OvfConsumerFault): vsanhealthService.vim.OvfConsumerFault;
         };
         OvfConsumerInvalidSection: {
            (options?: vsanhealthService.vim.OvfConsumerInvalidSection): vsanhealthService.vim.OvfConsumerInvalidSection;
         };
         OvfConsumerPowerOnFault: {
            (options?: vsanhealthService.vim.OvfConsumerPowerOnFault): vsanhealthService.vim.OvfConsumerPowerOnFault;
         };
         OvfConsumerUndeclaredSection: {
            (options?: vsanhealthService.vim.OvfConsumerUndeclaredSection): vsanhealthService.vim.OvfConsumerUndeclaredSection;
         };
         OvfConsumerUndefinedPrefix: {
            (options?: vsanhealthService.vim.OvfConsumerUndefinedPrefix): vsanhealthService.vim.OvfConsumerUndefinedPrefix;
         };
         OvfConsumerValidationFault: {
            (options?: vsanhealthService.vim.OvfConsumerValidationFault): vsanhealthService.vim.OvfConsumerValidationFault;
         };
         OvfCpuCompatibility: {
            (options?: vsanhealthService.vim.OvfCpuCompatibility): vsanhealthService.vim.OvfCpuCompatibility;
         };
         OvfCpuCompatibilityCheckNotSupported: {
            (options?: vsanhealthService.vim.OvfCpuCompatibilityCheckNotSupported): vsanhealthService.vim.OvfCpuCompatibilityCheckNotSupported;
         };
         OvfDiskMappingNotFound: {
            (options?: vsanhealthService.vim.OvfDiskMappingNotFound): vsanhealthService.vim.OvfDiskMappingNotFound;
         };
         OvfDiskOrderConstraint: {
            (options?: vsanhealthService.vim.OvfDiskOrderConstraint): vsanhealthService.vim.OvfDiskOrderConstraint;
         };
         OvfDuplicateElement: {
            (options?: vsanhealthService.vim.OvfDuplicateElement): vsanhealthService.vim.OvfDuplicateElement;
         };
         OvfDuplicatedElementBoundary: {
            (options?: vsanhealthService.vim.OvfDuplicatedElementBoundary): vsanhealthService.vim.OvfDuplicatedElementBoundary;
         };
         OvfDuplicatedPropertyIdExport: {
            (options?: vsanhealthService.vim.OvfDuplicatedPropertyIdExport): vsanhealthService.vim.OvfDuplicatedPropertyIdExport;
         };
         OvfDuplicatedPropertyIdImport: {
            (options?: vsanhealthService.vim.OvfDuplicatedPropertyIdImport): vsanhealthService.vim.OvfDuplicatedPropertyIdImport;
         };
         OvfElement: {
            (options?: vsanhealthService.vim.OvfElement): vsanhealthService.vim.OvfElement;
         };
         OvfElementInvalidValue: {
            (options?: vsanhealthService.vim.OvfElementInvalidValue): vsanhealthService.vim.OvfElementInvalidValue;
         };
         OvfExport: {
            (options?: vsanhealthService.vim.OvfExport): vsanhealthService.vim.OvfExport;
         };
         OvfExportFailed: {
            (options?: vsanhealthService.vim.OvfExportFailed): vsanhealthService.vim.OvfExportFailed;
         };
         OvfFault: {
            (options?: vsanhealthService.vim.OvfFault): vsanhealthService.vim.OvfFault;
         };
         OvfHardwareCheck: {
            (options?: vsanhealthService.vim.OvfHardwareCheck): vsanhealthService.vim.OvfHardwareCheck;
         };
         OvfHardwareExport: {
            (options?: vsanhealthService.vim.OvfHardwareExport): vsanhealthService.vim.OvfHardwareExport;
         };
         OvfHostResourceConstraint: {
            (options?: vsanhealthService.vim.OvfHostResourceConstraint): vsanhealthService.vim.OvfHostResourceConstraint;
         };
         OvfHostValueNotParsed: {
            (options?: vsanhealthService.vim.OvfHostValueNotParsed): vsanhealthService.vim.OvfHostValueNotParsed;
         };
         OvfImport: {
            (options?: vsanhealthService.vim.OvfImport): vsanhealthService.vim.OvfImport;
         };
         OvfImportFailed: {
            (options?: vsanhealthService.vim.OvfImportFailed): vsanhealthService.vim.OvfImportFailed;
         };
         OvfInternalError: {
            (options?: vsanhealthService.vim.OvfInternalError): vsanhealthService.vim.OvfInternalError;
         };
         OvfInvalidPackage: {
            (options?: vsanhealthService.vim.OvfInvalidPackage): vsanhealthService.vim.OvfInvalidPackage;
         };
         OvfInvalidValue: {
            (options?: vsanhealthService.vim.OvfInvalidValue): vsanhealthService.vim.OvfInvalidValue;
         };
         OvfInvalidValueConfiguration: {
            (options?: vsanhealthService.vim.OvfInvalidValueConfiguration): vsanhealthService.vim.OvfInvalidValueConfiguration;
         };
         OvfInvalidValueEmpty: {
            (options?: vsanhealthService.vim.OvfInvalidValueEmpty): vsanhealthService.vim.OvfInvalidValueEmpty;
         };
         OvfInvalidValueFormatMalformed: {
            (options?: vsanhealthService.vim.OvfInvalidValueFormatMalformed): vsanhealthService.vim.OvfInvalidValueFormatMalformed;
         };
         OvfInvalidValueReference: {
            (options?: vsanhealthService.vim.OvfInvalidValueReference): vsanhealthService.vim.OvfInvalidValueReference;
         };
         OvfInvalidVmName: {
            (options?: vsanhealthService.vim.OvfInvalidVmName): vsanhealthService.vim.OvfInvalidVmName;
         };
         OvfMappedOsId: {
            (options?: vsanhealthService.vim.OvfMappedOsId): vsanhealthService.vim.OvfMappedOsId;
         };
         OvfMissingAttribute: {
            (options?: vsanhealthService.vim.OvfMissingAttribute): vsanhealthService.vim.OvfMissingAttribute;
         };
         OvfMissingElement: {
            (options?: vsanhealthService.vim.OvfMissingElement): vsanhealthService.vim.OvfMissingElement;
         };
         OvfMissingElementNormalBoundary: {
            (options?: vsanhealthService.vim.OvfMissingElementNormalBoundary): vsanhealthService.vim.OvfMissingElementNormalBoundary;
         };
         OvfMissingHardware: {
            (options?: vsanhealthService.vim.OvfMissingHardware): vsanhealthService.vim.OvfMissingHardware;
         };
         OvfNetworkMappingNotSupported: {
            (options?: vsanhealthService.vim.OvfNetworkMappingNotSupported): vsanhealthService.vim.OvfNetworkMappingNotSupported;
         };
         OvfNoHostNic: {
            (options?: vsanhealthService.vim.OvfNoHostNic): vsanhealthService.vim.OvfNoHostNic;
         };
         OvfNoSpaceOnController: {
            (options?: vsanhealthService.vim.OvfNoSpaceOnController): vsanhealthService.vim.OvfNoSpaceOnController;
         };
         OvfNoSupportedHardwareFamily: {
            (options?: vsanhealthService.vim.OvfNoSupportedHardwareFamily): vsanhealthService.vim.OvfNoSupportedHardwareFamily;
         };
         OvfProperty: {
            (options?: vsanhealthService.vim.OvfProperty): vsanhealthService.vim.OvfProperty;
         };
         OvfPropertyExport: {
            (options?: vsanhealthService.vim.OvfPropertyExport): vsanhealthService.vim.OvfPropertyExport;
         };
         OvfPropertyNetwork: {
            (options?: vsanhealthService.vim.OvfPropertyNetwork): vsanhealthService.vim.OvfPropertyNetwork;
         };
         OvfPropertyNetworkExport: {
            (options?: vsanhealthService.vim.OvfPropertyNetworkExport): vsanhealthService.vim.OvfPropertyNetworkExport;
         };
         OvfPropertyQualifier: {
            (options?: vsanhealthService.vim.OvfPropertyQualifier): vsanhealthService.vim.OvfPropertyQualifier;
         };
         OvfPropertyQualifierDuplicate: {
            (options?: vsanhealthService.vim.OvfPropertyQualifierDuplicate): vsanhealthService.vim.OvfPropertyQualifierDuplicate;
         };
         OvfPropertyQualifierIgnored: {
            (options?: vsanhealthService.vim.OvfPropertyQualifierIgnored): vsanhealthService.vim.OvfPropertyQualifierIgnored;
         };
         OvfPropertyType: {
            (options?: vsanhealthService.vim.OvfPropertyType): vsanhealthService.vim.OvfPropertyType;
         };
         OvfPropertyValue: {
            (options?: vsanhealthService.vim.OvfPropertyValue): vsanhealthService.vim.OvfPropertyValue;
         };
         OvfSystemFault: {
            (options?: vsanhealthService.vim.OvfSystemFault): vsanhealthService.vim.OvfSystemFault;
         };
         OvfToXmlUnsupportedElement: {
            (options?: vsanhealthService.vim.OvfToXmlUnsupportedElement): vsanhealthService.vim.OvfToXmlUnsupportedElement;
         };
         OvfUnableToExportDisk: {
            (options?: vsanhealthService.vim.OvfUnableToExportDisk): vsanhealthService.vim.OvfUnableToExportDisk;
         };
         OvfUnexpectedElement: {
            (options?: vsanhealthService.vim.OvfUnexpectedElement): vsanhealthService.vim.OvfUnexpectedElement;
         };
         OvfUnknownDevice: {
            (options?: vsanhealthService.vim.OvfUnknownDevice): vsanhealthService.vim.OvfUnknownDevice;
         };
         OvfUnknownDeviceBacking: {
            (options?: vsanhealthService.vim.OvfUnknownDeviceBacking): vsanhealthService.vim.OvfUnknownDeviceBacking;
         };
         OvfUnknownEntity: {
            (options?: vsanhealthService.vim.OvfUnknownEntity): vsanhealthService.vim.OvfUnknownEntity;
         };
         OvfUnsupportedAttribute: {
            (options?: vsanhealthService.vim.OvfUnsupportedAttribute): vsanhealthService.vim.OvfUnsupportedAttribute;
         };
         OvfUnsupportedAttributeValue: {
            (options?: vsanhealthService.vim.OvfUnsupportedAttributeValue): vsanhealthService.vim.OvfUnsupportedAttributeValue;
         };
         OvfUnsupportedDeviceBackingInfo: {
            (options?: vsanhealthService.vim.OvfUnsupportedDeviceBackingInfo): vsanhealthService.vim.OvfUnsupportedDeviceBackingInfo;
         };
         OvfUnsupportedDeviceBackingOption: {
            (options?: vsanhealthService.vim.OvfUnsupportedDeviceBackingOption): vsanhealthService.vim.OvfUnsupportedDeviceBackingOption;
         };
         OvfUnsupportedDeviceExport: {
            (options?: vsanhealthService.vim.OvfUnsupportedDeviceExport): vsanhealthService.vim.OvfUnsupportedDeviceExport;
         };
         OvfUnsupportedDiskProvisioning: {
            (options?: vsanhealthService.vim.OvfUnsupportedDiskProvisioning): vsanhealthService.vim.OvfUnsupportedDiskProvisioning;
         };
         OvfUnsupportedElement: {
            (options?: vsanhealthService.vim.OvfUnsupportedElement): vsanhealthService.vim.OvfUnsupportedElement;
         };
         OvfUnsupportedElementValue: {
            (options?: vsanhealthService.vim.OvfUnsupportedElementValue): vsanhealthService.vim.OvfUnsupportedElementValue;
         };
         OvfUnsupportedPackage: {
            (options?: vsanhealthService.vim.OvfUnsupportedPackage): vsanhealthService.vim.OvfUnsupportedPackage;
         };
         OvfUnsupportedSection: {
            (options?: vsanhealthService.vim.OvfUnsupportedSection): vsanhealthService.vim.OvfUnsupportedSection;
         };
         OvfUnsupportedSubType: {
            (options?: vsanhealthService.vim.OvfUnsupportedSubType): vsanhealthService.vim.OvfUnsupportedSubType;
         };
         OvfUnsupportedType: {
            (options?: vsanhealthService.vim.OvfUnsupportedType): vsanhealthService.vim.OvfUnsupportedType;
         };
         OvfWrongElement: {
            (options?: vsanhealthService.vim.OvfWrongElement): vsanhealthService.vim.OvfWrongElement;
         };
         OvfWrongNamespace: {
            (options?: vsanhealthService.vim.OvfWrongNamespace): vsanhealthService.vim.OvfWrongNamespace;
         };
         OvfXmlFormat: {
            (options?: vsanhealthService.vim.OvfXmlFormat): vsanhealthService.vim.OvfXmlFormat;
         };
         PatchAlreadyInstalled: {
            (options?: vsanhealthService.vim.PatchAlreadyInstalled): vsanhealthService.vim.PatchAlreadyInstalled;
         };
         PatchBinariesNotFound: {
            (options?: vsanhealthService.vim.PatchBinariesNotFound): vsanhealthService.vim.PatchBinariesNotFound;
         };
         PatchInstallFailed: {
            (options?: vsanhealthService.vim.PatchInstallFailed): vsanhealthService.vim.PatchInstallFailed;
         };
         PatchIntegrityError: {
            (options?: vsanhealthService.vim.PatchIntegrityError): vsanhealthService.vim.PatchIntegrityError;
         };
         PatchMetadataCorrupted: {
            (options?: vsanhealthService.vim.PatchMetadataCorrupted): vsanhealthService.vim.PatchMetadataCorrupted;
         };
         PatchMetadataInvalid: {
            (options?: vsanhealthService.vim.PatchMetadataInvalid): vsanhealthService.vim.PatchMetadataInvalid;
         };
         PatchMetadataNotFound: {
            (options?: vsanhealthService.vim.PatchMetadataNotFound): vsanhealthService.vim.PatchMetadataNotFound;
         };
         PatchMissingDependencies: {
            (options?: vsanhealthService.vim.PatchMissingDependencies): vsanhealthService.vim.PatchMissingDependencies;
         };
         PatchNotApplicable: {
            (options?: vsanhealthService.vim.PatchNotApplicable): vsanhealthService.vim.PatchNotApplicable;
         };
         PatchSuperseded: {
            (options?: vsanhealthService.vim.PatchSuperseded): vsanhealthService.vim.PatchSuperseded;
         };
         PhysCompatRDMNotSupported: {
            (options?: vsanhealthService.vim.PhysCompatRDMNotSupported): vsanhealthService.vim.PhysCompatRDMNotSupported;
         };
         PlatformConfigFault: {
            (options?: vsanhealthService.vim.PlatformConfigFault): vsanhealthService.vim.PlatformConfigFault;
         };
         PowerOnFtSecondaryFailed: {
            (options?: vsanhealthService.vim.PowerOnFtSecondaryFailed): vsanhealthService.vim.PowerOnFtSecondaryFailed;
         };
         PowerOnFtSecondaryTimedout: {
            (options?: vsanhealthService.vim.PowerOnFtSecondaryTimedout): vsanhealthService.vim.PowerOnFtSecondaryTimedout;
         };
         ProfileUpdateFailedUpdateFailure: {
            (options?: vsanhealthService.vim.ProfileUpdateFailedUpdateFailure): vsanhealthService.vim.ProfileUpdateFailedUpdateFailure;
         };
         ArrayOfProfileUpdateFailedUpdateFailure: {
            (options?: vsanhealthService.vim.ArrayOfProfileUpdateFailedUpdateFailure): vsanhealthService.vim.ArrayOfProfileUpdateFailedUpdateFailure;
         };
         ProfileUpdateFailed: {
            (options?: vsanhealthService.vim.ProfileUpdateFailed): vsanhealthService.vim.ProfileUpdateFailed;
         };
         QuarantineModeFaultFaultType: {
            "NoCompatibleNonQuarantinedHost": string;
            "CorrectionDisallowed": string;
            "CorrectionImpact": string;
         };
         QuarantineModeFault: {
            (options?: vsanhealthService.vim.QuarantineModeFault): vsanhealthService.vim.QuarantineModeFault;
         };
         QuestionPending: {
            (options?: vsanhealthService.vim.QuestionPending): vsanhealthService.vim.QuestionPending;
         };
         QuiesceDatastoreIOForHAFailed: {
            (options?: vsanhealthService.vim.QuiesceDatastoreIOForHAFailed): vsanhealthService.vim.QuiesceDatastoreIOForHAFailed;
         };
         RDMConversionNotSupported: {
            (options?: vsanhealthService.vim.RDMConversionNotSupported): vsanhealthService.vim.RDMConversionNotSupported;
         };
         RDMNotPreserved: {
            (options?: vsanhealthService.vim.RDMNotPreserved): vsanhealthService.vim.RDMNotPreserved;
         };
         RDMNotSupported: {
            (options?: vsanhealthService.vim.RDMNotSupported): vsanhealthService.vim.RDMNotSupported;
         };
         RDMNotSupportedOnDatastore: {
            (options?: vsanhealthService.vim.RDMNotSupportedOnDatastore): vsanhealthService.vim.RDMNotSupportedOnDatastore;
         };
         RDMPointsToInaccessibleDisk: {
            (options?: vsanhealthService.vim.RDMPointsToInaccessibleDisk): vsanhealthService.vim.RDMPointsToInaccessibleDisk;
         };
         RawDiskNotSupported: {
            (options?: vsanhealthService.vim.RawDiskNotSupported): vsanhealthService.vim.RawDiskNotSupported;
         };
         ReadHostResourcePoolTreeFailed: {
            (options?: vsanhealthService.vim.ReadHostResourcePoolTreeFailed): vsanhealthService.vim.ReadHostResourcePoolTreeFailed;
         };
         ReadOnlyDisksWithLegacyDestination: {
            (options?: vsanhealthService.vim.ReadOnlyDisksWithLegacyDestination): vsanhealthService.vim.ReadOnlyDisksWithLegacyDestination;
         };
         RebootRequired: {
            (options?: vsanhealthService.vim.RebootRequired): vsanhealthService.vim.RebootRequired;
         };
         RecordReplayDisabled: {
            (options?: vsanhealthService.vim.RecordReplayDisabled): vsanhealthService.vim.RecordReplayDisabled;
         };
         RemoteDeviceNotSupported: {
            (options?: vsanhealthService.vim.RemoteDeviceNotSupported): vsanhealthService.vim.RemoteDeviceNotSupported;
         };
         RemoveFailed: {
            (options?: vsanhealthService.vim.RemoveFailed): vsanhealthService.vim.RemoveFailed;
         };
         ReplicationConfigFault: {
            (options?: vsanhealthService.vim.ReplicationConfigFault): vsanhealthService.vim.ReplicationConfigFault;
         };
         ReplicationDiskConfigFaultReasonForFault: {
            "diskNotFound": string;
            "diskTypeNotSupported": string;
            "invalidDiskKey": string;
            "invalidDiskReplicationId": string;
            "duplicateDiskReplicationId": string;
            "invalidPersistentFilePath": string;
            "reconfigureDiskReplicationIdNotAllowed": string;
         };
         ReplicationDiskConfigFault: {
            (options?: vsanhealthService.vim.ReplicationDiskConfigFault): vsanhealthService.vim.ReplicationDiskConfigFault;
         };
         ReplicationFault: {
            (options?: vsanhealthService.vim.ReplicationFault): vsanhealthService.vim.ReplicationFault;
         };
         ReplicationIncompatibleWithFT: {
            (options?: vsanhealthService.vim.ReplicationIncompatibleWithFT): vsanhealthService.vim.ReplicationIncompatibleWithFT;
         };
         ReplicationInvalidOptions: {
            (options?: vsanhealthService.vim.ReplicationInvalidOptions): vsanhealthService.vim.ReplicationInvalidOptions;
         };
         ReplicationNotSupportedOnHost: {
            (options?: vsanhealthService.vim.ReplicationNotSupportedOnHost): vsanhealthService.vim.ReplicationNotSupportedOnHost;
         };
         ReplicationVmConfigFaultReasonForFault: {
            "incompatibleHwVersion": string;
            "invalidVmReplicationId": string;
            "invalidGenerationNumber": string;
            "outOfBoundsRpoValue": string;
            "invalidDestinationIpAddress": string;
            "invalidDestinationPort": string;
            "invalidExtraVmOptions": string;
            "staleGenerationNumber": string;
            "reconfigureVmReplicationIdNotAllowed": string;
            "cannotRetrieveVmReplicationConfiguration": string;
            "replicationAlreadyEnabled": string;
            "invalidPriorConfiguration": string;
            "replicationNotEnabled": string;
            "replicationConfigurationFailed": string;
            "encryptedVm": string;
         };
         ReplicationVmConfigFault: {
            (options?: vsanhealthService.vim.ReplicationVmConfigFault): vsanhealthService.vim.ReplicationVmConfigFault;
         };
         ReplicationVmFaultReasonForFault: {
            "notConfigured": string;
            "poweredOff": string;
            "suspended": string;
            "poweredOn": string;
            "offlineReplicating": string;
            "invalidState": string;
            "invalidInstanceId": string;
            "closeDiskError": string;
         };
         ReplicationVmFault: {
            (options?: vsanhealthService.vim.ReplicationVmFault): vsanhealthService.vim.ReplicationVmFault;
         };
         ReplicationVmInProgressFaultActivity: {
            "fullSync": string;
            "delta": string;
         };
         ReplicationVmInProgressFault: {
            (options?: vsanhealthService.vim.ReplicationVmInProgressFault): vsanhealthService.vim.ReplicationVmInProgressFault;
         };
         ResourceInUse: {
            (options?: vsanhealthService.vim.ResourceInUse): vsanhealthService.vim.ResourceInUse;
         };
         ResourceNotAvailable: {
            (options?: vsanhealthService.vim.ResourceNotAvailable): vsanhealthService.vim.ResourceNotAvailable;
         };
         RestrictedByAdministrator: {
            (options?: vsanhealthService.vim.RestrictedByAdministrator): vsanhealthService.vim.RestrictedByAdministrator;
         };
         RestrictedVersion: {
            (options?: vsanhealthService.vim.RestrictedVersion): vsanhealthService.vim.RestrictedVersion;
         };
         RollbackFailure: {
            (options?: vsanhealthService.vim.RollbackFailure): vsanhealthService.vim.RollbackFailure;
         };
         RuleViolation: {
            (options?: vsanhealthService.vim.RuleViolation): vsanhealthService.vim.RuleViolation;
         };
         SSLDisabledFault: {
            (options?: vsanhealthService.vim.SSLDisabledFault): vsanhealthService.vim.SSLDisabledFault;
         };
         SSLVerifyFault: {
            (options?: vsanhealthService.vim.SSLVerifyFault): vsanhealthService.vim.SSLVerifyFault;
         };
         SSPIChallenge: {
            (options?: vsanhealthService.vim.SSPIChallenge): vsanhealthService.vim.SSPIChallenge;
         };
         SecondaryVmAlreadyDisabled: {
            (options?: vsanhealthService.vim.SecondaryVmAlreadyDisabled): vsanhealthService.vim.SecondaryVmAlreadyDisabled;
         };
         SecondaryVmAlreadyEnabled: {
            (options?: vsanhealthService.vim.SecondaryVmAlreadyEnabled): vsanhealthService.vim.SecondaryVmAlreadyEnabled;
         };
         SecondaryVmAlreadyRegistered: {
            (options?: vsanhealthService.vim.SecondaryVmAlreadyRegistered): vsanhealthService.vim.SecondaryVmAlreadyRegistered;
         };
         SecondaryVmNotRegistered: {
            (options?: vsanhealthService.vim.SecondaryVmNotRegistered): vsanhealthService.vim.SecondaryVmNotRegistered;
         };
         SharedBusControllerNotSupported: {
            (options?: vsanhealthService.vim.SharedBusControllerNotSupported): vsanhealthService.vim.SharedBusControllerNotSupported;
         };
         ShrinkDiskFault: {
            (options?: vsanhealthService.vim.ShrinkDiskFault): vsanhealthService.vim.ShrinkDiskFault;
         };
         SnapshotCloneNotSupported: {
            (options?: vsanhealthService.vim.SnapshotCloneNotSupported): vsanhealthService.vim.SnapshotCloneNotSupported;
         };
         SnapshotCopyNotSupported: {
            (options?: vsanhealthService.vim.SnapshotCopyNotSupported): vsanhealthService.vim.SnapshotCopyNotSupported;
         };
         SnapshotDisabled: {
            (options?: vsanhealthService.vim.SnapshotDisabled): vsanhealthService.vim.SnapshotDisabled;
         };
         SnapshotFault: {
            (options?: vsanhealthService.vim.SnapshotFault): vsanhealthService.vim.SnapshotFault;
         };
         SnapshotIncompatibleDeviceInVm: {
            (options?: vsanhealthService.vim.SnapshotIncompatibleDeviceInVm): vsanhealthService.vim.SnapshotIncompatibleDeviceInVm;
         };
         SnapshotLocked: {
            (options?: vsanhealthService.vim.SnapshotLocked): vsanhealthService.vim.SnapshotLocked;
         };
         SnapshotMoveFromNonHomeNotSupported: {
            (options?: vsanhealthService.vim.SnapshotMoveFromNonHomeNotSupported): vsanhealthService.vim.SnapshotMoveFromNonHomeNotSupported;
         };
         SnapshotMoveNotSupported: {
            (options?: vsanhealthService.vim.SnapshotMoveNotSupported): vsanhealthService.vim.SnapshotMoveNotSupported;
         };
         SnapshotMoveToNonHomeNotSupported: {
            (options?: vsanhealthService.vim.SnapshotMoveToNonHomeNotSupported): vsanhealthService.vim.SnapshotMoveToNonHomeNotSupported;
         };
         SnapshotNoChange: {
            (options?: vsanhealthService.vim.SnapshotNoChange): vsanhealthService.vim.SnapshotNoChange;
         };
         SnapshotRevertIssue: {
            (options?: vsanhealthService.vim.SnapshotRevertIssue): vsanhealthService.vim.SnapshotRevertIssue;
         };
         SoftRuleVioCorrectionDisallowed: {
            (options?: vsanhealthService.vim.SoftRuleVioCorrectionDisallowed): vsanhealthService.vim.SoftRuleVioCorrectionDisallowed;
         };
         SoftRuleVioCorrectionImpact: {
            (options?: vsanhealthService.vim.SoftRuleVioCorrectionImpact): vsanhealthService.vim.SoftRuleVioCorrectionImpact;
         };
         SsdDiskNotAvailable: {
            (options?: vsanhealthService.vim.SsdDiskNotAvailable): vsanhealthService.vim.SsdDiskNotAvailable;
         };
         StorageDrsCannotMoveDiskInMultiWriterMode: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveDiskInMultiWriterMode): vsanhealthService.vim.StorageDrsCannotMoveDiskInMultiWriterMode;
         };
         StorageDrsCannotMoveFTVm: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveFTVm): vsanhealthService.vim.StorageDrsCannotMoveFTVm;
         };
         StorageDrsCannotMoveIndependentDisk: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveIndependentDisk): vsanhealthService.vim.StorageDrsCannotMoveIndependentDisk;
         };
         StorageDrsCannotMoveManuallyPlacedSwapFile: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveManuallyPlacedSwapFile): vsanhealthService.vim.StorageDrsCannotMoveManuallyPlacedSwapFile;
         };
         StorageDrsCannotMoveManuallyPlacedVm: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveManuallyPlacedVm): vsanhealthService.vim.StorageDrsCannotMoveManuallyPlacedVm;
         };
         StorageDrsCannotMoveSharedDisk: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveSharedDisk): vsanhealthService.vim.StorageDrsCannotMoveSharedDisk;
         };
         StorageDrsCannotMoveTemplate: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveTemplate): vsanhealthService.vim.StorageDrsCannotMoveTemplate;
         };
         StorageDrsCannotMoveVmInUserFolder: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveVmInUserFolder): vsanhealthService.vim.StorageDrsCannotMoveVmInUserFolder;
         };
         StorageDrsCannotMoveVmWithMountedCDROM: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveVmWithMountedCDROM): vsanhealthService.vim.StorageDrsCannotMoveVmWithMountedCDROM;
         };
         StorageDrsCannotMoveVmWithNoFilesInLayout: {
            (options?: vsanhealthService.vim.StorageDrsCannotMoveVmWithNoFilesInLayout): vsanhealthService.vim.StorageDrsCannotMoveVmWithNoFilesInLayout;
         };
         StorageDrsDatacentersCannotShareDatastore: {
            (options?: vsanhealthService.vim.StorageDrsDatacentersCannotShareDatastore): vsanhealthService.vim.StorageDrsDatacentersCannotShareDatastore;
         };
         StorageDrsDisabledOnVm: {
            (options?: vsanhealthService.vim.StorageDrsDisabledOnVm): vsanhealthService.vim.StorageDrsDisabledOnVm;
         };
         StorageDrsHbrDiskNotMovable: {
            (options?: vsanhealthService.vim.StorageDrsHbrDiskNotMovable): vsanhealthService.vim.StorageDrsHbrDiskNotMovable;
         };
         StorageDrsHmsMoveInProgress: {
            (options?: vsanhealthService.vim.StorageDrsHmsMoveInProgress): vsanhealthService.vim.StorageDrsHmsMoveInProgress;
         };
         StorageDrsHmsUnreachable: {
            (options?: vsanhealthService.vim.StorageDrsHmsUnreachable): vsanhealthService.vim.StorageDrsHmsUnreachable;
         };
         StorageDrsIolbDisabledInternally: {
            (options?: vsanhealthService.vim.StorageDrsIolbDisabledInternally): vsanhealthService.vim.StorageDrsIolbDisabledInternally;
         };
         StorageDrsRelocateDisabled: {
            (options?: vsanhealthService.vim.StorageDrsRelocateDisabled): vsanhealthService.vim.StorageDrsRelocateDisabled;
         };
         StorageDrsStaleHmsCollection: {
            (options?: vsanhealthService.vim.StorageDrsStaleHmsCollection): vsanhealthService.vim.StorageDrsStaleHmsCollection;
         };
         StorageDrsUnableToMoveFiles: {
            (options?: vsanhealthService.vim.StorageDrsUnableToMoveFiles): vsanhealthService.vim.StorageDrsUnableToMoveFiles;
         };
         StorageVMotionNotSupported: {
            (options?: vsanhealthService.vim.StorageVMotionNotSupported): vsanhealthService.vim.StorageVMotionNotSupported;
         };
         StorageVmotionIncompatible: {
            (options?: vsanhealthService.vim.StorageVmotionIncompatible): vsanhealthService.vim.StorageVmotionIncompatible;
         };
         SuspendedRelocateNotSupported: {
            (options?: vsanhealthService.vim.SuspendedRelocateNotSupported): vsanhealthService.vim.SuspendedRelocateNotSupported;
         };
         SwapDatastoreNotWritableOnHost: {
            (options?: vsanhealthService.vim.SwapDatastoreNotWritableOnHost): vsanhealthService.vim.SwapDatastoreNotWritableOnHost;
         };
         SwapDatastoreUnset: {
            (options?: vsanhealthService.vim.SwapDatastoreUnset): vsanhealthService.vim.SwapDatastoreUnset;
         };
         SwapPlacementOverrideNotSupported: {
            (options?: vsanhealthService.vim.SwapPlacementOverrideNotSupported): vsanhealthService.vim.SwapPlacementOverrideNotSupported;
         };
         SwitchIpUnset: {
            (options?: vsanhealthService.vim.SwitchIpUnset): vsanhealthService.vim.SwitchIpUnset;
         };
         SwitchNotInUpgradeMode: {
            (options?: vsanhealthService.vim.SwitchNotInUpgradeMode): vsanhealthService.vim.SwitchNotInUpgradeMode;
         };
         TaskInProgress: {
            (options?: vsanhealthService.vim.TaskInProgress): vsanhealthService.vim.TaskInProgress;
         };
         ThirdPartyLicenseAssignmentFailedReason: {
            "licenseAssignmentFailed": string;
            "moduleNotInstalled": string;
         };
         ThirdPartyLicenseAssignmentFailed: {
            (options?: vsanhealthService.vim.ThirdPartyLicenseAssignmentFailed): vsanhealthService.vim.ThirdPartyLicenseAssignmentFailed;
         };
         Timedout: {
            (options?: vsanhealthService.vim.Timedout): vsanhealthService.vim.Timedout;
         };
         TooManyConcurrentNativeClones: {
            (options?: vsanhealthService.vim.TooManyConcurrentNativeClones): vsanhealthService.vim.TooManyConcurrentNativeClones;
         };
         TooManyConsecutiveOverrides: {
            (options?: vsanhealthService.vim.TooManyConsecutiveOverrides): vsanhealthService.vim.TooManyConsecutiveOverrides;
         };
         TooManyDevices: {
            (options?: vsanhealthService.vim.TooManyDevices): vsanhealthService.vim.TooManyDevices;
         };
         TooManyDisksOnLegacyHost: {
            (options?: vsanhealthService.vim.TooManyDisksOnLegacyHost): vsanhealthService.vim.TooManyDisksOnLegacyHost;
         };
         TooManyGuestLogons: {
            (options?: vsanhealthService.vim.TooManyGuestLogons): vsanhealthService.vim.TooManyGuestLogons;
         };
         TooManyHosts: {
            (options?: vsanhealthService.vim.TooManyHosts): vsanhealthService.vim.TooManyHosts;
         };
         TooManyNativeCloneLevels: {
            (options?: vsanhealthService.vim.TooManyNativeCloneLevels): vsanhealthService.vim.TooManyNativeCloneLevels;
         };
         TooManyNativeClonesOnFile: {
            (options?: vsanhealthService.vim.TooManyNativeClonesOnFile): vsanhealthService.vim.TooManyNativeClonesOnFile;
         };
         TooManySnapshotLevels: {
            (options?: vsanhealthService.vim.TooManySnapshotLevels): vsanhealthService.vim.TooManySnapshotLevels;
         };
         ToolsAlreadyUpgraded: {
            (options?: vsanhealthService.vim.ToolsAlreadyUpgraded): vsanhealthService.vim.ToolsAlreadyUpgraded;
         };
         ToolsAutoUpgradeNotSupported: {
            (options?: vsanhealthService.vim.ToolsAutoUpgradeNotSupported): vsanhealthService.vim.ToolsAutoUpgradeNotSupported;
         };
         ToolsImageCopyFailed: {
            (options?: vsanhealthService.vim.ToolsImageCopyFailed): vsanhealthService.vim.ToolsImageCopyFailed;
         };
         ToolsImageNotAvailable: {
            (options?: vsanhealthService.vim.ToolsImageNotAvailable): vsanhealthService.vim.ToolsImageNotAvailable;
         };
         ToolsImageSignatureCheckFailed: {
            (options?: vsanhealthService.vim.ToolsImageSignatureCheckFailed): vsanhealthService.vim.ToolsImageSignatureCheckFailed;
         };
         ToolsInstallationInProgress: {
            (options?: vsanhealthService.vim.ToolsInstallationInProgress): vsanhealthService.vim.ToolsInstallationInProgress;
         };
         ToolsUnavailable: {
            (options?: vsanhealthService.vim.ToolsUnavailable): vsanhealthService.vim.ToolsUnavailable;
         };
         ToolsUpgradeCancelled: {
            (options?: vsanhealthService.vim.ToolsUpgradeCancelled): vsanhealthService.vim.ToolsUpgradeCancelled;
         };
         UnSupportedDatastoreForVFlash: {
            (options?: vsanhealthService.vim.UnSupportedDatastoreForVFlash): vsanhealthService.vim.UnSupportedDatastoreForVFlash;
         };
         UncommittedUndoableDisk: {
            (options?: vsanhealthService.vim.UncommittedUndoableDisk): vsanhealthService.vim.UncommittedUndoableDisk;
         };
         UnconfiguredPropertyValue: {
            (options?: vsanhealthService.vim.UnconfiguredPropertyValue): vsanhealthService.vim.UnconfiguredPropertyValue;
         };
         UncustomizableGuest: {
            (options?: vsanhealthService.vim.UncustomizableGuest): vsanhealthService.vim.UncustomizableGuest;
         };
         UnexpectedCustomizationFault: {
            (options?: vsanhealthService.vim.UnexpectedCustomizationFault): vsanhealthService.vim.UnexpectedCustomizationFault;
         };
         UnrecognizedHost: {
            (options?: vsanhealthService.vim.UnrecognizedHost): vsanhealthService.vim.UnrecognizedHost;
         };
         UnsharedSwapVMotionNotSupported: {
            (options?: vsanhealthService.vim.UnsharedSwapVMotionNotSupported): vsanhealthService.vim.UnsharedSwapVMotionNotSupported;
         };
         UnsupportedDatastore: {
            (options?: vsanhealthService.vim.UnsupportedDatastore): vsanhealthService.vim.UnsupportedDatastore;
         };
         UnsupportedGuest: {
            (options?: vsanhealthService.vim.UnsupportedGuest): vsanhealthService.vim.UnsupportedGuest;
         };
         UnsupportedVimApiVersion: {
            (options?: vsanhealthService.vim.UnsupportedVimApiVersion): vsanhealthService.vim.UnsupportedVimApiVersion;
         };
         UnsupportedVmxLocation: {
            (options?: vsanhealthService.vim.UnsupportedVmxLocation): vsanhealthService.vim.UnsupportedVmxLocation;
         };
         UnusedVirtualDiskBlocksNotScrubbed: {
            (options?: vsanhealthService.vim.UnusedVirtualDiskBlocksNotScrubbed): vsanhealthService.vim.UnusedVirtualDiskBlocksNotScrubbed;
         };
         UserNotFound: {
            (options?: vsanhealthService.vim.UserNotFound): vsanhealthService.vim.UserNotFound;
         };
         VAppConfigFault: {
            (options?: vsanhealthService.vim.VAppConfigFault): vsanhealthService.vim.VAppConfigFault;
         };
         VAppNotRunning: {
            (options?: vsanhealthService.vim.VAppNotRunning): vsanhealthService.vim.VAppNotRunning;
         };
         VAppOperationInProgress: {
            (options?: vsanhealthService.vim.VAppOperationInProgress): vsanhealthService.vim.VAppOperationInProgress;
         };
         VAppPropertyFault: {
            (options?: vsanhealthService.vim.VAppPropertyFault): vsanhealthService.vim.VAppPropertyFault;
         };
         VAppTaskInProgress: {
            (options?: vsanhealthService.vim.VAppTaskInProgress): vsanhealthService.vim.VAppTaskInProgress;
         };
         VFlashCacheHotConfigNotSupported: {
            (options?: vsanhealthService.vim.VFlashCacheHotConfigNotSupported): vsanhealthService.vim.VFlashCacheHotConfigNotSupported;
         };
         VFlashModuleNotSupportedReason: {
            "CacheModeNotSupported": string;
            "CacheConsistencyTypeNotSupported": string;
            "CacheBlockSizeNotSupported": string;
            "CacheReservationNotSupported": string;
            "DiskSizeNotSupported": string;
         };
         VFlashModuleNotSupported: {
            (options?: vsanhealthService.vim.VFlashModuleNotSupported): vsanhealthService.vim.VFlashModuleNotSupported;
         };
         VFlashModuleVersionIncompatible: {
            (options?: vsanhealthService.vim.VFlashModuleVersionIncompatible): vsanhealthService.vim.VFlashModuleVersionIncompatible;
         };
         VMINotSupported: {
            (options?: vsanhealthService.vim.VMINotSupported): vsanhealthService.vim.VMINotSupported;
         };
         VMOnConflictDVPort: {
            (options?: vsanhealthService.vim.VMOnConflictDVPort): vsanhealthService.vim.VMOnConflictDVPort;
         };
         VMOnVirtualIntranet: {
            (options?: vsanhealthService.vim.VMOnVirtualIntranet): vsanhealthService.vim.VMOnVirtualIntranet;
         };
         VMotionAcrossNetworkNotSupported: {
            (options?: vsanhealthService.vim.VMotionAcrossNetworkNotSupported): vsanhealthService.vim.VMotionAcrossNetworkNotSupported;
         };
         VMotionInterfaceIssue: {
            (options?: vsanhealthService.vim.VMotionInterfaceIssue): vsanhealthService.vim.VMotionInterfaceIssue;
         };
         VMotionLinkCapacityLow: {
            (options?: vsanhealthService.vim.VMotionLinkCapacityLow): vsanhealthService.vim.VMotionLinkCapacityLow;
         };
         VMotionLinkDown: {
            (options?: vsanhealthService.vim.VMotionLinkDown): vsanhealthService.vim.VMotionLinkDown;
         };
         VMotionNotConfigured: {
            (options?: vsanhealthService.vim.VMotionNotConfigured): vsanhealthService.vim.VMotionNotConfigured;
         };
         VMotionNotLicensed: {
            (options?: vsanhealthService.vim.VMotionNotLicensed): vsanhealthService.vim.VMotionNotLicensed;
         };
         VMotionNotSupported: {
            (options?: vsanhealthService.vim.VMotionNotSupported): vsanhealthService.vim.VMotionNotSupported;
         };
         VMotionProtocolIncompatible: {
            (options?: vsanhealthService.vim.VMotionProtocolIncompatible): vsanhealthService.vim.VMotionProtocolIncompatible;
         };
         VimFault: {
            (options?: vsanhealthService.vim.VimFault): vsanhealthService.vim.VimFault;
         };
         VirtualDiskBlocksNotFullyProvisioned: {
            (options?: vsanhealthService.vim.VirtualDiskBlocksNotFullyProvisioned): vsanhealthService.vim.VirtualDiskBlocksNotFullyProvisioned;
         };
         VirtualDiskModeNotSupported: {
            (options?: vsanhealthService.vim.VirtualDiskModeNotSupported): vsanhealthService.vim.VirtualDiskModeNotSupported;
         };
         VirtualEthernetCardNotSupported: {
            (options?: vsanhealthService.vim.VirtualEthernetCardNotSupported): vsanhealthService.vim.VirtualEthernetCardNotSupported;
         };
         VirtualHardwareCompatibilityIssue: {
            (options?: vsanhealthService.vim.VirtualHardwareCompatibilityIssue): vsanhealthService.vim.VirtualHardwareCompatibilityIssue;
         };
         VirtualHardwareVersionNotSupported: {
            (options?: vsanhealthService.vim.VirtualHardwareVersionNotSupported): vsanhealthService.vim.VirtualHardwareVersionNotSupported;
         };
         VmAlreadyExistsInDatacenter: {
            (options?: vsanhealthService.vim.VmAlreadyExistsInDatacenter): vsanhealthService.vim.VmAlreadyExistsInDatacenter;
         };
         VmConfigFault: {
            (options?: vsanhealthService.vim.VmConfigFault): vsanhealthService.vim.VmConfigFault;
         };
         VmConfigIncompatibleForFaultTolerance: {
            (options?: vsanhealthService.vim.VmConfigIncompatibleForFaultTolerance): vsanhealthService.vim.VmConfigIncompatibleForFaultTolerance;
         };
         VmConfigIncompatibleForRecordReplay: {
            (options?: vsanhealthService.vim.VmConfigIncompatibleForRecordReplay): vsanhealthService.vim.VmConfigIncompatibleForRecordReplay;
         };
         VmFaultToleranceConfigIssueReasonForIssue: {
            "haNotEnabled": string;
            "moreThanOneSecondary": string;
            "recordReplayNotSupported": string;
            "replayNotSupported": string;
            "templateVm": string;
            "multipleVCPU": string;
            "hostInactive": string;
            "ftUnsupportedHardware": string;
            "ftUnsupportedProduct": string;
            "missingVMotionNic": string;
            "missingFTLoggingNic": string;
            "thinDisk": string;
            "verifySSLCertificateFlagNotSet": string;
            "hasSnapshots": string;
            "noConfig": string;
            "ftSecondaryVm": string;
            "hasLocalDisk": string;
            "esxAgentVm": string;
            "video3dEnabled": string;
            "hasUnsupportedDisk": string;
            "insufficientBandwidth": string;
            "hasNestedHVConfiguration": string;
            "hasVFlashConfiguration": string;
            "unsupportedProduct": string;
            "cpuHvUnsupported": string;
            "cpuHwmmuUnsupported": string;
            "cpuHvDisabled": string;
            "hasEFIFirmware": string;
         };
         VmFaultToleranceConfigIssue: {
            (options?: vsanhealthService.vim.VmFaultToleranceConfigIssue): vsanhealthService.vim.VmFaultToleranceConfigIssue;
         };
         VmFaultToleranceConfigIssueWrapper: {
            (options?: vsanhealthService.vim.VmFaultToleranceConfigIssueWrapper): vsanhealthService.vim.VmFaultToleranceConfigIssueWrapper;
         };
         VmFaultToleranceInvalidFileBackingDeviceType: {
            "virtualFloppy": string;
            "virtualCdrom": string;
            "virtualSerialPort": string;
            "virtualParallelPort": string;
            "virtualDisk": string;
         };
         VmFaultToleranceInvalidFileBacking: {
            (options?: vsanhealthService.vim.VmFaultToleranceInvalidFileBacking): vsanhealthService.vim.VmFaultToleranceInvalidFileBacking;
         };
         VmFaultToleranceIssue: {
            (options?: vsanhealthService.vim.VmFaultToleranceIssue): vsanhealthService.vim.VmFaultToleranceIssue;
         };
         VmFaultToleranceOpIssuesList: {
            (options?: vsanhealthService.vim.VmFaultToleranceOpIssuesList): vsanhealthService.vim.VmFaultToleranceOpIssuesList;
         };
         VmFaultToleranceTooManyFtVcpusOnHost: {
            (options?: vsanhealthService.vim.VmFaultToleranceTooManyFtVcpusOnHost): vsanhealthService.vim.VmFaultToleranceTooManyFtVcpusOnHost;
         };
         VmFaultToleranceTooManyVMsOnHost: {
            (options?: vsanhealthService.vim.VmFaultToleranceTooManyVMsOnHost): vsanhealthService.vim.VmFaultToleranceTooManyVMsOnHost;
         };
         VmHostAffinityRuleViolation: {
            (options?: vsanhealthService.vim.VmHostAffinityRuleViolation): vsanhealthService.vim.VmHostAffinityRuleViolation;
         };
         VmLimitLicense: {
            (options?: vsanhealthService.vim.VmLimitLicense): vsanhealthService.vim.VmLimitLicense;
         };
         VmMetadataManagerFault: {
            (options?: vsanhealthService.vim.VmMetadataManagerFault): vsanhealthService.vim.VmMetadataManagerFault;
         };
         VmMonitorIncompatibleForFaultTolerance: {
            (options?: vsanhealthService.vim.VmMonitorIncompatibleForFaultTolerance): vsanhealthService.vim.VmMonitorIncompatibleForFaultTolerance;
         };
         VmPowerOnDisabled: {
            (options?: vsanhealthService.vim.VmPowerOnDisabled): vsanhealthService.vim.VmPowerOnDisabled;
         };
         VmSmpFaultToleranceTooManyVMsOnHost: {
            (options?: vsanhealthService.vim.VmSmpFaultToleranceTooManyVMsOnHost): vsanhealthService.vim.VmSmpFaultToleranceTooManyVMsOnHost;
         };
         VmToolsUpgradeFault: {
            (options?: vsanhealthService.vim.VmToolsUpgradeFault): vsanhealthService.vim.VmToolsUpgradeFault;
         };
         VmValidateMaxDevice: {
            (options?: vsanhealthService.vim.VmValidateMaxDevice): vsanhealthService.vim.VmValidateMaxDevice;
         };
         VmWwnConflict: {
            (options?: vsanhealthService.vim.VmWwnConflict): vsanhealthService.vim.VmWwnConflict;
         };
         VmfsAlreadyMounted: {
            (options?: vsanhealthService.vim.VmfsAlreadyMounted): vsanhealthService.vim.VmfsAlreadyMounted;
         };
         VmfsAmbiguousMount: {
            (options?: vsanhealthService.vim.VmfsAmbiguousMount): vsanhealthService.vim.VmfsAmbiguousMount;
         };
         VmfsMountFault: {
            (options?: vsanhealthService.vim.VmfsMountFault): vsanhealthService.vim.VmfsMountFault;
         };
         VmotionInterfaceNotEnabled: {
            (options?: vsanhealthService.vim.VmotionInterfaceNotEnabled): vsanhealthService.vim.VmotionInterfaceNotEnabled;
         };
         VolumeEditorError: {
            (options?: vsanhealthService.vim.VolumeEditorError): vsanhealthService.vim.VolumeEditorError;
         };
         VramLimitLicense: {
            (options?: vsanhealthService.vim.VramLimitLicense): vsanhealthService.vim.VramLimitLicense;
         };
         VsanClusterUuidMismatch: {
            (options?: vsanhealthService.vim.VsanClusterUuidMismatch): vsanhealthService.vim.VsanClusterUuidMismatch;
         };
         VsanDiskFault: {
            (options?: vsanhealthService.vim.VsanDiskFault): vsanhealthService.vim.VsanDiskFault;
         };
         VsanFault: {
            (options?: vsanhealthService.vim.VsanFault): vsanhealthService.vim.VsanFault;
         };
         VsanIncompatibleDiskMapping: {
            (options?: vsanhealthService.vim.VsanIncompatibleDiskMapping): vsanhealthService.vim.VsanIncompatibleDiskMapping;
         };
         VspanDestPortConflict: {
            (options?: vsanhealthService.vim.VspanDestPortConflict): vsanhealthService.vim.VspanDestPortConflict;
         };
         VspanPortConflict: {
            (options?: vsanhealthService.vim.VspanPortConflict): vsanhealthService.vim.VspanPortConflict;
         };
         VspanPortMoveFault: {
            (options?: vsanhealthService.vim.VspanPortMoveFault): vsanhealthService.vim.VspanPortMoveFault;
         };
         VspanPortPromiscChangeFault: {
            (options?: vsanhealthService.vim.VspanPortPromiscChangeFault): vsanhealthService.vim.VspanPortPromiscChangeFault;
         };
         VspanPortgroupPromiscChangeFault: {
            (options?: vsanhealthService.vim.VspanPortgroupPromiscChangeFault): vsanhealthService.vim.VspanPortgroupPromiscChangeFault;
         };
         VspanPortgroupTypeChangeFault: {
            (options?: vsanhealthService.vim.VspanPortgroupTypeChangeFault): vsanhealthService.vim.VspanPortgroupTypeChangeFault;
         };
         VspanPromiscuousPortNotSupported: {
            (options?: vsanhealthService.vim.VspanPromiscuousPortNotSupported): vsanhealthService.vim.VspanPromiscuousPortNotSupported;
         };
         VspanSameSessionPortConflict: {
            (options?: vsanhealthService.vim.VspanSameSessionPortConflict): vsanhealthService.vim.VspanSameSessionPortConflict;
         };
         WakeOnLanNotSupported: {
            (options?: vsanhealthService.vim.WakeOnLanNotSupported): vsanhealthService.vim.WakeOnLanNotSupported;
         };
         WakeOnLanNotSupportedByVmotionNIC: {
            (options?: vsanhealthService.vim.WakeOnLanNotSupportedByVmotionNIC): vsanhealthService.vim.WakeOnLanNotSupportedByVmotionNIC;
         };
         WillLoseHAProtectionResolution: {
            "svmotion": string;
            "relocate": string;
         };
         WillLoseHAProtection: {
            (options?: vsanhealthService.vim.WillLoseHAProtection): vsanhealthService.vim.WillLoseHAProtection;
         };
         WillModifyConfigCpuRequirements: {
            (options?: vsanhealthService.vim.WillModifyConfigCpuRequirements): vsanhealthService.vim.WillModifyConfigCpuRequirements;
         };
         WillResetSnapshotDirectory: {
            (options?: vsanhealthService.vim.WillResetSnapshotDirectory): vsanhealthService.vim.WillResetSnapshotDirectory;
         };
         WipeDiskFault: {
            (options?: vsanhealthService.vim.WipeDiskFault): vsanhealthService.vim.WipeDiskFault;
         };
         HostActiveDirectoryAuthenticationCertificateDigest: {
            "SHA1": string;
         };
         HostActiveDirectoryInfoDomainMembershipStatus: {
            "unknown": string;
            "ok": string;
            "noServers": string;
            "clientTrustBroken": string;
            "serverTrustBroken": string;
            "inconsistentTrust": string;
            "otherProblem": string;
         };
         HostActiveDirectoryInfo: {
            (options?: vsanhealthService.vim.HostActiveDirectoryInfo): vsanhealthService.vim.HostActiveDirectoryInfo;
         };
         HostActiveDirectorySpec: {
            (options?: vsanhealthService.vim.HostActiveDirectorySpec): vsanhealthService.vim.HostActiveDirectorySpec;
         };
         HostActiveDirectory: {
            (options?: vsanhealthService.vim.HostActiveDirectory): vsanhealthService.vim.HostActiveDirectory;
         };
         ArrayOfHostActiveDirectory: {
            (options?: vsanhealthService.vim.ArrayOfHostActiveDirectory): vsanhealthService.vim.ArrayOfHostActiveDirectory;
         };
         HostAuthenticationManagerInfo: {
            (options?: vsanhealthService.vim.HostAuthenticationManagerInfo): vsanhealthService.vim.HostAuthenticationManagerInfo;
         };
         HostAuthenticationStoreInfo: {
            (options?: vsanhealthService.vim.HostAuthenticationStoreInfo): vsanhealthService.vim.HostAuthenticationStoreInfo;
         };
         ArrayOfHostAuthenticationStoreInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostAuthenticationStoreInfo): vsanhealthService.vim.ArrayOfHostAuthenticationStoreInfo;
         };
         AutoStartAction: {
            "none": string;
            "systemDefault": string;
            "powerOn": string;
            "powerOff": string;
            "guestShutdown": string;
            "suspend": string;
         };
         AutoStartDefaults: {
            (options?: vsanhealthService.vim.AutoStartDefaults): vsanhealthService.vim.AutoStartDefaults;
         };
         AutoStartWaitHeartbeatSetting: {
            "yes": string;
            "no": string;
            "systemDefault": string;
         };
         AutoStartPowerInfo: {
            (options?: vsanhealthService.vim.AutoStartPowerInfo): vsanhealthService.vim.AutoStartPowerInfo;
         };
         ArrayOfAutoStartPowerInfo: {
            (options?: vsanhealthService.vim.ArrayOfAutoStartPowerInfo): vsanhealthService.vim.ArrayOfAutoStartPowerInfo;
         };
         HostAutoStartManagerConfig: {
            (options?: vsanhealthService.vim.HostAutoStartManagerConfig): vsanhealthService.vim.HostAutoStartManagerConfig;
         };
         HostBootDeviceInfo: {
            (options?: vsanhealthService.vim.HostBootDeviceInfo): vsanhealthService.vim.HostBootDeviceInfo;
         };
         HostBootDevice: {
            (options?: vsanhealthService.vim.HostBootDevice): vsanhealthService.vim.HostBootDevice;
         };
         ArrayOfHostBootDevice: {
            (options?: vsanhealthService.vim.ArrayOfHostBootDevice): vsanhealthService.vim.ArrayOfHostBootDevice;
         };
         HostCacheConfigurationSpec: {
            (options?: vsanhealthService.vim.HostCacheConfigurationSpec): vsanhealthService.vim.HostCacheConfigurationSpec;
         };
         HostCacheConfigurationInfo: {
            (options?: vsanhealthService.vim.HostCacheConfigurationInfo): vsanhealthService.vim.HostCacheConfigurationInfo;
         };
         ArrayOfHostCacheConfigurationInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostCacheConfigurationInfo): vsanhealthService.vim.ArrayOfHostCacheConfigurationInfo;
         };
         HostReplayUnsupportedReason: {
            "incompatibleProduct": string;
            "incompatibleCpu": string;
            "hvDisabled": string;
            "cpuidLimitSet": string;
            "oldBIOS": string;
            "unknown": string;
         };
         HostCapabilityFtUnsupportedReason: {
            "vMotionNotLicensed": string;
            "missingVMotionNic": string;
            "missingFTLoggingNic": string;
            "ftNotLicensed": string;
            "haAgentIssue": string;
            "unsupportedProduct": string;
            "cpuHvUnsupported": string;
            "cpuHwmmuUnsupported": string;
            "cpuHvDisabled": string;
         };
         HostCapabilityVmDirectPathGen2UnsupportedReason: {
            "hostNptIncompatibleProduct": string;
            "hostNptIncompatibleHardware": string;
            "hostNptDisabled": string;
         };
         HostCapability: {
            (options?: vsanhealthService.vim.HostCapability): vsanhealthService.vim.HostCapability;
         };
         HostCertificateManagerCertificateInfoCertificateStatus: {
            "unknown": string;
            "expired": string;
            "expiring": string;
            "expiringShortly": string;
            "expirationImminent": string;
            "good": string;
         };
         HostCertificateManagerCertificateInfo: {
            (options?: vsanhealthService.vim.HostCertificateManagerCertificateInfo): vsanhealthService.vim.HostCertificateManagerCertificateInfo;
         };
         HostConfigChangeMode: {
            "modify": string;
            "replace": string;
         };
         HostConfigChangeOperation: {
            "add": string;
            "remove": string;
            "edit": string;
            "ignore": string;
         };
         HostConfigChange: {
            (options?: vsanhealthService.vim.HostConfigChange): vsanhealthService.vim.HostConfigChange;
         };
         HostConfigInfo: {
            (options?: vsanhealthService.vim.HostConfigInfo): vsanhealthService.vim.HostConfigInfo;
         };
         HostConfigManager: {
            (options?: vsanhealthService.vim.HostConfigManager): vsanhealthService.vim.HostConfigManager;
         };
         HostConfigSpec: {
            (options?: vsanhealthService.vim.HostConfigSpec): vsanhealthService.vim.HostConfigSpec;
         };
         HostConnectInfoNetworkInfo: {
            (options?: vsanhealthService.vim.HostConnectInfoNetworkInfo): vsanhealthService.vim.HostConnectInfoNetworkInfo;
         };
         ArrayOfHostConnectInfoNetworkInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostConnectInfoNetworkInfo): vsanhealthService.vim.ArrayOfHostConnectInfoNetworkInfo;
         };
         HostNewNetworkConnectInfo: {
            (options?: vsanhealthService.vim.HostNewNetworkConnectInfo): vsanhealthService.vim.HostNewNetworkConnectInfo;
         };
         HostDatastoreConnectInfo: {
            (options?: vsanhealthService.vim.HostDatastoreConnectInfo): vsanhealthService.vim.HostDatastoreConnectInfo;
         };
         ArrayOfHostDatastoreConnectInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostDatastoreConnectInfo): vsanhealthService.vim.ArrayOfHostDatastoreConnectInfo;
         };
         HostDatastoreExistsConnectInfo: {
            (options?: vsanhealthService.vim.HostDatastoreExistsConnectInfo): vsanhealthService.vim.HostDatastoreExistsConnectInfo;
         };
         HostDatastoreNameConflictConnectInfo: {
            (options?: vsanhealthService.vim.HostDatastoreNameConflictConnectInfo): vsanhealthService.vim.HostDatastoreNameConflictConnectInfo;
         };
         HostLicenseConnectInfo: {
            (options?: vsanhealthService.vim.HostLicenseConnectInfo): vsanhealthService.vim.HostLicenseConnectInfo;
         };
         HostConnectInfo: {
            (options?: vsanhealthService.vim.HostConnectInfo): vsanhealthService.vim.HostConnectInfo;
         };
         HostConnectSpec: {
            (options?: vsanhealthService.vim.HostConnectSpec): vsanhealthService.vim.HostConnectSpec;
         };
         HostCpuIdInfo: {
            (options?: vsanhealthService.vim.HostCpuIdInfo): vsanhealthService.vim.HostCpuIdInfo;
         };
         ArrayOfHostCpuIdInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostCpuIdInfo): vsanhealthService.vim.ArrayOfHostCpuIdInfo;
         };
         HostHyperThreadScheduleInfo: {
            (options?: vsanhealthService.vim.HostHyperThreadScheduleInfo): vsanhealthService.vim.HostHyperThreadScheduleInfo;
         };
         FileQueryFlags: {
            (options?: vsanhealthService.vim.FileQueryFlags): vsanhealthService.vim.FileQueryFlags;
         };
         FileInfo: {
            (options?: vsanhealthService.vim.FileInfo): vsanhealthService.vim.FileInfo;
         };
         ArrayOfFileInfo: {
            (options?: vsanhealthService.vim.ArrayOfFileInfo): vsanhealthService.vim.ArrayOfFileInfo;
         };
         FileQuery: {
            (options?: vsanhealthService.vim.FileQuery): vsanhealthService.vim.FileQuery;
         };
         ArrayOfFileQuery: {
            (options?: vsanhealthService.vim.ArrayOfFileQuery): vsanhealthService.vim.ArrayOfFileQuery;
         };
         VmConfigFileQueryFilter: {
            (options?: vsanhealthService.vim.VmConfigFileQueryFilter): vsanhealthService.vim.VmConfigFileQueryFilter;
         };
         VmConfigFileQueryFlags: {
            (options?: vsanhealthService.vim.VmConfigFileQueryFlags): vsanhealthService.vim.VmConfigFileQueryFlags;
         };
         VmConfigFileQuery: {
            (options?: vsanhealthService.vim.VmConfigFileQuery): vsanhealthService.vim.VmConfigFileQuery;
         };
         TemplateConfigFileQuery: {
            (options?: vsanhealthService.vim.TemplateConfigFileQuery): vsanhealthService.vim.TemplateConfigFileQuery;
         };
         VmDiskFileQueryFilter: {
            (options?: vsanhealthService.vim.VmDiskFileQueryFilter): vsanhealthService.vim.VmDiskFileQueryFilter;
         };
         VmDiskFileQueryFlags: {
            (options?: vsanhealthService.vim.VmDiskFileQueryFlags): vsanhealthService.vim.VmDiskFileQueryFlags;
         };
         VmDiskFileQuery: {
            (options?: vsanhealthService.vim.VmDiskFileQuery): vsanhealthService.vim.VmDiskFileQuery;
         };
         FolderFileQuery: {
            (options?: vsanhealthService.vim.FolderFileQuery): vsanhealthService.vim.FolderFileQuery;
         };
         VmSnapshotFileQuery: {
            (options?: vsanhealthService.vim.VmSnapshotFileQuery): vsanhealthService.vim.VmSnapshotFileQuery;
         };
         IsoImageFileQuery: {
            (options?: vsanhealthService.vim.IsoImageFileQuery): vsanhealthService.vim.IsoImageFileQuery;
         };
         FloppyImageFileQuery: {
            (options?: vsanhealthService.vim.FloppyImageFileQuery): vsanhealthService.vim.FloppyImageFileQuery;
         };
         VmNvramFileQuery: {
            (options?: vsanhealthService.vim.VmNvramFileQuery): vsanhealthService.vim.VmNvramFileQuery;
         };
         VmLogFileQuery: {
            (options?: vsanhealthService.vim.VmLogFileQuery): vsanhealthService.vim.VmLogFileQuery;
         };
         VmConfigFileEncryptionInfo: {
            (options?: vsanhealthService.vim.VmConfigFileEncryptionInfo): vsanhealthService.vim.VmConfigFileEncryptionInfo;
         };
         VmConfigFileInfo: {
            (options?: vsanhealthService.vim.VmConfigFileInfo): vsanhealthService.vim.VmConfigFileInfo;
         };
         TemplateConfigFileInfo: {
            (options?: vsanhealthService.vim.TemplateConfigFileInfo): vsanhealthService.vim.TemplateConfigFileInfo;
         };
         VmDiskFileEncryptionInfo: {
            (options?: vsanhealthService.vim.VmDiskFileEncryptionInfo): vsanhealthService.vim.VmDiskFileEncryptionInfo;
         };
         VmDiskFileInfo: {
            (options?: vsanhealthService.vim.VmDiskFileInfo): vsanhealthService.vim.VmDiskFileInfo;
         };
         FolderFileInfo: {
            (options?: vsanhealthService.vim.FolderFileInfo): vsanhealthService.vim.FolderFileInfo;
         };
         VmSnapshotFileInfo: {
            (options?: vsanhealthService.vim.VmSnapshotFileInfo): vsanhealthService.vim.VmSnapshotFileInfo;
         };
         IsoImageFileInfo: {
            (options?: vsanhealthService.vim.IsoImageFileInfo): vsanhealthService.vim.IsoImageFileInfo;
         };
         FloppyImageFileInfo: {
            (options?: vsanhealthService.vim.FloppyImageFileInfo): vsanhealthService.vim.FloppyImageFileInfo;
         };
         VmNvramFileInfo: {
            (options?: vsanhealthService.vim.VmNvramFileInfo): vsanhealthService.vim.VmNvramFileInfo;
         };
         VmLogFileInfo: {
            (options?: vsanhealthService.vim.VmLogFileInfo): vsanhealthService.vim.VmLogFileInfo;
         };
         HostDatastoreBrowserSearchSpec: {
            (options?: vsanhealthService.vim.HostDatastoreBrowserSearchSpec): vsanhealthService.vim.HostDatastoreBrowserSearchSpec;
         };
         HostDatastoreBrowserSearchResults: {
            (options?: vsanhealthService.vim.HostDatastoreBrowserSearchResults): vsanhealthService.vim.HostDatastoreBrowserSearchResults;
         };
         ArrayOfHostDatastoreBrowserSearchResults: {
            (options?: vsanhealthService.vim.ArrayOfHostDatastoreBrowserSearchResults): vsanhealthService.vim.ArrayOfHostDatastoreBrowserSearchResults;
         };
         HostDatastoreSystemCapabilities: {
            (options?: vsanhealthService.vim.HostDatastoreSystemCapabilities): vsanhealthService.vim.HostDatastoreSystemCapabilities;
         };
         HostDatastoreSystemVvolDatastoreSpec: {
            (options?: vsanhealthService.vim.HostDatastoreSystemVvolDatastoreSpec): vsanhealthService.vim.HostDatastoreSystemVvolDatastoreSpec;
         };
         HostDatastoreSystemDatastoreResult: {
            (options?: vsanhealthService.vim.HostDatastoreSystemDatastoreResult): vsanhealthService.vim.HostDatastoreSystemDatastoreResult;
         };
         ArrayOfHostDatastoreSystemDatastoreResult: {
            (options?: vsanhealthService.vim.ArrayOfHostDatastoreSystemDatastoreResult): vsanhealthService.vim.ArrayOfHostDatastoreSystemDatastoreResult;
         };
         VmfsDatastoreInfo: {
            (options?: vsanhealthService.vim.VmfsDatastoreInfo): vsanhealthService.vim.VmfsDatastoreInfo;
         };
         NasDatastoreInfo: {
            (options?: vsanhealthService.vim.NasDatastoreInfo): vsanhealthService.vim.NasDatastoreInfo;
         };
         LocalDatastoreInfo: {
            (options?: vsanhealthService.vim.LocalDatastoreInfo): vsanhealthService.vim.LocalDatastoreInfo;
         };
         VmfsDatastoreSpec: {
            (options?: vsanhealthService.vim.VmfsDatastoreSpec): vsanhealthService.vim.VmfsDatastoreSpec;
         };
         VmfsDatastoreCreateSpec: {
            (options?: vsanhealthService.vim.VmfsDatastoreCreateSpec): vsanhealthService.vim.VmfsDatastoreCreateSpec;
         };
         VmfsDatastoreExtendSpec: {
            (options?: vsanhealthService.vim.VmfsDatastoreExtendSpec): vsanhealthService.vim.VmfsDatastoreExtendSpec;
         };
         VmfsDatastoreExpandSpec: {
            (options?: vsanhealthService.vim.VmfsDatastoreExpandSpec): vsanhealthService.vim.VmfsDatastoreExpandSpec;
         };
         VmfsDatastoreBaseOption: {
            (options?: vsanhealthService.vim.VmfsDatastoreBaseOption): vsanhealthService.vim.VmfsDatastoreBaseOption;
         };
         VmfsDatastoreSingleExtentOption: {
            (options?: vsanhealthService.vim.VmfsDatastoreSingleExtentOption): vsanhealthService.vim.VmfsDatastoreSingleExtentOption;
         };
         VmfsDatastoreAllExtentOption: {
            (options?: vsanhealthService.vim.VmfsDatastoreAllExtentOption): vsanhealthService.vim.VmfsDatastoreAllExtentOption;
         };
         VmfsDatastoreMultipleExtentOption: {
            (options?: vsanhealthService.vim.VmfsDatastoreMultipleExtentOption): vsanhealthService.vim.VmfsDatastoreMultipleExtentOption;
         };
         VmfsDatastoreOption: {
            (options?: vsanhealthService.vim.VmfsDatastoreOption): vsanhealthService.vim.VmfsDatastoreOption;
         };
         ArrayOfVmfsDatastoreOption: {
            (options?: vsanhealthService.vim.ArrayOfVmfsDatastoreOption): vsanhealthService.vim.ArrayOfVmfsDatastoreOption;
         };
         VvolDatastoreInfo: {
            (options?: vsanhealthService.vim.VvolDatastoreInfo): vsanhealthService.vim.VvolDatastoreInfo;
         };
         HostDateTimeConfig: {
            (options?: vsanhealthService.vim.HostDateTimeConfig): vsanhealthService.vim.HostDateTimeConfig;
         };
         HostDateTimeInfo: {
            (options?: vsanhealthService.vim.HostDateTimeInfo): vsanhealthService.vim.HostDateTimeInfo;
         };
         HostDateTimeSystemTimeZone: {
            (options?: vsanhealthService.vim.HostDateTimeSystemTimeZone): vsanhealthService.vim.HostDateTimeSystemTimeZone;
         };
         ArrayOfHostDateTimeSystemTimeZone: {
            (options?: vsanhealthService.vim.ArrayOfHostDateTimeSystemTimeZone): vsanhealthService.vim.ArrayOfHostDateTimeSystemTimeZone;
         };
         HostDeploymentInfo: {
            (options?: vsanhealthService.vim.HostDeploymentInfo): vsanhealthService.vim.HostDeploymentInfo;
         };
         HostDevice: {
            (options?: vsanhealthService.vim.HostDevice): vsanhealthService.vim.HostDevice;
         };
         HostDhcpServiceSpec: {
            (options?: vsanhealthService.vim.HostDhcpServiceSpec): vsanhealthService.vim.HostDhcpServiceSpec;
         };
         HostDhcpServiceConfig: {
            (options?: vsanhealthService.vim.HostDhcpServiceConfig): vsanhealthService.vim.HostDhcpServiceConfig;
         };
         ArrayOfHostDhcpServiceConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostDhcpServiceConfig): vsanhealthService.vim.ArrayOfHostDhcpServiceConfig;
         };
         HostDhcpService: {
            (options?: vsanhealthService.vim.HostDhcpService): vsanhealthService.vim.HostDhcpService;
         };
         ArrayOfHostDhcpService: {
            (options?: vsanhealthService.vim.ArrayOfHostDhcpService): vsanhealthService.vim.ArrayOfHostDhcpService;
         };
         DiagnosticPartitionStorageType: {
            "directAttached": string;
            "networkAttached": string;
         };
         DiagnosticPartitionType: {
            "singleHost": string;
            "multiHost": string;
         };
         HostDiagnosticPartitionCreateOption: {
            (options?: vsanhealthService.vim.HostDiagnosticPartitionCreateOption): vsanhealthService.vim.HostDiagnosticPartitionCreateOption;
         };
         ArrayOfHostDiagnosticPartitionCreateOption: {
            (options?: vsanhealthService.vim.ArrayOfHostDiagnosticPartitionCreateOption): vsanhealthService.vim.ArrayOfHostDiagnosticPartitionCreateOption;
         };
         HostDiagnosticPartitionCreateSpec: {
            (options?: vsanhealthService.vim.HostDiagnosticPartitionCreateSpec): vsanhealthService.vim.HostDiagnosticPartitionCreateSpec;
         };
         HostDiagnosticPartitionCreateDescription: {
            (options?: vsanhealthService.vim.HostDiagnosticPartitionCreateDescription): vsanhealthService.vim.HostDiagnosticPartitionCreateDescription;
         };
         HostDiagnosticPartition: {
            (options?: vsanhealthService.vim.HostDiagnosticPartition): vsanhealthService.vim.HostDiagnosticPartition;
         };
         ArrayOfHostDiagnosticPartition: {
            (options?: vsanhealthService.vim.ArrayOfHostDiagnosticPartition): vsanhealthService.vim.ArrayOfHostDiagnosticPartition;
         };
         HostDirectoryStoreInfo: {
            (options?: vsanhealthService.vim.HostDirectoryStoreInfo): vsanhealthService.vim.HostDirectoryStoreInfo;
         };
         HostDiskConfigurationResult: {
            (options?: vsanhealthService.vim.HostDiskConfigurationResult): vsanhealthService.vim.HostDiskConfigurationResult;
         };
         ArrayOfHostDiskConfigurationResult: {
            (options?: vsanhealthService.vim.ArrayOfHostDiskConfigurationResult): vsanhealthService.vim.ArrayOfHostDiskConfigurationResult;
         };
         HostDiskDimensionsChs: {
            (options?: vsanhealthService.vim.HostDiskDimensionsChs): vsanhealthService.vim.HostDiskDimensionsChs;
         };
         HostDiskDimensionsLba: {
            (options?: vsanhealthService.vim.HostDiskDimensionsLba): vsanhealthService.vim.HostDiskDimensionsLba;
         };
         HostDiskDimensions: {
            (options?: vsanhealthService.vim.HostDiskDimensions): vsanhealthService.vim.HostDiskDimensions;
         };
         HostDiskPartitionInfoPartitionFormat: {
            "gpt": string;
            "mbr": string;
            "unknown": string;
         };
         HostDiskPartitionInfoType: {
            "none": string;
            "vmfs": string;
            "linuxNative": string;
            "linuxSwap": string;
            "extended": string;
            "ntfs": string;
            "vmkDiagnostic": string;
            "vffs": string;
         };
         HostDiskPartitionAttributes: {
            (options?: vsanhealthService.vim.HostDiskPartitionAttributes): vsanhealthService.vim.HostDiskPartitionAttributes;
         };
         ArrayOfHostDiskPartitionAttributes: {
            (options?: vsanhealthService.vim.ArrayOfHostDiskPartitionAttributes): vsanhealthService.vim.ArrayOfHostDiskPartitionAttributes;
         };
         HostDiskPartitionBlockRange: {
            (options?: vsanhealthService.vim.HostDiskPartitionBlockRange): vsanhealthService.vim.HostDiskPartitionBlockRange;
         };
         ArrayOfHostDiskPartitionBlockRange: {
            (options?: vsanhealthService.vim.ArrayOfHostDiskPartitionBlockRange): vsanhealthService.vim.ArrayOfHostDiskPartitionBlockRange;
         };
         HostDiskPartitionSpec: {
            (options?: vsanhealthService.vim.HostDiskPartitionSpec): vsanhealthService.vim.HostDiskPartitionSpec;
         };
         HostDiskPartitionLayout: {
            (options?: vsanhealthService.vim.HostDiskPartitionLayout): vsanhealthService.vim.HostDiskPartitionLayout;
         };
         HostDiskPartitionInfo: {
            (options?: vsanhealthService.vim.HostDiskPartitionInfo): vsanhealthService.vim.HostDiskPartitionInfo;
         };
         ArrayOfHostDiskPartitionInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostDiskPartitionInfo): vsanhealthService.vim.ArrayOfHostDiskPartitionInfo;
         };
         HostDnsConfig: {
            (options?: vsanhealthService.vim.HostDnsConfig): vsanhealthService.vim.HostDnsConfig;
         };
         HostDnsConfigSpec: {
            (options?: vsanhealthService.vim.HostDnsConfigSpec): vsanhealthService.vim.HostDnsConfigSpec;
         };
         HostEsxAgentHostManagerConfigInfo: {
            (options?: vsanhealthService.vim.HostEsxAgentHostManagerConfigInfo): vsanhealthService.vim.HostEsxAgentHostManagerConfigInfo;
         };
         HostFaultToleranceManagerComponentHealthInfo: {
            (options?: vsanhealthService.vim.HostFaultToleranceManagerComponentHealthInfo): vsanhealthService.vim.HostFaultToleranceManagerComponentHealthInfo;
         };
         FcoeConfigVlanRange: {
            (options?: vsanhealthService.vim.FcoeConfigVlanRange): vsanhealthService.vim.FcoeConfigVlanRange;
         };
         ArrayOfFcoeConfigVlanRange: {
            (options?: vsanhealthService.vim.ArrayOfFcoeConfigVlanRange): vsanhealthService.vim.ArrayOfFcoeConfigVlanRange;
         };
         FcoeConfigFcoeCapabilities: {
            (options?: vsanhealthService.vim.FcoeConfigFcoeCapabilities): vsanhealthService.vim.FcoeConfigFcoeCapabilities;
         };
         FcoeConfigFcoeSpecification: {
            (options?: vsanhealthService.vim.FcoeConfigFcoeSpecification): vsanhealthService.vim.FcoeConfigFcoeSpecification;
         };
         FcoeConfig: {
            (options?: vsanhealthService.vim.FcoeConfig): vsanhealthService.vim.FcoeConfig;
         };
         HostFeatureCapability: {
            (options?: vsanhealthService.vim.HostFeatureCapability): vsanhealthService.vim.HostFeatureCapability;
         };
         ArrayOfHostFeatureCapability: {
            (options?: vsanhealthService.vim.ArrayOfHostFeatureCapability): vsanhealthService.vim.ArrayOfHostFeatureCapability;
         };
         HostFeatureMask: {
            (options?: vsanhealthService.vim.HostFeatureMask): vsanhealthService.vim.HostFeatureMask;
         };
         ArrayOfHostFeatureMask: {
            (options?: vsanhealthService.vim.ArrayOfHostFeatureMask): vsanhealthService.vim.ArrayOfHostFeatureMask;
         };
         HostFeatureVersionKey: {
            "faultTolerance": string;
         };
         HostFeatureVersionInfo: {
            (options?: vsanhealthService.vim.HostFeatureVersionInfo): vsanhealthService.vim.HostFeatureVersionInfo;
         };
         ArrayOfHostFeatureVersionInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostFeatureVersionInfo): vsanhealthService.vim.ArrayOfHostFeatureVersionInfo;
         };
         ModeInfo: {
            (options?: vsanhealthService.vim.ModeInfo): vsanhealthService.vim.ModeInfo;
         };
         HostFileAccess: {
            (options?: vsanhealthService.vim.HostFileAccess): vsanhealthService.vim.HostFileAccess;
         };
         HostFileSystemVolumeInfo: {
            (options?: vsanhealthService.vim.HostFileSystemVolumeInfo): vsanhealthService.vim.HostFileSystemVolumeInfo;
         };
         FileSystemMountInfoVStorageSupportStatus: {
            "vStorageSupported": string;
            "vStorageUnsupported": string;
            "vStorageUnknown": string;
         };
         HostFileSystemMountInfo: {
            (options?: vsanhealthService.vim.HostFileSystemMountInfo): vsanhealthService.vim.HostFileSystemMountInfo;
         };
         ArrayOfHostFileSystemMountInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostFileSystemMountInfo): vsanhealthService.vim.ArrayOfHostFileSystemMountInfo;
         };
         HostFileSystemVolumeFileSystemType: {
            "VMFS": string;
            "NFS": string;
            "NFS41": string;
            "CIFS": string;
            "vsan": string;
            "VFFS": string;
            "VVOL": string;
            "OTHER": string;
         };
         HostFileSystemVolume: {
            (options?: vsanhealthService.vim.HostFileSystemVolume): vsanhealthService.vim.HostFileSystemVolume;
         };
         HostNasVolumeUserInfo: {
            (options?: vsanhealthService.vim.HostNasVolumeUserInfo): vsanhealthService.vim.HostNasVolumeUserInfo;
         };
         HostNasVolumeSecurityType: {
            "AUTH_SYS": string;
            "SEC_KRB5": string;
            "SEC_KRB5I": string;
         };
         HostNasVolumeSpec: {
            (options?: vsanhealthService.vim.HostNasVolumeSpec): vsanhealthService.vim.HostNasVolumeSpec;
         };
         HostNasVolumeConfig: {
            (options?: vsanhealthService.vim.HostNasVolumeConfig): vsanhealthService.vim.HostNasVolumeConfig;
         };
         ArrayOfHostNasVolumeConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostNasVolumeConfig): vsanhealthService.vim.ArrayOfHostNasVolumeConfig;
         };
         HostNasVolume: {
            (options?: vsanhealthService.vim.HostNasVolume): vsanhealthService.vim.HostNasVolume;
         };
         HostLocalFileSystemVolumeSpec: {
            (options?: vsanhealthService.vim.HostLocalFileSystemVolumeSpec): vsanhealthService.vim.HostLocalFileSystemVolumeSpec;
         };
         HostLocalFileSystemVolume: {
            (options?: vsanhealthService.vim.HostLocalFileSystemVolume): vsanhealthService.vim.HostLocalFileSystemVolume;
         };
         HostVfatVolume: {
            (options?: vsanhealthService.vim.HostVfatVolume): vsanhealthService.vim.HostVfatVolume;
         };
         HostFirewallConfigRuleSetConfig: {
            (options?: vsanhealthService.vim.HostFirewallConfigRuleSetConfig): vsanhealthService.vim.HostFirewallConfigRuleSetConfig;
         };
         ArrayOfHostFirewallConfigRuleSetConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostFirewallConfigRuleSetConfig): vsanhealthService.vim.ArrayOfHostFirewallConfigRuleSetConfig;
         };
         HostFirewallConfig: {
            (options?: vsanhealthService.vim.HostFirewallConfig): vsanhealthService.vim.HostFirewallConfig;
         };
         HostFirewallDefaultPolicy: {
            (options?: vsanhealthService.vim.HostFirewallDefaultPolicy): vsanhealthService.vim.HostFirewallDefaultPolicy;
         };
         HostFirewallInfo: {
            (options?: vsanhealthService.vim.HostFirewallInfo): vsanhealthService.vim.HostFirewallInfo;
         };
         HostFlagInfo: {
            (options?: vsanhealthService.vim.HostFlagInfo): vsanhealthService.vim.HostFlagInfo;
         };
         HostForceMountedInfo: {
            (options?: vsanhealthService.vim.HostForceMountedInfo): vsanhealthService.vim.HostForceMountedInfo;
         };
         HostGatewaySpec: {
            (options?: vsanhealthService.vim.HostGatewaySpec): vsanhealthService.vim.HostGatewaySpec;
         };
         HostGraphicsConfigGraphicsType: {
            "shared": string;
            "sharedDirect": string;
         };
         HostGraphicsConfigSharedPassthruAssignmentPolicy: {
            "performance": string;
            "consolidation": string;
         };
         HostGraphicsConfigDeviceType: {
            (options?: vsanhealthService.vim.HostGraphicsConfigDeviceType): vsanhealthService.vim.HostGraphicsConfigDeviceType;
         };
         ArrayOfHostGraphicsConfigDeviceType: {
            (options?: vsanhealthService.vim.ArrayOfHostGraphicsConfigDeviceType): vsanhealthService.vim.ArrayOfHostGraphicsConfigDeviceType;
         };
         HostGraphicsConfig: {
            (options?: vsanhealthService.vim.HostGraphicsConfig): vsanhealthService.vim.HostGraphicsConfig;
         };
         HostGraphicsInfoGraphicsType: {
            "basic": string;
            "shared": string;
            "direct": string;
            "sharedDirect": string;
         };
         HostGraphicsInfo: {
            (options?: vsanhealthService.vim.HostGraphicsInfo): vsanhealthService.vim.HostGraphicsInfo;
         };
         ArrayOfHostGraphicsInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostGraphicsInfo): vsanhealthService.vim.ArrayOfHostGraphicsInfo;
         };
         HostHardwareInfo: {
            (options?: vsanhealthService.vim.HostHardwareInfo): vsanhealthService.vim.HostHardwareInfo;
         };
         HostSystemInfo: {
            (options?: vsanhealthService.vim.HostSystemInfo): vsanhealthService.vim.HostSystemInfo;
         };
         HostCpuPowerManagementInfoPolicyType: {
            "off": string;
            "staticPolicy": string;
            "dynamicPolicy": string;
         };
         HostCpuPowerManagementInfo: {
            (options?: vsanhealthService.vim.HostCpuPowerManagementInfo): vsanhealthService.vim.HostCpuPowerManagementInfo;
         };
         HostCpuInfo: {
            (options?: vsanhealthService.vim.HostCpuInfo): vsanhealthService.vim.HostCpuInfo;
         };
         HostCpuPackageVendor: {
            "unknown": string;
            "intel": string;
            "amd": string;
         };
         HostCpuPackage: {
            (options?: vsanhealthService.vim.HostCpuPackage): vsanhealthService.vim.HostCpuPackage;
         };
         ArrayOfHostCpuPackage: {
            (options?: vsanhealthService.vim.ArrayOfHostCpuPackage): vsanhealthService.vim.ArrayOfHostCpuPackage;
         };
         HostNumaInfo: {
            (options?: vsanhealthService.vim.HostNumaInfo): vsanhealthService.vim.HostNumaInfo;
         };
         HostNumaNode: {
            (options?: vsanhealthService.vim.HostNumaNode): vsanhealthService.vim.HostNumaNode;
         };
         ArrayOfHostNumaNode: {
            (options?: vsanhealthService.vim.ArrayOfHostNumaNode): vsanhealthService.vim.ArrayOfHostNumaNode;
         };
         HostBIOSInfo: {
            (options?: vsanhealthService.vim.HostBIOSInfo): vsanhealthService.vim.HostBIOSInfo;
         };
         HostReliableMemoryInfo: {
            (options?: vsanhealthService.vim.HostReliableMemoryInfo): vsanhealthService.vim.HostReliableMemoryInfo;
         };
         HostHardwareElementStatus: {
            "Unknown": string;
            "Green": string;
            "Yellow": string;
            "Red": string;
         };
         HostHardwareElementInfo: {
            (options?: vsanhealthService.vim.HostHardwareElementInfo): vsanhealthService.vim.HostHardwareElementInfo;
         };
         ArrayOfHostHardwareElementInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostHardwareElementInfo): vsanhealthService.vim.ArrayOfHostHardwareElementInfo;
         };
         HostStorageOperationalInfo: {
            (options?: vsanhealthService.vim.HostStorageOperationalInfo): vsanhealthService.vim.HostStorageOperationalInfo;
         };
         ArrayOfHostStorageOperationalInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostStorageOperationalInfo): vsanhealthService.vim.ArrayOfHostStorageOperationalInfo;
         };
         HostStorageElementInfo: {
            (options?: vsanhealthService.vim.HostStorageElementInfo): vsanhealthService.vim.HostStorageElementInfo;
         };
         ArrayOfHostStorageElementInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostStorageElementInfo): vsanhealthService.vim.ArrayOfHostStorageElementInfo;
         };
         HostHardwareStatusInfo: {
            (options?: vsanhealthService.vim.HostHardwareStatusInfo): vsanhealthService.vim.HostHardwareStatusInfo;
         };
         HealthSystemRuntime: {
            (options?: vsanhealthService.vim.HealthSystemRuntime): vsanhealthService.vim.HealthSystemRuntime;
         };
         HostAccessMode: {
            "accessNone": string;
            "accessAdmin": string;
            "accessNoAccess": string;
            "accessReadOnly": string;
            "accessOther": string;
         };
         HostAccessControlEntry: {
            (options?: vsanhealthService.vim.HostAccessControlEntry): vsanhealthService.vim.HostAccessControlEntry;
         };
         ArrayOfHostAccessControlEntry: {
            (options?: vsanhealthService.vim.ArrayOfHostAccessControlEntry): vsanhealthService.vim.ArrayOfHostAccessControlEntry;
         };
         HostLockdownMode: {
            "lockdownDisabled": string;
            "lockdownNormal": string;
            "lockdownStrict": string;
         };
         HostHostBusAdapter: {
            (options?: vsanhealthService.vim.HostHostBusAdapter): vsanhealthService.vim.HostHostBusAdapter;
         };
         ArrayOfHostHostBusAdapter: {
            (options?: vsanhealthService.vim.ArrayOfHostHostBusAdapter): vsanhealthService.vim.ArrayOfHostHostBusAdapter;
         };
         HostParallelScsiHba: {
            (options?: vsanhealthService.vim.HostParallelScsiHba): vsanhealthService.vim.HostParallelScsiHba;
         };
         HostSerialAttachedHba: {
            (options?: vsanhealthService.vim.HostSerialAttachedHba): vsanhealthService.vim.HostSerialAttachedHba;
         };
         HostBlockHba: {
            (options?: vsanhealthService.vim.HostBlockHba): vsanhealthService.vim.HostBlockHba;
         };
         FibreChannelPortType: {
            "fabric": string;
            "loop": string;
            "pointToPoint": string;
            "unknown": string;
         };
         HostFibreChannelHba: {
            (options?: vsanhealthService.vim.HostFibreChannelHba): vsanhealthService.vim.HostFibreChannelHba;
         };
         HostInternetScsiHbaParamValue: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaParamValue): vsanhealthService.vim.HostInternetScsiHbaParamValue;
         };
         ArrayOfHostInternetScsiHbaParamValue: {
            (options?: vsanhealthService.vim.ArrayOfHostInternetScsiHbaParamValue): vsanhealthService.vim.ArrayOfHostInternetScsiHbaParamValue;
         };
         HostInternetScsiHbaDiscoveryCapabilities: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaDiscoveryCapabilities): vsanhealthService.vim.HostInternetScsiHbaDiscoveryCapabilities;
         };
         InternetScsiSnsDiscoveryMethod: {
            "isnsStatic": string;
            "isnsDhcp": string;
            "isnsSlp": string;
         };
         SlpDiscoveryMethod: {
            "slpDhcp": string;
            "slpAutoUnicast": string;
            "slpAutoMulticast": string;
            "slpManual": string;
         };
         HostInternetScsiHbaDiscoveryProperties: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaDiscoveryProperties): vsanhealthService.vim.HostInternetScsiHbaDiscoveryProperties;
         };
         HostInternetScsiHbaChapAuthenticationType: {
            "chapProhibited": string;
            "chapDiscouraged": string;
            "chapPreferred": string;
            "chapRequired": string;
         };
         HostInternetScsiHbaAuthenticationCapabilities: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaAuthenticationCapabilities): vsanhealthService.vim.HostInternetScsiHbaAuthenticationCapabilities;
         };
         HostInternetScsiHbaAuthenticationProperties: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties): vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties;
         };
         HostInternetScsiHbaDigestType: {
            "digestProhibited": string;
            "digestDiscouraged": string;
            "digestPreferred": string;
            "digestRequired": string;
         };
         HostInternetScsiHbaDigestCapabilities: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaDigestCapabilities): vsanhealthService.vim.HostInternetScsiHbaDigestCapabilities;
         };
         HostInternetScsiHbaDigestProperties: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaDigestProperties): vsanhealthService.vim.HostInternetScsiHbaDigestProperties;
         };
         HostInternetScsiHbaIPCapabilities: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaIPCapabilities): vsanhealthService.vim.HostInternetScsiHbaIPCapabilities;
         };
         HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType: {
            "DHCP": string;
            "AutoConfigured": string;
            "Static": string;
            "Other": string;
         };
         HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation: {
            "add": string;
            "remove": string;
         };
         HostInternetScsiHbaIscsiIpv6Address: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaIscsiIpv6Address): vsanhealthService.vim.HostInternetScsiHbaIscsiIpv6Address;
         };
         ArrayOfHostInternetScsiHbaIscsiIpv6Address: {
            (options?: vsanhealthService.vim.ArrayOfHostInternetScsiHbaIscsiIpv6Address): vsanhealthService.vim.ArrayOfHostInternetScsiHbaIscsiIpv6Address;
         };
         HostInternetScsiHbaIPv6Properties: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaIPv6Properties): vsanhealthService.vim.HostInternetScsiHbaIPv6Properties;
         };
         HostInternetScsiHbaIPProperties: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaIPProperties): vsanhealthService.vim.HostInternetScsiHbaIPProperties;
         };
         HostInternetScsiHbaSendTarget: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaSendTarget): vsanhealthService.vim.HostInternetScsiHbaSendTarget;
         };
         ArrayOfHostInternetScsiHbaSendTarget: {
            (options?: vsanhealthService.vim.ArrayOfHostInternetScsiHbaSendTarget): vsanhealthService.vim.ArrayOfHostInternetScsiHbaSendTarget;
         };
         HostInternetScsiHbaStaticTargetTargetDiscoveryMethod: {
            "staticMethod": string;
            "sendTargetMethod": string;
            "slpMethod": string;
            "isnsMethod": string;
            "unknownMethod": string;
         };
         HostInternetScsiHbaStaticTarget: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaStaticTarget): vsanhealthService.vim.HostInternetScsiHbaStaticTarget;
         };
         ArrayOfHostInternetScsiHbaStaticTarget: {
            (options?: vsanhealthService.vim.ArrayOfHostInternetScsiHbaStaticTarget): vsanhealthService.vim.ArrayOfHostInternetScsiHbaStaticTarget;
         };
         HostInternetScsiHbaTargetSet: {
            (options?: vsanhealthService.vim.HostInternetScsiHbaTargetSet): vsanhealthService.vim.HostInternetScsiHbaTargetSet;
         };
         HostInternetScsiHbaNetworkBindingSupportType: {
            "notsupported": string;
            "optional": string;
            "required": string;
         };
         HostInternetScsiHba: {
            (options?: vsanhealthService.vim.HostInternetScsiHba): vsanhealthService.vim.HostInternetScsiHba;
         };
         HostFibreChannelOverEthernetHbaLinkInfo: {
            (options?: vsanhealthService.vim.HostFibreChannelOverEthernetHbaLinkInfo): vsanhealthService.vim.HostFibreChannelOverEthernetHbaLinkInfo;
         };
         HostFibreChannelOverEthernetHba: {
            (options?: vsanhealthService.vim.HostFibreChannelOverEthernetHba): vsanhealthService.vim.HostFibreChannelOverEthernetHba;
         };
         HostProxySwitchSpec: {
            (options?: vsanhealthService.vim.HostProxySwitchSpec): vsanhealthService.vim.HostProxySwitchSpec;
         };
         HostProxySwitchConfig: {
            (options?: vsanhealthService.vim.HostProxySwitchConfig): vsanhealthService.vim.HostProxySwitchConfig;
         };
         ArrayOfHostProxySwitchConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostProxySwitchConfig): vsanhealthService.vim.ArrayOfHostProxySwitchConfig;
         };
         HostProxySwitchHostLagConfig: {
            (options?: vsanhealthService.vim.HostProxySwitchHostLagConfig): vsanhealthService.vim.HostProxySwitchHostLagConfig;
         };
         ArrayOfHostProxySwitchHostLagConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostProxySwitchHostLagConfig): vsanhealthService.vim.ArrayOfHostProxySwitchHostLagConfig;
         };
         HostProxySwitch: {
            (options?: vsanhealthService.vim.HostProxySwitch): vsanhealthService.vim.HostProxySwitch;
         };
         ArrayOfHostProxySwitch: {
            (options?: vsanhealthService.vim.ArrayOfHostProxySwitch): vsanhealthService.vim.ArrayOfHostProxySwitch;
         };
         HostImageAcceptanceLevel: {
            "vmware_certified": string;
            "vmware_accepted": string;
            "partner": string;
            "community": string;
         };
         HostImageProfileSummary: {
            (options?: vsanhealthService.vim.HostImageProfileSummary): vsanhealthService.vim.HostImageProfileSummary;
         };
         HostIpConfigIpV6AddressConfigType: {
            "other": string;
            "manual": string;
            "dhcp": string;
            "linklayer": string;
            "random": string;
         };
         HostIpConfigIpV6AddressStatus: {
            "preferred": string;
            "deprecated": string;
            "invalid": string;
            "inaccessible": string;
            "unknown": string;
            "tentative": string;
            "duplicate": string;
         };
         HostIpConfigIpV6Address: {
            (options?: vsanhealthService.vim.HostIpConfigIpV6Address): vsanhealthService.vim.HostIpConfigIpV6Address;
         };
         ArrayOfHostIpConfigIpV6Address: {
            (options?: vsanhealthService.vim.ArrayOfHostIpConfigIpV6Address): vsanhealthService.vim.ArrayOfHostIpConfigIpV6Address;
         };
         HostIpConfigIpV6AddressConfiguration: {
            (options?: vsanhealthService.vim.HostIpConfigIpV6AddressConfiguration): vsanhealthService.vim.HostIpConfigIpV6AddressConfiguration;
         };
         HostIpConfig: {
            (options?: vsanhealthService.vim.HostIpConfig): vsanhealthService.vim.HostIpConfig;
         };
         HostIpRouteConfig: {
            (options?: vsanhealthService.vim.HostIpRouteConfig): vsanhealthService.vim.HostIpRouteConfig;
         };
         HostIpRouteConfigSpec: {
            (options?: vsanhealthService.vim.HostIpRouteConfigSpec): vsanhealthService.vim.HostIpRouteConfigSpec;
         };
         HostIpRouteEntry: {
            (options?: vsanhealthService.vim.HostIpRouteEntry): vsanhealthService.vim.HostIpRouteEntry;
         };
         ArrayOfHostIpRouteEntry: {
            (options?: vsanhealthService.vim.ArrayOfHostIpRouteEntry): vsanhealthService.vim.ArrayOfHostIpRouteEntry;
         };
         HostIpRouteOp: {
            (options?: vsanhealthService.vim.HostIpRouteOp): vsanhealthService.vim.HostIpRouteOp;
         };
         ArrayOfHostIpRouteOp: {
            (options?: vsanhealthService.vim.ArrayOfHostIpRouteOp): vsanhealthService.vim.ArrayOfHostIpRouteOp;
         };
         HostIpRouteTableConfig: {
            (options?: vsanhealthService.vim.HostIpRouteTableConfig): vsanhealthService.vim.HostIpRouteTableConfig;
         };
         HostIpRouteTableInfo: {
            (options?: vsanhealthService.vim.HostIpRouteTableInfo): vsanhealthService.vim.HostIpRouteTableInfo;
         };
         HostIpmiInfo: {
            (options?: vsanhealthService.vim.HostIpmiInfo): vsanhealthService.vim.HostIpmiInfo;
         };
         IscsiStatus: {
            (options?: vsanhealthService.vim.IscsiStatus): vsanhealthService.vim.IscsiStatus;
         };
         IscsiPortInfoPathStatus: {
            "notUsed": string;
            "active": string;
            "standBy": string;
            "lastActive": string;
         };
         IscsiPortInfo: {
            (options?: vsanhealthService.vim.IscsiPortInfo): vsanhealthService.vim.IscsiPortInfo;
         };
         ArrayOfIscsiPortInfo: {
            (options?: vsanhealthService.vim.ArrayOfIscsiPortInfo): vsanhealthService.vim.ArrayOfIscsiPortInfo;
         };
         IscsiDependencyEntity: {
            (options?: vsanhealthService.vim.IscsiDependencyEntity): vsanhealthService.vim.IscsiDependencyEntity;
         };
         ArrayOfIscsiDependencyEntity: {
            (options?: vsanhealthService.vim.ArrayOfIscsiDependencyEntity): vsanhealthService.vim.ArrayOfIscsiDependencyEntity;
         };
         IscsiMigrationDependency: {
            (options?: vsanhealthService.vim.IscsiMigrationDependency): vsanhealthService.vim.IscsiMigrationDependency;
         };
         KernelModuleSectionInfo: {
            (options?: vsanhealthService.vim.KernelModuleSectionInfo): vsanhealthService.vim.KernelModuleSectionInfo;
         };
         KernelModuleInfo: {
            (options?: vsanhealthService.vim.KernelModuleInfo): vsanhealthService.vim.KernelModuleInfo;
         };
         ArrayOfKernelModuleInfo: {
            (options?: vsanhealthService.vim.ArrayOfKernelModuleInfo): vsanhealthService.vim.ArrayOfKernelModuleInfo;
         };
         HostLicenseSpec: {
            (options?: vsanhealthService.vim.HostLicenseSpec): vsanhealthService.vim.HostLicenseSpec;
         };
         LinkDiscoveryProtocolConfigProtocolType: {
            "cdp": string;
            "lldp": string;
         };
         LinkDiscoveryProtocolConfigOperationType: {
            "none": string;
            "listen": string;
            "advertise": string;
            "both": string;
         };
         LinkDiscoveryProtocolConfig: {
            (options?: vsanhealthService.vim.LinkDiscoveryProtocolConfig): vsanhealthService.vim.LinkDiscoveryProtocolConfig;
         };
         HostAccountSpec: {
            (options?: vsanhealthService.vim.HostAccountSpec): vsanhealthService.vim.HostAccountSpec;
         };
         ArrayOfHostAccountSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostAccountSpec): vsanhealthService.vim.ArrayOfHostAccountSpec;
         };
         HostPosixAccountSpec: {
            (options?: vsanhealthService.vim.HostPosixAccountSpec): vsanhealthService.vim.HostPosixAccountSpec;
         };
         HostLocalAuthenticationInfo: {
            (options?: vsanhealthService.vim.HostLocalAuthenticationInfo): vsanhealthService.vim.HostLocalAuthenticationInfo;
         };
         HostLowLevelProvisioningManagerVmRecoveryInfo: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerVmRecoveryInfo): vsanhealthService.vim.HostLowLevelProvisioningManagerVmRecoveryInfo;
         };
         HostLowLevelProvisioningManagerVmMigrationStatus: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerVmMigrationStatus): vsanhealthService.vim.HostLowLevelProvisioningManagerVmMigrationStatus;
         };
         HostLowLevelProvisioningManagerReloadTarget: {
            "currentConfig": string;
            "snapshotConfig": string;
         };
         HostLowLevelProvisioningManagerDiskLayoutSpec: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec): vsanhealthService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec;
         };
         ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec): vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec;
         };
         HostLowLevelProvisioningManagerSnapshotLayoutSpec: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerSnapshotLayoutSpec): vsanhealthService.vim.HostLowLevelProvisioningManagerSnapshotLayoutSpec;
         };
         ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec): vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec;
         };
         HostLowLevelProvisioningManagerFileType: {
            "File": string;
            "VirtualDisk": string;
            "Directory": string;
         };
         HostLowLevelProvisioningManagerFileReserveSpec: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerFileReserveSpec): vsanhealthService.vim.HostLowLevelProvisioningManagerFileReserveSpec;
         };
         ArrayOfHostLowLevelProvisioningManagerFileReserveSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileReserveSpec): vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileReserveSpec;
         };
         HostLowLevelProvisioningManagerFileReserveResult: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerFileReserveResult): vsanhealthService.vim.HostLowLevelProvisioningManagerFileReserveResult;
         };
         ArrayOfHostLowLevelProvisioningManagerFileReserveResult: {
            (options?: vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileReserveResult): vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileReserveResult;
         };
         HostLowLevelProvisioningManagerFileDeleteSpec: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerFileDeleteSpec): vsanhealthService.vim.HostLowLevelProvisioningManagerFileDeleteSpec;
         };
         ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec): vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec;
         };
         HostLowLevelProvisioningManagerFileDeleteResult: {
            (options?: vsanhealthService.vim.HostLowLevelProvisioningManagerFileDeleteResult): vsanhealthService.vim.HostLowLevelProvisioningManagerFileDeleteResult;
         };
         ArrayOfHostLowLevelProvisioningManagerFileDeleteResult: {
            (options?: vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileDeleteResult): vsanhealthService.vim.ArrayOfHostLowLevelProvisioningManagerFileDeleteResult;
         };
         HostMaintenanceSpec: {
            (options?: vsanhealthService.vim.HostMaintenanceSpec): vsanhealthService.vim.HostMaintenanceSpec;
         };
         ServiceConsoleReservationInfo: {
            (options?: vsanhealthService.vim.ServiceConsoleReservationInfo): vsanhealthService.vim.ServiceConsoleReservationInfo;
         };
         VirtualMachineMemoryAllocationPolicy: {
            "swapNone": string;
            "swapSome": string;
            "swapMost": string;
         };
         VirtualMachineMemoryReservationInfo: {
            (options?: vsanhealthService.vim.VirtualMachineMemoryReservationInfo): vsanhealthService.vim.VirtualMachineMemoryReservationInfo;
         };
         VirtualMachineMemoryReservationSpec: {
            (options?: vsanhealthService.vim.VirtualMachineMemoryReservationSpec): vsanhealthService.vim.VirtualMachineMemoryReservationSpec;
         };
         HostMemorySpec: {
            (options?: vsanhealthService.vim.HostMemorySpec): vsanhealthService.vim.HostMemorySpec;
         };
         HostMountMode: {
            "readWrite": string;
            "readOnly": string;
         };
         HostMountInfoInaccessibleReason: {
            "AllPathsDown_Start": string;
            "AllPathsDown_Timeout": string;
            "PermanentDeviceLoss": string;
         };
         HostMountInfo: {
            (options?: vsanhealthService.vim.HostMountInfo): vsanhealthService.vim.HostMountInfo;
         };
         MultipathState: {
            "standby": string;
            "active": string;
            "disabled": string;
            "dead": string;
            "unknown": string;
         };
         HostMultipathInfoLogicalUnitPolicy: {
            (options?: vsanhealthService.vim.HostMultipathInfoLogicalUnitPolicy): vsanhealthService.vim.HostMultipathInfoLogicalUnitPolicy;
         };
         HostMultipathInfoLogicalUnitStorageArrayTypePolicy: {
            (options?: vsanhealthService.vim.HostMultipathInfoLogicalUnitStorageArrayTypePolicy): vsanhealthService.vim.HostMultipathInfoLogicalUnitStorageArrayTypePolicy;
         };
         HostMultipathInfoFixedLogicalUnitPolicy: {
            (options?: vsanhealthService.vim.HostMultipathInfoFixedLogicalUnitPolicy): vsanhealthService.vim.HostMultipathInfoFixedLogicalUnitPolicy;
         };
         HostMultipathInfoLogicalUnit: {
            (options?: vsanhealthService.vim.HostMultipathInfoLogicalUnit): vsanhealthService.vim.HostMultipathInfoLogicalUnit;
         };
         ArrayOfHostMultipathInfoLogicalUnit: {
            (options?: vsanhealthService.vim.ArrayOfHostMultipathInfoLogicalUnit): vsanhealthService.vim.ArrayOfHostMultipathInfoLogicalUnit;
         };
         HostMultipathInfoPath: {
            (options?: vsanhealthService.vim.HostMultipathInfoPath): vsanhealthService.vim.HostMultipathInfoPath;
         };
         ArrayOfHostMultipathInfoPath: {
            (options?: vsanhealthService.vim.ArrayOfHostMultipathInfoPath): vsanhealthService.vim.ArrayOfHostMultipathInfoPath;
         };
         HostMultipathInfo: {
            (options?: vsanhealthService.vim.HostMultipathInfo): vsanhealthService.vim.HostMultipathInfo;
         };
         HostMultipathStateInfoPath: {
            (options?: vsanhealthService.vim.HostMultipathStateInfoPath): vsanhealthService.vim.HostMultipathStateInfoPath;
         };
         ArrayOfHostMultipathStateInfoPath: {
            (options?: vsanhealthService.vim.ArrayOfHostMultipathStateInfoPath): vsanhealthService.vim.ArrayOfHostMultipathStateInfoPath;
         };
         HostMultipathStateInfo: {
            (options?: vsanhealthService.vim.HostMultipathStateInfo): vsanhealthService.vim.HostMultipathStateInfo;
         };
         HostNatServicePortForwardSpec: {
            (options?: vsanhealthService.vim.HostNatServicePortForwardSpec): vsanhealthService.vim.HostNatServicePortForwardSpec;
         };
         ArrayOfHostNatServicePortForwardSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostNatServicePortForwardSpec): vsanhealthService.vim.ArrayOfHostNatServicePortForwardSpec;
         };
         HostNatServiceNameServiceSpec: {
            (options?: vsanhealthService.vim.HostNatServiceNameServiceSpec): vsanhealthService.vim.HostNatServiceNameServiceSpec;
         };
         HostNatServiceSpec: {
            (options?: vsanhealthService.vim.HostNatServiceSpec): vsanhealthService.vim.HostNatServiceSpec;
         };
         HostNatServiceConfig: {
            (options?: vsanhealthService.vim.HostNatServiceConfig): vsanhealthService.vim.HostNatServiceConfig;
         };
         ArrayOfHostNatServiceConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostNatServiceConfig): vsanhealthService.vim.ArrayOfHostNatServiceConfig;
         };
         HostNatService: {
            (options?: vsanhealthService.vim.HostNatService): vsanhealthService.vim.HostNatService;
         };
         ArrayOfHostNatService: {
            (options?: vsanhealthService.vim.ArrayOfHostNatService): vsanhealthService.vim.ArrayOfHostNatService;
         };
         HostNetCapabilities: {
            (options?: vsanhealthService.vim.HostNetCapabilities): vsanhealthService.vim.HostNetCapabilities;
         };
         HostNetOffloadCapabilities: {
            (options?: vsanhealthService.vim.HostNetOffloadCapabilities): vsanhealthService.vim.HostNetOffloadCapabilities;
         };
         HostNetStackInstanceSystemStackKey: {
            "defaultTcpipStack": string;
            "vmotion": string;
            "vSphereProvisioning": string;
         };
         HostNetStackInstanceCongestionControlAlgorithmType: {
            "newreno": string;
            "cubic": string;
         };
         HostNetStackInstance: {
            (options?: vsanhealthService.vim.HostNetStackInstance): vsanhealthService.vim.HostNetStackInstance;
         };
         ArrayOfHostNetStackInstance: {
            (options?: vsanhealthService.vim.ArrayOfHostNetStackInstance): vsanhealthService.vim.ArrayOfHostNetStackInstance;
         };
         HostNetworkConfigResult: {
            (options?: vsanhealthService.vim.HostNetworkConfigResult): vsanhealthService.vim.HostNetworkConfigResult;
         };
         HostNetworkConfigNetStackSpec: {
            (options?: vsanhealthService.vim.HostNetworkConfigNetStackSpec): vsanhealthService.vim.HostNetworkConfigNetStackSpec;
         };
         ArrayOfHostNetworkConfigNetStackSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostNetworkConfigNetStackSpec): vsanhealthService.vim.ArrayOfHostNetworkConfigNetStackSpec;
         };
         HostNetworkConfig: {
            (options?: vsanhealthService.vim.HostNetworkConfig): vsanhealthService.vim.HostNetworkConfig;
         };
         HostNetworkInfo: {
            (options?: vsanhealthService.vim.HostNetworkInfo): vsanhealthService.vim.HostNetworkInfo;
         };
         HostNetworkSecurityPolicy: {
            (options?: vsanhealthService.vim.HostNetworkSecurityPolicy): vsanhealthService.vim.HostNetworkSecurityPolicy;
         };
         HostNetworkTrafficShapingPolicy: {
            (options?: vsanhealthService.vim.HostNetworkTrafficShapingPolicy): vsanhealthService.vim.HostNetworkTrafficShapingPolicy;
         };
         HostNicFailureCriteria: {
            (options?: vsanhealthService.vim.HostNicFailureCriteria): vsanhealthService.vim.HostNicFailureCriteria;
         };
         HostNicOrderPolicy: {
            (options?: vsanhealthService.vim.HostNicOrderPolicy): vsanhealthService.vim.HostNicOrderPolicy;
         };
         HostNicTeamingPolicy: {
            (options?: vsanhealthService.vim.HostNicTeamingPolicy): vsanhealthService.vim.HostNicTeamingPolicy;
         };
         HostNetworkPolicy: {
            (options?: vsanhealthService.vim.HostNetworkPolicy): vsanhealthService.vim.HostNetworkPolicy;
         };
         HostNtpConfig: {
            (options?: vsanhealthService.vim.HostNtpConfig): vsanhealthService.vim.HostNtpConfig;
         };
         HostNumericSensorHealthState: {
            "unknown": string;
            "green": string;
            "yellow": string;
            "red": string;
         };
         HostNumericSensorType: {
            "fan": string;
            "power": string;
            "temperature": string;
            "voltage": string;
            "other": string;
            "processor": string;
            "memory": string;
            "storage": string;
            "systemBoard": string;
            "battery": string;
            "bios": string;
            "cable": string;
            "watchdog": string;
         };
         HostNumericSensorInfo: {
            (options?: vsanhealthService.vim.HostNumericSensorInfo): vsanhealthService.vim.HostNumericSensorInfo;
         };
         ArrayOfHostNumericSensorInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostNumericSensorInfo): vsanhealthService.vim.ArrayOfHostNumericSensorInfo;
         };
         HostOpaqueNetworkInfo: {
            (options?: vsanhealthService.vim.HostOpaqueNetworkInfo): vsanhealthService.vim.HostOpaqueNetworkInfo;
         };
         ArrayOfHostOpaqueNetworkInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostOpaqueNetworkInfo): vsanhealthService.vim.ArrayOfHostOpaqueNetworkInfo;
         };
         HostOpaqueSwitchOpaqueSwitchState: {
            "up": string;
            "warning": string;
            "down": string;
         };
         HostOpaqueSwitchPhysicalNicZone: {
            (options?: vsanhealthService.vim.HostOpaqueSwitchPhysicalNicZone): vsanhealthService.vim.HostOpaqueSwitchPhysicalNicZone;
         };
         ArrayOfHostOpaqueSwitchPhysicalNicZone: {
            (options?: vsanhealthService.vim.ArrayOfHostOpaqueSwitchPhysicalNicZone): vsanhealthService.vim.ArrayOfHostOpaqueSwitchPhysicalNicZone;
         };
         HostOpaqueSwitch: {
            (options?: vsanhealthService.vim.HostOpaqueSwitch): vsanhealthService.vim.HostOpaqueSwitch;
         };
         ArrayOfHostOpaqueSwitch: {
            (options?: vsanhealthService.vim.ArrayOfHostOpaqueSwitch): vsanhealthService.vim.ArrayOfHostOpaqueSwitch;
         };
         HostPatchManagerResult: {
            (options?: vsanhealthService.vim.HostPatchManagerResult): vsanhealthService.vim.HostPatchManagerResult;
         };
         HostPatchManagerReason: {
            "obsoleted": string;
            "missingPatch": string;
            "missingLib": string;
            "hasDependentPatch": string;
            "conflictPatch": string;
            "conflictLib": string;
         };
         HostPatchManagerIntegrityStatus: {
            "validated": string;
            "keyNotFound": string;
            "keyRevoked": string;
            "keyExpired": string;
            "digestMismatch": string;
            "notEnoughSignatures": string;
            "validationError": string;
         };
         HostPatchManagerInstallState: {
            "hostRestarted": string;
            "imageActive": string;
         };
         HostPatchManagerStatusPrerequisitePatch: {
            (options?: vsanhealthService.vim.HostPatchManagerStatusPrerequisitePatch): vsanhealthService.vim.HostPatchManagerStatusPrerequisitePatch;
         };
         ArrayOfHostPatchManagerStatusPrerequisitePatch: {
            (options?: vsanhealthService.vim.ArrayOfHostPatchManagerStatusPrerequisitePatch): vsanhealthService.vim.ArrayOfHostPatchManagerStatusPrerequisitePatch;
         };
         HostPatchManagerStatus: {
            (options?: vsanhealthService.vim.HostPatchManagerStatus): vsanhealthService.vim.HostPatchManagerStatus;
         };
         ArrayOfHostPatchManagerStatus: {
            (options?: vsanhealthService.vim.ArrayOfHostPatchManagerStatus): vsanhealthService.vim.ArrayOfHostPatchManagerStatus;
         };
         HostPatchManagerLocator: {
            (options?: vsanhealthService.vim.HostPatchManagerLocator): vsanhealthService.vim.HostPatchManagerLocator;
         };
         HostPatchManagerPatchManagerOperationSpec: {
            (options?: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec;
         };
         HostPathSelectionPolicyOption: {
            (options?: vsanhealthService.vim.HostPathSelectionPolicyOption): vsanhealthService.vim.HostPathSelectionPolicyOption;
         };
         ArrayOfHostPathSelectionPolicyOption: {
            (options?: vsanhealthService.vim.ArrayOfHostPathSelectionPolicyOption): vsanhealthService.vim.ArrayOfHostPathSelectionPolicyOption;
         };
         HostPciDevice: {
            (options?: vsanhealthService.vim.HostPciDevice): vsanhealthService.vim.HostPciDevice;
         };
         ArrayOfHostPciDevice: {
            (options?: vsanhealthService.vim.ArrayOfHostPciDevice): vsanhealthService.vim.ArrayOfHostPciDevice;
         };
         HostPciPassthruConfig: {
            (options?: vsanhealthService.vim.HostPciPassthruConfig): vsanhealthService.vim.HostPciPassthruConfig;
         };
         ArrayOfHostPciPassthruConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostPciPassthruConfig): vsanhealthService.vim.ArrayOfHostPciPassthruConfig;
         };
         HostPciPassthruInfo: {
            (options?: vsanhealthService.vim.HostPciPassthruInfo): vsanhealthService.vim.HostPciPassthruInfo;
         };
         ArrayOfHostPciPassthruInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostPciPassthruInfo): vsanhealthService.vim.ArrayOfHostPciPassthruInfo;
         };
         PhysicalNicSpec: {
            (options?: vsanhealthService.vim.PhysicalNicSpec): vsanhealthService.vim.PhysicalNicSpec;
         };
         PhysicalNicConfig: {
            (options?: vsanhealthService.vim.PhysicalNicConfig): vsanhealthService.vim.PhysicalNicConfig;
         };
         ArrayOfPhysicalNicConfig: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNicConfig): vsanhealthService.vim.ArrayOfPhysicalNicConfig;
         };
         PhysicalNicLinkInfo: {
            (options?: vsanhealthService.vim.PhysicalNicLinkInfo): vsanhealthService.vim.PhysicalNicLinkInfo;
         };
         ArrayOfPhysicalNicLinkInfo: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNicLinkInfo): vsanhealthService.vim.ArrayOfPhysicalNicLinkInfo;
         };
         PhysicalNicHint: {
            (options?: vsanhealthService.vim.PhysicalNicHint): vsanhealthService.vim.PhysicalNicHint;
         };
         PhysicalNicIpHint: {
            (options?: vsanhealthService.vim.PhysicalNicIpHint): vsanhealthService.vim.PhysicalNicIpHint;
         };
         ArrayOfPhysicalNicIpHint: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNicIpHint): vsanhealthService.vim.ArrayOfPhysicalNicIpHint;
         };
         PhysicalNicNameHint: {
            (options?: vsanhealthService.vim.PhysicalNicNameHint): vsanhealthService.vim.PhysicalNicNameHint;
         };
         ArrayOfPhysicalNicNameHint: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNicNameHint): vsanhealthService.vim.ArrayOfPhysicalNicNameHint;
         };
         PhysicalNicHintInfo: {
            (options?: vsanhealthService.vim.PhysicalNicHintInfo): vsanhealthService.vim.PhysicalNicHintInfo;
         };
         ArrayOfPhysicalNicHintInfo: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNicHintInfo): vsanhealthService.vim.ArrayOfPhysicalNicHintInfo;
         };
         PhysicalNicCdpDeviceCapability: {
            (options?: vsanhealthService.vim.PhysicalNicCdpDeviceCapability): vsanhealthService.vim.PhysicalNicCdpDeviceCapability;
         };
         PhysicalNicCdpInfo: {
            (options?: vsanhealthService.vim.PhysicalNicCdpInfo): vsanhealthService.vim.PhysicalNicCdpInfo;
         };
         LinkLayerDiscoveryProtocolInfo: {
            (options?: vsanhealthService.vim.LinkLayerDiscoveryProtocolInfo): vsanhealthService.vim.LinkLayerDiscoveryProtocolInfo;
         };
         PhysicalNicVmDirectPathGen2SupportedMode: {
            "upt": string;
         };
         PhysicalNicResourcePoolSchedulerDisallowedReason: {
            "userOptOut": string;
            "hardwareUnsupported": string;
         };
         PhysicalNic: {
            (options?: vsanhealthService.vim.PhysicalNic): vsanhealthService.vim.PhysicalNic;
         };
         ArrayOfPhysicalNic: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNic): vsanhealthService.vim.ArrayOfPhysicalNic;
         };
         HostPlugStoreTopologyAdapter: {
            (options?: vsanhealthService.vim.HostPlugStoreTopologyAdapter): vsanhealthService.vim.HostPlugStoreTopologyAdapter;
         };
         ArrayOfHostPlugStoreTopologyAdapter: {
            (options?: vsanhealthService.vim.ArrayOfHostPlugStoreTopologyAdapter): vsanhealthService.vim.ArrayOfHostPlugStoreTopologyAdapter;
         };
         HostPlugStoreTopologyPath: {
            (options?: vsanhealthService.vim.HostPlugStoreTopologyPath): vsanhealthService.vim.HostPlugStoreTopologyPath;
         };
         ArrayOfHostPlugStoreTopologyPath: {
            (options?: vsanhealthService.vim.ArrayOfHostPlugStoreTopologyPath): vsanhealthService.vim.ArrayOfHostPlugStoreTopologyPath;
         };
         HostPlugStoreTopologyDevice: {
            (options?: vsanhealthService.vim.HostPlugStoreTopologyDevice): vsanhealthService.vim.HostPlugStoreTopologyDevice;
         };
         ArrayOfHostPlugStoreTopologyDevice: {
            (options?: vsanhealthService.vim.ArrayOfHostPlugStoreTopologyDevice): vsanhealthService.vim.ArrayOfHostPlugStoreTopologyDevice;
         };
         HostPlugStoreTopologyPlugin: {
            (options?: vsanhealthService.vim.HostPlugStoreTopologyPlugin): vsanhealthService.vim.HostPlugStoreTopologyPlugin;
         };
         ArrayOfHostPlugStoreTopologyPlugin: {
            (options?: vsanhealthService.vim.ArrayOfHostPlugStoreTopologyPlugin): vsanhealthService.vim.ArrayOfHostPlugStoreTopologyPlugin;
         };
         HostPlugStoreTopologyTarget: {
            (options?: vsanhealthService.vim.HostPlugStoreTopologyTarget): vsanhealthService.vim.HostPlugStoreTopologyTarget;
         };
         ArrayOfHostPlugStoreTopologyTarget: {
            (options?: vsanhealthService.vim.ArrayOfHostPlugStoreTopologyTarget): vsanhealthService.vim.ArrayOfHostPlugStoreTopologyTarget;
         };
         HostPlugStoreTopology: {
            (options?: vsanhealthService.vim.HostPlugStoreTopology): vsanhealthService.vim.HostPlugStoreTopology;
         };
         PortGroupConnecteeType: {
            "virtualMachine": string;
            "systemManagement": string;
            "host": string;
            "unknown": string;
         };
         HostPortGroupSpec: {
            (options?: vsanhealthService.vim.HostPortGroupSpec): vsanhealthService.vim.HostPortGroupSpec;
         };
         HostPortGroupConfig: {
            (options?: vsanhealthService.vim.HostPortGroupConfig): vsanhealthService.vim.HostPortGroupConfig;
         };
         ArrayOfHostPortGroupConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostPortGroupConfig): vsanhealthService.vim.ArrayOfHostPortGroupConfig;
         };
         HostPortGroupPort: {
            (options?: vsanhealthService.vim.HostPortGroupPort): vsanhealthService.vim.HostPortGroupPort;
         };
         ArrayOfHostPortGroupPort: {
            (options?: vsanhealthService.vim.ArrayOfHostPortGroupPort): vsanhealthService.vim.ArrayOfHostPortGroupPort;
         };
         HostPortGroup: {
            (options?: vsanhealthService.vim.HostPortGroup): vsanhealthService.vim.HostPortGroup;
         };
         ArrayOfHostPortGroup: {
            (options?: vsanhealthService.vim.ArrayOfHostPortGroup): vsanhealthService.vim.ArrayOfHostPortGroup;
         };
         HostPowerPolicy: {
            (options?: vsanhealthService.vim.HostPowerPolicy): vsanhealthService.vim.HostPowerPolicy;
         };
         ArrayOfHostPowerPolicy: {
            (options?: vsanhealthService.vim.ArrayOfHostPowerPolicy): vsanhealthService.vim.ArrayOfHostPowerPolicy;
         };
         PowerSystemCapability: {
            (options?: vsanhealthService.vim.PowerSystemCapability): vsanhealthService.vim.PowerSystemCapability;
         };
         PowerSystemInfo: {
            (options?: vsanhealthService.vim.PowerSystemInfo): vsanhealthService.vim.PowerSystemInfo;
         };
         HostProtocolEndpointPEType: {
            "block": string;
            "nas": string;
         };
         HostProtocolEndpointProtocolEndpointType: {
            "scsi": string;
            "nfs": string;
            "nfs4x": string;
         };
         HostProtocolEndpoint: {
            (options?: vsanhealthService.vim.HostProtocolEndpoint): vsanhealthService.vim.HostProtocolEndpoint;
         };
         ArrayOfHostProtocolEndpoint: {
            (options?: vsanhealthService.vim.ArrayOfHostProtocolEndpoint): vsanhealthService.vim.ArrayOfHostProtocolEndpoint;
         };
         HostResignatureRescanResult: {
            (options?: vsanhealthService.vim.HostResignatureRescanResult): vsanhealthService.vim.HostResignatureRescanResult;
         };
         HostFirewallRulesetIpNetwork: {
            (options?: vsanhealthService.vim.HostFirewallRulesetIpNetwork): vsanhealthService.vim.HostFirewallRulesetIpNetwork;
         };
         ArrayOfHostFirewallRulesetIpNetwork: {
            (options?: vsanhealthService.vim.ArrayOfHostFirewallRulesetIpNetwork): vsanhealthService.vim.ArrayOfHostFirewallRulesetIpNetwork;
         };
         HostFirewallRulesetIpList: {
            (options?: vsanhealthService.vim.HostFirewallRulesetIpList): vsanhealthService.vim.HostFirewallRulesetIpList;
         };
         HostFirewallRulesetRulesetSpec: {
            (options?: vsanhealthService.vim.HostFirewallRulesetRulesetSpec): vsanhealthService.vim.HostFirewallRulesetRulesetSpec;
         };
         HostFirewallRuleDirection: {
            "inbound": string;
            "outbound": string;
         };
         HostFirewallRulePortType: {
            "src": string;
            "dst": string;
         };
         HostFirewallRuleProtocol: {
            "tcp": string;
            "udp": string;
         };
         HostFirewallRule: {
            (options?: vsanhealthService.vim.HostFirewallRule): vsanhealthService.vim.HostFirewallRule;
         };
         ArrayOfHostFirewallRule: {
            (options?: vsanhealthService.vim.ArrayOfHostFirewallRule): vsanhealthService.vim.ArrayOfHostFirewallRule;
         };
         HostFirewallRuleset: {
            (options?: vsanhealthService.vim.HostFirewallRuleset): vsanhealthService.vim.HostFirewallRuleset;
         };
         ArrayOfHostFirewallRuleset: {
            (options?: vsanhealthService.vim.ArrayOfHostFirewallRuleset): vsanhealthService.vim.ArrayOfHostFirewallRuleset;
         };
         HostRuntimeInfoNetStackInstanceRuntimeInfoState: {
            "inactive": string;
            "active": string;
            "deactivating": string;
            "activating": string;
         };
         HostRuntimeInfoNetStackInstanceRuntimeInfo: {
            (options?: vsanhealthService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo): vsanhealthService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo;
         };
         ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo): vsanhealthService.vim.ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo;
         };
         HostPlacedVirtualNicIdentifier: {
            (options?: vsanhealthService.vim.HostPlacedVirtualNicIdentifier): vsanhealthService.vim.HostPlacedVirtualNicIdentifier;
         };
         ArrayOfHostPlacedVirtualNicIdentifier: {
            (options?: vsanhealthService.vim.ArrayOfHostPlacedVirtualNicIdentifier): vsanhealthService.vim.ArrayOfHostPlacedVirtualNicIdentifier;
         };
         HostPnicNetworkResourceInfo: {
            (options?: vsanhealthService.vim.HostPnicNetworkResourceInfo): vsanhealthService.vim.HostPnicNetworkResourceInfo;
         };
         ArrayOfHostPnicNetworkResourceInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostPnicNetworkResourceInfo): vsanhealthService.vim.ArrayOfHostPnicNetworkResourceInfo;
         };
         HostNetworkResourceRuntime: {
            (options?: vsanhealthService.vim.HostNetworkResourceRuntime): vsanhealthService.vim.HostNetworkResourceRuntime;
         };
         HostRuntimeInfoNetworkRuntimeInfo: {
            (options?: vsanhealthService.vim.HostRuntimeInfoNetworkRuntimeInfo): vsanhealthService.vim.HostRuntimeInfoNetworkRuntimeInfo;
         };
         HostRuntimeInfo: {
            (options?: vsanhealthService.vim.HostRuntimeInfo): vsanhealthService.vim.HostRuntimeInfo;
         };
         HostScsiDiskPartition: {
            (options?: vsanhealthService.vim.HostScsiDiskPartition): vsanhealthService.vim.HostScsiDiskPartition;
         };
         ArrayOfHostScsiDiskPartition: {
            (options?: vsanhealthService.vim.ArrayOfHostScsiDiskPartition): vsanhealthService.vim.ArrayOfHostScsiDiskPartition;
         };
         ScsiDiskType: {
            "native512": string;
            "emulated512": string;
            "native4k": string;
            "unknown": string;
         };
         HostScsiDisk: {
            (options?: vsanhealthService.vim.HostScsiDisk): vsanhealthService.vim.HostScsiDisk;
         };
         ArrayOfHostScsiDisk: {
            (options?: vsanhealthService.vim.ArrayOfHostScsiDisk): vsanhealthService.vim.ArrayOfHostScsiDisk;
         };
         ScsiLunType: {
            "disk": string;
            "tape": string;
            "printer": string;
            "processor": string;
            "worm": string;
            "cdrom": string;
            "scanner": string;
            "opticalDevice": string;
            "mediaChanger": string;
            "communications": string;
            "storageArrayController": string;
            "enclosure": string;
            "unknown": string;
         };
         ScsiLunCapabilities: {
            (options?: vsanhealthService.vim.ScsiLunCapabilities): vsanhealthService.vim.ScsiLunCapabilities;
         };
         ScsiLunDurableName: {
            (options?: vsanhealthService.vim.ScsiLunDurableName): vsanhealthService.vim.ScsiLunDurableName;
         };
         ArrayOfScsiLunDurableName: {
            (options?: vsanhealthService.vim.ArrayOfScsiLunDurableName): vsanhealthService.vim.ArrayOfScsiLunDurableName;
         };
         ScsiLunState: {
            "unknownState": string;
            "ok": string;
            "error": string;
            "off": string;
            "quiesced": string;
            "degraded": string;
            "lostCommunication": string;
            "timeout": string;
         };
         ScsiLunDescriptorQuality: {
            "highQuality": string;
            "mediumQuality": string;
            "lowQuality": string;
            "unknownQuality": string;
         };
         ScsiLunDescriptor: {
            (options?: vsanhealthService.vim.ScsiLunDescriptor): vsanhealthService.vim.ScsiLunDescriptor;
         };
         ArrayOfScsiLunDescriptor: {
            (options?: vsanhealthService.vim.ArrayOfScsiLunDescriptor): vsanhealthService.vim.ArrayOfScsiLunDescriptor;
         };
         ScsiLunVStorageSupportStatus: {
            "vStorageSupported": string;
            "vStorageUnsupported": string;
            "vStorageUnknown": string;
         };
         ScsiLun: {
            (options?: vsanhealthService.vim.ScsiLun): vsanhealthService.vim.ScsiLun;
         };
         ArrayOfScsiLun: {
            (options?: vsanhealthService.vim.ArrayOfScsiLun): vsanhealthService.vim.ArrayOfScsiLun;
         };
         HostScsiTopologyInterface: {
            (options?: vsanhealthService.vim.HostScsiTopologyInterface): vsanhealthService.vim.HostScsiTopologyInterface;
         };
         ArrayOfHostScsiTopologyInterface: {
            (options?: vsanhealthService.vim.ArrayOfHostScsiTopologyInterface): vsanhealthService.vim.ArrayOfHostScsiTopologyInterface;
         };
         HostScsiTopologyTarget: {
            (options?: vsanhealthService.vim.HostScsiTopologyTarget): vsanhealthService.vim.HostScsiTopologyTarget;
         };
         ArrayOfHostScsiTopologyTarget: {
            (options?: vsanhealthService.vim.ArrayOfHostScsiTopologyTarget): vsanhealthService.vim.ArrayOfHostScsiTopologyTarget;
         };
         HostScsiTopologyLun: {
            (options?: vsanhealthService.vim.HostScsiTopologyLun): vsanhealthService.vim.HostScsiTopologyLun;
         };
         ArrayOfHostScsiTopologyLun: {
            (options?: vsanhealthService.vim.ArrayOfHostScsiTopologyLun): vsanhealthService.vim.ArrayOfHostScsiTopologyLun;
         };
         HostScsiTopology: {
            (options?: vsanhealthService.vim.HostScsiTopology): vsanhealthService.vim.HostScsiTopology;
         };
         HostSecuritySpec: {
            (options?: vsanhealthService.vim.HostSecuritySpec): vsanhealthService.vim.HostSecuritySpec;
         };
         HostServicePolicy: {
            "on": string;
            "automatic": string;
            "off": string;
         };
         HostServiceSourcePackage: {
            (options?: vsanhealthService.vim.HostServiceSourcePackage): vsanhealthService.vim.HostServiceSourcePackage;
         };
         HostService: {
            (options?: vsanhealthService.vim.HostService): vsanhealthService.vim.HostService;
         };
         ArrayOfHostService: {
            (options?: vsanhealthService.vim.ArrayOfHostService): vsanhealthService.vim.ArrayOfHostService;
         };
         HostServiceConfig: {
            (options?: vsanhealthService.vim.HostServiceConfig): vsanhealthService.vim.HostServiceConfig;
         };
         ArrayOfHostServiceConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostServiceConfig): vsanhealthService.vim.ArrayOfHostServiceConfig;
         };
         HostServiceInfo: {
            (options?: vsanhealthService.vim.HostServiceInfo): vsanhealthService.vim.HostServiceInfo;
         };
         HostSnmpDestination: {
            (options?: vsanhealthService.vim.HostSnmpDestination): vsanhealthService.vim.HostSnmpDestination;
         };
         ArrayOfHostSnmpDestination: {
            (options?: vsanhealthService.vim.ArrayOfHostSnmpDestination): vsanhealthService.vim.ArrayOfHostSnmpDestination;
         };
         HostSnmpConfigSpec: {
            (options?: vsanhealthService.vim.HostSnmpConfigSpec): vsanhealthService.vim.HostSnmpConfigSpec;
         };
         HostSnmpAgentCapability: {
            "COMPLETE": string;
            "DIAGNOSTICS": string;
            "CONFIGURATION": string;
         };
         HostSnmpSystemAgentLimits: {
            (options?: vsanhealthService.vim.HostSnmpSystemAgentLimits): vsanhealthService.vim.HostSnmpSystemAgentLimits;
         };
         SoftwarePackageVibType: {
            "bootbank": string;
            "tools": string;
            "meta": string;
         };
         SoftwarePackageCapability: {
            (options?: vsanhealthService.vim.SoftwarePackageCapability): vsanhealthService.vim.SoftwarePackageCapability;
         };
         SoftwarePackageConstraint: {
            "equals": string;
            "lessThan": string;
            "lessThanEqual": string;
            "greaterThanEqual": string;
            "greaterThan": string;
         };
         Relation: {
            (options?: vsanhealthService.vim.Relation): vsanhealthService.vim.Relation;
         };
         ArrayOfRelation: {
            (options?: vsanhealthService.vim.ArrayOfRelation): vsanhealthService.vim.ArrayOfRelation;
         };
         SoftwarePackage: {
            (options?: vsanhealthService.vim.SoftwarePackage): vsanhealthService.vim.SoftwarePackage;
         };
         ArrayOfSoftwarePackage: {
            (options?: vsanhealthService.vim.ArrayOfSoftwarePackage): vsanhealthService.vim.ArrayOfSoftwarePackage;
         };
         HostSriovConfig: {
            (options?: vsanhealthService.vim.HostSriovConfig): vsanhealthService.vim.HostSriovConfig;
         };
         HostSriovDevicePoolInfo: {
            (options?: vsanhealthService.vim.HostSriovDevicePoolInfo): vsanhealthService.vim.HostSriovDevicePoolInfo;
         };
         ArrayOfHostSriovDevicePoolInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostSriovDevicePoolInfo): vsanhealthService.vim.ArrayOfHostSriovDevicePoolInfo;
         };
         HostSriovInfo: {
            (options?: vsanhealthService.vim.HostSriovInfo): vsanhealthService.vim.HostSriovInfo;
         };
         HostSriovNetworkDevicePoolInfo: {
            (options?: vsanhealthService.vim.HostSriovNetworkDevicePoolInfo): vsanhealthService.vim.HostSriovNetworkDevicePoolInfo;
         };
         HostSslThumbprintInfo: {
            (options?: vsanhealthService.vim.HostSslThumbprintInfo): vsanhealthService.vim.HostSslThumbprintInfo;
         };
         ArrayOfHostSslThumbprintInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostSslThumbprintInfo): vsanhealthService.vim.ArrayOfHostSslThumbprintInfo;
         };
         HostStorageArrayTypePolicyOption: {
            (options?: vsanhealthService.vim.HostStorageArrayTypePolicyOption): vsanhealthService.vim.HostStorageArrayTypePolicyOption;
         };
         ArrayOfHostStorageArrayTypePolicyOption: {
            (options?: vsanhealthService.vim.ArrayOfHostStorageArrayTypePolicyOption): vsanhealthService.vim.ArrayOfHostStorageArrayTypePolicyOption;
         };
         HostStorageDeviceInfo: {
            (options?: vsanhealthService.vim.HostStorageDeviceInfo): vsanhealthService.vim.HostStorageDeviceInfo;
         };
         HostStorageSystemVmfsVolumeResult: {
            (options?: vsanhealthService.vim.HostStorageSystemVmfsVolumeResult): vsanhealthService.vim.HostStorageSystemVmfsVolumeResult;
         };
         ArrayOfHostStorageSystemVmfsVolumeResult: {
            (options?: vsanhealthService.vim.ArrayOfHostStorageSystemVmfsVolumeResult): vsanhealthService.vim.ArrayOfHostStorageSystemVmfsVolumeResult;
         };
         HostStorageSystemScsiLunResult: {
            (options?: vsanhealthService.vim.HostStorageSystemScsiLunResult): vsanhealthService.vim.HostStorageSystemScsiLunResult;
         };
         ArrayOfHostStorageSystemScsiLunResult: {
            (options?: vsanhealthService.vim.ArrayOfHostStorageSystemScsiLunResult): vsanhealthService.vim.ArrayOfHostStorageSystemScsiLunResult;
         };
         HostStorageSystemDiskLocatorLedResult: {
            (options?: vsanhealthService.vim.HostStorageSystemDiskLocatorLedResult): vsanhealthService.vim.HostStorageSystemDiskLocatorLedResult;
         };
         ArrayOfHostStorageSystemDiskLocatorLedResult: {
            (options?: vsanhealthService.vim.ArrayOfHostStorageSystemDiskLocatorLedResult): vsanhealthService.vim.ArrayOfHostStorageSystemDiskLocatorLedResult;
         };
         HostHardwareSummary: {
            (options?: vsanhealthService.vim.HostHardwareSummary): vsanhealthService.vim.HostHardwareSummary;
         };
         HostListSummaryQuickStats: {
            (options?: vsanhealthService.vim.HostListSummaryQuickStats): vsanhealthService.vim.HostListSummaryQuickStats;
         };
         HostConfigSummary: {
            (options?: vsanhealthService.vim.HostConfigSummary): vsanhealthService.vim.HostConfigSummary;
         };
         HostListSummaryGatewaySummary: {
            (options?: vsanhealthService.vim.HostListSummaryGatewaySummary): vsanhealthService.vim.HostListSummaryGatewaySummary;
         };
         HostListSummary: {
            (options?: vsanhealthService.vim.HostListSummary): vsanhealthService.vim.HostListSummary;
         };
         SystemEventInfo: {
            (options?: vsanhealthService.vim.SystemEventInfo): vsanhealthService.vim.SystemEventInfo;
         };
         ArrayOfSystemEventInfo: {
            (options?: vsanhealthService.vim.ArrayOfSystemEventInfo): vsanhealthService.vim.ArrayOfSystemEventInfo;
         };
         HostSystemHealthInfo: {
            (options?: vsanhealthService.vim.HostSystemHealthInfo): vsanhealthService.vim.HostSystemHealthInfo;
         };
         HostSystemIdentificationInfoIdentifier: {
            "AssetTag": string;
            "ServiceTag": string;
            "OemSpecificString": string;
         };
         HostSystemIdentificationInfo: {
            (options?: vsanhealthService.vim.HostSystemIdentificationInfo): vsanhealthService.vim.HostSystemIdentificationInfo;
         };
         ArrayOfHostSystemIdentificationInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostSystemIdentificationInfo): vsanhealthService.vim.ArrayOfHostSystemIdentificationInfo;
         };
         HostSystemResourceInfo: {
            (options?: vsanhealthService.vim.HostSystemResourceInfo): vsanhealthService.vim.HostSystemResourceInfo;
         };
         ArrayOfHostSystemResourceInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostSystemResourceInfo): vsanhealthService.vim.ArrayOfHostSystemResourceInfo;
         };
         HostSystemSwapConfigurationSystemSwapOption: {
            (options?: vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption): vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption;
         };
         ArrayOfHostSystemSwapConfigurationSystemSwapOption: {
            (options?: vsanhealthService.vim.ArrayOfHostSystemSwapConfigurationSystemSwapOption): vsanhealthService.vim.ArrayOfHostSystemSwapConfigurationSystemSwapOption;
         };
         HostSystemSwapConfigurationDisabledOption: {
            (options?: vsanhealthService.vim.HostSystemSwapConfigurationDisabledOption): vsanhealthService.vim.HostSystemSwapConfigurationDisabledOption;
         };
         HostSystemSwapConfigurationHostCacheOption: {
            (options?: vsanhealthService.vim.HostSystemSwapConfigurationHostCacheOption): vsanhealthService.vim.HostSystemSwapConfigurationHostCacheOption;
         };
         HostSystemSwapConfigurationHostLocalSwapOption: {
            (options?: vsanhealthService.vim.HostSystemSwapConfigurationHostLocalSwapOption): vsanhealthService.vim.HostSystemSwapConfigurationHostLocalSwapOption;
         };
         HostSystemSwapConfigurationDatastoreOption: {
            (options?: vsanhealthService.vim.HostSystemSwapConfigurationDatastoreOption): vsanhealthService.vim.HostSystemSwapConfigurationDatastoreOption;
         };
         HostSystemSwapConfiguration: {
            (options?: vsanhealthService.vim.HostSystemSwapConfiguration): vsanhealthService.vim.HostSystemSwapConfiguration;
         };
         HostTargetTransport: {
            (options?: vsanhealthService.vim.HostTargetTransport): vsanhealthService.vim.HostTargetTransport;
         };
         HostParallelScsiTargetTransport: {
            (options?: vsanhealthService.vim.HostParallelScsiTargetTransport): vsanhealthService.vim.HostParallelScsiTargetTransport;
         };
         HostBlockAdapterTargetTransport: {
            (options?: vsanhealthService.vim.HostBlockAdapterTargetTransport): vsanhealthService.vim.HostBlockAdapterTargetTransport;
         };
         HostSerialAttachedTargetTransport: {
            (options?: vsanhealthService.vim.HostSerialAttachedTargetTransport): vsanhealthService.vim.HostSerialAttachedTargetTransport;
         };
         HostFibreChannelTargetTransport: {
            (options?: vsanhealthService.vim.HostFibreChannelTargetTransport): vsanhealthService.vim.HostFibreChannelTargetTransport;
         };
         HostInternetScsiTargetTransport: {
            (options?: vsanhealthService.vim.HostInternetScsiTargetTransport): vsanhealthService.vim.HostInternetScsiTargetTransport;
         };
         HostFibreChannelOverEthernetTargetTransport: {
            (options?: vsanhealthService.vim.HostFibreChannelOverEthernetTargetTransport): vsanhealthService.vim.HostFibreChannelOverEthernetTargetTransport;
         };
         HostTpmAttestationReport: {
            (options?: vsanhealthService.vim.HostTpmAttestationReport): vsanhealthService.vim.HostTpmAttestationReport;
         };
         HostTpmBootSecurityOptionEventDetails: {
            (options?: vsanhealthService.vim.HostTpmBootSecurityOptionEventDetails): vsanhealthService.vim.HostTpmBootSecurityOptionEventDetails;
         };
         HostTpmCommandEventDetails: {
            (options?: vsanhealthService.vim.HostTpmCommandEventDetails): vsanhealthService.vim.HostTpmCommandEventDetails;
         };
         HostDigestInfoDigestMethodType: {
            "SHA1": string;
            "MD5": string;
         };
         HostDigestInfo: {
            (options?: vsanhealthService.vim.HostDigestInfo): vsanhealthService.vim.HostDigestInfo;
         };
         HostTpmDigestInfo: {
            (options?: vsanhealthService.vim.HostTpmDigestInfo): vsanhealthService.vim.HostTpmDigestInfo;
         };
         ArrayOfHostTpmDigestInfo: {
            (options?: vsanhealthService.vim.ArrayOfHostTpmDigestInfo): vsanhealthService.vim.ArrayOfHostTpmDigestInfo;
         };
         HostTpmEventDetails: {
            (options?: vsanhealthService.vim.HostTpmEventDetails): vsanhealthService.vim.HostTpmEventDetails;
         };
         HostTpmEventLogEntry: {
            (options?: vsanhealthService.vim.HostTpmEventLogEntry): vsanhealthService.vim.HostTpmEventLogEntry;
         };
         ArrayOfHostTpmEventLogEntry: {
            (options?: vsanhealthService.vim.ArrayOfHostTpmEventLogEntry): vsanhealthService.vim.ArrayOfHostTpmEventLogEntry;
         };
         HostTpmOptionEventDetails: {
            (options?: vsanhealthService.vim.HostTpmOptionEventDetails): vsanhealthService.vim.HostTpmOptionEventDetails;
         };
         HostTpmSoftwareComponentEventDetails: {
            (options?: vsanhealthService.vim.HostTpmSoftwareComponentEventDetails): vsanhealthService.vim.HostTpmSoftwareComponentEventDetails;
         };
         HostUnresolvedVmfsExtentUnresolvedReason: {
            "diskIdMismatch": string;
            "uuidConflict": string;
         };
         HostUnresolvedVmfsExtent: {
            (options?: vsanhealthService.vim.HostUnresolvedVmfsExtent): vsanhealthService.vim.HostUnresolvedVmfsExtent;
         };
         ArrayOfHostUnresolvedVmfsExtent: {
            (options?: vsanhealthService.vim.ArrayOfHostUnresolvedVmfsExtent): vsanhealthService.vim.ArrayOfHostUnresolvedVmfsExtent;
         };
         HostUnresolvedVmfsResignatureSpec: {
            (options?: vsanhealthService.vim.HostUnresolvedVmfsResignatureSpec): vsanhealthService.vim.HostUnresolvedVmfsResignatureSpec;
         };
         HostUnresolvedVmfsResolutionResult: {
            (options?: vsanhealthService.vim.HostUnresolvedVmfsResolutionResult): vsanhealthService.vim.HostUnresolvedVmfsResolutionResult;
         };
         ArrayOfHostUnresolvedVmfsResolutionResult: {
            (options?: vsanhealthService.vim.ArrayOfHostUnresolvedVmfsResolutionResult): vsanhealthService.vim.ArrayOfHostUnresolvedVmfsResolutionResult;
         };
         HostUnresolvedVmfsResolutionSpecVmfsUuidResolution: {
            "resignature": string;
            "forceMount": string;
         };
         HostUnresolvedVmfsResolutionSpec: {
            (options?: vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec): vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec;
         };
         ArrayOfHostUnresolvedVmfsResolutionSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostUnresolvedVmfsResolutionSpec): vsanhealthService.vim.ArrayOfHostUnresolvedVmfsResolutionSpec;
         };
         HostUnresolvedVmfsVolumeResolveStatus: {
            (options?: vsanhealthService.vim.HostUnresolvedVmfsVolumeResolveStatus): vsanhealthService.vim.HostUnresolvedVmfsVolumeResolveStatus;
         };
         HostUnresolvedVmfsVolume: {
            (options?: vsanhealthService.vim.HostUnresolvedVmfsVolume): vsanhealthService.vim.HostUnresolvedVmfsVolume;
         };
         ArrayOfHostUnresolvedVmfsVolume: {
            (options?: vsanhealthService.vim.ArrayOfHostUnresolvedVmfsVolume): vsanhealthService.vim.ArrayOfHostUnresolvedVmfsVolume;
         };
         HostVFlashManagerVFlashResourceConfigSpec: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigSpec): vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigSpec;
         };
         HostVFlashManagerVFlashResourceConfigInfo: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigInfo): vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigInfo;
         };
         HostVFlashManagerVFlashResourceRunTimeInfo: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashResourceRunTimeInfo): vsanhealthService.vim.HostVFlashManagerVFlashResourceRunTimeInfo;
         };
         HostVFlashManagerVFlashCacheConfigSpec: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigSpec): vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigSpec;
         };
         HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption): vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
         };
         ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption: {
            (options?: vsanhealthService.vim.ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption): vsanhealthService.vim.ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
         };
         HostVFlashManagerVFlashCacheConfigInfo: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfo): vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfo;
         };
         HostVFlashManagerVFlashConfigInfo: {
            (options?: vsanhealthService.vim.HostVFlashManagerVFlashConfigInfo): vsanhealthService.vim.HostVFlashManagerVFlashConfigInfo;
         };
         HostVFlashResourceConfigurationResult: {
            (options?: vsanhealthService.vim.HostVFlashResourceConfigurationResult): vsanhealthService.vim.HostVFlashResourceConfigurationResult;
         };
         HostVMotionConfig: {
            (options?: vsanhealthService.vim.HostVMotionConfig): vsanhealthService.vim.HostVMotionConfig;
         };
         HostVMotionInfo: {
            (options?: vsanhealthService.vim.HostVMotionInfo): vsanhealthService.vim.HostVMotionInfo;
         };
         HostVMotionNetConfig: {
            (options?: vsanhealthService.vim.HostVMotionNetConfig): vsanhealthService.vim.HostVMotionNetConfig;
         };
         HostVffsSpec: {
            (options?: vsanhealthService.vim.HostVffsSpec): vsanhealthService.vim.HostVffsSpec;
         };
         HostVffsVolume: {
            (options?: vsanhealthService.vim.HostVffsVolume): vsanhealthService.vim.HostVffsVolume;
         };
         HostVirtualNicSpec: {
            (options?: vsanhealthService.vim.HostVirtualNicSpec): vsanhealthService.vim.HostVirtualNicSpec;
         };
         HostVirtualNicConfig: {
            (options?: vsanhealthService.vim.HostVirtualNicConfig): vsanhealthService.vim.HostVirtualNicConfig;
         };
         ArrayOfHostVirtualNicConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostVirtualNicConfig): vsanhealthService.vim.ArrayOfHostVirtualNicConfig;
         };
         HostVirtualNicOpaqueNetworkSpec: {
            (options?: vsanhealthService.vim.HostVirtualNicOpaqueNetworkSpec): vsanhealthService.vim.HostVirtualNicOpaqueNetworkSpec;
         };
         HostVirtualNicIpRouteSpec: {
            (options?: vsanhealthService.vim.HostVirtualNicIpRouteSpec): vsanhealthService.vim.HostVirtualNicIpRouteSpec;
         };
         HostVirtualNic: {
            (options?: vsanhealthService.vim.HostVirtualNic): vsanhealthService.vim.HostVirtualNic;
         };
         ArrayOfHostVirtualNic: {
            (options?: vsanhealthService.vim.ArrayOfHostVirtualNic): vsanhealthService.vim.ArrayOfHostVirtualNic;
         };
         HostVirtualNicConnection: {
            (options?: vsanhealthService.vim.HostVirtualNicConnection): vsanhealthService.vim.HostVirtualNicConnection;
         };
         HostVirtualNicManagerNicType: {
            "vmotion": string;
            "faultToleranceLogging": string;
            "vSphereReplication": string;
            "vSphereReplicationNFC": string;
            "management": string;
            "vsan": string;
            "vSphereProvisioning": string;
            "vsanWitness": string;
         };
         HostVirtualNicManagerNicTypeSelection: {
            (options?: vsanhealthService.vim.HostVirtualNicManagerNicTypeSelection): vsanhealthService.vim.HostVirtualNicManagerNicTypeSelection;
         };
         ArrayOfHostVirtualNicManagerNicTypeSelection: {
            (options?: vsanhealthService.vim.ArrayOfHostVirtualNicManagerNicTypeSelection): vsanhealthService.vim.ArrayOfHostVirtualNicManagerNicTypeSelection;
         };
         VirtualNicManagerNetConfig: {
            (options?: vsanhealthService.vim.VirtualNicManagerNetConfig): vsanhealthService.vim.VirtualNicManagerNetConfig;
         };
         ArrayOfVirtualNicManagerNetConfig: {
            (options?: vsanhealthService.vim.ArrayOfVirtualNicManagerNetConfig): vsanhealthService.vim.ArrayOfVirtualNicManagerNetConfig;
         };
         HostVirtualNicManagerInfo: {
            (options?: vsanhealthService.vim.HostVirtualNicManagerInfo): vsanhealthService.vim.HostVirtualNicManagerInfo;
         };
         HostVirtualSwitchBridge: {
            (options?: vsanhealthService.vim.HostVirtualSwitchBridge): vsanhealthService.vim.HostVirtualSwitchBridge;
         };
         HostVirtualSwitchAutoBridge: {
            (options?: vsanhealthService.vim.HostVirtualSwitchAutoBridge): vsanhealthService.vim.HostVirtualSwitchAutoBridge;
         };
         HostVirtualSwitchSimpleBridge: {
            (options?: vsanhealthService.vim.HostVirtualSwitchSimpleBridge): vsanhealthService.vim.HostVirtualSwitchSimpleBridge;
         };
         HostVirtualSwitchBondBridge: {
            (options?: vsanhealthService.vim.HostVirtualSwitchBondBridge): vsanhealthService.vim.HostVirtualSwitchBondBridge;
         };
         HostVirtualSwitchBeaconConfig: {
            (options?: vsanhealthService.vim.HostVirtualSwitchBeaconConfig): vsanhealthService.vim.HostVirtualSwitchBeaconConfig;
         };
         HostVirtualSwitchSpec: {
            (options?: vsanhealthService.vim.HostVirtualSwitchSpec): vsanhealthService.vim.HostVirtualSwitchSpec;
         };
         HostVirtualSwitchConfig: {
            (options?: vsanhealthService.vim.HostVirtualSwitchConfig): vsanhealthService.vim.HostVirtualSwitchConfig;
         };
         ArrayOfHostVirtualSwitchConfig: {
            (options?: vsanhealthService.vim.ArrayOfHostVirtualSwitchConfig): vsanhealthService.vim.ArrayOfHostVirtualSwitchConfig;
         };
         HostVirtualSwitch: {
            (options?: vsanhealthService.vim.HostVirtualSwitch): vsanhealthService.vim.HostVirtualSwitch;
         };
         ArrayOfHostVirtualSwitch: {
            (options?: vsanhealthService.vim.ArrayOfHostVirtualSwitch): vsanhealthService.vim.ArrayOfHostVirtualSwitch;
         };
         HostVmciAccessManagerMode: {
            "grant": string;
            "replace": string;
            "revoke": string;
         };
         HostVmciAccessManagerAccessSpec: {
            (options?: vsanhealthService.vim.HostVmciAccessManagerAccessSpec): vsanhealthService.vim.HostVmciAccessManagerAccessSpec;
         };
         ArrayOfHostVmciAccessManagerAccessSpec: {
            (options?: vsanhealthService.vim.ArrayOfHostVmciAccessManagerAccessSpec): vsanhealthService.vim.ArrayOfHostVmciAccessManagerAccessSpec;
         };
         HostVmfsRescanResult: {
            (options?: vsanhealthService.vim.HostVmfsRescanResult): vsanhealthService.vim.HostVmfsRescanResult;
         };
         ArrayOfHostVmfsRescanResult: {
            (options?: vsanhealthService.vim.ArrayOfHostVmfsRescanResult): vsanhealthService.vim.ArrayOfHostVmfsRescanResult;
         };
         HostVmfsSpec: {
            (options?: vsanhealthService.vim.HostVmfsSpec): vsanhealthService.vim.HostVmfsSpec;
         };
         HostVmfsVolumeUnmapPriority: {
            "none": string;
            "low": string;
         };
         VmfsConfigOption: {
            (options?: vsanhealthService.vim.VmfsConfigOption): vsanhealthService.vim.VmfsConfigOption;
         };
         ArrayOfVmfsConfigOption: {
            (options?: vsanhealthService.vim.ArrayOfVmfsConfigOption): vsanhealthService.vim.ArrayOfVmfsConfigOption;
         };
         HostVmfsVolume: {
            (options?: vsanhealthService.vim.HostVmfsVolume): vsanhealthService.vim.HostVmfsVolume;
         };
         HostVsanInternalSystemCmmdsQuery: {
            (options?: vsanhealthService.vim.HostVsanInternalSystemCmmdsQuery): vsanhealthService.vim.HostVsanInternalSystemCmmdsQuery;
         };
         ArrayOfHostVsanInternalSystemCmmdsQuery: {
            (options?: vsanhealthService.vim.ArrayOfHostVsanInternalSystemCmmdsQuery): vsanhealthService.vim.ArrayOfHostVsanInternalSystemCmmdsQuery;
         };
         VsanPolicyCost: {
            (options?: vsanhealthService.vim.VsanPolicyCost): vsanhealthService.vim.VsanPolicyCost;
         };
         VsanPolicySatisfiability: {
            (options?: vsanhealthService.vim.VsanPolicySatisfiability): vsanhealthService.vim.VsanPolicySatisfiability;
         };
         ArrayOfVsanPolicySatisfiability: {
            (options?: vsanhealthService.vim.ArrayOfVsanPolicySatisfiability): vsanhealthService.vim.ArrayOfVsanPolicySatisfiability;
         };
         VsanPolicyChangeBatch: {
            (options?: vsanhealthService.vim.VsanPolicyChangeBatch): vsanhealthService.vim.VsanPolicyChangeBatch;
         };
         ArrayOfVsanPolicyChangeBatch: {
            (options?: vsanhealthService.vim.ArrayOfVsanPolicyChangeBatch): vsanhealthService.vim.ArrayOfVsanPolicyChangeBatch;
         };
         VsanNewPolicyBatch: {
            (options?: vsanhealthService.vim.VsanNewPolicyBatch): vsanhealthService.vim.VsanNewPolicyBatch;
         };
         ArrayOfVsanNewPolicyBatch: {
            (options?: vsanhealthService.vim.ArrayOfVsanNewPolicyBatch): vsanhealthService.vim.ArrayOfVsanNewPolicyBatch;
         };
         HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult: {
            (options?: vsanhealthService.vim.HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult): vsanhealthService.vim.HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult;
         };
         ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult: {
            (options?: vsanhealthService.vim.ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult): vsanhealthService.vim.ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult;
         };
         HostVsanInternalSystemDeleteVsanObjectsResult: {
            (options?: vsanhealthService.vim.HostVsanInternalSystemDeleteVsanObjectsResult): vsanhealthService.vim.HostVsanInternalSystemDeleteVsanObjectsResult;
         };
         ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult: {
            (options?: vsanhealthService.vim.ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult): vsanhealthService.vim.ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult;
         };
         HostVsanInternalSystemVsanObjectOperationResult: {
            (options?: vsanhealthService.vim.HostVsanInternalSystemVsanObjectOperationResult): vsanhealthService.vim.HostVsanInternalSystemVsanObjectOperationResult;
         };
         ArrayOfHostVsanInternalSystemVsanObjectOperationResult: {
            (options?: vsanhealthService.vim.ArrayOfHostVsanInternalSystemVsanObjectOperationResult): vsanhealthService.vim.ArrayOfHostVsanInternalSystemVsanObjectOperationResult;
         };
         HostVvolVolumeSpecification: {
            (options?: vsanhealthService.vim.HostVvolVolumeSpecification): vsanhealthService.vim.HostVvolVolumeSpecification;
         };
         VVolHostPE: {
            (options?: vsanhealthService.vim.VVolHostPE): vsanhealthService.vim.VVolHostPE;
         };
         ArrayOfVVolHostPE: {
            (options?: vsanhealthService.vim.ArrayOfVVolHostPE): vsanhealthService.vim.ArrayOfVVolHostPE;
         };
         HostVvolVolume: {
            (options?: vsanhealthService.vim.HostVvolVolume): vsanhealthService.vim.HostVvolVolume;
         };
         NetDhcpConfigInfoDhcpOptions: {
            (options?: vsanhealthService.vim.NetDhcpConfigInfoDhcpOptions): vsanhealthService.vim.NetDhcpConfigInfoDhcpOptions;
         };
         NetDhcpConfigInfo: {
            (options?: vsanhealthService.vim.NetDhcpConfigInfo): vsanhealthService.vim.NetDhcpConfigInfo;
         };
         NetDhcpConfigSpecDhcpOptionsSpec: {
            (options?: vsanhealthService.vim.NetDhcpConfigSpecDhcpOptionsSpec): vsanhealthService.vim.NetDhcpConfigSpecDhcpOptionsSpec;
         };
         NetDhcpConfigSpec: {
            (options?: vsanhealthService.vim.NetDhcpConfigSpec): vsanhealthService.vim.NetDhcpConfigSpec;
         };
         NetDnsConfigInfo: {
            (options?: vsanhealthService.vim.NetDnsConfigInfo): vsanhealthService.vim.NetDnsConfigInfo;
         };
         NetDnsConfigSpec: {
            (options?: vsanhealthService.vim.NetDnsConfigSpec): vsanhealthService.vim.NetDnsConfigSpec;
         };
         NetIpConfigInfoIpAddressOrigin: {
            "other": string;
            "manual": string;
            "dhcp": string;
            "linklayer": string;
            "random": string;
         };
         NetIpConfigInfoIpAddressStatus: {
            "preferred": string;
            "deprecated": string;
            "invalid": string;
            "inaccessible": string;
            "unknown": string;
            "tentative": string;
            "duplicate": string;
         };
         NetIpConfigInfoIpAddress: {
            (options?: vsanhealthService.vim.NetIpConfigInfoIpAddress): vsanhealthService.vim.NetIpConfigInfoIpAddress;
         };
         ArrayOfNetIpConfigInfoIpAddress: {
            (options?: vsanhealthService.vim.ArrayOfNetIpConfigInfoIpAddress): vsanhealthService.vim.ArrayOfNetIpConfigInfoIpAddress;
         };
         NetIpConfigInfo: {
            (options?: vsanhealthService.vim.NetIpConfigInfo): vsanhealthService.vim.NetIpConfigInfo;
         };
         NetIpConfigSpecIpAddressSpec: {
            (options?: vsanhealthService.vim.NetIpConfigSpecIpAddressSpec): vsanhealthService.vim.NetIpConfigSpecIpAddressSpec;
         };
         ArrayOfNetIpConfigSpecIpAddressSpec: {
            (options?: vsanhealthService.vim.ArrayOfNetIpConfigSpecIpAddressSpec): vsanhealthService.vim.ArrayOfNetIpConfigSpecIpAddressSpec;
         };
         NetIpConfigSpec: {
            (options?: vsanhealthService.vim.NetIpConfigSpec): vsanhealthService.vim.NetIpConfigSpec;
         };
         NetIpRouteConfigInfoGateway: {
            (options?: vsanhealthService.vim.NetIpRouteConfigInfoGateway): vsanhealthService.vim.NetIpRouteConfigInfoGateway;
         };
         NetIpRouteConfigInfoIpRoute: {
            (options?: vsanhealthService.vim.NetIpRouteConfigInfoIpRoute): vsanhealthService.vim.NetIpRouteConfigInfoIpRoute;
         };
         ArrayOfNetIpRouteConfigInfoIpRoute: {
            (options?: vsanhealthService.vim.ArrayOfNetIpRouteConfigInfoIpRoute): vsanhealthService.vim.ArrayOfNetIpRouteConfigInfoIpRoute;
         };
         NetIpRouteConfigInfo: {
            (options?: vsanhealthService.vim.NetIpRouteConfigInfo): vsanhealthService.vim.NetIpRouteConfigInfo;
         };
         NetIpRouteConfigSpecGatewaySpec: {
            (options?: vsanhealthService.vim.NetIpRouteConfigSpecGatewaySpec): vsanhealthService.vim.NetIpRouteConfigSpecGatewaySpec;
         };
         NetIpRouteConfigSpecIpRouteSpec: {
            (options?: vsanhealthService.vim.NetIpRouteConfigSpecIpRouteSpec): vsanhealthService.vim.NetIpRouteConfigSpecIpRouteSpec;
         };
         ArrayOfNetIpRouteConfigSpecIpRouteSpec: {
            (options?: vsanhealthService.vim.ArrayOfNetIpRouteConfigSpecIpRouteSpec): vsanhealthService.vim.ArrayOfNetIpRouteConfigSpecIpRouteSpec;
         };
         NetIpRouteConfigSpec: {
            (options?: vsanhealthService.vim.NetIpRouteConfigSpec): vsanhealthService.vim.NetIpRouteConfigSpec;
         };
         NetIpStackInfoEntryType: {
            "other": string;
            "invalid": string;
            "dynamic": string;
            "manual": string;
         };
         NetIpStackInfoPreference: {
            "reserved": string;
            "low": string;
            "medium": string;
            "high": string;
         };
         NetIpStackInfoNetToMedia: {
            (options?: vsanhealthService.vim.NetIpStackInfoNetToMedia): vsanhealthService.vim.NetIpStackInfoNetToMedia;
         };
         ArrayOfNetIpStackInfoNetToMedia: {
            (options?: vsanhealthService.vim.ArrayOfNetIpStackInfoNetToMedia): vsanhealthService.vim.ArrayOfNetIpStackInfoNetToMedia;
         };
         NetIpStackInfoDefaultRouter: {
            (options?: vsanhealthService.vim.NetIpStackInfoDefaultRouter): vsanhealthService.vim.NetIpStackInfoDefaultRouter;
         };
         ArrayOfNetIpStackInfoDefaultRouter: {
            (options?: vsanhealthService.vim.ArrayOfNetIpStackInfoDefaultRouter): vsanhealthService.vim.ArrayOfNetIpStackInfoDefaultRouter;
         };
         NetIpStackInfo: {
            (options?: vsanhealthService.vim.NetIpStackInfo): vsanhealthService.vim.NetIpStackInfo;
         };
         NetBIOSConfigInfoMode: {
            "unknown": string;
            "enabled": string;
            "disabled": string;
            "enabledViaDHCP": string;
         };
         NetBIOSConfigInfo: {
            (options?: vsanhealthService.vim.NetBIOSConfigInfo): vsanhealthService.vim.NetBIOSConfigInfo;
         };
         WinNetBIOSConfigInfo: {
            (options?: vsanhealthService.vim.WinNetBIOSConfigInfo): vsanhealthService.vim.WinNetBIOSConfigInfo;
         };
         ArrayUpdateOperation: {
            "add": string;
            "remove": string;
            "edit": string;
         };
         ArrayUpdateSpec: {
            (options?: vsanhealthService.vim.ArrayUpdateSpec): vsanhealthService.vim.ArrayUpdateSpec;
         };
         BoolOption: {
            (options?: vsanhealthService.vim.BoolOption): vsanhealthService.vim.BoolOption;
         };
         ChoiceOption: {
            (options?: vsanhealthService.vim.ChoiceOption): vsanhealthService.vim.ChoiceOption;
         };
         FloatOption: {
            (options?: vsanhealthService.vim.FloatOption): vsanhealthService.vim.FloatOption;
         };
         IntOption: {
            (options?: vsanhealthService.vim.IntOption): vsanhealthService.vim.IntOption;
         };
         LongOption: {
            (options?: vsanhealthService.vim.LongOption): vsanhealthService.vim.LongOption;
         };
         OptionDef: {
            (options?: vsanhealthService.vim.OptionDef): vsanhealthService.vim.OptionDef;
         };
         ArrayOfOptionDef: {
            (options?: vsanhealthService.vim.ArrayOfOptionDef): vsanhealthService.vim.ArrayOfOptionDef;
         };
         OptionType: {
            (options?: vsanhealthService.vim.OptionType): vsanhealthService.vim.OptionType;
         };
         OptionValue: {
            (options?: vsanhealthService.vim.OptionValue): vsanhealthService.vim.OptionValue;
         };
         ArrayOfOptionValue: {
            (options?: vsanhealthService.vim.ArrayOfOptionValue): vsanhealthService.vim.ArrayOfOptionValue;
         };
         StringOption: {
            (options?: vsanhealthService.vim.StringOption): vsanhealthService.vim.StringOption;
         };
         ApplyProfile: {
            (options?: vsanhealthService.vim.ApplyProfile): vsanhealthService.vim.ApplyProfile;
         };
         ArrayOfApplyProfile: {
            (options?: vsanhealthService.vim.ArrayOfApplyProfile): vsanhealthService.vim.ArrayOfApplyProfile;
         };
         ProfileApplyProfileElement: {
            (options?: vsanhealthService.vim.ProfileApplyProfileElement): vsanhealthService.vim.ProfileApplyProfileElement;
         };
         ProfileApplyProfileProperty: {
            (options?: vsanhealthService.vim.ProfileApplyProfileProperty): vsanhealthService.vim.ProfileApplyProfileProperty;
         };
         ArrayOfProfileApplyProfileProperty: {
            (options?: vsanhealthService.vim.ArrayOfProfileApplyProfileProperty): vsanhealthService.vim.ArrayOfProfileApplyProfileProperty;
         };
         ComplianceLocator: {
            (options?: vsanhealthService.vim.ComplianceLocator): vsanhealthService.vim.ComplianceLocator;
         };
         ArrayOfComplianceLocator: {
            (options?: vsanhealthService.vim.ArrayOfComplianceLocator): vsanhealthService.vim.ArrayOfComplianceLocator;
         };
         ComplianceProfile: {
            (options?: vsanhealthService.vim.ComplianceProfile): vsanhealthService.vim.ComplianceProfile;
         };
         ComplianceResultStatus: {
            "compliant": string;
            "nonCompliant": string;
            "unknown": string;
         };
         ComplianceFailureComplianceFailureValues: {
            (options?: vsanhealthService.vim.ComplianceFailureComplianceFailureValues): vsanhealthService.vim.ComplianceFailureComplianceFailureValues;
         };
         ArrayOfComplianceFailureComplianceFailureValues: {
            (options?: vsanhealthService.vim.ArrayOfComplianceFailureComplianceFailureValues): vsanhealthService.vim.ArrayOfComplianceFailureComplianceFailureValues;
         };
         ComplianceFailure: {
            (options?: vsanhealthService.vim.ComplianceFailure): vsanhealthService.vim.ComplianceFailure;
         };
         ArrayOfComplianceFailure: {
            (options?: vsanhealthService.vim.ArrayOfComplianceFailure): vsanhealthService.vim.ArrayOfComplianceFailure;
         };
         ComplianceResult: {
            (options?: vsanhealthService.vim.ComplianceResult): vsanhealthService.vim.ComplianceResult;
         };
         ArrayOfComplianceResult: {
            (options?: vsanhealthService.vim.ArrayOfComplianceResult): vsanhealthService.vim.ArrayOfComplianceResult;
         };
         ProfileDeferredPolicyOptionParameter: {
            (options?: vsanhealthService.vim.ProfileDeferredPolicyOptionParameter): vsanhealthService.vim.ProfileDeferredPolicyOptionParameter;
         };
         ArrayOfProfileDeferredPolicyOptionParameter: {
            (options?: vsanhealthService.vim.ArrayOfProfileDeferredPolicyOptionParameter): vsanhealthService.vim.ArrayOfProfileDeferredPolicyOptionParameter;
         };
         ProfileExpression: {
            (options?: vsanhealthService.vim.ProfileExpression): vsanhealthService.vim.ProfileExpression;
         };
         ArrayOfProfileExpression: {
            (options?: vsanhealthService.vim.ArrayOfProfileExpression): vsanhealthService.vim.ArrayOfProfileExpression;
         };
         ProfileSimpleExpression: {
            (options?: vsanhealthService.vim.ProfileSimpleExpression): vsanhealthService.vim.ProfileSimpleExpression;
         };
         ProfileCompositeExpression: {
            (options?: vsanhealthService.vim.ProfileCompositeExpression): vsanhealthService.vim.ProfileCompositeExpression;
         };
         ProfileExpressionMetadata: {
            (options?: vsanhealthService.vim.ProfileExpressionMetadata): vsanhealthService.vim.ProfileExpressionMetadata;
         };
         ArrayOfProfileExpressionMetadata: {
            (options?: vsanhealthService.vim.ArrayOfProfileExpressionMetadata): vsanhealthService.vim.ArrayOfProfileExpressionMetadata;
         };
         ProfileNumericComparator: {
            "lessThan": string;
            "lessThanEqual": string;
            "equal": string;
            "notEqual": string;
            "greaterThanEqual": string;
            "greaterThan": string;
         };
         ProfileParameterMetadata: {
            (options?: vsanhealthService.vim.ProfileParameterMetadata): vsanhealthService.vim.ProfileParameterMetadata;
         };
         ArrayOfProfileParameterMetadata: {
            (options?: vsanhealthService.vim.ArrayOfProfileParameterMetadata): vsanhealthService.vim.ArrayOfProfileParameterMetadata;
         };
         ProfilePolicy: {
            (options?: vsanhealthService.vim.ProfilePolicy): vsanhealthService.vim.ProfilePolicy;
         };
         ArrayOfProfilePolicy: {
            (options?: vsanhealthService.vim.ArrayOfProfilePolicy): vsanhealthService.vim.ArrayOfProfilePolicy;
         };
         ProfilePolicyOptionMetadata: {
            (options?: vsanhealthService.vim.ProfilePolicyOptionMetadata): vsanhealthService.vim.ProfilePolicyOptionMetadata;
         };
         ArrayOfProfilePolicyOptionMetadata: {
            (options?: vsanhealthService.vim.ArrayOfProfilePolicyOptionMetadata): vsanhealthService.vim.ArrayOfProfilePolicyOptionMetadata;
         };
         ProfileCompositePolicyOptionMetadata: {
            (options?: vsanhealthService.vim.ProfileCompositePolicyOptionMetadata): vsanhealthService.vim.ProfileCompositePolicyOptionMetadata;
         };
         UserInputRequiredParameterMetadata: {
            (options?: vsanhealthService.vim.UserInputRequiredParameterMetadata): vsanhealthService.vim.UserInputRequiredParameterMetadata;
         };
         ProfilePolicyMetadata: {
            (options?: vsanhealthService.vim.ProfilePolicyMetadata): vsanhealthService.vim.ProfilePolicyMetadata;
         };
         ArrayOfProfilePolicyMetadata: {
            (options?: vsanhealthService.vim.ArrayOfProfilePolicyMetadata): vsanhealthService.vim.ArrayOfProfilePolicyMetadata;
         };
         PolicyOption: {
            (options?: vsanhealthService.vim.PolicyOption): vsanhealthService.vim.PolicyOption;
         };
         ArrayOfPolicyOption: {
            (options?: vsanhealthService.vim.ArrayOfPolicyOption): vsanhealthService.vim.ArrayOfPolicyOption;
         };
         CompositePolicyOption: {
            (options?: vsanhealthService.vim.CompositePolicyOption): vsanhealthService.vim.CompositePolicyOption;
         };
         ProfileCreateSpec: {
            (options?: vsanhealthService.vim.ProfileCreateSpec): vsanhealthService.vim.ProfileCreateSpec;
         };
         ProfileSerializedCreateSpec: {
            (options?: vsanhealthService.vim.ProfileSerializedCreateSpec): vsanhealthService.vim.ProfileSerializedCreateSpec;
         };
         ProfileConfigInfo: {
            (options?: vsanhealthService.vim.ProfileConfigInfo): vsanhealthService.vim.ProfileConfigInfo;
         };
         ProfileDescriptionSection: {
            (options?: vsanhealthService.vim.ProfileDescriptionSection): vsanhealthService.vim.ProfileDescriptionSection;
         };
         ArrayOfProfileDescriptionSection: {
            (options?: vsanhealthService.vim.ArrayOfProfileDescriptionSection): vsanhealthService.vim.ArrayOfProfileDescriptionSection;
         };
         ProfileDescription: {
            (options?: vsanhealthService.vim.ProfileDescription): vsanhealthService.vim.ProfileDescription;
         };
         ProfileMetadataProfileSortSpec: {
            (options?: vsanhealthService.vim.ProfileMetadataProfileSortSpec): vsanhealthService.vim.ProfileMetadataProfileSortSpec;
         };
         ArrayOfProfileMetadataProfileSortSpec: {
            (options?: vsanhealthService.vim.ArrayOfProfileMetadataProfileSortSpec): vsanhealthService.vim.ArrayOfProfileMetadataProfileSortSpec;
         };
         ProfileMetadata: {
            (options?: vsanhealthService.vim.ProfileMetadata): vsanhealthService.vim.ProfileMetadata;
         };
         ArrayOfProfileMetadata: {
            (options?: vsanhealthService.vim.ArrayOfProfileMetadata): vsanhealthService.vim.ArrayOfProfileMetadata;
         };
         ProfilePropertyPath: {
            (options?: vsanhealthService.vim.ProfilePropertyPath): vsanhealthService.vim.ProfilePropertyPath;
         };
         ArrayOfProfilePropertyPath: {
            (options?: vsanhealthService.vim.ArrayOfProfilePropertyPath): vsanhealthService.vim.ArrayOfProfilePropertyPath;
         };
         ProfileProfileStructure: {
            (options?: vsanhealthService.vim.ProfileProfileStructure): vsanhealthService.vim.ProfileProfileStructure;
         };
         ProfileProfileStructureProperty: {
            (options?: vsanhealthService.vim.ProfileProfileStructureProperty): vsanhealthService.vim.ProfileProfileStructureProperty;
         };
         ArrayOfProfileProfileStructureProperty: {
            (options?: vsanhealthService.vim.ArrayOfProfileProfileStructureProperty): vsanhealthService.vim.ArrayOfProfileProfileStructureProperty;
         };
         ClusterProfileConfigInfo: {
            (options?: vsanhealthService.vim.ClusterProfileConfigInfo): vsanhealthService.vim.ClusterProfileConfigInfo;
         };
         ClusterProfileCreateSpec: {
            (options?: vsanhealthService.vim.ClusterProfileCreateSpec): vsanhealthService.vim.ClusterProfileCreateSpec;
         };
         ClusterProfileConfigSpec: {
            (options?: vsanhealthService.vim.ClusterProfileConfigSpec): vsanhealthService.vim.ClusterProfileConfigSpec;
         };
         ClusterProfileCompleteConfigSpec: {
            (options?: vsanhealthService.vim.ClusterProfileCompleteConfigSpec): vsanhealthService.vim.ClusterProfileCompleteConfigSpec;
         };
         ClusterProfileServiceType: {
            "DRS": string;
            "HA": string;
            "DPM": string;
            "FT": string;
         };
         ClusterProfileConfigServiceCreateSpec: {
            (options?: vsanhealthService.vim.ClusterProfileConfigServiceCreateSpec): vsanhealthService.vim.ClusterProfileConfigServiceCreateSpec;
         };
         AnswerFile: {
            (options?: vsanhealthService.vim.AnswerFile): vsanhealthService.vim.AnswerFile;
         };
         AnswerFileStatusError: {
            (options?: vsanhealthService.vim.AnswerFileStatusError): vsanhealthService.vim.AnswerFileStatusError;
         };
         ArrayOfAnswerFileStatusError: {
            (options?: vsanhealthService.vim.ArrayOfAnswerFileStatusError): vsanhealthService.vim.ArrayOfAnswerFileStatusError;
         };
         AnswerFileStatusResult: {
            (options?: vsanhealthService.vim.AnswerFileStatusResult): vsanhealthService.vim.AnswerFileStatusResult;
         };
         ArrayOfAnswerFileStatusResult: {
            (options?: vsanhealthService.vim.ArrayOfAnswerFileStatusResult): vsanhealthService.vim.ArrayOfAnswerFileStatusResult;
         };
         ProfileExecuteResultStatus: {
            "success": string;
            "needInput": string;
            "error": string;
         };
         ProfileExecuteError: {
            (options?: vsanhealthService.vim.ProfileExecuteError): vsanhealthService.vim.ProfileExecuteError;
         };
         ArrayOfProfileExecuteError: {
            (options?: vsanhealthService.vim.ArrayOfProfileExecuteError): vsanhealthService.vim.ArrayOfProfileExecuteError;
         };
         ProfileExecuteResult: {
            (options?: vsanhealthService.vim.ProfileExecuteResult): vsanhealthService.vim.ProfileExecuteResult;
         };
         HostApplyProfile: {
            (options?: vsanhealthService.vim.HostApplyProfile): vsanhealthService.vim.HostApplyProfile;
         };
         PhysicalNicProfile: {
            (options?: vsanhealthService.vim.PhysicalNicProfile): vsanhealthService.vim.PhysicalNicProfile;
         };
         ArrayOfPhysicalNicProfile: {
            (options?: vsanhealthService.vim.ArrayOfPhysicalNicProfile): vsanhealthService.vim.ArrayOfPhysicalNicProfile;
         };
         HostMemoryProfile: {
            (options?: vsanhealthService.vim.HostMemoryProfile): vsanhealthService.vim.HostMemoryProfile;
         };
         UserProfile: {
            (options?: vsanhealthService.vim.UserProfile): vsanhealthService.vim.UserProfile;
         };
         ArrayOfUserProfile: {
            (options?: vsanhealthService.vim.ArrayOfUserProfile): vsanhealthService.vim.ArrayOfUserProfile;
         };
         UserGroupProfile: {
            (options?: vsanhealthService.vim.UserGroupProfile): vsanhealthService.vim.UserGroupProfile;
         };
         ArrayOfUserGroupProfile: {
            (options?: vsanhealthService.vim.ArrayOfUserGroupProfile): vsanhealthService.vim.ArrayOfUserGroupProfile;
         };
         SecurityProfile: {
            (options?: vsanhealthService.vim.SecurityProfile): vsanhealthService.vim.SecurityProfile;
         };
         OptionProfile: {
            (options?: vsanhealthService.vim.OptionProfile): vsanhealthService.vim.OptionProfile;
         };
         ArrayOfOptionProfile: {
            (options?: vsanhealthService.vim.ArrayOfOptionProfile): vsanhealthService.vim.ArrayOfOptionProfile;
         };
         DateTimeProfile: {
            (options?: vsanhealthService.vim.DateTimeProfile): vsanhealthService.vim.DateTimeProfile;
         };
         ServiceProfile: {
            (options?: vsanhealthService.vim.ServiceProfile): vsanhealthService.vim.ServiceProfile;
         };
         ArrayOfServiceProfile: {
            (options?: vsanhealthService.vim.ArrayOfServiceProfile): vsanhealthService.vim.ArrayOfServiceProfile;
         };
         FirewallProfileRulesetProfile: {
            (options?: vsanhealthService.vim.FirewallProfileRulesetProfile): vsanhealthService.vim.FirewallProfileRulesetProfile;
         };
         ArrayOfFirewallProfileRulesetProfile: {
            (options?: vsanhealthService.vim.ArrayOfFirewallProfileRulesetProfile): vsanhealthService.vim.ArrayOfFirewallProfileRulesetProfile;
         };
         FirewallProfile: {
            (options?: vsanhealthService.vim.FirewallProfile): vsanhealthService.vim.FirewallProfile;
         };
         NasStorageProfile: {
            (options?: vsanhealthService.vim.NasStorageProfile): vsanhealthService.vim.NasStorageProfile;
         };
         ArrayOfNasStorageProfile: {
            (options?: vsanhealthService.vim.ArrayOfNasStorageProfile): vsanhealthService.vim.ArrayOfNasStorageProfile;
         };
         StorageProfile: {
            (options?: vsanhealthService.vim.StorageProfile): vsanhealthService.vim.StorageProfile;
         };
         NetworkProfileDnsConfigProfile: {
            (options?: vsanhealthService.vim.NetworkProfileDnsConfigProfile): vsanhealthService.vim.NetworkProfileDnsConfigProfile;
         };
         NetworkProfile: {
            (options?: vsanhealthService.vim.NetworkProfile): vsanhealthService.vim.NetworkProfile;
         };
         DvsVNicProfile: {
            (options?: vsanhealthService.vim.DvsVNicProfile): vsanhealthService.vim.DvsVNicProfile;
         };
         DvsServiceConsoleVNicProfile: {
            (options?: vsanhealthService.vim.DvsServiceConsoleVNicProfile): vsanhealthService.vim.DvsServiceConsoleVNicProfile;
         };
         ArrayOfDvsServiceConsoleVNicProfile: {
            (options?: vsanhealthService.vim.ArrayOfDvsServiceConsoleVNicProfile): vsanhealthService.vim.ArrayOfDvsServiceConsoleVNicProfile;
         };
         DvsHostVNicProfile: {
            (options?: vsanhealthService.vim.DvsHostVNicProfile): vsanhealthService.vim.DvsHostVNicProfile;
         };
         ArrayOfDvsHostVNicProfile: {
            (options?: vsanhealthService.vim.ArrayOfDvsHostVNicProfile): vsanhealthService.vim.ArrayOfDvsHostVNicProfile;
         };
         DvsProfile: {
            (options?: vsanhealthService.vim.DvsProfile): vsanhealthService.vim.DvsProfile;
         };
         ArrayOfDvsProfile: {
            (options?: vsanhealthService.vim.ArrayOfDvsProfile): vsanhealthService.vim.ArrayOfDvsProfile;
         };
         PnicUplinkProfile: {
            (options?: vsanhealthService.vim.PnicUplinkProfile): vsanhealthService.vim.PnicUplinkProfile;
         };
         ArrayOfPnicUplinkProfile: {
            (options?: vsanhealthService.vim.ArrayOfPnicUplinkProfile): vsanhealthService.vim.ArrayOfPnicUplinkProfile;
         };
         IpRouteProfile: {
            (options?: vsanhealthService.vim.IpRouteProfile): vsanhealthService.vim.IpRouteProfile;
         };
         StaticRouteProfile: {
            (options?: vsanhealthService.vim.StaticRouteProfile): vsanhealthService.vim.StaticRouteProfile;
         };
         ArrayOfStaticRouteProfile: {
            (options?: vsanhealthService.vim.ArrayOfStaticRouteProfile): vsanhealthService.vim.ArrayOfStaticRouteProfile;
         };
         LinkProfile: {
            (options?: vsanhealthService.vim.LinkProfile): vsanhealthService.vim.LinkProfile;
         };
         NumPortsProfile: {
            (options?: vsanhealthService.vim.NumPortsProfile): vsanhealthService.vim.NumPortsProfile;
         };
         VirtualSwitchProfile: {
            (options?: vsanhealthService.vim.VirtualSwitchProfile): vsanhealthService.vim.VirtualSwitchProfile;
         };
         ArrayOfVirtualSwitchProfile: {
            (options?: vsanhealthService.vim.ArrayOfVirtualSwitchProfile): vsanhealthService.vim.ArrayOfVirtualSwitchProfile;
         };
         NetStackInstanceProfile: {
            (options?: vsanhealthService.vim.NetStackInstanceProfile): vsanhealthService.vim.NetStackInstanceProfile;
         };
         ArrayOfNetStackInstanceProfile: {
            (options?: vsanhealthService.vim.ArrayOfNetStackInstanceProfile): vsanhealthService.vim.ArrayOfNetStackInstanceProfile;
         };
         VlanProfile: {
            (options?: vsanhealthService.vim.VlanProfile): vsanhealthService.vim.VlanProfile;
         };
         VirtualSwitchSelectionProfile: {
            (options?: vsanhealthService.vim.VirtualSwitchSelectionProfile): vsanhealthService.vim.VirtualSwitchSelectionProfile;
         };
         PortGroupProfile: {
            (options?: vsanhealthService.vim.PortGroupProfile): vsanhealthService.vim.PortGroupProfile;
         };
         VmPortGroupProfile: {
            (options?: vsanhealthService.vim.VmPortGroupProfile): vsanhealthService.vim.VmPortGroupProfile;
         };
         ArrayOfVmPortGroupProfile: {
            (options?: vsanhealthService.vim.ArrayOfVmPortGroupProfile): vsanhealthService.vim.ArrayOfVmPortGroupProfile;
         };
         HostPortGroupProfile: {
            (options?: vsanhealthService.vim.HostPortGroupProfile): vsanhealthService.vim.HostPortGroupProfile;
         };
         ArrayOfHostPortGroupProfile: {
            (options?: vsanhealthService.vim.ArrayOfHostPortGroupProfile): vsanhealthService.vim.ArrayOfHostPortGroupProfile;
         };
         ServiceConsolePortGroupProfile: {
            (options?: vsanhealthService.vim.ServiceConsolePortGroupProfile): vsanhealthService.vim.ServiceConsolePortGroupProfile;
         };
         ArrayOfServiceConsolePortGroupProfile: {
            (options?: vsanhealthService.vim.ArrayOfServiceConsolePortGroupProfile): vsanhealthService.vim.ArrayOfServiceConsolePortGroupProfile;
         };
         NetworkPolicyProfile: {
            (options?: vsanhealthService.vim.NetworkPolicyProfile): vsanhealthService.vim.NetworkPolicyProfile;
         };
         IpAddressProfile: {
            (options?: vsanhealthService.vim.IpAddressProfile): vsanhealthService.vim.IpAddressProfile;
         };
         AuthenticationProfile: {
            (options?: vsanhealthService.vim.AuthenticationProfile): vsanhealthService.vim.AuthenticationProfile;
         };
         ActiveDirectoryProfile: {
            (options?: vsanhealthService.vim.ActiveDirectoryProfile): vsanhealthService.vim.ActiveDirectoryProfile;
         };
         PermissionProfile: {
            (options?: vsanhealthService.vim.PermissionProfile): vsanhealthService.vim.PermissionProfile;
         };
         ArrayOfPermissionProfile: {
            (options?: vsanhealthService.vim.ArrayOfPermissionProfile): vsanhealthService.vim.ArrayOfPermissionProfile;
         };
         HostProfileConfigInfo: {
            (options?: vsanhealthService.vim.HostProfileConfigInfo): vsanhealthService.vim.HostProfileConfigInfo;
         };
         HostProfileConfigSpec: {
            (options?: vsanhealthService.vim.HostProfileConfigSpec): vsanhealthService.vim.HostProfileConfigSpec;
         };
         HostProfileSerializedHostProfileSpec: {
            (options?: vsanhealthService.vim.HostProfileSerializedHostProfileSpec): vsanhealthService.vim.HostProfileSerializedHostProfileSpec;
         };
         HostProfileCompleteConfigSpec: {
            (options?: vsanhealthService.vim.HostProfileCompleteConfigSpec): vsanhealthService.vim.HostProfileCompleteConfigSpec;
         };
         HostProfileHostBasedConfigSpec: {
            (options?: vsanhealthService.vim.HostProfileHostBasedConfigSpec): vsanhealthService.vim.HostProfileHostBasedConfigSpec;
         };
         HostSpecification: {
            (options?: vsanhealthService.vim.HostSpecification): vsanhealthService.vim.HostSpecification;
         };
         HostSubSpecification: {
            (options?: vsanhealthService.vim.HostSubSpecification): vsanhealthService.vim.HostSubSpecification;
         };
         ArrayOfHostSubSpecification: {
            (options?: vsanhealthService.vim.ArrayOfHostSubSpecification): vsanhealthService.vim.ArrayOfHostSubSpecification;
         };
         HostProfileManagerTaskListRequirement: {
            "maintenanceModeRequired": string;
            "rebootRequired": string;
         };
         HostProfileManagerConfigTaskList: {
            (options?: vsanhealthService.vim.HostProfileManagerConfigTaskList): vsanhealthService.vim.HostProfileManagerConfigTaskList;
         };
         AnswerFileCreateSpec: {
            (options?: vsanhealthService.vim.AnswerFileCreateSpec): vsanhealthService.vim.AnswerFileCreateSpec;
         };
         AnswerFileOptionsCreateSpec: {
            (options?: vsanhealthService.vim.AnswerFileOptionsCreateSpec): vsanhealthService.vim.AnswerFileOptionsCreateSpec;
         };
         AnswerFileSerializedCreateSpec: {
            (options?: vsanhealthService.vim.AnswerFileSerializedCreateSpec): vsanhealthService.vim.AnswerFileSerializedCreateSpec;
         };
         HostProfileManagerAnswerFileStatus: {
            "valid": string;
            "invalid": string;
            "unknown": string;
         };
         HostProfilesEntityCustomizations: {
            (options?: vsanhealthService.vim.HostProfilesEntityCustomizations): vsanhealthService.vim.HostProfilesEntityCustomizations;
         };
         ArrayOfHostProfilesEntityCustomizations: {
            (options?: vsanhealthService.vim.ArrayOfHostProfilesEntityCustomizations): vsanhealthService.vim.ArrayOfHostProfilesEntityCustomizations;
         };
         StructuredCustomizations: {
            (options?: vsanhealthService.vim.StructuredCustomizations): vsanhealthService.vim.StructuredCustomizations;
         };
         ArrayOfStructuredCustomizations: {
            (options?: vsanhealthService.vim.ArrayOfStructuredCustomizations): vsanhealthService.vim.ArrayOfStructuredCustomizations;
         };
         HostProfileManagerHostToConfigSpecMap: {
            (options?: vsanhealthService.vim.HostProfileManagerHostToConfigSpecMap): vsanhealthService.vim.HostProfileManagerHostToConfigSpecMap;
         };
         ArrayOfHostProfileManagerHostToConfigSpecMap: {
            (options?: vsanhealthService.vim.ArrayOfHostProfileManagerHostToConfigSpecMap): vsanhealthService.vim.ArrayOfHostProfileManagerHostToConfigSpecMap;
         };
         ApplyHostProfileConfigurationSpec: {
            (options?: vsanhealthService.vim.ApplyHostProfileConfigurationSpec): vsanhealthService.vim.ApplyHostProfileConfigurationSpec;
         };
         ArrayOfApplyHostProfileConfigurationSpec: {
            (options?: vsanhealthService.vim.ArrayOfApplyHostProfileConfigurationSpec): vsanhealthService.vim.ArrayOfApplyHostProfileConfigurationSpec;
         };
         HostProfileManagerCompositionValidationResultResultElement: {
            (options?: vsanhealthService.vim.HostProfileManagerCompositionValidationResultResultElement): vsanhealthService.vim.HostProfileManagerCompositionValidationResultResultElement;
         };
         ArrayOfHostProfileManagerCompositionValidationResultResultElement: {
            (options?: vsanhealthService.vim.ArrayOfHostProfileManagerCompositionValidationResultResultElement): vsanhealthService.vim.ArrayOfHostProfileManagerCompositionValidationResultResultElement;
         };
         ScheduledTaskDetail: {
            (options?: vsanhealthService.vim.ScheduledTaskDetail): vsanhealthService.vim.ScheduledTaskDetail;
         };
         ArrayOfScheduledTaskDetail: {
            (options?: vsanhealthService.vim.ArrayOfScheduledTaskDetail): vsanhealthService.vim.ArrayOfScheduledTaskDetail;
         };
         ScheduledTaskDescription: {
            (options?: vsanhealthService.vim.ScheduledTaskDescription): vsanhealthService.vim.ScheduledTaskDescription;
         };
         ScheduledTaskInfo: {
            (options?: vsanhealthService.vim.ScheduledTaskInfo): vsanhealthService.vim.ScheduledTaskInfo;
         };
         TaskScheduler: {
            (options?: vsanhealthService.vim.TaskScheduler): vsanhealthService.vim.TaskScheduler;
         };
         AfterStartupTaskScheduler: {
            (options?: vsanhealthService.vim.AfterStartupTaskScheduler): vsanhealthService.vim.AfterStartupTaskScheduler;
         };
         OnceTaskScheduler: {
            (options?: vsanhealthService.vim.OnceTaskScheduler): vsanhealthService.vim.OnceTaskScheduler;
         };
         RecurrentTaskScheduler: {
            (options?: vsanhealthService.vim.RecurrentTaskScheduler): vsanhealthService.vim.RecurrentTaskScheduler;
         };
         HourlyTaskScheduler: {
            (options?: vsanhealthService.vim.HourlyTaskScheduler): vsanhealthService.vim.HourlyTaskScheduler;
         };
         DailyTaskScheduler: {
            (options?: vsanhealthService.vim.DailyTaskScheduler): vsanhealthService.vim.DailyTaskScheduler;
         };
         WeeklyTaskScheduler: {
            (options?: vsanhealthService.vim.WeeklyTaskScheduler): vsanhealthService.vim.WeeklyTaskScheduler;
         };
         MonthlyTaskScheduler: {
            (options?: vsanhealthService.vim.MonthlyTaskScheduler): vsanhealthService.vim.MonthlyTaskScheduler;
         };
         MonthlyByDayTaskScheduler: {
            (options?: vsanhealthService.vim.MonthlyByDayTaskScheduler): vsanhealthService.vim.MonthlyByDayTaskScheduler;
         };
         DayOfWeek: {
            "sunday": string;
            "monday": string;
            "tuesday": string;
            "wednesday": string;
            "thursday": string;
            "friday": string;
            "saturday": string;
         };
         WeekOfMonth: {
            "first": string;
            "second": string;
            "third": string;
            "fourth": string;
            "last": string;
         };
         MonthlyByWeekdayTaskScheduler: {
            (options?: vsanhealthService.vim.MonthlyByWeekdayTaskScheduler): vsanhealthService.vim.MonthlyByWeekdayTaskScheduler;
         };
         ScheduledTaskSpec: {
            (options?: vsanhealthService.vim.ScheduledTaskSpec): vsanhealthService.vim.ScheduledTaskSpec;
         };
         ApplyStorageRecommendationResult: {
            (options?: vsanhealthService.vim.ApplyStorageRecommendationResult): vsanhealthService.vim.ApplyStorageRecommendationResult;
         };
         StorageDrsConfigInfo: {
            (options?: vsanhealthService.vim.StorageDrsConfigInfo): vsanhealthService.vim.StorageDrsConfigInfo;
         };
         StorageDrsConfigSpec: {
            (options?: vsanhealthService.vim.StorageDrsConfigSpec): vsanhealthService.vim.StorageDrsConfigSpec;
         };
         StorageDrsVmConfigSpec: {
            (options?: vsanhealthService.vim.StorageDrsVmConfigSpec): vsanhealthService.vim.StorageDrsVmConfigSpec;
         };
         ArrayOfStorageDrsVmConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfStorageDrsVmConfigSpec): vsanhealthService.vim.ArrayOfStorageDrsVmConfigSpec;
         };
         HbrDiskMigrationAction: {
            (options?: vsanhealthService.vim.HbrDiskMigrationAction): vsanhealthService.vim.HbrDiskMigrationAction;
         };
         PlacementAffinityRuleRuleType: {
            "affinity": string;
            "antiAffinity": string;
            "softAffinity": string;
            "softAntiAffinity": string;
         };
         PlacementAffinityRuleRuleScope: {
            "cluster": string;
            "host": string;
            "storagePod": string;
            "datastore": string;
         };
         PlacementAffinityRule: {
            (options?: vsanhealthService.vim.PlacementAffinityRule): vsanhealthService.vim.PlacementAffinityRule;
         };
         ArrayOfPlacementAffinityRule: {
            (options?: vsanhealthService.vim.ArrayOfPlacementAffinityRule): vsanhealthService.vim.ArrayOfPlacementAffinityRule;
         };
         PlacementRankResult: {
            (options?: vsanhealthService.vim.PlacementRankResult): vsanhealthService.vim.PlacementRankResult;
         };
         PlacementRankSpec: {
            (options?: vsanhealthService.vim.PlacementRankSpec): vsanhealthService.vim.PlacementRankSpec;
         };
         StorageDrsPlacementRankVmSpec: {
            (options?: vsanhealthService.vim.StorageDrsPlacementRankVmSpec): vsanhealthService.vim.StorageDrsPlacementRankVmSpec;
         };
         ArrayOfStorageDrsPlacementRankVmSpec: {
            (options?: vsanhealthService.vim.ArrayOfStorageDrsPlacementRankVmSpec): vsanhealthService.vim.ArrayOfStorageDrsPlacementRankVmSpec;
         };
         StorageDrsPodConfigInfoBehavior: {
            "manual": string;
            "automated": string;
         };
         StorageDrsPodConfigInfo: {
            (options?: vsanhealthService.vim.StorageDrsPodConfigInfo): vsanhealthService.vim.StorageDrsPodConfigInfo;
         };
         StorageDrsSpaceLoadBalanceConfigSpaceThresholdMode: {
            "utilization": string;
            "freeSpace": string;
         };
         StorageDrsSpaceLoadBalanceConfig: {
            (options?: vsanhealthService.vim.StorageDrsSpaceLoadBalanceConfig): vsanhealthService.vim.StorageDrsSpaceLoadBalanceConfig;
         };
         StorageDrsIoLoadBalanceConfig: {
            (options?: vsanhealthService.vim.StorageDrsIoLoadBalanceConfig): vsanhealthService.vim.StorageDrsIoLoadBalanceConfig;
         };
         StorageDrsAutomationConfig: {
            (options?: vsanhealthService.vim.StorageDrsAutomationConfig): vsanhealthService.vim.StorageDrsAutomationConfig;
         };
         StorageDrsPodConfigSpec: {
            (options?: vsanhealthService.vim.StorageDrsPodConfigSpec): vsanhealthService.vim.StorageDrsPodConfigSpec;
         };
         StorageDrsOptionSpec: {
            (options?: vsanhealthService.vim.StorageDrsOptionSpec): vsanhealthService.vim.StorageDrsOptionSpec;
         };
         ArrayOfStorageDrsOptionSpec: {
            (options?: vsanhealthService.vim.ArrayOfStorageDrsOptionSpec): vsanhealthService.vim.ArrayOfStorageDrsOptionSpec;
         };
         VmPodConfigForPlacement: {
            (options?: vsanhealthService.vim.VmPodConfigForPlacement): vsanhealthService.vim.VmPodConfigForPlacement;
         };
         ArrayOfVmPodConfigForPlacement: {
            (options?: vsanhealthService.vim.ArrayOfVmPodConfigForPlacement): vsanhealthService.vim.ArrayOfVmPodConfigForPlacement;
         };
         PodDiskLocator: {
            (options?: vsanhealthService.vim.PodDiskLocator): vsanhealthService.vim.PodDiskLocator;
         };
         ArrayOfPodDiskLocator: {
            (options?: vsanhealthService.vim.ArrayOfPodDiskLocator): vsanhealthService.vim.ArrayOfPodDiskLocator;
         };
         StorageDrsPodSelectionSpec: {
            (options?: vsanhealthService.vim.StorageDrsPodSelectionSpec): vsanhealthService.vim.StorageDrsPodSelectionSpec;
         };
         StorageMigrationAction: {
            (options?: vsanhealthService.vim.StorageMigrationAction): vsanhealthService.vim.StorageMigrationAction;
         };
         StoragePlacementAction: {
            (options?: vsanhealthService.vim.StoragePlacementAction): vsanhealthService.vim.StoragePlacementAction;
         };
         StoragePlacementResult: {
            (options?: vsanhealthService.vim.StoragePlacementResult): vsanhealthService.vim.StoragePlacementResult;
         };
         StoragePlacementSpecPlacementType: {
            "create": string;
            "reconfigure": string;
            "relocate": string;
            "clone": string;
         };
         StoragePlacementSpec: {
            (options?: vsanhealthService.vim.StoragePlacementSpec): vsanhealthService.vim.StoragePlacementSpec;
         };
         VirtualDiskAntiAffinityRuleSpec: {
            (options?: vsanhealthService.vim.VirtualDiskAntiAffinityRuleSpec): vsanhealthService.vim.VirtualDiskAntiAffinityRuleSpec;
         };
         StorageDrsVmConfigInfo: {
            (options?: vsanhealthService.vim.StorageDrsVmConfigInfo): vsanhealthService.vim.StorageDrsVmConfigInfo;
         };
         ArrayOfStorageDrsVmConfigInfo: {
            (options?: vsanhealthService.vim.ArrayOfStorageDrsVmConfigInfo): vsanhealthService.vim.ArrayOfStorageDrsVmConfigInfo;
         };
         VAppCloneSpecNetworkMappingPair: {
            (options?: vsanhealthService.vim.VAppCloneSpecNetworkMappingPair): vsanhealthService.vim.VAppCloneSpecNetworkMappingPair;
         };
         ArrayOfVAppCloneSpecNetworkMappingPair: {
            (options?: vsanhealthService.vim.ArrayOfVAppCloneSpecNetworkMappingPair): vsanhealthService.vim.ArrayOfVAppCloneSpecNetworkMappingPair;
         };
         VAppCloneSpecResourceMap: {
            (options?: vsanhealthService.vim.VAppCloneSpecResourceMap): vsanhealthService.vim.VAppCloneSpecResourceMap;
         };
         ArrayOfVAppCloneSpecResourceMap: {
            (options?: vsanhealthService.vim.ArrayOfVAppCloneSpecResourceMap): vsanhealthService.vim.ArrayOfVAppCloneSpecResourceMap;
         };
         VAppCloneSpecProvisioningType: {
            "sameAsSource": string;
            "thin": string;
            "thick": string;
         };
         VAppCloneSpec: {
            (options?: vsanhealthService.vim.VAppCloneSpec): vsanhealthService.vim.VAppCloneSpec;
         };
         VAppAutoStartAction: {
            "none": string;
            "powerOn": string;
            "powerOff": string;
            "guestShutdown": string;
            "suspend": string;
         };
         VAppEntityConfigInfo: {
            (options?: vsanhealthService.vim.VAppEntityConfigInfo): vsanhealthService.vim.VAppEntityConfigInfo;
         };
         ArrayOfVAppEntityConfigInfo: {
            (options?: vsanhealthService.vim.ArrayOfVAppEntityConfigInfo): vsanhealthService.vim.ArrayOfVAppEntityConfigInfo;
         };
         VAppIPAssignmentInfoIpAllocationPolicy: {
            "dhcpPolicy": string;
            "transientPolicy": string;
            "fixedPolicy": string;
            "fixedAllocatedPolicy": string;
         };
         VAppIPAssignmentInfoAllocationSchemes: {
            "dhcp": string;
            "ovfenv": string;
         };
         VAppIPAssignmentInfoProtocols: {
            "IPv4": string;
            "IPv6": string;
         };
         VAppIPAssignmentInfo: {
            (options?: vsanhealthService.vim.VAppIPAssignmentInfo): vsanhealthService.vim.VAppIPAssignmentInfo;
         };
         IpPoolIpPoolConfigInfo: {
            (options?: vsanhealthService.vim.IpPoolIpPoolConfigInfo): vsanhealthService.vim.IpPoolIpPoolConfigInfo;
         };
         IpPoolAssociation: {
            (options?: vsanhealthService.vim.IpPoolAssociation): vsanhealthService.vim.IpPoolAssociation;
         };
         ArrayOfIpPoolAssociation: {
            (options?: vsanhealthService.vim.ArrayOfIpPoolAssociation): vsanhealthService.vim.ArrayOfIpPoolAssociation;
         };
         IpPool: {
            (options?: vsanhealthService.vim.IpPool): vsanhealthService.vim.IpPool;
         };
         ArrayOfIpPool: {
            (options?: vsanhealthService.vim.ArrayOfIpPool): vsanhealthService.vim.ArrayOfIpPool;
         };
         VAppOvfSectionInfo: {
            (options?: vsanhealthService.vim.VAppOvfSectionInfo): vsanhealthService.vim.VAppOvfSectionInfo;
         };
         ArrayOfVAppOvfSectionInfo: {
            (options?: vsanhealthService.vim.ArrayOfVAppOvfSectionInfo): vsanhealthService.vim.ArrayOfVAppOvfSectionInfo;
         };
         VAppProductInfo: {
            (options?: vsanhealthService.vim.VAppProductInfo): vsanhealthService.vim.VAppProductInfo;
         };
         ArrayOfVAppProductInfo: {
            (options?: vsanhealthService.vim.ArrayOfVAppProductInfo): vsanhealthService.vim.ArrayOfVAppProductInfo;
         };
         VAppPropertyInfo: {
            (options?: vsanhealthService.vim.VAppPropertyInfo): vsanhealthService.vim.VAppPropertyInfo;
         };
         ArrayOfVAppPropertyInfo: {
            (options?: vsanhealthService.vim.ArrayOfVAppPropertyInfo): vsanhealthService.vim.ArrayOfVAppPropertyInfo;
         };
         VAppConfigInfo: {
            (options?: vsanhealthService.vim.VAppConfigInfo): vsanhealthService.vim.VAppConfigInfo;
         };
         VAppConfigSpec: {
            (options?: vsanhealthService.vim.VAppConfigSpec): vsanhealthService.vim.VAppConfigSpec;
         };
         VirtualAppImportSpec: {
            (options?: vsanhealthService.vim.VirtualAppImportSpec): vsanhealthService.vim.VirtualAppImportSpec;
         };
         VmConfigInfo: {
            (options?: vsanhealthService.vim.VmConfigInfo): vsanhealthService.vim.VmConfigInfo;
         };
         VmConfigSpec: {
            (options?: vsanhealthService.vim.VmConfigSpec): vsanhealthService.vim.VmConfigSpec;
         };
         VAppProductSpec: {
            (options?: vsanhealthService.vim.VAppProductSpec): vsanhealthService.vim.VAppProductSpec;
         };
         ArrayOfVAppProductSpec: {
            (options?: vsanhealthService.vim.ArrayOfVAppProductSpec): vsanhealthService.vim.ArrayOfVAppProductSpec;
         };
         VAppPropertySpec: {
            (options?: vsanhealthService.vim.VAppPropertySpec): vsanhealthService.vim.VAppPropertySpec;
         };
         ArrayOfVAppPropertySpec: {
            (options?: vsanhealthService.vim.ArrayOfVAppPropertySpec): vsanhealthService.vim.ArrayOfVAppPropertySpec;
         };
         VAppOvfSectionSpec: {
            (options?: vsanhealthService.vim.VAppOvfSectionSpec): vsanhealthService.vim.VAppOvfSectionSpec;
         };
         ArrayOfVAppOvfSectionSpec: {
            (options?: vsanhealthService.vim.ArrayOfVAppOvfSectionSpec): vsanhealthService.vim.ArrayOfVAppOvfSectionSpec;
         };
         ClusterNetworkConfigSpec: {
            (options?: vsanhealthService.vim.ClusterNetworkConfigSpec): vsanhealthService.vim.ClusterNetworkConfigSpec;
         };
         SourceNodeSpec: {
            (options?: vsanhealthService.vim.SourceNodeSpec): vsanhealthService.vim.SourceNodeSpec;
         };
         NodeNetworkSpec: {
            (options?: vsanhealthService.vim.NodeNetworkSpec): vsanhealthService.vim.NodeNetworkSpec;
         };
         PassiveNodeNetworkSpec: {
            (options?: vsanhealthService.vim.PassiveNodeNetworkSpec): vsanhealthService.vim.PassiveNodeNetworkSpec;
         };
         VchaClusterNetworkSpec: {
            (options?: vsanhealthService.vim.VchaClusterNetworkSpec): vsanhealthService.vim.VchaClusterNetworkSpec;
         };
         NodeDeploymentSpec: {
            (options?: vsanhealthService.vim.NodeDeploymentSpec): vsanhealthService.vim.NodeDeploymentSpec;
         };
         PassiveNodeDeploymentSpec: {
            (options?: vsanhealthService.vim.PassiveNodeDeploymentSpec): vsanhealthService.vim.PassiveNodeDeploymentSpec;
         };
         VchaClusterConfigSpec: {
            (options?: vsanhealthService.vim.VchaClusterConfigSpec): vsanhealthService.vim.VchaClusterConfigSpec;
         };
         VchaClusterDeploymentSpec: {
            (options?: vsanhealthService.vim.VchaClusterDeploymentSpec): vsanhealthService.vim.VchaClusterDeploymentSpec;
         };
         FailoverNodeInfo: {
            (options?: vsanhealthService.vim.FailoverNodeInfo): vsanhealthService.vim.FailoverNodeInfo;
         };
         WitnessNodeInfo: {
            (options?: vsanhealthService.vim.WitnessNodeInfo): vsanhealthService.vim.WitnessNodeInfo;
         };
         VchaState: {
            "configured": string;
            "notConfigured": string;
            "invalid": string;
            "prepared": string;
         };
         VchaClusterConfigInfo: {
            (options?: vsanhealthService.vim.VchaClusterConfigInfo): vsanhealthService.vim.VchaClusterConfigInfo;
         };
         VchaNodeRole: {
            "active": string;
            "passive": string;
            "witness": string;
         };
         VchaClusterMode: {
            "enabled": string;
            "disabled": string;
            "maintenance": string;
         };
         VchaClusterState: {
            "healthy": string;
            "degraded": string;
            "isolated": string;
         };
         VchaNodeState: {
            "up": string;
            "down": string;
         };
         VchaNodeRuntimeInfo: {
            (options?: vsanhealthService.vim.VchaNodeRuntimeInfo): vsanhealthService.vim.VchaNodeRuntimeInfo;
         };
         ArrayOfVchaNodeRuntimeInfo: {
            (options?: vsanhealthService.vim.ArrayOfVchaNodeRuntimeInfo): vsanhealthService.vim.ArrayOfVchaNodeRuntimeInfo;
         };
         VchaClusterRuntimeInfo: {
            (options?: vsanhealthService.vim.VchaClusterRuntimeInfo): vsanhealthService.vim.VchaClusterRuntimeInfo;
         };
         VchaClusterHealth: {
            (options?: vsanhealthService.vim.VchaClusterHealth): vsanhealthService.vim.VchaClusterHealth;
         };
         VirtualMachineAffinityInfo: {
            (options?: vsanhealthService.vim.VirtualMachineAffinityInfo): vsanhealthService.vim.VirtualMachineAffinityInfo;
         };
         VirtualMachineBootOptionsNetworkBootProtocolType: {
            "ipv4": string;
            "ipv6": string;
         };
         VirtualMachineBootOptionsBootableDevice: {
            (options?: vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice): vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice;
         };
         ArrayOfVirtualMachineBootOptionsBootableDevice: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineBootOptionsBootableDevice): vsanhealthService.vim.ArrayOfVirtualMachineBootOptionsBootableDevice;
         };
         VirtualMachineBootOptionsBootableDiskDevice: {
            (options?: vsanhealthService.vim.VirtualMachineBootOptionsBootableDiskDevice): vsanhealthService.vim.VirtualMachineBootOptionsBootableDiskDevice;
         };
         VirtualMachineBootOptionsBootableEthernetDevice: {
            (options?: vsanhealthService.vim.VirtualMachineBootOptionsBootableEthernetDevice): vsanhealthService.vim.VirtualMachineBootOptionsBootableEthernetDevice;
         };
         VirtualMachineBootOptionsBootableFloppyDevice: {
            (options?: vsanhealthService.vim.VirtualMachineBootOptionsBootableFloppyDevice): vsanhealthService.vim.VirtualMachineBootOptionsBootableFloppyDevice;
         };
         VirtualMachineBootOptionsBootableCdromDevice: {
            (options?: vsanhealthService.vim.VirtualMachineBootOptionsBootableCdromDevice): vsanhealthService.vim.VirtualMachineBootOptionsBootableCdromDevice;
         };
         VirtualMachineBootOptions: {
            (options?: vsanhealthService.vim.VirtualMachineBootOptions): vsanhealthService.vim.VirtualMachineBootOptions;
         };
         VirtualMachineCapability: {
            (options?: vsanhealthService.vim.VirtualMachineCapability): vsanhealthService.vim.VirtualMachineCapability;
         };
         VirtualMachineCdromInfo: {
            (options?: vsanhealthService.vim.VirtualMachineCdromInfo): vsanhealthService.vim.VirtualMachineCdromInfo;
         };
         ArrayOfVirtualMachineCdromInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineCdromInfo): vsanhealthService.vim.ArrayOfVirtualMachineCdromInfo;
         };
         VirtualMachineCloneSpec: {
            (options?: vsanhealthService.vim.VirtualMachineCloneSpec): vsanhealthService.vim.VirtualMachineCloneSpec;
         };
         VirtualMachineConfigInfoNpivWwnType: {
            "vc": string;
            "host": string;
            "external": string;
         };
         VirtualMachineConfigInfoSwapPlacementType: {
            "inherit": string;
            "vmDirectory": string;
            "hostLocal": string;
         };
         VirtualMachineConfigInfoDatastoreUrlPair: {
            (options?: vsanhealthService.vim.VirtualMachineConfigInfoDatastoreUrlPair): vsanhealthService.vim.VirtualMachineConfigInfoDatastoreUrlPair;
         };
         ArrayOfVirtualMachineConfigInfoDatastoreUrlPair: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineConfigInfoDatastoreUrlPair): vsanhealthService.vim.ArrayOfVirtualMachineConfigInfoDatastoreUrlPair;
         };
         VirtualMachineConfigInfoOverheadInfo: {
            (options?: vsanhealthService.vim.VirtualMachineConfigInfoOverheadInfo): vsanhealthService.vim.VirtualMachineConfigInfoOverheadInfo;
         };
         VirtualMachineConfigInfo: {
            (options?: vsanhealthService.vim.VirtualMachineConfigInfo): vsanhealthService.vim.VirtualMachineConfigInfo;
         };
         VirtualMachineConfigOption: {
            (options?: vsanhealthService.vim.VirtualMachineConfigOption): vsanhealthService.vim.VirtualMachineConfigOption;
         };
         VirtualMachineConfigOptionDescriptor: {
            (options?: vsanhealthService.vim.VirtualMachineConfigOptionDescriptor): vsanhealthService.vim.VirtualMachineConfigOptionDescriptor;
         };
         ArrayOfVirtualMachineConfigOptionDescriptor: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineConfigOptionDescriptor): vsanhealthService.vim.ArrayOfVirtualMachineConfigOptionDescriptor;
         };
         VirtualMachineConfigSpecNpivWwnOp: {
            "generate": string;
            "set": string;
            "remove": string;
            "extend": string;
         };
         VirtualMachineConfigSpecEncryptedVMotionModes: {
            "disabled": string;
            "opportunistic": string;
            "required": string;
         };
         VirtualMachineCpuIdInfoSpec: {
            (options?: vsanhealthService.vim.VirtualMachineCpuIdInfoSpec): vsanhealthService.vim.VirtualMachineCpuIdInfoSpec;
         };
         ArrayOfVirtualMachineCpuIdInfoSpec: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineCpuIdInfoSpec): vsanhealthService.vim.ArrayOfVirtualMachineCpuIdInfoSpec;
         };
         VirtualMachineConfigSpec: {
            (options?: vsanhealthService.vim.VirtualMachineConfigSpec): vsanhealthService.vim.VirtualMachineConfigSpec;
         };
         ConfigTarget: {
            (options?: vsanhealthService.vim.ConfigTarget): vsanhealthService.vim.ConfigTarget;
         };
         VirtualMachineConsolePreferences: {
            (options?: vsanhealthService.vim.VirtualMachineConsolePreferences): vsanhealthService.vim.VirtualMachineConsolePreferences;
         };
         VirtualMachineDatastoreInfo: {
            (options?: vsanhealthService.vim.VirtualMachineDatastoreInfo): vsanhealthService.vim.VirtualMachineDatastoreInfo;
         };
         ArrayOfVirtualMachineDatastoreInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineDatastoreInfo): vsanhealthService.vim.ArrayOfVirtualMachineDatastoreInfo;
         };
         VirtualMachineDatastoreVolumeOption: {
            (options?: vsanhealthService.vim.VirtualMachineDatastoreVolumeOption): vsanhealthService.vim.VirtualMachineDatastoreVolumeOption;
         };
         ArrayOfVirtualMachineDatastoreVolumeOption: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineDatastoreVolumeOption): vsanhealthService.vim.ArrayOfVirtualMachineDatastoreVolumeOption;
         };
         DatastoreOption: {
            (options?: vsanhealthService.vim.DatastoreOption): vsanhealthService.vim.DatastoreOption;
         };
         VirtualMachinePowerOpType: {
            "soft": string;
            "hard": string;
            "preset": string;
         };
         VirtualMachineStandbyActionType: {
            "checkpoint": string;
            "powerOnSuspend": string;
         };
         VirtualMachineDefaultPowerOpInfo: {
            (options?: vsanhealthService.vim.VirtualMachineDefaultPowerOpInfo): vsanhealthService.vim.VirtualMachineDefaultPowerOpInfo;
         };
         VirtualMachineDefaultProfileSpec: {
            (options?: vsanhealthService.vim.VirtualMachineDefaultProfileSpec): vsanhealthService.vim.VirtualMachineDefaultProfileSpec;
         };
         VirtualMachineDefinedProfileSpec: {
            (options?: vsanhealthService.vim.VirtualMachineDefinedProfileSpec): vsanhealthService.vim.VirtualMachineDefinedProfileSpec;
         };
         VirtualMachineDeviceRuntimeInfoDeviceRuntimeState: {
            (options?: vsanhealthService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState): vsanhealthService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState;
         };
         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm: {
            "vmNptIncompatibleGuest": string;
            "vmNptIncompatibleGuestDriver": string;
            "vmNptIncompatibleAdapterType": string;
            "vmNptDisabledOrDisconnectedAdapter": string;
            "vmNptIncompatibleAdapterFeatures": string;
            "vmNptIncompatibleBackingType": string;
            "vmNptInsufficientMemoryReservation": string;
            "vmNptFaultToleranceOrRecordReplayConfigured": string;
            "vmNptConflictingIOChainConfigured": string;
            "vmNptMonitorBlocks": string;
            "vmNptConflictingOperationInProgress": string;
            "vmNptRuntimeError": string;
            "vmNptOutOfIntrVector": string;
            "vmNptVMCIActive": string;
         };
         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther: {
            "vmNptIncompatibleHost": string;
            "vmNptIncompatibleNetwork": string;
         };
         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState: {
            (options?: vsanhealthService.vim.VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState): vsanhealthService.vim.VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState;
         };
         VirtualMachineDeviceRuntimeInfo: {
            (options?: vsanhealthService.vim.VirtualMachineDeviceRuntimeInfo): vsanhealthService.vim.VirtualMachineDeviceRuntimeInfo;
         };
         ArrayOfVirtualMachineDeviceRuntimeInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineDeviceRuntimeInfo): vsanhealthService.vim.ArrayOfVirtualMachineDeviceRuntimeInfo;
         };
         VirtualMachineDiskDeviceInfo: {
            (options?: vsanhealthService.vim.VirtualMachineDiskDeviceInfo): vsanhealthService.vim.VirtualMachineDiskDeviceInfo;
         };
         VirtualMachineEmptyProfileSpec: {
            (options?: vsanhealthService.vim.VirtualMachineEmptyProfileSpec): vsanhealthService.vim.VirtualMachineEmptyProfileSpec;
         };
         FaultToleranceConfigInfo: {
            (options?: vsanhealthService.vim.FaultToleranceConfigInfo): vsanhealthService.vim.FaultToleranceConfigInfo;
         };
         FaultTolerancePrimaryConfigInfo: {
            (options?: vsanhealthService.vim.FaultTolerancePrimaryConfigInfo): vsanhealthService.vim.FaultTolerancePrimaryConfigInfo;
         };
         FaultToleranceSecondaryConfigInfo: {
            (options?: vsanhealthService.vim.FaultToleranceSecondaryConfigInfo): vsanhealthService.vim.FaultToleranceSecondaryConfigInfo;
         };
         FaultToleranceConfigSpec: {
            (options?: vsanhealthService.vim.FaultToleranceConfigSpec): vsanhealthService.vim.FaultToleranceConfigSpec;
         };
         FaultToleranceMetaSpec: {
            (options?: vsanhealthService.vim.FaultToleranceMetaSpec): vsanhealthService.vim.FaultToleranceMetaSpec;
         };
         FaultToleranceSecondaryOpResult: {
            (options?: vsanhealthService.vim.FaultToleranceSecondaryOpResult): vsanhealthService.vim.FaultToleranceSecondaryOpResult;
         };
         FaultToleranceDiskSpec: {
            (options?: vsanhealthService.vim.FaultToleranceDiskSpec): vsanhealthService.vim.FaultToleranceDiskSpec;
         };
         ArrayOfFaultToleranceDiskSpec: {
            (options?: vsanhealthService.vim.ArrayOfFaultToleranceDiskSpec): vsanhealthService.vim.ArrayOfFaultToleranceDiskSpec;
         };
         FaultToleranceVMConfigSpec: {
            (options?: vsanhealthService.vim.FaultToleranceVMConfigSpec): vsanhealthService.vim.FaultToleranceVMConfigSpec;
         };
         VirtualMachineFeatureRequirement: {
            (options?: vsanhealthService.vim.VirtualMachineFeatureRequirement): vsanhealthService.vim.VirtualMachineFeatureRequirement;
         };
         ArrayOfVirtualMachineFeatureRequirement: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFeatureRequirement): vsanhealthService.vim.ArrayOfVirtualMachineFeatureRequirement;
         };
         VirtualMachineFileInfo: {
            (options?: vsanhealthService.vim.VirtualMachineFileInfo): vsanhealthService.vim.VirtualMachineFileInfo;
         };
         VirtualMachineFileLayoutDiskLayout: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutDiskLayout): vsanhealthService.vim.VirtualMachineFileLayoutDiskLayout;
         };
         ArrayOfVirtualMachineFileLayoutDiskLayout: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutDiskLayout): vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutDiskLayout;
         };
         VirtualMachineFileLayoutSnapshotLayout: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutSnapshotLayout): vsanhealthService.vim.VirtualMachineFileLayoutSnapshotLayout;
         };
         ArrayOfVirtualMachineFileLayoutSnapshotLayout: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutSnapshotLayout): vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutSnapshotLayout;
         };
         VirtualMachineFileLayout: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayout): vsanhealthService.vim.VirtualMachineFileLayout;
         };
         VirtualMachineFileLayoutExFileType: {
            "config": string;
            "extendedConfig": string;
            "diskDescriptor": string;
            "diskExtent": string;
            "digestDescriptor": string;
            "digestExtent": string;
            "diskReplicationState": string;
            "log": string;
            "stat": string;
            "namespaceData": string;
            "nvram": string;
            "snapshotData": string;
            "snapshotMemory": string;
            "snapshotList": string;
            "snapshotManifestList": string;
            "suspend": string;
            "suspendMemory": string;
            "swap": string;
            "uwswap": string;
            "core": string;
            "screenshot": string;
            "ftMetadata": string;
            "guestCustomization": string;
         };
         VirtualMachineFileLayoutExFileInfo: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutExFileInfo): vsanhealthService.vim.VirtualMachineFileLayoutExFileInfo;
         };
         ArrayOfVirtualMachineFileLayoutExFileInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExFileInfo): vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExFileInfo;
         };
         VirtualMachineFileLayoutExDiskUnit: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutExDiskUnit): vsanhealthService.vim.VirtualMachineFileLayoutExDiskUnit;
         };
         ArrayOfVirtualMachineFileLayoutExDiskUnit: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExDiskUnit): vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExDiskUnit;
         };
         VirtualMachineFileLayoutExDiskLayout: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutExDiskLayout): vsanhealthService.vim.VirtualMachineFileLayoutExDiskLayout;
         };
         ArrayOfVirtualMachineFileLayoutExDiskLayout: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExDiskLayout): vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExDiskLayout;
         };
         VirtualMachineFileLayoutExSnapshotLayout: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutExSnapshotLayout): vsanhealthService.vim.VirtualMachineFileLayoutExSnapshotLayout;
         };
         ArrayOfVirtualMachineFileLayoutExSnapshotLayout: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExSnapshotLayout): vsanhealthService.vim.ArrayOfVirtualMachineFileLayoutExSnapshotLayout;
         };
         VirtualMachineFileLayoutEx: {
            (options?: vsanhealthService.vim.VirtualMachineFileLayoutEx): vsanhealthService.vim.VirtualMachineFileLayoutEx;
         };
         VirtualMachineHtSharing: {
            "any": string;
            "none": string;
            "internal": string;
         };
         VirtualMachinePowerOffBehavior: {
            "powerOff": string;
            "revert": string;
            "prompt": string;
            "take": string;
         };
         VirtualMachineFlagInfoMonitorType: {
            "release": string;
            "debug": string;
            "stats": string;
         };
         VirtualMachineFlagInfoVirtualMmuUsage: {
            "automatic": string;
            "on": string;
            "off": string;
         };
         VirtualMachineFlagInfoVirtualExecUsage: {
            "hvAuto": string;
            "hvOn": string;
            "hvOff": string;
         };
         VirtualMachineFlagInfo: {
            (options?: vsanhealthService.vim.VirtualMachineFlagInfo): vsanhealthService.vim.VirtualMachineFlagInfo;
         };
         VirtualMachineFloppyInfo: {
            (options?: vsanhealthService.vim.VirtualMachineFloppyInfo): vsanhealthService.vim.VirtualMachineFloppyInfo;
         };
         ArrayOfVirtualMachineFloppyInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineFloppyInfo): vsanhealthService.vim.ArrayOfVirtualMachineFloppyInfo;
         };
         VirtualMachineForkConfigInfoChildType: {
            "none": string;
            "persistent": string;
            "nonpersistent": string;
         };
         VirtualMachineForkConfigInfo: {
            (options?: vsanhealthService.vim.VirtualMachineForkConfigInfo): vsanhealthService.vim.VirtualMachineForkConfigInfo;
         };
         VirtualMachineToolsStatus: {
            "toolsNotInstalled": string;
            "toolsNotRunning": string;
            "toolsOld": string;
            "toolsOk": string;
         };
         VirtualMachineToolsVersionStatus: {
            "guestToolsNotInstalled": string;
            "guestToolsNeedUpgrade": string;
            "guestToolsCurrent": string;
            "guestToolsUnmanaged": string;
            "guestToolsTooOld": string;
            "guestToolsSupportedOld": string;
            "guestToolsSupportedNew": string;
            "guestToolsTooNew": string;
            "guestToolsBlacklisted": string;
         };
         VirtualMachineToolsRunningStatus: {
            "guestToolsNotRunning": string;
            "guestToolsRunning": string;
            "guestToolsExecutingScripts": string;
         };
         VirtualMachineToolsInstallType: {
            "guestToolsTypeUnknown": string;
            "guestToolsTypeMSI": string;
            "guestToolsTypeTar": string;
            "guestToolsTypeOSP": string;
            "guestToolsTypeOpenVMTools": string;
         };
         GuestDiskInfo: {
            (options?: vsanhealthService.vim.GuestDiskInfo): vsanhealthService.vim.GuestDiskInfo;
         };
         ArrayOfGuestDiskInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestDiskInfo): vsanhealthService.vim.ArrayOfGuestDiskInfo;
         };
         GuestNicInfo: {
            (options?: vsanhealthService.vim.GuestNicInfo): vsanhealthService.vim.GuestNicInfo;
         };
         ArrayOfGuestNicInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestNicInfo): vsanhealthService.vim.ArrayOfGuestNicInfo;
         };
         GuestStackInfo: {
            (options?: vsanhealthService.vim.GuestStackInfo): vsanhealthService.vim.GuestStackInfo;
         };
         ArrayOfGuestStackInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestStackInfo): vsanhealthService.vim.ArrayOfGuestStackInfo;
         };
         GuestScreenInfo: {
            (options?: vsanhealthService.vim.GuestScreenInfo): vsanhealthService.vim.GuestScreenInfo;
         };
         VirtualMachineGuestState: {
            "running": string;
            "shuttingDown": string;
            "resetting": string;
            "standby": string;
            "notRunning": string;
            "unknown": string;
         };
         GuestInfoAppStateType: {
            "none": string;
            "appStateOk": string;
            "appStateNeedReset": string;
         };
         GuestInfoNamespaceGenerationInfo: {
            (options?: vsanhealthService.vim.GuestInfoNamespaceGenerationInfo): vsanhealthService.vim.GuestInfoNamespaceGenerationInfo;
         };
         ArrayOfGuestInfoNamespaceGenerationInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestInfoNamespaceGenerationInfo): vsanhealthService.vim.ArrayOfGuestInfoNamespaceGenerationInfo;
         };
         GuestInfo: {
            (options?: vsanhealthService.vim.GuestInfo): vsanhealthService.vim.GuestInfo;
         };
         VirtualMachineGuestIntegrityInfo: {
            (options?: vsanhealthService.vim.VirtualMachineGuestIntegrityInfo): vsanhealthService.vim.VirtualMachineGuestIntegrityInfo;
         };
         VirtualMachineGuestOsFamily: {
            "windowsGuest": string;
            "linuxGuest": string;
            "netwareGuest": string;
            "solarisGuest": string;
            "darwinGuestFamily": string;
            "otherGuestFamily": string;
         };
         VirtualMachineGuestOsIdentifier: {
            "dosGuest": string;
            "win31Guest": string;
            "win95Guest": string;
            "win98Guest": string;
            "winMeGuest": string;
            "winNTGuest": string;
            "win2000ProGuest": string;
            "win2000ServGuest": string;
            "win2000AdvServGuest": string;
            "winXPHomeGuest": string;
            "winXPProGuest": string;
            "winXPPro64Guest": string;
            "winNetWebGuest": string;
            "winNetStandardGuest": string;
            "winNetEnterpriseGuest": string;
            "winNetDatacenterGuest": string;
            "winNetBusinessGuest": string;
            "winNetStandard64Guest": string;
            "winNetEnterprise64Guest": string;
            "winLonghornGuest": string;
            "winLonghorn64Guest": string;
            "winNetDatacenter64Guest": string;
            "winVistaGuest": string;
            "winVista64Guest": string;
            "windows7Guest": string;
            "windows7_64Guest": string;
            "windows7Server64Guest": string;
            "windows8Guest": string;
            "windows8_64Guest": string;
            "windows8Server64Guest": string;
            "windows9Guest": string;
            "windows9_64Guest": string;
            "windows9Server64Guest": string;
            "windowsHyperVGuest": string;
            "freebsdGuest": string;
            "freebsd64Guest": string;
            "redhatGuest": string;
            "rhel2Guest": string;
            "rhel3Guest": string;
            "rhel3_64Guest": string;
            "rhel4Guest": string;
            "rhel4_64Guest": string;
            "rhel5Guest": string;
            "rhel5_64Guest": string;
            "rhel6Guest": string;
            "rhel6_64Guest": string;
            "rhel7Guest": string;
            "rhel7_64Guest": string;
            "centosGuest": string;
            "centos64Guest": string;
            "centos6Guest": string;
            "centos6_64Guest": string;
            "centos7Guest": string;
            "centos7_64Guest": string;
            "oracleLinuxGuest": string;
            "oracleLinux64Guest": string;
            "oracleLinux6Guest": string;
            "oracleLinux6_64Guest": string;
            "oracleLinux7Guest": string;
            "oracleLinux7_64Guest": string;
            "suseGuest": string;
            "suse64Guest": string;
            "slesGuest": string;
            "sles64Guest": string;
            "sles10Guest": string;
            "sles10_64Guest": string;
            "sles11Guest": string;
            "sles11_64Guest": string;
            "sles12Guest": string;
            "sles12_64Guest": string;
            "nld9Guest": string;
            "oesGuest": string;
            "sjdsGuest": string;
            "mandrakeGuest": string;
            "mandrivaGuest": string;
            "mandriva64Guest": string;
            "turboLinuxGuest": string;
            "turboLinux64Guest": string;
            "ubuntuGuest": string;
            "ubuntu64Guest": string;
            "debian4Guest": string;
            "debian4_64Guest": string;
            "debian5Guest": string;
            "debian5_64Guest": string;
            "debian6Guest": string;
            "debian6_64Guest": string;
            "debian7Guest": string;
            "debian7_64Guest": string;
            "debian8Guest": string;
            "debian8_64Guest": string;
            "debian9Guest": string;
            "debian9_64Guest": string;
            "debian10Guest": string;
            "debian10_64Guest": string;
            "asianux3Guest": string;
            "asianux3_64Guest": string;
            "asianux4Guest": string;
            "asianux4_64Guest": string;
            "asianux5_64Guest": string;
            "asianux7_64Guest": string;
            "opensuseGuest": string;
            "opensuse64Guest": string;
            "fedoraGuest": string;
            "fedora64Guest": string;
            "coreos64Guest": string;
            "vmwarePhoton64Guest": string;
            "other24xLinuxGuest": string;
            "other26xLinuxGuest": string;
            "otherLinuxGuest": string;
            "other3xLinuxGuest": string;
            "genericLinuxGuest": string;
            "other24xLinux64Guest": string;
            "other26xLinux64Guest": string;
            "other3xLinux64Guest": string;
            "otherLinux64Guest": string;
            "solaris6Guest": string;
            "solaris7Guest": string;
            "solaris8Guest": string;
            "solaris9Guest": string;
            "solaris10Guest": string;
            "solaris10_64Guest": string;
            "solaris11_64Guest": string;
            "os2Guest": string;
            "eComStationGuest": string;
            "eComStation2Guest": string;
            "netware4Guest": string;
            "netware5Guest": string;
            "netware6Guest": string;
            "openServer5Guest": string;
            "openServer6Guest": string;
            "unixWare7Guest": string;
            "darwinGuest": string;
            "darwin64Guest": string;
            "darwin10Guest": string;
            "darwin10_64Guest": string;
            "darwin11Guest": string;
            "darwin11_64Guest": string;
            "darwin12_64Guest": string;
            "darwin13_64Guest": string;
            "darwin14_64Guest": string;
            "darwin15_64Guest": string;
            "darwin16_64Guest": string;
            "vmkernelGuest": string;
            "vmkernel5Guest": string;
            "vmkernel6Guest": string;
            "vmkernel65Guest": string;
            "otherGuest": string;
            "otherGuest64": string;
         };
         GuestOsDescriptorFirmwareType: {
            "bios": string;
            "efi": string;
         };
         GuestOsDescriptorSupportLevel: {
            "experimental": string;
            "legacy": string;
            "terminated": string;
            "supported": string;
            "unsupported": string;
            "deprecated": string;
            "techPreview": string;
         };
         GuestOsDescriptor: {
            (options?: vsanhealthService.vim.GuestOsDescriptor): vsanhealthService.vim.GuestOsDescriptor;
         };
         ArrayOfGuestOsDescriptor: {
            (options?: vsanhealthService.vim.ArrayOfGuestOsDescriptor): vsanhealthService.vim.ArrayOfGuestOsDescriptor;
         };
         VirtualMachineGuestQuiesceSpec: {
            (options?: vsanhealthService.vim.VirtualMachineGuestQuiesceSpec): vsanhealthService.vim.VirtualMachineGuestQuiesceSpec;
         };
         VirtualMachineIdeDiskDevicePartitionInfo: {
            (options?: vsanhealthService.vim.VirtualMachineIdeDiskDevicePartitionInfo): vsanhealthService.vim.VirtualMachineIdeDiskDevicePartitionInfo;
         };
         ArrayOfVirtualMachineIdeDiskDevicePartitionInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineIdeDiskDevicePartitionInfo): vsanhealthService.vim.ArrayOfVirtualMachineIdeDiskDevicePartitionInfo;
         };
         VirtualMachineIdeDiskDeviceInfo: {
            (options?: vsanhealthService.vim.VirtualMachineIdeDiskDeviceInfo): vsanhealthService.vim.VirtualMachineIdeDiskDeviceInfo;
         };
         ArrayOfVirtualMachineIdeDiskDeviceInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineIdeDiskDeviceInfo): vsanhealthService.vim.ArrayOfVirtualMachineIdeDiskDeviceInfo;
         };
         VirtualMachineLegacyNetworkSwitchInfo: {
            (options?: vsanhealthService.vim.VirtualMachineLegacyNetworkSwitchInfo): vsanhealthService.vim.VirtualMachineLegacyNetworkSwitchInfo;
         };
         ArrayOfVirtualMachineLegacyNetworkSwitchInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineLegacyNetworkSwitchInfo): vsanhealthService.vim.ArrayOfVirtualMachineLegacyNetworkSwitchInfo;
         };
         VirtualMachineMessage: {
            (options?: vsanhealthService.vim.VirtualMachineMessage): vsanhealthService.vim.VirtualMachineMessage;
         };
         ArrayOfVirtualMachineMessage: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineMessage): vsanhealthService.vim.ArrayOfVirtualMachineMessage;
         };
         VirtualMachineMetadataManagerVmMetadataOwnerOwner: {
            "ComVmwareVsphereHA": string;
         };
         VirtualMachineMetadataManagerVmMetadataOwner: {
            (options?: vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataOwner): vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataOwner;
         };
         VirtualMachineMetadataManagerVmMetadataOp: {
            "Update": string;
            "Remove": string;
         };
         VirtualMachineMetadataManagerVmMetadata: {
            (options?: vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadata): vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadata;
         };
         VirtualMachineMetadataManagerVmMetadataInput: {
            (options?: vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataInput): vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataInput;
         };
         ArrayOfVirtualMachineMetadataManagerVmMetadataInput: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataInput): vsanhealthService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataInput;
         };
         VirtualMachineMetadataManagerVmMetadataResult: {
            (options?: vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataResult): vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataResult;
         };
         ArrayOfVirtualMachineMetadataManagerVmMetadataResult: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataResult): vsanhealthService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataResult;
         };
         VirtualMachineNetworkInfo: {
            (options?: vsanhealthService.vim.VirtualMachineNetworkInfo): vsanhealthService.vim.VirtualMachineNetworkInfo;
         };
         ArrayOfVirtualMachineNetworkInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineNetworkInfo): vsanhealthService.vim.ArrayOfVirtualMachineNetworkInfo;
         };
         VirtualMachineNetworkShaperInfo: {
            (options?: vsanhealthService.vim.VirtualMachineNetworkShaperInfo): vsanhealthService.vim.VirtualMachineNetworkShaperInfo;
         };
         OpaqueNetworkTargetInfo: {
            (options?: vsanhealthService.vim.OpaqueNetworkTargetInfo): vsanhealthService.vim.OpaqueNetworkTargetInfo;
         };
         ArrayOfOpaqueNetworkTargetInfo: {
            (options?: vsanhealthService.vim.ArrayOfOpaqueNetworkTargetInfo): vsanhealthService.vim.ArrayOfOpaqueNetworkTargetInfo;
         };
         VirtualMachineParallelInfo: {
            (options?: vsanhealthService.vim.VirtualMachineParallelInfo): vsanhealthService.vim.VirtualMachineParallelInfo;
         };
         ArrayOfVirtualMachineParallelInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineParallelInfo): vsanhealthService.vim.ArrayOfVirtualMachineParallelInfo;
         };
         VirtualMachinePciPassthroughInfo: {
            (options?: vsanhealthService.vim.VirtualMachinePciPassthroughInfo): vsanhealthService.vim.VirtualMachinePciPassthroughInfo;
         };
         ArrayOfVirtualMachinePciPassthroughInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachinePciPassthroughInfo): vsanhealthService.vim.ArrayOfVirtualMachinePciPassthroughInfo;
         };
         VirtualMachinePciSharedGpuPassthroughInfo: {
            (options?: vsanhealthService.vim.VirtualMachinePciSharedGpuPassthroughInfo): vsanhealthService.vim.VirtualMachinePciSharedGpuPassthroughInfo;
         };
         ArrayOfVirtualMachinePciSharedGpuPassthroughInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachinePciSharedGpuPassthroughInfo): vsanhealthService.vim.ArrayOfVirtualMachinePciSharedGpuPassthroughInfo;
         };
         VirtualMachineProfileRawData: {
            (options?: vsanhealthService.vim.VirtualMachineProfileRawData): vsanhealthService.vim.VirtualMachineProfileRawData;
         };
         VirtualMachineProfileSpec: {
            (options?: vsanhealthService.vim.VirtualMachineProfileSpec): vsanhealthService.vim.VirtualMachineProfileSpec;
         };
         ArrayOfVirtualMachineProfileSpec: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineProfileSpec): vsanhealthService.vim.ArrayOfVirtualMachineProfileSpec;
         };
         VirtualMachineQuestionInfo: {
            (options?: vsanhealthService.vim.VirtualMachineQuestionInfo): vsanhealthService.vim.VirtualMachineQuestionInfo;
         };
         VirtualMachineRelocateTransformation: {
            "flat": string;
            "sparse": string;
         };
         VirtualMachineRelocateSpecDiskLocator: {
            (options?: vsanhealthService.vim.VirtualMachineRelocateSpecDiskLocator): vsanhealthService.vim.VirtualMachineRelocateSpecDiskLocator;
         };
         ArrayOfVirtualMachineRelocateSpecDiskLocator: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineRelocateSpecDiskLocator): vsanhealthService.vim.ArrayOfVirtualMachineRelocateSpecDiskLocator;
         };
         VirtualMachineRelocateDiskMoveOptions: {
            "moveAllDiskBackingsAndAllowSharing": string;
            "moveAllDiskBackingsAndDisallowSharing": string;
            "moveChildMostDiskBacking": string;
            "createNewChildDiskBacking": string;
            "moveAllDiskBackingsAndConsolidate": string;
         };
         VirtualMachineRelocateSpec: {
            (options?: vsanhealthService.vim.VirtualMachineRelocateSpec): vsanhealthService.vim.VirtualMachineRelocateSpec;
         };
         ReplicationInfoDiskSettings: {
            (options?: vsanhealthService.vim.ReplicationInfoDiskSettings): vsanhealthService.vim.ReplicationInfoDiskSettings;
         };
         ArrayOfReplicationInfoDiskSettings: {
            (options?: vsanhealthService.vim.ArrayOfReplicationInfoDiskSettings): vsanhealthService.vim.ArrayOfReplicationInfoDiskSettings;
         };
         ReplicationConfigSpec: {
            (options?: vsanhealthService.vim.ReplicationConfigSpec): vsanhealthService.vim.ReplicationConfigSpec;
         };
         VirtualMachineRuntimeInfoDasProtectionState: {
            (options?: vsanhealthService.vim.VirtualMachineRuntimeInfoDasProtectionState): vsanhealthService.vim.VirtualMachineRuntimeInfoDasProtectionState;
         };
         VirtualMachineRuntimeInfo: {
            (options?: vsanhealthService.vim.VirtualMachineRuntimeInfo): vsanhealthService.vim.VirtualMachineRuntimeInfo;
         };
         ScheduledHardwareUpgradeInfoHardwareUpgradePolicy: {
            "never": string;
            "onSoftPowerOff": string;
            "always": string;
         };
         ScheduledHardwareUpgradeInfoHardwareUpgradeStatus: {
            "none": string;
            "pending": string;
            "success": string;
            "failed": string;
         };
         ScheduledHardwareUpgradeInfo: {
            (options?: vsanhealthService.vim.ScheduledHardwareUpgradeInfo): vsanhealthService.vim.ScheduledHardwareUpgradeInfo;
         };
         VirtualMachineScsiDiskDeviceInfo: {
            (options?: vsanhealthService.vim.VirtualMachineScsiDiskDeviceInfo): vsanhealthService.vim.VirtualMachineScsiDiskDeviceInfo;
         };
         ArrayOfVirtualMachineScsiDiskDeviceInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineScsiDiskDeviceInfo): vsanhealthService.vim.ArrayOfVirtualMachineScsiDiskDeviceInfo;
         };
         VirtualMachineScsiPassthroughType: {
            "disk": string;
            "tape": string;
            "printer": string;
            "processor": string;
            "worm": string;
            "cdrom": string;
            "scanner": string;
            "optical": string;
            "media": string;
            "com": string;
            "raid": string;
            "unknown": string;
         };
         VirtualMachineScsiPassthroughInfo: {
            (options?: vsanhealthService.vim.VirtualMachineScsiPassthroughInfo): vsanhealthService.vim.VirtualMachineScsiPassthroughInfo;
         };
         ArrayOfVirtualMachineScsiPassthroughInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineScsiPassthroughInfo): vsanhealthService.vim.ArrayOfVirtualMachineScsiPassthroughInfo;
         };
         VirtualMachineSerialInfo: {
            (options?: vsanhealthService.vim.VirtualMachineSerialInfo): vsanhealthService.vim.VirtualMachineSerialInfo;
         };
         ArrayOfVirtualMachineSerialInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineSerialInfo): vsanhealthService.vim.ArrayOfVirtualMachineSerialInfo;
         };
         VirtualMachineSnapshotInfo: {
            (options?: vsanhealthService.vim.VirtualMachineSnapshotInfo): vsanhealthService.vim.VirtualMachineSnapshotInfo;
         };
         VirtualMachineSnapshotTree: {
            (options?: vsanhealthService.vim.VirtualMachineSnapshotTree): vsanhealthService.vim.VirtualMachineSnapshotTree;
         };
         ArrayOfVirtualMachineSnapshotTree: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineSnapshotTree): vsanhealthService.vim.ArrayOfVirtualMachineSnapshotTree;
         };
         VirtualMachineSoundInfo: {
            (options?: vsanhealthService.vim.VirtualMachineSoundInfo): vsanhealthService.vim.VirtualMachineSoundInfo;
         };
         ArrayOfVirtualMachineSoundInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineSoundInfo): vsanhealthService.vim.ArrayOfVirtualMachineSoundInfo;
         };
         VirtualMachineSriovDevicePoolInfo: {
            (options?: vsanhealthService.vim.VirtualMachineSriovDevicePoolInfo): vsanhealthService.vim.VirtualMachineSriovDevicePoolInfo;
         };
         VirtualMachineSriovInfo: {
            (options?: vsanhealthService.vim.VirtualMachineSriovInfo): vsanhealthService.vim.VirtualMachineSriovInfo;
         };
         ArrayOfVirtualMachineSriovInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineSriovInfo): vsanhealthService.vim.ArrayOfVirtualMachineSriovInfo;
         };
         VirtualMachineSriovNetworkDevicePoolInfo: {
            (options?: vsanhealthService.vim.VirtualMachineSriovNetworkDevicePoolInfo): vsanhealthService.vim.VirtualMachineSriovNetworkDevicePoolInfo;
         };
         VirtualMachineUsageOnDatastore: {
            (options?: vsanhealthService.vim.VirtualMachineUsageOnDatastore): vsanhealthService.vim.VirtualMachineUsageOnDatastore;
         };
         ArrayOfVirtualMachineUsageOnDatastore: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineUsageOnDatastore): vsanhealthService.vim.ArrayOfVirtualMachineUsageOnDatastore;
         };
         VirtualMachineStorageInfo: {
            (options?: vsanhealthService.vim.VirtualMachineStorageInfo): vsanhealthService.vim.VirtualMachineStorageInfo;
         };
         VirtualMachineConfigSummary: {
            (options?: vsanhealthService.vim.VirtualMachineConfigSummary): vsanhealthService.vim.VirtualMachineConfigSummary;
         };
         VirtualMachineQuickStats: {
            (options?: vsanhealthService.vim.VirtualMachineQuickStats): vsanhealthService.vim.VirtualMachineQuickStats;
         };
         VirtualMachineGuestSummary: {
            (options?: vsanhealthService.vim.VirtualMachineGuestSummary): vsanhealthService.vim.VirtualMachineGuestSummary;
         };
         VirtualMachineStorageSummary: {
            (options?: vsanhealthService.vim.VirtualMachineStorageSummary): vsanhealthService.vim.VirtualMachineStorageSummary;
         };
         VirtualMachineSummary: {
            (options?: vsanhealthService.vim.VirtualMachineSummary): vsanhealthService.vim.VirtualMachineSummary;
         };
         ArrayOfVirtualMachineSummary: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineSummary): vsanhealthService.vim.ArrayOfVirtualMachineSummary;
         };
         VirtualMachineTargetInfoConfigurationTag: {
            "compliant": string;
            "clusterWide": string;
         };
         VirtualMachineTargetInfo: {
            (options?: vsanhealthService.vim.VirtualMachineTargetInfo): vsanhealthService.vim.VirtualMachineTargetInfo;
         };
         UpgradePolicy: {
            "manual": string;
            "upgradeAtPowerCycle": string;
         };
         ToolsConfigInfoToolsLastInstallInfo: {
            (options?: vsanhealthService.vim.ToolsConfigInfoToolsLastInstallInfo): vsanhealthService.vim.ToolsConfigInfoToolsLastInstallInfo;
         };
         ToolsConfigInfo: {
            (options?: vsanhealthService.vim.ToolsConfigInfo): vsanhealthService.vim.ToolsConfigInfo;
         };
         VirtualMachineUsbInfoSpeed: {
            "low": string;
            "full": string;
            "high": string;
            "superSpeed": string;
            "unknownSpeed": string;
         };
         VirtualMachineUsbInfoFamily: {
            "audio": string;
            "hid": string;
            "hid_bootable": string;
            "physical": string;
            "communication": string;
            "imaging": string;
            "printer": string;
            "storage": string;
            "hub": string;
            "smart_card": string;
            "security": string;
            "video": string;
            "wireless": string;
            "bluetooth": string;
            "wusb": string;
            "pda": string;
            "vendor_specific": string;
            "other": string;
            "unknownFamily": string;
         };
         VirtualMachineUsbInfo: {
            (options?: vsanhealthService.vim.VirtualMachineUsbInfo): vsanhealthService.vim.VirtualMachineUsbInfo;
         };
         ArrayOfVirtualMachineUsbInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineUsbInfo): vsanhealthService.vim.ArrayOfVirtualMachineUsbInfo;
         };
         UsbScanCodeSpecModifierType: {
            (options?: vsanhealthService.vim.UsbScanCodeSpecModifierType): vsanhealthService.vim.UsbScanCodeSpecModifierType;
         };
         UsbScanCodeSpecKeyEvent: {
            (options?: vsanhealthService.vim.UsbScanCodeSpecKeyEvent): vsanhealthService.vim.UsbScanCodeSpecKeyEvent;
         };
         ArrayOfUsbScanCodeSpecKeyEvent: {
            (options?: vsanhealthService.vim.ArrayOfUsbScanCodeSpecKeyEvent): vsanhealthService.vim.ArrayOfUsbScanCodeSpecKeyEvent;
         };
         UsbScanCodeSpec: {
            (options?: vsanhealthService.vim.UsbScanCodeSpec): vsanhealthService.vim.UsbScanCodeSpec;
         };
         VirtualMachineVFlashModuleInfo: {
            (options?: vsanhealthService.vim.VirtualMachineVFlashModuleInfo): vsanhealthService.vim.VirtualMachineVFlashModuleInfo;
         };
         ArrayOfVirtualMachineVFlashModuleInfo: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineVFlashModuleInfo): vsanhealthService.vim.ArrayOfVirtualMachineVFlashModuleInfo;
         };
         VirtualHardware: {
            (options?: vsanhealthService.vim.VirtualHardware): vsanhealthService.vim.VirtualHardware;
         };
         VirtualHardwareOption: {
            (options?: vsanhealthService.vim.VirtualHardwareOption): vsanhealthService.vim.VirtualHardwareOption;
         };
         VirtualMachineImportSpec: {
            (options?: vsanhealthService.vim.VirtualMachineImportSpec): vsanhealthService.vim.VirtualMachineImportSpec;
         };
         VirtualMachineWindowsQuiesceSpecVssBackupContext: {
            "ctx_auto": string;
            "ctx_backup": string;
            "ctx_file_share_backup": string;
         };
         VirtualMachineWindowsQuiesceSpec: {
            (options?: vsanhealthService.vim.VirtualMachineWindowsQuiesceSpec): vsanhealthService.vim.VirtualMachineWindowsQuiesceSpec;
         };
         CheckResult: {
            (options?: vsanhealthService.vim.CheckResult): vsanhealthService.vim.CheckResult;
         };
         ArrayOfCheckResult: {
            (options?: vsanhealthService.vim.ArrayOfCheckResult): vsanhealthService.vim.ArrayOfCheckResult;
         };
         CheckTestType: {
            "sourceTests": string;
            "hostTests": string;
            "resourcePoolTests": string;
            "datastoreTests": string;
            "networkTests": string;
         };
         CustomizationIPSettingsIpV6AddressSpec: {
            (options?: vsanhealthService.vim.CustomizationIPSettingsIpV6AddressSpec): vsanhealthService.vim.CustomizationIPSettingsIpV6AddressSpec;
         };
         CustomizationNetBIOSMode: {
            "enableNetBIOSViaDhcp": string;
            "enableNetBIOS": string;
            "disableNetBIOS": string;
         };
         CustomizationIPSettings: {
            (options?: vsanhealthService.vim.CustomizationIPSettings): vsanhealthService.vim.CustomizationIPSettings;
         };
         CustomizationSpec: {
            (options?: vsanhealthService.vim.CustomizationSpec): vsanhealthService.vim.CustomizationSpec;
         };
         CustomizationName: {
            (options?: vsanhealthService.vim.CustomizationName): vsanhealthService.vim.CustomizationName;
         };
         CustomizationFixedName: {
            (options?: vsanhealthService.vim.CustomizationFixedName): vsanhealthService.vim.CustomizationFixedName;
         };
         CustomizationPrefixName: {
            (options?: vsanhealthService.vim.CustomizationPrefixName): vsanhealthService.vim.CustomizationPrefixName;
         };
         CustomizationVirtualMachineName: {
            (options?: vsanhealthService.vim.CustomizationVirtualMachineName): vsanhealthService.vim.CustomizationVirtualMachineName;
         };
         CustomizationUnknownName: {
            (options?: vsanhealthService.vim.CustomizationUnknownName): vsanhealthService.vim.CustomizationUnknownName;
         };
         CustomizationCustomName: {
            (options?: vsanhealthService.vim.CustomizationCustomName): vsanhealthService.vim.CustomizationCustomName;
         };
         CustomizationPassword: {
            (options?: vsanhealthService.vim.CustomizationPassword): vsanhealthService.vim.CustomizationPassword;
         };
         CustomizationOptions: {
            (options?: vsanhealthService.vim.CustomizationOptions): vsanhealthService.vim.CustomizationOptions;
         };
         CustomizationSysprepRebootOption: {
            "reboot": string;
            "noreboot": string;
            "shutdown": string;
         };
         CustomizationWinOptions: {
            (options?: vsanhealthService.vim.CustomizationWinOptions): vsanhealthService.vim.CustomizationWinOptions;
         };
         CustomizationLinuxOptions: {
            (options?: vsanhealthService.vim.CustomizationLinuxOptions): vsanhealthService.vim.CustomizationLinuxOptions;
         };
         CustomizationGuiUnattended: {
            (options?: vsanhealthService.vim.CustomizationGuiUnattended): vsanhealthService.vim.CustomizationGuiUnattended;
         };
         CustomizationUserData: {
            (options?: vsanhealthService.vim.CustomizationUserData): vsanhealthService.vim.CustomizationUserData;
         };
         CustomizationGuiRunOnce: {
            (options?: vsanhealthService.vim.CustomizationGuiRunOnce): vsanhealthService.vim.CustomizationGuiRunOnce;
         };
         CustomizationIdentification: {
            (options?: vsanhealthService.vim.CustomizationIdentification): vsanhealthService.vim.CustomizationIdentification;
         };
         CustomizationLicenseDataMode: {
            "perServer": string;
            "perSeat": string;
         };
         CustomizationLicenseFilePrintData: {
            (options?: vsanhealthService.vim.CustomizationLicenseFilePrintData): vsanhealthService.vim.CustomizationLicenseFilePrintData;
         };
         CustomizationIdentitySettings: {
            (options?: vsanhealthService.vim.CustomizationIdentitySettings): vsanhealthService.vim.CustomizationIdentitySettings;
         };
         CustomizationSysprepText: {
            (options?: vsanhealthService.vim.CustomizationSysprepText): vsanhealthService.vim.CustomizationSysprepText;
         };
         CustomizationSysprep: {
            (options?: vsanhealthService.vim.CustomizationSysprep): vsanhealthService.vim.CustomizationSysprep;
         };
         CustomizationLinuxPrep: {
            (options?: vsanhealthService.vim.CustomizationLinuxPrep): vsanhealthService.vim.CustomizationLinuxPrep;
         };
         CustomizationGlobalIPSettings: {
            (options?: vsanhealthService.vim.CustomizationGlobalIPSettings): vsanhealthService.vim.CustomizationGlobalIPSettings;
         };
         CustomizationIpGenerator: {
            (options?: vsanhealthService.vim.CustomizationIpGenerator): vsanhealthService.vim.CustomizationIpGenerator;
         };
         CustomizationDhcpIpGenerator: {
            (options?: vsanhealthService.vim.CustomizationDhcpIpGenerator): vsanhealthService.vim.CustomizationDhcpIpGenerator;
         };
         CustomizationFixedIp: {
            (options?: vsanhealthService.vim.CustomizationFixedIp): vsanhealthService.vim.CustomizationFixedIp;
         };
         CustomizationUnknownIpGenerator: {
            (options?: vsanhealthService.vim.CustomizationUnknownIpGenerator): vsanhealthService.vim.CustomizationUnknownIpGenerator;
         };
         CustomizationCustomIpGenerator: {
            (options?: vsanhealthService.vim.CustomizationCustomIpGenerator): vsanhealthService.vim.CustomizationCustomIpGenerator;
         };
         CustomizationIpV6Generator: {
            (options?: vsanhealthService.vim.CustomizationIpV6Generator): vsanhealthService.vim.CustomizationIpV6Generator;
         };
         ArrayOfCustomizationIpV6Generator: {
            (options?: vsanhealthService.vim.ArrayOfCustomizationIpV6Generator): vsanhealthService.vim.ArrayOfCustomizationIpV6Generator;
         };
         CustomizationDhcpIpV6Generator: {
            (options?: vsanhealthService.vim.CustomizationDhcpIpV6Generator): vsanhealthService.vim.CustomizationDhcpIpV6Generator;
         };
         CustomizationStatelessIpV6Generator: {
            (options?: vsanhealthService.vim.CustomizationStatelessIpV6Generator): vsanhealthService.vim.CustomizationStatelessIpV6Generator;
         };
         CustomizationFixedIpV6: {
            (options?: vsanhealthService.vim.CustomizationFixedIpV6): vsanhealthService.vim.CustomizationFixedIpV6;
         };
         CustomizationAutoIpV6Generator: {
            (options?: vsanhealthService.vim.CustomizationAutoIpV6Generator): vsanhealthService.vim.CustomizationAutoIpV6Generator;
         };
         CustomizationUnknownIpV6Generator: {
            (options?: vsanhealthService.vim.CustomizationUnknownIpV6Generator): vsanhealthService.vim.CustomizationUnknownIpV6Generator;
         };
         CustomizationCustomIpV6Generator: {
            (options?: vsanhealthService.vim.CustomizationCustomIpV6Generator): vsanhealthService.vim.CustomizationCustomIpV6Generator;
         };
         CustomizationAdapterMapping: {
            (options?: vsanhealthService.vim.CustomizationAdapterMapping): vsanhealthService.vim.CustomizationAdapterMapping;
         };
         ArrayOfCustomizationAdapterMapping: {
            (options?: vsanhealthService.vim.ArrayOfCustomizationAdapterMapping): vsanhealthService.vim.ArrayOfCustomizationAdapterMapping;
         };
         HostDiskMappingPartitionInfo: {
            (options?: vsanhealthService.vim.HostDiskMappingPartitionInfo): vsanhealthService.vim.HostDiskMappingPartitionInfo;
         };
         HostDiskMappingInfo: {
            (options?: vsanhealthService.vim.HostDiskMappingInfo): vsanhealthService.vim.HostDiskMappingInfo;
         };
         HostDiskMappingPartitionOption: {
            (options?: vsanhealthService.vim.HostDiskMappingPartitionOption): vsanhealthService.vim.HostDiskMappingPartitionOption;
         };
         ArrayOfHostDiskMappingPartitionOption: {
            (options?: vsanhealthService.vim.ArrayOfHostDiskMappingPartitionOption): vsanhealthService.vim.ArrayOfHostDiskMappingPartitionOption;
         };
         HostDiskMappingOption: {
            (options?: vsanhealthService.vim.HostDiskMappingOption): vsanhealthService.vim.HostDiskMappingOption;
         };
         ParaVirtualSCSIController: {
            (options?: vsanhealthService.vim.ParaVirtualSCSIController): vsanhealthService.vim.ParaVirtualSCSIController;
         };
         ParaVirtualSCSIControllerOption: {
            (options?: vsanhealthService.vim.ParaVirtualSCSIControllerOption): vsanhealthService.vim.ParaVirtualSCSIControllerOption;
         };
         VirtualAHCIController: {
            (options?: vsanhealthService.vim.VirtualAHCIController): vsanhealthService.vim.VirtualAHCIController;
         };
         VirtualAHCIControllerOption: {
            (options?: vsanhealthService.vim.VirtualAHCIControllerOption): vsanhealthService.vim.VirtualAHCIControllerOption;
         };
         VirtualBusLogicController: {
            (options?: vsanhealthService.vim.VirtualBusLogicController): vsanhealthService.vim.VirtualBusLogicController;
         };
         VirtualBusLogicControllerOption: {
            (options?: vsanhealthService.vim.VirtualBusLogicControllerOption): vsanhealthService.vim.VirtualBusLogicControllerOption;
         };
         VirtualCdromIsoBackingInfo: {
            (options?: vsanhealthService.vim.VirtualCdromIsoBackingInfo): vsanhealthService.vim.VirtualCdromIsoBackingInfo;
         };
         VirtualCdromPassthroughBackingInfo: {
            (options?: vsanhealthService.vim.VirtualCdromPassthroughBackingInfo): vsanhealthService.vim.VirtualCdromPassthroughBackingInfo;
         };
         VirtualCdromRemotePassthroughBackingInfo: {
            (options?: vsanhealthService.vim.VirtualCdromRemotePassthroughBackingInfo): vsanhealthService.vim.VirtualCdromRemotePassthroughBackingInfo;
         };
         VirtualCdromAtapiBackingInfo: {
            (options?: vsanhealthService.vim.VirtualCdromAtapiBackingInfo): vsanhealthService.vim.VirtualCdromAtapiBackingInfo;
         };
         VirtualCdromRemoteAtapiBackingInfo: {
            (options?: vsanhealthService.vim.VirtualCdromRemoteAtapiBackingInfo): vsanhealthService.vim.VirtualCdromRemoteAtapiBackingInfo;
         };
         VirtualCdrom: {
            (options?: vsanhealthService.vim.VirtualCdrom): vsanhealthService.vim.VirtualCdrom;
         };
         VirtualCdromIsoBackingOption: {
            (options?: vsanhealthService.vim.VirtualCdromIsoBackingOption): vsanhealthService.vim.VirtualCdromIsoBackingOption;
         };
         VirtualCdromPassthroughBackingOption: {
            (options?: vsanhealthService.vim.VirtualCdromPassthroughBackingOption): vsanhealthService.vim.VirtualCdromPassthroughBackingOption;
         };
         VirtualCdromRemotePassthroughBackingOption: {
            (options?: vsanhealthService.vim.VirtualCdromRemotePassthroughBackingOption): vsanhealthService.vim.VirtualCdromRemotePassthroughBackingOption;
         };
         VirtualCdromAtapiBackingOption: {
            (options?: vsanhealthService.vim.VirtualCdromAtapiBackingOption): vsanhealthService.vim.VirtualCdromAtapiBackingOption;
         };
         VirtualCdromRemoteAtapiBackingOption: {
            (options?: vsanhealthService.vim.VirtualCdromRemoteAtapiBackingOption): vsanhealthService.vim.VirtualCdromRemoteAtapiBackingOption;
         };
         VirtualCdromOption: {
            (options?: vsanhealthService.vim.VirtualCdromOption): vsanhealthService.vim.VirtualCdromOption;
         };
         VirtualController: {
            (options?: vsanhealthService.vim.VirtualController): vsanhealthService.vim.VirtualController;
         };
         VirtualControllerOption: {
            (options?: vsanhealthService.vim.VirtualControllerOption): vsanhealthService.vim.VirtualControllerOption;
         };
         VirtualDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceBackingInfo): vsanhealthService.vim.VirtualDeviceBackingInfo;
         };
         VirtualDeviceFileBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceFileBackingInfo): vsanhealthService.vim.VirtualDeviceFileBackingInfo;
         };
         VirtualDeviceDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceDeviceBackingInfo): vsanhealthService.vim.VirtualDeviceDeviceBackingInfo;
         };
         VirtualDeviceRemoteDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingInfo): vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingInfo;
         };
         VirtualDevicePipeBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDevicePipeBackingInfo): vsanhealthService.vim.VirtualDevicePipeBackingInfo;
         };
         VirtualDeviceURIBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceURIBackingInfo): vsanhealthService.vim.VirtualDeviceURIBackingInfo;
         };
         VirtualDeviceConnectInfoStatus: {
            "ok": string;
            "recoverableError": string;
            "unrecoverableError": string;
            "untried": string;
         };
         VirtualDeviceConnectInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceConnectInfo): vsanhealthService.vim.VirtualDeviceConnectInfo;
         };
         VirtualDeviceBusSlotInfo: {
            (options?: vsanhealthService.vim.VirtualDeviceBusSlotInfo): vsanhealthService.vim.VirtualDeviceBusSlotInfo;
         };
         VirtualDevicePciBusSlotInfo: {
            (options?: vsanhealthService.vim.VirtualDevicePciBusSlotInfo): vsanhealthService.vim.VirtualDevicePciBusSlotInfo;
         };
         VirtualDevice: {
            (options?: vsanhealthService.vim.VirtualDevice): vsanhealthService.vim.VirtualDevice;
         };
         ArrayOfVirtualDevice: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDevice): vsanhealthService.vim.ArrayOfVirtualDevice;
         };
         VirtualDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualDeviceBackingOption): vsanhealthService.vim.VirtualDeviceBackingOption;
         };
         ArrayOfVirtualDeviceBackingOption: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDeviceBackingOption): vsanhealthService.vim.ArrayOfVirtualDeviceBackingOption;
         };
         VirtualDeviceFileExtension: {
            "iso": string;
            "flp": string;
            "vmdk": string;
            "dsk": string;
            "rdm": string;
         };
         VirtualDeviceFileBackingOption: {
            (options?: vsanhealthService.vim.VirtualDeviceFileBackingOption): vsanhealthService.vim.VirtualDeviceFileBackingOption;
         };
         VirtualDeviceDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualDeviceDeviceBackingOption): vsanhealthService.vim.VirtualDeviceDeviceBackingOption;
         };
         VirtualDeviceRemoteDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingOption): vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingOption;
         };
         VirtualDevicePipeBackingOption: {
            (options?: vsanhealthService.vim.VirtualDevicePipeBackingOption): vsanhealthService.vim.VirtualDevicePipeBackingOption;
         };
         VirtualDeviceURIBackingOptionDirection: {
            "server": string;
            "client": string;
         };
         VirtualDeviceURIBackingOption: {
            (options?: vsanhealthService.vim.VirtualDeviceURIBackingOption): vsanhealthService.vim.VirtualDeviceURIBackingOption;
         };
         VirtualDeviceConnectOption: {
            (options?: vsanhealthService.vim.VirtualDeviceConnectOption): vsanhealthService.vim.VirtualDeviceConnectOption;
         };
         VirtualDeviceBusSlotOption: {
            (options?: vsanhealthService.vim.VirtualDeviceBusSlotOption): vsanhealthService.vim.VirtualDeviceBusSlotOption;
         };
         VirtualDeviceOption: {
            (options?: vsanhealthService.vim.VirtualDeviceOption): vsanhealthService.vim.VirtualDeviceOption;
         };
         ArrayOfVirtualDeviceOption: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDeviceOption): vsanhealthService.vim.ArrayOfVirtualDeviceOption;
         };
         VirtualDeviceConfigSpecOperation: {
            "add": string;
            "remove": string;
            "edit": string;
         };
         VirtualDeviceConfigSpecFileOperation: {
            "create": string;
            "destroy": string;
            "replace": string;
         };
         VirtualDeviceConfigSpecBackingSpec: {
            (options?: vsanhealthService.vim.VirtualDeviceConfigSpecBackingSpec): vsanhealthService.vim.VirtualDeviceConfigSpecBackingSpec;
         };
         VirtualDeviceConfigSpec: {
            (options?: vsanhealthService.vim.VirtualDeviceConfigSpec): vsanhealthService.vim.VirtualDeviceConfigSpec;
         };
         ArrayOfVirtualDeviceConfigSpec: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDeviceConfigSpec): vsanhealthService.vim.ArrayOfVirtualDeviceConfigSpec;
         };
         VirtualDiskDeltaDiskFormat: {
            "redoLogFormat": string;
            "nativeFormat": string;
            "seSparseFormat": string;
         };
         VirtualDiskDeltaDiskFormatVariant: {
            "vmfsSparseVariant": string;
            "vsanSparseVariant": string;
         };
         VirtualDiskSharing: {
            "sharingNone": string;
            "sharingMultiWriter": string;
         };
         VirtualDiskSparseVer1BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskSparseVer1BackingInfo): vsanhealthService.vim.VirtualDiskSparseVer1BackingInfo;
         };
         VirtualDiskSparseVer2BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskSparseVer2BackingInfo): vsanhealthService.vim.VirtualDiskSparseVer2BackingInfo;
         };
         VirtualDiskFlatVer1BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskFlatVer1BackingInfo): vsanhealthService.vim.VirtualDiskFlatVer1BackingInfo;
         };
         VirtualDiskFlatVer2BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskFlatVer2BackingInfo): vsanhealthService.vim.VirtualDiskFlatVer2BackingInfo;
         };
         VirtualDiskSeSparseBackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskSeSparseBackingInfo): vsanhealthService.vim.VirtualDiskSeSparseBackingInfo;
         };
         VirtualDiskRawDiskVer2BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskRawDiskVer2BackingInfo): vsanhealthService.vim.VirtualDiskRawDiskVer2BackingInfo;
         };
         VirtualDiskPartitionedRawDiskVer2BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskPartitionedRawDiskVer2BackingInfo): vsanhealthService.vim.VirtualDiskPartitionedRawDiskVer2BackingInfo;
         };
         VirtualDiskRawDiskMappingVer1BackingInfo: {
            (options?: vsanhealthService.vim.VirtualDiskRawDiskMappingVer1BackingInfo): vsanhealthService.vim.VirtualDiskRawDiskMappingVer1BackingInfo;
         };
         VirtualDiskVFlashCacheConfigInfoCacheConsistencyType: {
            "strong": string;
            "weak": string;
         };
         VirtualDiskVFlashCacheConfigInfoCacheMode: {
            "write_thru": string;
            "write_back": string;
         };
         VirtualDiskVFlashCacheConfigInfo: {
            (options?: vsanhealthService.vim.VirtualDiskVFlashCacheConfigInfo): vsanhealthService.vim.VirtualDiskVFlashCacheConfigInfo;
         };
         VirtualDisk: {
            (options?: vsanhealthService.vim.VirtualDisk): vsanhealthService.vim.VirtualDisk;
         };
         ArrayOfVirtualDisk: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDisk): vsanhealthService.vim.ArrayOfVirtualDisk;
         };
         VirtualDiskId: {
            (options?: vsanhealthService.vim.VirtualDiskId): vsanhealthService.vim.VirtualDiskId;
         };
         ArrayOfVirtualDiskId: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDiskId): vsanhealthService.vim.ArrayOfVirtualDiskId;
         };
         VirtualDiskMode: {
            "persistent": string;
            "nonpersistent": string;
            "undoable": string;
            "independent_persistent": string;
            "independent_nonpersistent": string;
            "append": string;
         };
         VirtualDiskCompatibilityMode: {
            "virtualMode": string;
            "physicalMode": string;
         };
         VirtualDiskSparseVer1BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskSparseVer1BackingOption): vsanhealthService.vim.VirtualDiskSparseVer1BackingOption;
         };
         VirtualDiskSparseVer2BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskSparseVer2BackingOption): vsanhealthService.vim.VirtualDiskSparseVer2BackingOption;
         };
         VirtualDiskFlatVer1BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskFlatVer1BackingOption): vsanhealthService.vim.VirtualDiskFlatVer1BackingOption;
         };
         VirtualDiskDeltaDiskFormatsSupported: {
            (options?: vsanhealthService.vim.VirtualDiskDeltaDiskFormatsSupported): vsanhealthService.vim.VirtualDiskDeltaDiskFormatsSupported;
         };
         ArrayOfVirtualDiskDeltaDiskFormatsSupported: {
            (options?: vsanhealthService.vim.ArrayOfVirtualDiskDeltaDiskFormatsSupported): vsanhealthService.vim.ArrayOfVirtualDiskDeltaDiskFormatsSupported;
         };
         VirtualDiskFlatVer2BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskFlatVer2BackingOption): vsanhealthService.vim.VirtualDiskFlatVer2BackingOption;
         };
         VirtualDiskSeSparseBackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskSeSparseBackingOption): vsanhealthService.vim.VirtualDiskSeSparseBackingOption;
         };
         VirtualDiskRawDiskVer2BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskRawDiskVer2BackingOption): vsanhealthService.vim.VirtualDiskRawDiskVer2BackingOption;
         };
         VirtualDiskPartitionedRawDiskVer2BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskPartitionedRawDiskVer2BackingOption): vsanhealthService.vim.VirtualDiskPartitionedRawDiskVer2BackingOption;
         };
         VirtualDiskRawDiskMappingVer1BackingOption: {
            (options?: vsanhealthService.vim.VirtualDiskRawDiskMappingVer1BackingOption): vsanhealthService.vim.VirtualDiskRawDiskMappingVer1BackingOption;
         };
         VirtualDiskOptionVFlashCacheConfigOption: {
            (options?: vsanhealthService.vim.VirtualDiskOptionVFlashCacheConfigOption): vsanhealthService.vim.VirtualDiskOptionVFlashCacheConfigOption;
         };
         VirtualDiskOption: {
            (options?: vsanhealthService.vim.VirtualDiskOption): vsanhealthService.vim.VirtualDiskOption;
         };
         VirtualDiskConfigSpec: {
            (options?: vsanhealthService.vim.VirtualDiskConfigSpec): vsanhealthService.vim.VirtualDiskConfigSpec;
         };
         VirtualE1000: {
            (options?: vsanhealthService.vim.VirtualE1000): vsanhealthService.vim.VirtualE1000;
         };
         VirtualE1000Option: {
            (options?: vsanhealthService.vim.VirtualE1000Option): vsanhealthService.vim.VirtualE1000Option;
         };
         VirtualE1000e: {
            (options?: vsanhealthService.vim.VirtualE1000e): vsanhealthService.vim.VirtualE1000e;
         };
         VirtualE1000eOption: {
            (options?: vsanhealthService.vim.VirtualE1000eOption): vsanhealthService.vim.VirtualE1000eOption;
         };
         VirtualEnsoniq1371: {
            (options?: vsanhealthService.vim.VirtualEnsoniq1371): vsanhealthService.vim.VirtualEnsoniq1371;
         };
         VirtualEnsoniq1371Option: {
            (options?: vsanhealthService.vim.VirtualEnsoniq1371Option): vsanhealthService.vim.VirtualEnsoniq1371Option;
         };
         VirtualEthernetCardNetworkBackingInfo: {
            (options?: vsanhealthService.vim.VirtualEthernetCardNetworkBackingInfo): vsanhealthService.vim.VirtualEthernetCardNetworkBackingInfo;
         };
         VirtualEthernetCardLegacyNetworkBackingInfo: {
            (options?: vsanhealthService.vim.VirtualEthernetCardLegacyNetworkBackingInfo): vsanhealthService.vim.VirtualEthernetCardLegacyNetworkBackingInfo;
         };
         VirtualEthernetCardDistributedVirtualPortBackingInfo: {
            (options?: vsanhealthService.vim.VirtualEthernetCardDistributedVirtualPortBackingInfo): vsanhealthService.vim.VirtualEthernetCardDistributedVirtualPortBackingInfo;
         };
         VirtualEthernetCardOpaqueNetworkBackingInfo: {
            (options?: vsanhealthService.vim.VirtualEthernetCardOpaqueNetworkBackingInfo): vsanhealthService.vim.VirtualEthernetCardOpaqueNetworkBackingInfo;
         };
         VirtualEthernetCardResourceAllocation: {
            (options?: vsanhealthService.vim.VirtualEthernetCardResourceAllocation): vsanhealthService.vim.VirtualEthernetCardResourceAllocation;
         };
         VirtualEthernetCard: {
            (options?: vsanhealthService.vim.VirtualEthernetCard): vsanhealthService.vim.VirtualEthernetCard;
         };
         VirtualEthernetCardNetworkBackingOption: {
            (options?: vsanhealthService.vim.VirtualEthernetCardNetworkBackingOption): vsanhealthService.vim.VirtualEthernetCardNetworkBackingOption;
         };
         VirtualEthernetCardOpaqueNetworkBackingOption: {
            (options?: vsanhealthService.vim.VirtualEthernetCardOpaqueNetworkBackingOption): vsanhealthService.vim.VirtualEthernetCardOpaqueNetworkBackingOption;
         };
         VirtualEthernetCardLegacyNetworkDeviceName: {
            "bridged": string;
            "nat": string;
            "hostonly": string;
         };
         VirtualEthernetCardLegacyNetworkBackingOption: {
            (options?: vsanhealthService.vim.VirtualEthernetCardLegacyNetworkBackingOption): vsanhealthService.vim.VirtualEthernetCardLegacyNetworkBackingOption;
         };
         VirtualEthernetCardDVPortBackingOption: {
            (options?: vsanhealthService.vim.VirtualEthernetCardDVPortBackingOption): vsanhealthService.vim.VirtualEthernetCardDVPortBackingOption;
         };
         VirtualEthernetCardMacType: {
            "manual": string;
            "generated": string;
            "assigned": string;
         };
         VirtualEthernetCardOption: {
            (options?: vsanhealthService.vim.VirtualEthernetCardOption): vsanhealthService.vim.VirtualEthernetCardOption;
         };
         VirtualFloppyImageBackingInfo: {
            (options?: vsanhealthService.vim.VirtualFloppyImageBackingInfo): vsanhealthService.vim.VirtualFloppyImageBackingInfo;
         };
         VirtualFloppyDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualFloppyDeviceBackingInfo): vsanhealthService.vim.VirtualFloppyDeviceBackingInfo;
         };
         VirtualFloppyRemoteDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualFloppyRemoteDeviceBackingInfo): vsanhealthService.vim.VirtualFloppyRemoteDeviceBackingInfo;
         };
         VirtualFloppy: {
            (options?: vsanhealthService.vim.VirtualFloppy): vsanhealthService.vim.VirtualFloppy;
         };
         VirtualFloppyImageBackingOption: {
            (options?: vsanhealthService.vim.VirtualFloppyImageBackingOption): vsanhealthService.vim.VirtualFloppyImageBackingOption;
         };
         VirtualFloppyDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualFloppyDeviceBackingOption): vsanhealthService.vim.VirtualFloppyDeviceBackingOption;
         };
         VirtualFloppyRemoteDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualFloppyRemoteDeviceBackingOption): vsanhealthService.vim.VirtualFloppyRemoteDeviceBackingOption;
         };
         VirtualFloppyOption: {
            (options?: vsanhealthService.vim.VirtualFloppyOption): vsanhealthService.vim.VirtualFloppyOption;
         };
         VirtualHdAudioCard: {
            (options?: vsanhealthService.vim.VirtualHdAudioCard): vsanhealthService.vim.VirtualHdAudioCard;
         };
         VirtualHdAudioCardOption: {
            (options?: vsanhealthService.vim.VirtualHdAudioCardOption): vsanhealthService.vim.VirtualHdAudioCardOption;
         };
         VirtualIDEController: {
            (options?: vsanhealthService.vim.VirtualIDEController): vsanhealthService.vim.VirtualIDEController;
         };
         VirtualIDEControllerOption: {
            (options?: vsanhealthService.vim.VirtualIDEControllerOption): vsanhealthService.vim.VirtualIDEControllerOption;
         };
         VirtualKeyboard: {
            (options?: vsanhealthService.vim.VirtualKeyboard): vsanhealthService.vim.VirtualKeyboard;
         };
         VirtualKeyboardOption: {
            (options?: vsanhealthService.vim.VirtualKeyboardOption): vsanhealthService.vim.VirtualKeyboardOption;
         };
         VirtualLsiLogicController: {
            (options?: vsanhealthService.vim.VirtualLsiLogicController): vsanhealthService.vim.VirtualLsiLogicController;
         };
         VirtualLsiLogicControllerOption: {
            (options?: vsanhealthService.vim.VirtualLsiLogicControllerOption): vsanhealthService.vim.VirtualLsiLogicControllerOption;
         };
         VirtualLsiLogicSASController: {
            (options?: vsanhealthService.vim.VirtualLsiLogicSASController): vsanhealthService.vim.VirtualLsiLogicSASController;
         };
         VirtualLsiLogicSASControllerOption: {
            (options?: vsanhealthService.vim.VirtualLsiLogicSASControllerOption): vsanhealthService.vim.VirtualLsiLogicSASControllerOption;
         };
         VirtualNVMEController: {
            (options?: vsanhealthService.vim.VirtualNVMEController): vsanhealthService.vim.VirtualNVMEController;
         };
         VirtualNVMEControllerOption: {
            (options?: vsanhealthService.vim.VirtualNVMEControllerOption): vsanhealthService.vim.VirtualNVMEControllerOption;
         };
         VirtualPCIController: {
            (options?: vsanhealthService.vim.VirtualPCIController): vsanhealthService.vim.VirtualPCIController;
         };
         VirtualPCIControllerOption: {
            (options?: vsanhealthService.vim.VirtualPCIControllerOption): vsanhealthService.vim.VirtualPCIControllerOption;
         };
         VirtualPCIPassthroughDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughDeviceBackingInfo): vsanhealthService.vim.VirtualPCIPassthroughDeviceBackingInfo;
         };
         VirtualPCIPassthroughPluginBackingInfo: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughPluginBackingInfo): vsanhealthService.vim.VirtualPCIPassthroughPluginBackingInfo;
         };
         VirtualPCIPassthroughVmiopBackingInfo: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughVmiopBackingInfo): vsanhealthService.vim.VirtualPCIPassthroughVmiopBackingInfo;
         };
         VirtualPCIPassthrough: {
            (options?: vsanhealthService.vim.VirtualPCIPassthrough): vsanhealthService.vim.VirtualPCIPassthrough;
         };
         VirtualPCIPassthroughDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughDeviceBackingOption): vsanhealthService.vim.VirtualPCIPassthroughDeviceBackingOption;
         };
         VirtualPCIPassthroughPluginBackingOption: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughPluginBackingOption): vsanhealthService.vim.VirtualPCIPassthroughPluginBackingOption;
         };
         VirtualPCIPassthroughVmiopBackingOption: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughVmiopBackingOption): vsanhealthService.vim.VirtualPCIPassthroughVmiopBackingOption;
         };
         VirtualPCIPassthroughOption: {
            (options?: vsanhealthService.vim.VirtualPCIPassthroughOption): vsanhealthService.vim.VirtualPCIPassthroughOption;
         };
         VirtualPCNet32: {
            (options?: vsanhealthService.vim.VirtualPCNet32): vsanhealthService.vim.VirtualPCNet32;
         };
         VirtualPCNet32Option: {
            (options?: vsanhealthService.vim.VirtualPCNet32Option): vsanhealthService.vim.VirtualPCNet32Option;
         };
         VirtualPS2Controller: {
            (options?: vsanhealthService.vim.VirtualPS2Controller): vsanhealthService.vim.VirtualPS2Controller;
         };
         VirtualPS2ControllerOption: {
            (options?: vsanhealthService.vim.VirtualPS2ControllerOption): vsanhealthService.vim.VirtualPS2ControllerOption;
         };
         VirtualParallelPortFileBackingInfo: {
            (options?: vsanhealthService.vim.VirtualParallelPortFileBackingInfo): vsanhealthService.vim.VirtualParallelPortFileBackingInfo;
         };
         VirtualParallelPortDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualParallelPortDeviceBackingInfo): vsanhealthService.vim.VirtualParallelPortDeviceBackingInfo;
         };
         VirtualParallelPort: {
            (options?: vsanhealthService.vim.VirtualParallelPort): vsanhealthService.vim.VirtualParallelPort;
         };
         VirtualParallelPortFileBackingOption: {
            (options?: vsanhealthService.vim.VirtualParallelPortFileBackingOption): vsanhealthService.vim.VirtualParallelPortFileBackingOption;
         };
         VirtualParallelPortDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualParallelPortDeviceBackingOption): vsanhealthService.vim.VirtualParallelPortDeviceBackingOption;
         };
         VirtualParallelPortOption: {
            (options?: vsanhealthService.vim.VirtualParallelPortOption): vsanhealthService.vim.VirtualParallelPortOption;
         };
         VirtualPointingDeviceDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualPointingDeviceDeviceBackingInfo): vsanhealthService.vim.VirtualPointingDeviceDeviceBackingInfo;
         };
         VirtualPointingDevice: {
            (options?: vsanhealthService.vim.VirtualPointingDevice): vsanhealthService.vim.VirtualPointingDevice;
         };
         VirtualPointingDeviceHostChoice: {
            "autodetect": string;
            "intellimouseExplorer": string;
            "intellimousePs2": string;
            "logitechMouseman": string;
            "microsoft_serial": string;
            "mouseSystems": string;
            "mousemanSerial": string;
            "ps2": string;
         };
         VirtualPointingDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualPointingDeviceBackingOption): vsanhealthService.vim.VirtualPointingDeviceBackingOption;
         };
         VirtualPointingDeviceOption: {
            (options?: vsanhealthService.vim.VirtualPointingDeviceOption): vsanhealthService.vim.VirtualPointingDeviceOption;
         };
         VirtualSATAController: {
            (options?: vsanhealthService.vim.VirtualSATAController): vsanhealthService.vim.VirtualSATAController;
         };
         VirtualSATAControllerOption: {
            (options?: vsanhealthService.vim.VirtualSATAControllerOption): vsanhealthService.vim.VirtualSATAControllerOption;
         };
         VirtualSCSISharing: {
            "noSharing": string;
            "virtualSharing": string;
            "physicalSharing": string;
         };
         ArrayOfVirtualSCSISharing: {
            (options?: vsanhealthService.vim.ArrayOfVirtualSCSISharing): vsanhealthService.vim.ArrayOfVirtualSCSISharing;
         };
         VirtualSCSIController: {
            (options?: vsanhealthService.vim.VirtualSCSIController): vsanhealthService.vim.VirtualSCSIController;
         };
         VirtualSCSIControllerOption: {
            (options?: vsanhealthService.vim.VirtualSCSIControllerOption): vsanhealthService.vim.VirtualSCSIControllerOption;
         };
         VirtualSCSIPassthroughDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSCSIPassthroughDeviceBackingInfo): vsanhealthService.vim.VirtualSCSIPassthroughDeviceBackingInfo;
         };
         VirtualSCSIPassthrough: {
            (options?: vsanhealthService.vim.VirtualSCSIPassthrough): vsanhealthService.vim.VirtualSCSIPassthrough;
         };
         VirtualSCSIPassthroughDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualSCSIPassthroughDeviceBackingOption): vsanhealthService.vim.VirtualSCSIPassthroughDeviceBackingOption;
         };
         VirtualSCSIPassthroughOption: {
            (options?: vsanhealthService.vim.VirtualSCSIPassthroughOption): vsanhealthService.vim.VirtualSCSIPassthroughOption;
         };
         VirtualSIOController: {
            (options?: vsanhealthService.vim.VirtualSIOController): vsanhealthService.vim.VirtualSIOController;
         };
         VirtualSIOControllerOption: {
            (options?: vsanhealthService.vim.VirtualSIOControllerOption): vsanhealthService.vim.VirtualSIOControllerOption;
         };
         VirtualSerialPortFileBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSerialPortFileBackingInfo): vsanhealthService.vim.VirtualSerialPortFileBackingInfo;
         };
         VirtualSerialPortDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSerialPortDeviceBackingInfo): vsanhealthService.vim.VirtualSerialPortDeviceBackingInfo;
         };
         VirtualSerialPortPipeBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSerialPortPipeBackingInfo): vsanhealthService.vim.VirtualSerialPortPipeBackingInfo;
         };
         VirtualSerialPortURIBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSerialPortURIBackingInfo): vsanhealthService.vim.VirtualSerialPortURIBackingInfo;
         };
         VirtualSerialPortThinPrintBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSerialPortThinPrintBackingInfo): vsanhealthService.vim.VirtualSerialPortThinPrintBackingInfo;
         };
         VirtualSerialPort: {
            (options?: vsanhealthService.vim.VirtualSerialPort): vsanhealthService.vim.VirtualSerialPort;
         };
         VirtualSerialPortEndPoint: {
            "client": string;
            "server": string;
         };
         VirtualSerialPortFileBackingOption: {
            (options?: vsanhealthService.vim.VirtualSerialPortFileBackingOption): vsanhealthService.vim.VirtualSerialPortFileBackingOption;
         };
         VirtualSerialPortDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualSerialPortDeviceBackingOption): vsanhealthService.vim.VirtualSerialPortDeviceBackingOption;
         };
         VirtualSerialPortPipeBackingOption: {
            (options?: vsanhealthService.vim.VirtualSerialPortPipeBackingOption): vsanhealthService.vim.VirtualSerialPortPipeBackingOption;
         };
         VirtualSerialPortURIBackingOption: {
            (options?: vsanhealthService.vim.VirtualSerialPortURIBackingOption): vsanhealthService.vim.VirtualSerialPortURIBackingOption;
         };
         VirtualSerialPortThinPrintBackingOption: {
            (options?: vsanhealthService.vim.VirtualSerialPortThinPrintBackingOption): vsanhealthService.vim.VirtualSerialPortThinPrintBackingOption;
         };
         VirtualSerialPortOption: {
            (options?: vsanhealthService.vim.VirtualSerialPortOption): vsanhealthService.vim.VirtualSerialPortOption;
         };
         VirtualSoundBlaster16: {
            (options?: vsanhealthService.vim.VirtualSoundBlaster16): vsanhealthService.vim.VirtualSoundBlaster16;
         };
         VirtualSoundBlaster16Option: {
            (options?: vsanhealthService.vim.VirtualSoundBlaster16Option): vsanhealthService.vim.VirtualSoundBlaster16Option;
         };
         VirtualSoundCardDeviceBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSoundCardDeviceBackingInfo): vsanhealthService.vim.VirtualSoundCardDeviceBackingInfo;
         };
         VirtualSoundCard: {
            (options?: vsanhealthService.vim.VirtualSoundCard): vsanhealthService.vim.VirtualSoundCard;
         };
         VirtualSoundCardDeviceBackingOption: {
            (options?: vsanhealthService.vim.VirtualSoundCardDeviceBackingOption): vsanhealthService.vim.VirtualSoundCardDeviceBackingOption;
         };
         VirtualSoundCardOption: {
            (options?: vsanhealthService.vim.VirtualSoundCardOption): vsanhealthService.vim.VirtualSoundCardOption;
         };
         VirtualSriovEthernetCardSriovBackingInfo: {
            (options?: vsanhealthService.vim.VirtualSriovEthernetCardSriovBackingInfo): vsanhealthService.vim.VirtualSriovEthernetCardSriovBackingInfo;
         };
         VirtualSriovEthernetCard: {
            (options?: vsanhealthService.vim.VirtualSriovEthernetCard): vsanhealthService.vim.VirtualSriovEthernetCard;
         };
         VirtualSriovEthernetCardSriovBackingOption: {
            (options?: vsanhealthService.vim.VirtualSriovEthernetCardSriovBackingOption): vsanhealthService.vim.VirtualSriovEthernetCardSriovBackingOption;
         };
         VirtualSriovEthernetCardOption: {
            (options?: vsanhealthService.vim.VirtualSriovEthernetCardOption): vsanhealthService.vim.VirtualSriovEthernetCardOption;
         };
         VirtualUSBUSBBackingInfo: {
            (options?: vsanhealthService.vim.VirtualUSBUSBBackingInfo): vsanhealthService.vim.VirtualUSBUSBBackingInfo;
         };
         VirtualUSBRemoteHostBackingInfo: {
            (options?: vsanhealthService.vim.VirtualUSBRemoteHostBackingInfo): vsanhealthService.vim.VirtualUSBRemoteHostBackingInfo;
         };
         VirtualUSBRemoteClientBackingInfo: {
            (options?: vsanhealthService.vim.VirtualUSBRemoteClientBackingInfo): vsanhealthService.vim.VirtualUSBRemoteClientBackingInfo;
         };
         VirtualUSB: {
            (options?: vsanhealthService.vim.VirtualUSB): vsanhealthService.vim.VirtualUSB;
         };
         VirtualUSBControllerPciBusSlotInfo: {
            (options?: vsanhealthService.vim.VirtualUSBControllerPciBusSlotInfo): vsanhealthService.vim.VirtualUSBControllerPciBusSlotInfo;
         };
         VirtualUSBController: {
            (options?: vsanhealthService.vim.VirtualUSBController): vsanhealthService.vim.VirtualUSBController;
         };
         VirtualUSBControllerOption: {
            (options?: vsanhealthService.vim.VirtualUSBControllerOption): vsanhealthService.vim.VirtualUSBControllerOption;
         };
         VirtualUSBUSBBackingOption: {
            (options?: vsanhealthService.vim.VirtualUSBUSBBackingOption): vsanhealthService.vim.VirtualUSBUSBBackingOption;
         };
         VirtualUSBRemoteHostBackingOption: {
            (options?: vsanhealthService.vim.VirtualUSBRemoteHostBackingOption): vsanhealthService.vim.VirtualUSBRemoteHostBackingOption;
         };
         VirtualUSBRemoteClientBackingOption: {
            (options?: vsanhealthService.vim.VirtualUSBRemoteClientBackingOption): vsanhealthService.vim.VirtualUSBRemoteClientBackingOption;
         };
         VirtualUSBOption: {
            (options?: vsanhealthService.vim.VirtualUSBOption): vsanhealthService.vim.VirtualUSBOption;
         };
         VirtualUSBXHCIController: {
            (options?: vsanhealthService.vim.VirtualUSBXHCIController): vsanhealthService.vim.VirtualUSBXHCIController;
         };
         VirtualUSBXHCIControllerOption: {
            (options?: vsanhealthService.vim.VirtualUSBXHCIControllerOption): vsanhealthService.vim.VirtualUSBXHCIControllerOption;
         };
         VirtualMachineVMCIDeviceAction: {
            "allow": string;
            "deny": string;
         };
         VirtualMachineVMCIDeviceProtocol: {
            "hypervisor": string;
            "doorbell": string;
            "queuepair": string;
            "datagram": string;
            "stream": string;
            "anyProtocol": string;
         };
         VirtualMachineVMCIDeviceDirection: {
            "guest": string;
            "host": string;
            "anyDirection": string;
         };
         VirtualMachineVMCIDeviceFilterSpec: {
            (options?: vsanhealthService.vim.VirtualMachineVMCIDeviceFilterSpec): vsanhealthService.vim.VirtualMachineVMCIDeviceFilterSpec;
         };
         ArrayOfVirtualMachineVMCIDeviceFilterSpec: {
            (options?: vsanhealthService.vim.ArrayOfVirtualMachineVMCIDeviceFilterSpec): vsanhealthService.vim.ArrayOfVirtualMachineVMCIDeviceFilterSpec;
         };
         VirtualMachineVMCIDeviceFilterInfo: {
            (options?: vsanhealthService.vim.VirtualMachineVMCIDeviceFilterInfo): vsanhealthService.vim.VirtualMachineVMCIDeviceFilterInfo;
         };
         VirtualMachineVMCIDevice: {
            (options?: vsanhealthService.vim.VirtualMachineVMCIDevice): vsanhealthService.vim.VirtualMachineVMCIDevice;
         };
         VirtualMachineVMCIDeviceOptionFilterSpecOption: {
            (options?: vsanhealthService.vim.VirtualMachineVMCIDeviceOptionFilterSpecOption): vsanhealthService.vim.VirtualMachineVMCIDeviceOptionFilterSpecOption;
         };
         VirtualMachineVMCIDeviceOption: {
            (options?: vsanhealthService.vim.VirtualMachineVMCIDeviceOption): vsanhealthService.vim.VirtualMachineVMCIDeviceOption;
         };
         VirtualMachineVMIROM: {
            (options?: vsanhealthService.vim.VirtualMachineVMIROM): vsanhealthService.vim.VirtualMachineVMIROM;
         };
         VirtualVMIROMOption: {
            (options?: vsanhealthService.vim.VirtualVMIROMOption): vsanhealthService.vim.VirtualVMIROMOption;
         };
         VirtualMachineVideoCardUse3dRenderer: {
            "automatic": string;
            "software": string;
            "hardware": string;
         };
         VirtualMachineVideoCard: {
            (options?: vsanhealthService.vim.VirtualMachineVideoCard): vsanhealthService.vim.VirtualMachineVideoCard;
         };
         VirtualVideoCardOption: {
            (options?: vsanhealthService.vim.VirtualVideoCardOption): vsanhealthService.vim.VirtualVideoCardOption;
         };
         VirtualVmxnet: {
            (options?: vsanhealthService.vim.VirtualVmxnet): vsanhealthService.vim.VirtualVmxnet;
         };
         VirtualVmxnet2: {
            (options?: vsanhealthService.vim.VirtualVmxnet2): vsanhealthService.vim.VirtualVmxnet2;
         };
         VirtualVmxnet2Option: {
            (options?: vsanhealthService.vim.VirtualVmxnet2Option): vsanhealthService.vim.VirtualVmxnet2Option;
         };
         VirtualVmxnet3: {
            (options?: vsanhealthService.vim.VirtualVmxnet3): vsanhealthService.vim.VirtualVmxnet3;
         };
         VirtualVmxnet3Option: {
            (options?: vsanhealthService.vim.VirtualVmxnet3Option): vsanhealthService.vim.VirtualVmxnet3Option;
         };
         VirtualVmxnet3Vrdma: {
            (options?: vsanhealthService.vim.VirtualVmxnet3Vrdma): vsanhealthService.vim.VirtualVmxnet3Vrdma;
         };
         VirtualVmxnet3VrdmaOption: {
            (options?: vsanhealthService.vim.VirtualVmxnet3VrdmaOption): vsanhealthService.vim.VirtualVmxnet3VrdmaOption;
         };
         VirtualVmxnetOption: {
            (options?: vsanhealthService.vim.VirtualVmxnetOption): vsanhealthService.vim.VirtualVmxnetOption;
         };
         GuestAuthSubject: {
            (options?: vsanhealthService.vim.GuestAuthSubject): vsanhealthService.vim.GuestAuthSubject;
         };
         ArrayOfGuestAuthSubject: {
            (options?: vsanhealthService.vim.ArrayOfGuestAuthSubject): vsanhealthService.vim.ArrayOfGuestAuthSubject;
         };
         GuestAuthAnySubject: {
            (options?: vsanhealthService.vim.GuestAuthAnySubject): vsanhealthService.vim.GuestAuthAnySubject;
         };
         GuestAuthNamedSubject: {
            (options?: vsanhealthService.vim.GuestAuthNamedSubject): vsanhealthService.vim.GuestAuthNamedSubject;
         };
         GuestAuthAliasInfo: {
            (options?: vsanhealthService.vim.GuestAuthAliasInfo): vsanhealthService.vim.GuestAuthAliasInfo;
         };
         ArrayOfGuestAuthAliasInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestAuthAliasInfo): vsanhealthService.vim.ArrayOfGuestAuthAliasInfo;
         };
         GuestAliases: {
            (options?: vsanhealthService.vim.GuestAliases): vsanhealthService.vim.GuestAliases;
         };
         ArrayOfGuestAliases: {
            (options?: vsanhealthService.vim.ArrayOfGuestAliases): vsanhealthService.vim.ArrayOfGuestAliases;
         };
         GuestMappedAliases: {
            (options?: vsanhealthService.vim.GuestMappedAliases): vsanhealthService.vim.GuestMappedAliases;
         };
         ArrayOfGuestMappedAliases: {
            (options?: vsanhealthService.vim.ArrayOfGuestMappedAliases): vsanhealthService.vim.ArrayOfGuestMappedAliases;
         };
         GuestFileAttributes: {
            (options?: vsanhealthService.vim.GuestFileAttributes): vsanhealthService.vim.GuestFileAttributes;
         };
         GuestPosixFileAttributes: {
            (options?: vsanhealthService.vim.GuestPosixFileAttributes): vsanhealthService.vim.GuestPosixFileAttributes;
         };
         GuestWindowsFileAttributes: {
            (options?: vsanhealthService.vim.GuestWindowsFileAttributes): vsanhealthService.vim.GuestWindowsFileAttributes;
         };
         GuestFileType: {
            "file": string;
            "directory": string;
            "symlink": string;
         };
         GuestFileInfo: {
            (options?: vsanhealthService.vim.GuestFileInfo): vsanhealthService.vim.GuestFileInfo;
         };
         ArrayOfGuestFileInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestFileInfo): vsanhealthService.vim.ArrayOfGuestFileInfo;
         };
         GuestListFileInfo: {
            (options?: vsanhealthService.vim.GuestListFileInfo): vsanhealthService.vim.GuestListFileInfo;
         };
         FileTransferInformation: {
            (options?: vsanhealthService.vim.FileTransferInformation): vsanhealthService.vim.FileTransferInformation;
         };
         GuestAuthentication: {
            (options?: vsanhealthService.vim.GuestAuthentication): vsanhealthService.vim.GuestAuthentication;
         };
         NamePasswordAuthentication: {
            (options?: vsanhealthService.vim.NamePasswordAuthentication): vsanhealthService.vim.NamePasswordAuthentication;
         };
         GuestProgramSpec: {
            (options?: vsanhealthService.vim.GuestProgramSpec): vsanhealthService.vim.GuestProgramSpec;
         };
         GuestWindowsProgramSpec: {
            (options?: vsanhealthService.vim.GuestWindowsProgramSpec): vsanhealthService.vim.GuestWindowsProgramSpec;
         };
         GuestProcessInfo: {
            (options?: vsanhealthService.vim.GuestProcessInfo): vsanhealthService.vim.GuestProcessInfo;
         };
         ArrayOfGuestProcessInfo: {
            (options?: vsanhealthService.vim.ArrayOfGuestProcessInfo): vsanhealthService.vim.ArrayOfGuestProcessInfo;
         };
         SAMLTokenAuthentication: {
            (options?: vsanhealthService.vim.SAMLTokenAuthentication): vsanhealthService.vim.SAMLTokenAuthentication;
         };
         SSPIAuthentication: {
            (options?: vsanhealthService.vim.SSPIAuthentication): vsanhealthService.vim.SSPIAuthentication;
         };
         TicketedSessionAuthentication: {
            (options?: vsanhealthService.vim.TicketedSessionAuthentication): vsanhealthService.vim.TicketedSessionAuthentication;
         };
         GuestRegKeyWowSpec: {
            "WOWNative": string;
            "WOW32": string;
            "WOW64": string;
         };
         GuestRegKeyNameSpec: {
            (options?: vsanhealthService.vim.GuestRegKeyNameSpec): vsanhealthService.vim.GuestRegKeyNameSpec;
         };
         GuestRegKeySpec: {
            (options?: vsanhealthService.vim.GuestRegKeySpec): vsanhealthService.vim.GuestRegKeySpec;
         };
         GuestRegKeyRecordSpec: {
            (options?: vsanhealthService.vim.GuestRegKeyRecordSpec): vsanhealthService.vim.GuestRegKeyRecordSpec;
         };
         ArrayOfGuestRegKeyRecordSpec: {
            (options?: vsanhealthService.vim.ArrayOfGuestRegKeyRecordSpec): vsanhealthService.vim.ArrayOfGuestRegKeyRecordSpec;
         };
         GuestRegValueNameSpec: {
            (options?: vsanhealthService.vim.GuestRegValueNameSpec): vsanhealthService.vim.GuestRegValueNameSpec;
         };
         GuestRegValueDataSpec: {
            (options?: vsanhealthService.vim.GuestRegValueDataSpec): vsanhealthService.vim.GuestRegValueDataSpec;
         };
         GuestRegValueDwordSpec: {
            (options?: vsanhealthService.vim.GuestRegValueDwordSpec): vsanhealthService.vim.GuestRegValueDwordSpec;
         };
         GuestRegValueQwordSpec: {
            (options?: vsanhealthService.vim.GuestRegValueQwordSpec): vsanhealthService.vim.GuestRegValueQwordSpec;
         };
         GuestRegValueStringSpec: {
            (options?: vsanhealthService.vim.GuestRegValueStringSpec): vsanhealthService.vim.GuestRegValueStringSpec;
         };
         GuestRegValueExpandStringSpec: {
            (options?: vsanhealthService.vim.GuestRegValueExpandStringSpec): vsanhealthService.vim.GuestRegValueExpandStringSpec;
         };
         GuestRegValueMultiStringSpec: {
            (options?: vsanhealthService.vim.GuestRegValueMultiStringSpec): vsanhealthService.vim.GuestRegValueMultiStringSpec;
         };
         GuestRegValueBinarySpec: {
            (options?: vsanhealthService.vim.GuestRegValueBinarySpec): vsanhealthService.vim.GuestRegValueBinarySpec;
         };
         GuestRegValueSpec: {
            (options?: vsanhealthService.vim.GuestRegValueSpec): vsanhealthService.vim.GuestRegValueSpec;
         };
         ArrayOfGuestRegValueSpec: {
            (options?: vsanhealthService.vim.ArrayOfGuestRegValueSpec): vsanhealthService.vim.ArrayOfGuestRegValueSpec;
         };
         DeviceGroupId: {
            (options?: vsanhealthService.vim.DeviceGroupId): vsanhealthService.vim.DeviceGroupId;
         };
         FaultDomainId: {
            (options?: vsanhealthService.vim.FaultDomainId): vsanhealthService.vim.FaultDomainId;
         };
         ReplicationGroupId: {
            (options?: vsanhealthService.vim.ReplicationGroupId): vsanhealthService.vim.ReplicationGroupId;
         };
         ReplicationSpec: {
            (options?: vsanhealthService.vim.ReplicationSpec): vsanhealthService.vim.ReplicationSpec;
         };
         VsanClusterConfigInfoHostDefaultInfo: {
            (options?: vsanhealthService.vim.VsanClusterConfigInfoHostDefaultInfo): vsanhealthService.vim.VsanClusterConfigInfoHostDefaultInfo;
         };
         VsanClusterConfigInfo: {
            (options?: vsanhealthService.vim.VsanClusterConfigInfo): vsanhealthService.vim.VsanClusterConfigInfo;
         };
         VsanHostClusterStatusStateCompletionEstimate: {
            (options?: vsanhealthService.vim.VsanHostClusterStatusStateCompletionEstimate): vsanhealthService.vim.VsanHostClusterStatusStateCompletionEstimate;
         };
         VsanHostClusterStatusState: {
            (options?: vsanhealthService.vim.VsanHostClusterStatusState): vsanhealthService.vim.VsanHostClusterStatusState;
         };
         VsanHostClusterStatus: {
            (options?: vsanhealthService.vim.VsanHostClusterStatus): vsanhealthService.vim.VsanHostClusterStatus;
         };
         VsanHostConfigInfoStorageInfo: {
            (options?: vsanhealthService.vim.VsanHostConfigInfoStorageInfo): vsanhealthService.vim.VsanHostConfigInfoStorageInfo;
         };
         VsanHostConfigInfoClusterInfo: {
            (options?: vsanhealthService.vim.VsanHostConfigInfoClusterInfo): vsanhealthService.vim.VsanHostConfigInfoClusterInfo;
         };
         VsanHostConfigInfoNetworkInfoPortConfig: {
            (options?: vsanhealthService.vim.VsanHostConfigInfoNetworkInfoPortConfig): vsanhealthService.vim.VsanHostConfigInfoNetworkInfoPortConfig;
         };
         ArrayOfVsanHostConfigInfoNetworkInfoPortConfig: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostConfigInfoNetworkInfoPortConfig): vsanhealthService.vim.ArrayOfVsanHostConfigInfoNetworkInfoPortConfig;
         };
         VsanHostConfigInfoNetworkInfo: {
            (options?: vsanhealthService.vim.VsanHostConfigInfoNetworkInfo): vsanhealthService.vim.VsanHostConfigInfoNetworkInfo;
         };
         VsanHostFaultDomainInfo: {
            (options?: vsanhealthService.vim.VsanHostFaultDomainInfo): vsanhealthService.vim.VsanHostFaultDomainInfo;
         };
         VsanHostConfigInfo: {
            (options?: vsanhealthService.vim.VsanHostConfigInfo): vsanhealthService.vim.VsanHostConfigInfo;
         };
         ArrayOfVsanHostConfigInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostConfigInfo): vsanhealthService.vim.ArrayOfVsanHostConfigInfo;
         };
         VsanHostDecommissionModeObjectAction: {
            "noAction": string;
            "ensureObjectAccessibility": string;
            "evacuateAllData": string;
         };
         VsanHostDecommissionMode: {
            (options?: vsanhealthService.vim.VsanHostDecommissionMode): vsanhealthService.vim.VsanHostDecommissionMode;
         };
         VsanHostDiskMapInfo: {
            (options?: vsanhealthService.vim.VsanHostDiskMapInfo): vsanhealthService.vim.VsanHostDiskMapInfo;
         };
         ArrayOfVsanHostDiskMapInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostDiskMapInfo): vsanhealthService.vim.ArrayOfVsanHostDiskMapInfo;
         };
         VsanHostDiskMapResult: {
            (options?: vsanhealthService.vim.VsanHostDiskMapResult): vsanhealthService.vim.VsanHostDiskMapResult;
         };
         ArrayOfVsanHostDiskMapResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostDiskMapResult): vsanhealthService.vim.ArrayOfVsanHostDiskMapResult;
         };
         VsanHostDiskMapping: {
            (options?: vsanhealthService.vim.VsanHostDiskMapping): vsanhealthService.vim.VsanHostDiskMapping;
         };
         ArrayOfVsanHostDiskMapping: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostDiskMapping): vsanhealthService.vim.ArrayOfVsanHostDiskMapping;
         };
         VsanHostDiskResultState: {
            "inUse": string;
            "eligible": string;
            "ineligible": string;
         };
         VsanHostDiskResult: {
            (options?: vsanhealthService.vim.VsanHostDiskResult): vsanhealthService.vim.VsanHostDiskResult;
         };
         ArrayOfVsanHostDiskResult: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostDiskResult): vsanhealthService.vim.ArrayOfVsanHostDiskResult;
         };
         VsanHostHealthState: {
            "unknown": string;
            "healthy": string;
            "unhealthy": string;
         };
         VsanHostIpConfig: {
            (options?: vsanhealthService.vim.VsanHostIpConfig): vsanhealthService.vim.VsanHostIpConfig;
         };
         VsanHostMembershipInfo: {
            (options?: vsanhealthService.vim.VsanHostMembershipInfo): vsanhealthService.vim.VsanHostMembershipInfo;
         };
         ArrayOfVsanHostMembershipInfo: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostMembershipInfo): vsanhealthService.vim.ArrayOfVsanHostMembershipInfo;
         };
         VsanHostNodeState: {
            "error": string;
            "disabled": string;
            "agent": string;
            "master": string;
            "backup": string;
            "starting": string;
            "stopping": string;
            "enteringMaintenanceMode": string;
            "exitingMaintenanceMode": string;
            "decommissioning": string;
         };
         VsanHostVsanDiskInfo: {
            (options?: vsanhealthService.vim.VsanHostVsanDiskInfo): vsanhealthService.vim.VsanHostVsanDiskInfo;
         };
         VsanDiskIssueType: {
            "nonExist": string;
            "stampMismatch": string;
            "unknown": string;
         };
         VsanHostRuntimeInfoDiskIssue: {
            (options?: vsanhealthService.vim.VsanHostRuntimeInfoDiskIssue): vsanhealthService.vim.VsanHostRuntimeInfoDiskIssue;
         };
         ArrayOfVsanHostRuntimeInfoDiskIssue: {
            (options?: vsanhealthService.vim.ArrayOfVsanHostRuntimeInfoDiskIssue): vsanhealthService.vim.ArrayOfVsanHostRuntimeInfoDiskIssue;
         };
         VsanHostRuntimeInfo: {
            (options?: vsanhealthService.vim.VsanHostRuntimeInfo): vsanhealthService.vim.VsanHostRuntimeInfo;
         };
         BaseConfigInfoBackingInfo: {
            (options?: vsanhealthService.vim.BaseConfigInfoBackingInfo): vsanhealthService.vim.BaseConfigInfoBackingInfo;
         };
         BaseConfigInfoFileBackingInfo: {
            (options?: vsanhealthService.vim.BaseConfigInfoFileBackingInfo): vsanhealthService.vim.BaseConfigInfoFileBackingInfo;
         };
         BaseConfigInfoDiskFileBackingInfoProvisioningType: {
            "thin": string;
            "eagerZeroedThick": string;
            "lazyZeroedThick": string;
         };
         BaseConfigInfoDiskFileBackingInfo: {
            (options?: vsanhealthService.vim.BaseConfigInfoDiskFileBackingInfo): vsanhealthService.vim.BaseConfigInfoDiskFileBackingInfo;
         };
         BaseConfigInfoRawDiskMappingBackingInfo: {
            (options?: vsanhealthService.vim.BaseConfigInfoRawDiskMappingBackingInfo): vsanhealthService.vim.BaseConfigInfoRawDiskMappingBackingInfo;
         };
         BaseConfigInfo: {
            (options?: vsanhealthService.vim.BaseConfigInfo): vsanhealthService.vim.BaseConfigInfo;
         };
         VslmCloneSpec: {
            (options?: vsanhealthService.vim.VslmCloneSpec): vsanhealthService.vim.VslmCloneSpec;
         };
         VslmCreateSpecBackingSpec: {
            (options?: vsanhealthService.vim.VslmCreateSpecBackingSpec): vsanhealthService.vim.VslmCreateSpecBackingSpec;
         };
         VslmCreateSpecDiskFileBackingSpec: {
            (options?: vsanhealthService.vim.VslmCreateSpecDiskFileBackingSpec): vsanhealthService.vim.VslmCreateSpecDiskFileBackingSpec;
         };
         VslmCreateSpecRawDiskMappingBackingSpec: {
            (options?: vsanhealthService.vim.VslmCreateSpecRawDiskMappingBackingSpec): vsanhealthService.vim.VslmCreateSpecRawDiskMappingBackingSpec;
         };
         VslmCreateSpec: {
            (options?: vsanhealthService.vim.VslmCreateSpec): vsanhealthService.vim.VslmCreateSpec;
         };
         ID: {
            (options?: vsanhealthService.vim.ID): vsanhealthService.vim.ID;
         };
         ArrayOfID: {
            (options?: vsanhealthService.vim.ArrayOfID): vsanhealthService.vim.ArrayOfID;
         };
         VslmMigrateSpec: {
            (options?: vsanhealthService.vim.VslmMigrateSpec): vsanhealthService.vim.VslmMigrateSpec;
         };
         VslmRelocateSpec: {
            (options?: vsanhealthService.vim.VslmRelocateSpec): vsanhealthService.vim.VslmRelocateSpec;
         };
         VStorageObjectStateInfo: {
            (options?: vsanhealthService.vim.VStorageObjectStateInfo): vsanhealthService.vim.VStorageObjectStateInfo;
         };
         VslmTagEntry: {
            (options?: vsanhealthService.vim.VslmTagEntry): vsanhealthService.vim.VslmTagEntry;
         };
         ArrayOfVslmTagEntry: {
            (options?: vsanhealthService.vim.ArrayOfVslmTagEntry): vsanhealthService.vim.ArrayOfVslmTagEntry;
         };
         VStorageObjectConsumptionType: {
            "disk": string;
         };
         VStorageObjectConfigInfo: {
            (options?: vsanhealthService.vim.VStorageObjectConfigInfo): vsanhealthService.vim.VStorageObjectConfigInfo;
         };
         VStorageObject: {
            (options?: vsanhealthService.vim.VStorageObject): vsanhealthService.vim.VStorageObject;
         };
         DynamicArray: {
            (options?: vsanhealthService.vim.DynamicArray): vsanhealthService.vim.DynamicArray;
         };
         DynamicData: {
            (options?: vsanhealthService.vim.DynamicData): vsanhealthService.vim.DynamicData;
         };
         ArrayOfDynamicData: {
            (options?: vsanhealthService.vim.ArrayOfDynamicData): vsanhealthService.vim.ArrayOfDynamicData;
         };
         DynamicProperty: {
            (options?: vsanhealthService.vim.DynamicProperty): vsanhealthService.vim.DynamicProperty;
         };
         ArrayOfDynamicProperty: {
            (options?: vsanhealthService.vim.ArrayOfDynamicProperty): vsanhealthService.vim.ArrayOfDynamicProperty;
         };
         KeyAnyValue: {
            (options?: vsanhealthService.vim.KeyAnyValue): vsanhealthService.vim.KeyAnyValue;
         };
         ArrayOfKeyAnyValue: {
            (options?: vsanhealthService.vim.ArrayOfKeyAnyValue): vsanhealthService.vim.ArrayOfKeyAnyValue;
         };
         LocalizableMessage: {
            (options?: vsanhealthService.vim.LocalizableMessage): vsanhealthService.vim.LocalizableMessage;
         };
         ArrayOfLocalizableMessage: {
            (options?: vsanhealthService.vim.ArrayOfLocalizableMessage): vsanhealthService.vim.ArrayOfLocalizableMessage;
         };
         LocalizedMethodFault: {
            (options?: vsanhealthService.vim.LocalizedMethodFault): vsanhealthService.vim.LocalizedMethodFault;
         };
         MethodFault: {
            (options?: vsanhealthService.vim.MethodFault): vsanhealthService.vim.MethodFault;
         };
         ArrayOfMethodFault: {
            (options?: vsanhealthService.vim.ArrayOfMethodFault): vsanhealthService.vim.ArrayOfMethodFault;
         };
         RuntimeFault: {
            (options?: vsanhealthService.vim.RuntimeFault): vsanhealthService.vim.RuntimeFault;
         };
         HostCommunication: {
            (options?: vsanhealthService.vim.HostCommunication): vsanhealthService.vim.HostCommunication;
         };
         HostNotConnected: {
            (options?: vsanhealthService.vim.HostNotConnected): vsanhealthService.vim.HostNotConnected;
         };
         HostNotReachable: {
            (options?: vsanhealthService.vim.HostNotReachable): vsanhealthService.vim.HostNotReachable;
         };
         InvalidArgument: {
            (options?: vsanhealthService.vim.InvalidArgument): vsanhealthService.vim.InvalidArgument;
         };
         InvalidRequest: {
            (options?: vsanhealthService.vim.InvalidRequest): vsanhealthService.vim.InvalidRequest;
         };
         InvalidType: {
            (options?: vsanhealthService.vim.InvalidType): vsanhealthService.vim.InvalidType;
         };
         ManagedObjectNotFound: {
            (options?: vsanhealthService.vim.ManagedObjectNotFound): vsanhealthService.vim.ManagedObjectNotFound;
         };
         MethodNotFound: {
            (options?: vsanhealthService.vim.MethodNotFound): vsanhealthService.vim.MethodNotFound;
         };
         NotEnoughLicenses: {
            (options?: vsanhealthService.vim.NotEnoughLicenses): vsanhealthService.vim.NotEnoughLicenses;
         };
         NotImplemented: {
            (options?: vsanhealthService.vim.NotImplemented): vsanhealthService.vim.NotImplemented;
         };
         NotSupported: {
            (options?: vsanhealthService.vim.NotSupported): vsanhealthService.vim.NotSupported;
         };
         RequestCanceled: {
            (options?: vsanhealthService.vim.RequestCanceled): vsanhealthService.vim.RequestCanceled;
         };
         SecurityError: {
            (options?: vsanhealthService.vim.SecurityError): vsanhealthService.vim.SecurityError;
         };
         SystemError: {
            (options?: vsanhealthService.vim.SystemError): vsanhealthService.vim.SystemError;
         };
         UnexpectedFault: {
            (options?: vsanhealthService.vim.UnexpectedFault): vsanhealthService.vim.UnexpectedFault;
         };
         InvalidCollectorVersion: {
            (options?: vsanhealthService.vim.InvalidCollectorVersion): vsanhealthService.vim.InvalidCollectorVersion;
         };
         InvalidProperty: {
            (options?: vsanhealthService.vim.InvalidProperty): vsanhealthService.vim.InvalidProperty;
         };
         PropertyFilterSpec: {
            (options?: vsanhealthService.vim.PropertyFilterSpec): vsanhealthService.vim.PropertyFilterSpec;
         };
         ArrayOfPropertyFilterSpec: {
            (options?: vsanhealthService.vim.ArrayOfPropertyFilterSpec): vsanhealthService.vim.ArrayOfPropertyFilterSpec;
         };
         PropertySpec: {
            (options?: vsanhealthService.vim.PropertySpec): vsanhealthService.vim.PropertySpec;
         };
         ArrayOfPropertySpec: {
            (options?: vsanhealthService.vim.ArrayOfPropertySpec): vsanhealthService.vim.ArrayOfPropertySpec;
         };
         ObjectSpec: {
            (options?: vsanhealthService.vim.ObjectSpec): vsanhealthService.vim.ObjectSpec;
         };
         ArrayOfObjectSpec: {
            (options?: vsanhealthService.vim.ArrayOfObjectSpec): vsanhealthService.vim.ArrayOfObjectSpec;
         };
         SelectionSpec: {
            (options?: vsanhealthService.vim.SelectionSpec): vsanhealthService.vim.SelectionSpec;
         };
         ArrayOfSelectionSpec: {
            (options?: vsanhealthService.vim.ArrayOfSelectionSpec): vsanhealthService.vim.ArrayOfSelectionSpec;
         };
         TraversalSpec: {
            (options?: vsanhealthService.vim.TraversalSpec): vsanhealthService.vim.TraversalSpec;
         };
         ObjectContent: {
            (options?: vsanhealthService.vim.ObjectContent): vsanhealthService.vim.ObjectContent;
         };
         ArrayOfObjectContent: {
            (options?: vsanhealthService.vim.ArrayOfObjectContent): vsanhealthService.vim.ArrayOfObjectContent;
         };
         UpdateSet: {
            (options?: vsanhealthService.vim.UpdateSet): vsanhealthService.vim.UpdateSet;
         };
         PropertyFilterUpdate: {
            (options?: vsanhealthService.vim.PropertyFilterUpdate): vsanhealthService.vim.PropertyFilterUpdate;
         };
         ArrayOfPropertyFilterUpdate: {
            (options?: vsanhealthService.vim.ArrayOfPropertyFilterUpdate): vsanhealthService.vim.ArrayOfPropertyFilterUpdate;
         };
         ObjectUpdateKind: {
            "modify": string;
            "enter": string;
            "leave": string;
         };
         ObjectUpdate: {
            (options?: vsanhealthService.vim.ObjectUpdate): vsanhealthService.vim.ObjectUpdate;
         };
         ArrayOfObjectUpdate: {
            (options?: vsanhealthService.vim.ArrayOfObjectUpdate): vsanhealthService.vim.ArrayOfObjectUpdate;
         };
         PropertyChangeOp: {
            "add": string;
            "remove": string;
            "assign": string;
            "indirectRemove": string;
         };
         PropertyChange: {
            (options?: vsanhealthService.vim.PropertyChange): vsanhealthService.vim.PropertyChange;
         };
         ArrayOfPropertyChange: {
            (options?: vsanhealthService.vim.ArrayOfPropertyChange): vsanhealthService.vim.ArrayOfPropertyChange;
         };
         MissingProperty: {
            (options?: vsanhealthService.vim.MissingProperty): vsanhealthService.vim.MissingProperty;
         };
         ArrayOfMissingProperty: {
            (options?: vsanhealthService.vim.ArrayOfMissingProperty): vsanhealthService.vim.ArrayOfMissingProperty;
         };
         MissingObject: {
            (options?: vsanhealthService.vim.MissingObject): vsanhealthService.vim.MissingObject;
         };
         ArrayOfMissingObject: {
            (options?: vsanhealthService.vim.ArrayOfMissingObject): vsanhealthService.vim.ArrayOfMissingObject;
         };
         WaitOptions: {
            (options?: vsanhealthService.vim.WaitOptions): vsanhealthService.vim.WaitOptions;
         };
         RetrieveOptions: {
            (options?: vsanhealthService.vim.RetrieveOptions): vsanhealthService.vim.RetrieveOptions;
         };
         RetrieveResult: {
            (options?: vsanhealthService.vim.RetrieveResult): vsanhealthService.vim.RetrieveResult;
         };
         ManagedObjectReference: {
            (options?: vsanhealthService.vim.ManagedObjectReference): vsanhealthService.vim.ManagedObjectReference;
         };
         ArrayOfString: {
            (options?: vsanhealthService.vim.ArrayOfString): vsanhealthService.vim.ArrayOfString;
         };
         ArrayOfAnyType: {
            (options?: vsanhealthService.vim.ArrayOfAnyType): vsanhealthService.vim.ArrayOfAnyType;
         };
         ArrayOfAnyURI: {
            (options?: vsanhealthService.vim.ArrayOfAnyURI): vsanhealthService.vim.ArrayOfAnyURI;
         };
         ArrayOfManagedObjectReference: {
            (options?: vsanhealthService.vim.ArrayOfManagedObjectReference): vsanhealthService.vim.ArrayOfManagedObjectReference;
         };
         ArrayOfBoolean: {
            (options?: vsanhealthService.vim.ArrayOfBoolean): vsanhealthService.vim.ArrayOfBoolean;
         };
         ArrayOfByte: {
            (options?: vsanhealthService.vim.ArrayOfByte): vsanhealthService.vim.ArrayOfByte;
         };
         ArrayOfDouble: {
            (options?: vsanhealthService.vim.ArrayOfDouble): vsanhealthService.vim.ArrayOfDouble;
         };
         ArrayOfInt: {
            (options?: vsanhealthService.vim.ArrayOfInt): vsanhealthService.vim.ArrayOfInt;
         };
         ArrayOfLong: {
            (options?: vsanhealthService.vim.ArrayOfLong): vsanhealthService.vim.ArrayOfLong;
         };
         ArrayOfShort: {
            (options?: vsanhealthService.vim.ArrayOfShort): vsanhealthService.vim.ArrayOfShort;
         };
      }
      vsanhealthPort: {
         performVsanUpgradeEx(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, performObjectUpgrade: boolean, downgradeFormat: boolean, allowReducedRedundancy: boolean, excludeHosts: Array<vsanhealthService.vim.ManagedObjectReference>, spec: vsanhealthService.vim.VsanDiskFormatConversionSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryUpgradeStatusEx(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanUpgradeStatusEx>;
         retrieveSupportedVsanFormatVersion(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         performVsanUpgradePreflightCheckEx(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, downgradeFormat: boolean, spec: vsanhealthService.vim.VsanDiskFormatConversionSpec): Promise<vsanhealthService.vim.VsanDiskFormatConversionCheckResult>;
         performVsanUpgradePreflightAsyncCheckTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, downgradeFormat: boolean, spec: vsanhealthService.vim.VsanDiskFormatConversionSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryClusterPhysicalDiskHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<Array<vsanhealthService.vim.VsanPhysicalDiskHealthSummary>>;
         vsanQueryClusterNetworkPerfTest(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, multicast: boolean): Promise<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>;
         vsanQueryClusterAdvCfgSync(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<Array<vsanhealthService.vim.VsanClusterAdvCfgSyncResult>>;
         vsanRepairClusterImmediateObjects(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, uuids: Array<string>): Promise<vsanhealthService.vim.VsanClusterHealthSystemObjectsRepairResult>;
         vsanQueryVerifyClusterNetworkSettings(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterNetworkHealthResult>;
         vsanQueryClusterCreateVmHealthTest(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, timeout: number): Promise<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>;
         vsanQueryClusterHealthSystemVersions(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterHealthSystemVersionResult>;
         vsanClusterGetHclInfo(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterHclInfo>;
         vsanQueryClusterCheckLimits(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterLimitHealthResult>;
         vsanQueryClusterCaptureVsanPcap(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, duration: number, vmknic: Array<vsanhealthService.vim.VsanClusterHostVmknicMapping>, includeRawPcap: boolean, includeIgmp: boolean, cmmdsMsgTypeFilter: Array<string>, cmmdsPorts: Array<number>, clusterUuid: string): Promise<vsanhealthService.vim.VsanVsanClusterPcapResult>;
         vsanCheckClusterClomdLiveness(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterClomdLivenessResult>;
         vsanVitRemoveIscsiInitiatorsFromTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitRemoveIscsiInitiatorsFromGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitEditIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunSpec: vsanhealthService.vim.VsanIscsiLUNSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitGetIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunId: number): Promise<vsanhealthService.vim.VsanIscsiLUN>;
         vsanVitEditIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetSpec: vsanhealthService.vim.VsanIscsiTargetSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitAddIscsiInitiatorsToGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitAddIscsiInitiatorsToTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitQueryIscsiTargetServiceVersion(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         vsanVitAddIscsiTargetToGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, targetAlias: string): Promise<void>;
         vsanVitRemoveIscsiTargetFromGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, targetAlias: string): Promise<void>;
         vsanVitGetIscsiLUNs(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAliases: Array<string>): Promise<Array<vsanhealthService.vim.VsanIscsiLUN>>;
         vsanVitRemoveIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunId: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitGetIscsiInitiatorGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string): Promise<vsanhealthService.vim.VsanIscsiInitiatorGroup>;
         vsanVitRemoveIscsiInitiatorGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string): Promise<void>;
         vsanVitGetHomeObject(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanObjectInformation>;
         vsanVitGetIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string): Promise<vsanhealthService.vim.VsanIscsiTarget>;
         vsanVitRemoveIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitAddIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunSpec: vsanhealthService.vim.VsanIscsiLUNSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitGetIscsiInitiatorGroups(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanIscsiInitiatorGroup>>;
         vsanVitGetIscsiTargets(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanIscsiTarget>>;
         vsanVitAddIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetSpec: vsanhealthService.vim.VsanIscsiTargetSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitAddIscsiInitiatorGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string): Promise<void>;
         vosSetVsanObjectPolicy(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanObjectUuid: string, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<boolean>;
         vsanQueryObjectIdentities(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, objUuids: Array<string>, objTypes: Array<string>, includeHealth: boolean, includeObjIdentity: boolean, includeSpaceSummary: boolean): Promise<vsanhealthService.vim.VsanObjectIdentityAndHealth>;
         vosQueryVsanObjectInformation(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanObjectQuerySpecs: Array<vsanhealthService.vim.VsanObjectQuerySpec>): Promise<Array<vsanhealthService.vim.VsanObjectInformation>>;
         vsanPerfSetStatsObjectPolicy(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<boolean>;
         vsanPerfDeleteStatsObject(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         vsanPerfCreateStatsObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanPerfDeleteStatsObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanPerfQueryClusterHealth(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.DynamicData>>;
         vsanPerfQueryStatsObjectInformation(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanObjectInformation>;
         vsanPerfQueryNodeInformation(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanPerfNodeInformation>>;
         vsanPerfQueryPerf(_this: vsanhealthService.vim.ManagedObjectReference, querySpecs: Array<vsanhealthService.vim.VsanPerfQuerySpec>, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanPerfEntityMetricCSV>>;
         vsanPerfGetSupportedEntityTypes(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanPerfEntityType>>;
         vsanPerfCreateStatsObject(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<string>;
         vsanQuerySpaceUsage(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanSpaceUsage>;
         vsanClusterGetConfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanConfigInfoEx>;
         vsanClusterReconfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanReconfigSpec: vsanhealthService.vim.VimVsanReconfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryVcClusterCreateVmHealthHistoryTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number): Promise<Array<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>>;
         vsanHealthSetLogLevel(_this: vsanhealthService.vim.ManagedObjectReference, level: string): Promise<void>;
         vsanHealthTestVsanClusterTelemetryProxy(_this: vsanhealthService.vim.ManagedObjectReference, proxyConfig: vsanhealthService.vim.VsanClusterTelemetryProxyConfig): Promise<boolean>;
         vsanVcUploadHclDb(_this: vsanhealthService.vim.ManagedObjectReference, db: string): Promise<boolean>;
         vsanVcUpdateHclDbFromWeb(_this: vsanhealthService.vim.ManagedObjectReference, url: string): Promise<boolean>;
         vsanHealthRepairClusterObjectsImmediate(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryVcClusterNetworkPerfTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, multicast: boolean): Promise<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>;
         vsanQueryVcClusterVmdkLoadHistoryTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number, taskId: string): Promise<Array<vsanhealthService.vim.VsanClusterVmdkLoadTestResult>>;
         vsanHealthQueryVsanClusterHealthCheckInterval(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         vsanQueryVcClusterCreateVmHealthTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, timeout: number): Promise<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>;
         vsanVcClusterGetHclInfo(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, includeHostsResult: boolean): Promise<vsanhealthService.vim.VsanClusterHclInfo>;
         vsanQueryAttachToSrHistory(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number, taskId: string): Promise<Array<vsanhealthService.vim.VsanAttachToSrOperation>>;
         vsanRebalanceCluster(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVcClusterRunVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, runname: string, durationSec: number, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>, action: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanHealthSendVsanTelemetry(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         vsanQueryVcClusterNetworkPerfHistoryTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number): Promise<Array<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>>;
         vsanQueryVcClusterHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vmCreateTimeout: number, objUuids: Array<string>, includeObjUuids: boolean, fields: Array<string>, fetchFromCache: boolean): Promise<vsanhealthService.vim.VsanClusterHealthSummary>;
         vsanStopRebalanceCluster(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanHealthQueryVsanClusterHealthConfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanClusterHealthConfigs>;
         vsanAttachVsanSupportBundleToSr(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, srNumber: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryVcClusterVmdkWorkloadTypes(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanStorageWorkloadType>>;
         vsanVcClusterQueryVerifyHealthSystemVersions(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanClusterHealthSystemVersionResult>;
         vsanHealthSetVsanClusterTelemetryConfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanClusterHealthConfig: vsanhealthService.vim.VsanClusterHealthConfigs): Promise<void>;
         vsanHealthIsRebalanceRunning(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<boolean>;
         vsanHealthSetVsanClusterHealthCheckInterval(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanClusterHealthCheckInterval: number): Promise<void>;
         initializeDiskMappings(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VimVsanHostDiskMappingCreationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveAllFlashCapabilities(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VimVsanHostVsanHostCapability>>;
         queryDiskMappings(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VimVsanHostDiskMapInfoEx>>;
         vSANVcIsWitnessHost(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         vSANVcSetPreferredFaultDomain(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, preferredFd: string, witnessHost: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vSANVcGetPreferredFaultDomain(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VimClusterVSANPreferredFaultDomainInfo>;
         vSANIsWitnessVirtualAppliance(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.VsanHostVirtualApplianceInfo>>;
         vSANVcGetWitnessHosts(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VimClusterVSANWitnessHostInfo>>;
         vSANVcRetrieveStretchedClusterVcCapability(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, verifyAllConnected: boolean): Promise<Array<vsanhealthService.vim.VimClusterVSANStretchedClusterCapability>>;
         vSANVcConvertToStretchedCluster(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, faultDomainConfig: vsanhealthService.vim.VimClusterVSANStretchedClusterFaultDomainConfig, witnessHost: vsanhealthService.vim.ManagedObjectReference, preferredFd: string, diskMapping: vsanhealthService.vim.VsanHostDiskMapping): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vSANVcRemoveWitnessHost(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, witnessHost: vsanhealthService.vim.ManagedObjectReference, witnessAddress: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanHostQueryAdvCfg(_this: vsanhealthService.vim.ManagedObjectReference, options: Array<string>): Promise<Array<vsanhealthService.vim.OptionValue>>;
         vsanHostQueryPhysicalDiskHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanPhysicalDiskHealthSummary>;
         vsanStartProactiveRebalance(_this: vsanhealthService.vim.ManagedObjectReference, timeSpan: number, varianceThreshold: number, timeThreshold: number, rateThreshold: number): Promise<boolean>;
         vsanHostQueryHostInfoByUuids(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<Array<vsanhealthService.vim.VsanQueryResultHostInfo>>;
         vsanHostQueryHealthSystemVersion(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         vsanHostQueryVerifyNetworkSettings(_this: vsanhealthService.vim.ManagedObjectReference, peers: Array<string>, ROBOStretchedClusterWitnesses: Array<string>): Promise<vsanhealthService.vim.VsanNetworkHealthResult>;
         vsanHostQueryRunIperfClient(_this: vsanhealthService.vim.ManagedObjectReference, multicast: boolean, serverIp: string): Promise<vsanhealthService.vim.VsanNetworkLoadTestResult>;
         vsanHostRunVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, runname: string, durationSec: number, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>): Promise<Array<vsanhealthService.vim.VsanVmdkLoadTestResult>>;
         vsanHostQueryObjectHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference, objUuids: Array<string>, includeObjUuids: boolean, localHostOnly: boolean): Promise<vsanhealthService.vim.VsanObjectOverallHealth>;
         vsanGetHclInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanHostHclInfo>;
         vsanHostCleanupVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, runname: string, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>): Promise<string>;
         vsanWaitForVsanHealthGenerationIdChange(_this: vsanhealthService.vim.ManagedObjectReference, timeout: number): Promise<boolean>;
         vsanStopProactiveRebalance(_this: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         vsanHostRepairImmediateObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, repairType: string): Promise<vsanhealthService.vim.VsanRepairObjectsResult>;
         vsanHostPrepareVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, runname: string, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>): Promise<string>;
         vsanHostQueryRunIperfServer(_this: vsanhealthService.vim.ManagedObjectReference, multicast: boolean, serverIp: string): Promise<vsanhealthService.vim.VsanNetworkLoadTestResult>;
         vsanHostQueryCheckLimits(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanLimitHealthResult>;
         vsanGetProactiveRebalanceInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanProactiveRebalanceInfoEx>;
         vsanHostClomdLiveness(_this: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         addAuthorizationRole(_this: vsanhealthService.vim.ManagedObjectReference, name: string, privIds: Array<string>): Promise<number>;
         removeAuthorizationRole(_this: vsanhealthService.vim.ManagedObjectReference, roleId: number, failIfUsed: boolean): Promise<void>;
         updateAuthorizationRole(_this: vsanhealthService.vim.ManagedObjectReference, roleId: number, newName: string, privIds: Array<string>): Promise<void>;
         mergePermissions(_this: vsanhealthService.vim.ManagedObjectReference, srcRoleId: number, dstRoleId: number): Promise<void>;
         retrieveRolePermissions(_this: vsanhealthService.vim.ManagedObjectReference, roleId: number): Promise<Array<vsanhealthService.vim.Permission>>;
         retrieveEntityPermissions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, inherited: boolean): Promise<Array<vsanhealthService.vim.Permission>>;
         retrieveAllPermissions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.Permission>>;
         setEntityPermissions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, permission: Array<vsanhealthService.vim.Permission>): Promise<void>;
         resetEntityPermissions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, permission: Array<vsanhealthService.vim.Permission>): Promise<void>;
         removeEntityPermission(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, user: string, isGroup: boolean): Promise<void>;
         hasPrivilegeOnEntity(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, sessionId: string, privId: Array<string>): Promise<Array<boolean>>;
         hasPrivilegeOnEntities(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>, sessionId: string, privId: Array<string>): Promise<Array<vsanhealthService.vim.EntityPrivilege>>;
         hasUserPrivilegeOnEntities(_this: vsanhealthService.vim.ManagedObjectReference, entities: Array<vsanhealthService.vim.ManagedObjectReference>, userName: string, privId: Array<string>): Promise<Array<vsanhealthService.vim.EntityPrivilege>>;
         fetchUserPrivilegeOnEntities(_this: vsanhealthService.vim.ManagedObjectReference, entities: Array<vsanhealthService.vim.ManagedObjectReference>, userName: string): Promise<Array<vsanhealthService.vim.UserPrivilegeResult>>;
         certMgrRefreshCACertificatesAndCRLsTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         certMgrRefreshCertificatesTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         certMgrRevokeCertificatesTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         reconfigureClusterTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ClusterConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         applyRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<void>;
         cancelRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<void>;
         recommendHostsForVm(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ClusterHostRecommendation>>;
         addHostTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostConnectSpec, asConnected: boolean, resourcePool: vsanhealthService.vim.ManagedObjectReference, license: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveIntoTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveHostIntoTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, resourcePool: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshRecommendation(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         evcManager(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveDasAdvancedRuntimeInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ClusterDasAdvancedRuntimeInfo>;
         clusterEnterMaintenanceMode(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>, option: Array<vsanhealthService.vim.OptionValue>): Promise<vsanhealthService.vim.ClusterEnterMaintenanceResult>;
         placeVm(_this: vsanhealthService.vim.ManagedObjectReference, placementSpec: vsanhealthService.vim.PlacementSpec): Promise<vsanhealthService.vim.PlacementResult>;
         findRulesForVm(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ClusterRuleInfo>>;
         stampAllRulesWithUuidTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getResourceUsage(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ClusterResourceUsageSummary>;
         reconfigureComputeResourceTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ComputeResourceConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addCustomFieldDef(_this: vsanhealthService.vim.ManagedObjectReference, name: string, moType: string, fieldDefPolicy: vsanhealthService.vim.PrivilegePolicyDef, fieldPolicy: vsanhealthService.vim.PrivilegePolicyDef): Promise<vsanhealthService.vim.CustomFieldDef>;
         removeCustomFieldDef(_this: vsanhealthService.vim.ManagedObjectReference, key: number): Promise<void>;
         renameCustomFieldDef(_this: vsanhealthService.vim.ManagedObjectReference, key: number, name: string): Promise<void>;
         setField(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, key: number, value: string): Promise<void>;
         doesCustomizationSpecExist(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<boolean>;
         getCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.CustomizationSpecItem>;
         createCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, item: vsanhealthService.vim.CustomizationSpecItem): Promise<void>;
         overwriteCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, item: vsanhealthService.vim.CustomizationSpecItem): Promise<void>;
         deleteCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<void>;
         duplicateCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string, newName: string): Promise<void>;
         renameCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string, newName: string): Promise<void>;
         customizationSpecItemToXml(_this: vsanhealthService.vim.ManagedObjectReference, item: vsanhealthService.vim.CustomizationSpecItem): Promise<string>;
         xmlToCustomizationSpecItem(_this: vsanhealthService.vim.ManagedObjectReference, specItemXml: string): Promise<vsanhealthService.vim.CustomizationSpecItem>;
         checkCustomizationResources(_this: vsanhealthService.vim.ManagedObjectReference, guestOs: string): Promise<void>;
         queryConnectionInfo(_this: vsanhealthService.vim.ManagedObjectReference, hostname: string, port: number, username: string, password: string, sslThumbprint: string): Promise<vsanhealthService.vim.HostConnectInfo>;
         queryConnectionInfoViaSpec(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostConnectSpec): Promise<vsanhealthService.vim.HostConnectInfo>;
         powerOnMultiVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: Array<vsanhealthService.vim.ManagedObjectReference>, option: Array<vsanhealthService.vim.OptionValue>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryDatacenterConfigOptionDescriptor(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VirtualMachineConfigOptionDescriptor>>;
         reconfigureDatacenterTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DatacenterConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshDatastore(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         refreshDatastoreStorageInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateVirtualMachineFilesTask(_this: vsanhealthService.vim.ManagedObjectReference, mountPathDatastoreMapping: Array<vsanhealthService.vim.DatastoreMountPathDatastorePair>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         renameDatastore(_this: vsanhealthService.vim.ManagedObjectReference, newName: string): Promise<void>;
         destroyDatastore(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         datastoreEnterMaintenanceMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.StoragePlacementResult>;
         datastoreExitMaintenanceModeTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateVVolVirtualMachineFilesTask(_this: vsanhealthService.vim.ManagedObjectReference, failoverPair: Array<vsanhealthService.vim.DatastoreVVolContainerFailoverPair>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDirectory(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, displayName: string, policy: string): Promise<string>;
         deleteDirectory(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, datastorePath: string): Promise<void>;
         convertNamespacePathToUuidPath(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, namespaceUrl: string): Promise<string>;
         queryDescriptions(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.DiagnosticManagerLogDescriptor>>;
         browseDiagnosticLog(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, key: string, start: number, lines: number): Promise<vsanhealthService.vim.DiagnosticManagerLogHeader>;
         generateLogBundlesTask(_this: vsanhealthService.vim.ManagedObjectReference, includeDefault: boolean, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         fetchDVPortKeys(_this: vsanhealthService.vim.ManagedObjectReference, criteria: vsanhealthService.vim.DistributedVirtualSwitchPortCriteria): Promise<Array<string>>;
         fetchDVPorts(_this: vsanhealthService.vim.ManagedObjectReference, criteria: vsanhealthService.vim.DistributedVirtualSwitchPortCriteria): Promise<Array<vsanhealthService.vim.DistributedVirtualPort>>;
         queryUsedVlanIdInDvs(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<number>>;
         reconfigureDvsTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVSConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         performDvsProductSpecOperationTask(_this: vsanhealthService.vim.ManagedObjectReference, operation: string, productSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         mergeDvsTask(_this: vsanhealthService.vim.ManagedObjectReference, dvs: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addDVPortgroupTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: Array<vsanhealthService.vim.DVPortgroupConfigSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveDVPortTask(_this: vsanhealthService.vim.ManagedObjectReference, portKey: Array<string>, destinationPortgroupKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDvsCapability(_this: vsanhealthService.vim.ManagedObjectReference, capability: vsanhealthService.vim.DVSCapability): Promise<void>;
         reconfigureDVPortTask(_this: vsanhealthService.vim.ManagedObjectReference, port: Array<vsanhealthService.vim.DVPortConfigSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshDVPortState(_this: vsanhealthService.vim.ManagedObjectReference, portKeys: Array<string>): Promise<void>;
         rectifyDvsHostTask(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateNetworkResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: Array<vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec>): Promise<void>;
         addNetworkResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: Array<vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec>): Promise<void>;
         removeNetworkResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, key: Array<string>): Promise<void>;
         dvsReconfigureVmVnicNetworkResourcePoolTask(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: Array<vsanhealthService.vim.DvsVmVnicResourcePoolConfigSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enableNetworkResourceManagement(_this: vsanhealthService.vim.ManagedObjectReference, enable: boolean): Promise<void>;
         dVSRollbackTask(_this: vsanhealthService.vim.ManagedObjectReference, entityBackup: vsanhealthService.vim.EntityBackupConfig): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDVPortgroupTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVPortgroupConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDVSHealthCheckConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, healthCheckConfig: Array<vsanhealthService.vim.DVSHealthCheckConfig>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         lookupDvPortGroup(_this: vsanhealthService.vim.ManagedObjectReference, portgroupKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryConfigOptionDescriptor(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VirtualMachineConfigOptionDescriptor>>;
         queryConfigOption(_this: vsanhealthService.vim.ManagedObjectReference, key: string, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VirtualMachineConfigOption>;
         queryConfigOptionEx(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.EnvironmentBrowserConfigOptionQuerySpec): Promise<vsanhealthService.vim.VirtualMachineConfigOption>;
         queryConfigTarget(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ConfigTarget>;
         queryTargetCapabilities(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostCapability>;
         setCustomValue(_this: vsanhealthService.vim.ManagedObjectReference, key: string, value: string): Promise<void>;
         unregisterExtension(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string): Promise<void>;
         findExtension(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string): Promise<vsanhealthService.vim.Extension>;
         registerExtension(_this: vsanhealthService.vim.ManagedObjectReference, extension: vsanhealthService.vim.Extension): Promise<void>;
         updateExtension(_this: vsanhealthService.vim.ManagedObjectReference, extension: vsanhealthService.vim.Extension): Promise<void>;
         getPublicKey(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         setPublicKey(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, publicKey: string): Promise<void>;
         setExtensionCertificate(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, certificatePem: string): Promise<void>;
         queryManagedBy(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         queryExtensionIpAllocationUsage(_this: vsanhealthService.vim.ManagedObjectReference, extensionKeys: Array<string>): Promise<Array<vsanhealthService.vim.ExtensionManagerIpAllocationUsage>>;
         moveDatastoreFileTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destinationName: string, destinationDatacenter: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         copyDatastoreFileTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destinationName: string, destinationDatacenter: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteDatastoreFileTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         makeDirectory(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, createParentDirectories: boolean): Promise<void>;
         changeOwner(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, owner: string): Promise<void>;
         createFolder(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveIntoFolderTask(_this: vsanhealthService.vim.ManagedObjectReference, list: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createVMTask(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.VirtualMachineConfigSpec, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerVMTask(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string, asTemplate: boolean, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createCluster(_this: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.ClusterConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createClusterEx(_this: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.ClusterConfigSpecEx): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addStandaloneHostTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostConnectSpec, compResSpec: vsanhealthService.vim.ComputeResourceConfigSpec, addConnected: boolean, license: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDatacenter(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unregisterAndDestroyTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDVSTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVSCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createStoragePod(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerHealthUpdateProvider(_this: vsanhealthService.vim.ManagedObjectReference, name: string, healthUpdateInfo: Array<vsanhealthService.vim.HealthUpdateInfo>): Promise<string>;
         unregisterHealthUpdateProvider(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<void>;
         queryProviderList(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         hasProvider(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<boolean>;
         queryProviderName(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<string>;
         queryHealthUpdateInfos(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<vsanhealthService.vim.HealthUpdateInfo>>;
         addMonitoredEntities(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         removeMonitoredEntities(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         queryMonitoredEntities(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         hasMonitoredEntity(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, entity: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         queryUnmonitoredHosts(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         postHealthUpdates(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, updates: Array<vsanhealthService.vim.HealthUpdate>): Promise<void>;
         queryHealthUpdates(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<vsanhealthService.vim.HealthUpdate>>;
         addFilter(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, filterName: string, infoIds: Array<string>): Promise<string>;
         queryFilterList(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<string>>;
         queryFilterName(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<string>;
         queryFilterInfoIds(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<Array<string>>;
         queryFilterEntities(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         addFilterEntities(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         removeFilterEntities(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         removeFilter(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<void>;
         setCollectorPageSize(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<void>;
         rewindCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         destroyCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryTpmAttestationReport(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostTpmAttestationReport>;
         queryHostConnectionInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostConnectInfo>;
         updateSystemResources(_this: vsanhealthService.vim.ManagedObjectReference, resourceInfo: vsanhealthService.vim.HostSystemResourceInfo): Promise<void>;
         updateSystemSwapConfiguration(_this: vsanhealthService.vim.ManagedObjectReference, sysSwapConfig: vsanhealthService.vim.HostSystemSwapConfiguration): Promise<void>;
         reconnectHostTask(_this: vsanhealthService.vim.ManagedObjectReference, cnxSpec: vsanhealthService.vim.HostConnectSpec, reconnectSpec: vsanhealthService.vim.HostSystemReconnectSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         disconnectHostTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enterMaintenanceModeTask(_this: vsanhealthService.vim.ManagedObjectReference, timeout: number, evacuatePoweredOffVms: boolean, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exitMaintenanceModeTask(_this: vsanhealthService.vim.ManagedObjectReference, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         rebootHostTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         shutdownHostTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerDownHostToStandByTask(_this: vsanhealthService.vim.ManagedObjectReference, timeoutSec: number, evacuatePoweredOffVms: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerUpHostFromStandByTask(_this: vsanhealthService.vim.ManagedObjectReference, timeoutSec: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryMemoryOverhead(_this: vsanhealthService.vim.ManagedObjectReference, memorySize: number, videoRamSize: number, numVcpus: number): Promise<number>;
         queryMemoryOverheadEx(_this: vsanhealthService.vim.ManagedObjectReference, vmConfigInfo: vsanhealthService.vim.VirtualMachineConfigInfo): Promise<number>;
         reconfigureHostForDASTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateFlags(_this: vsanhealthService.vim.ManagedObjectReference, flagInfo: vsanhealthService.vim.HostFlagInfo): Promise<void>;
         enterLockdownMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         exitLockdownMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         acquireCimServicesTicket(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostServiceTicket>;
         updateIpmi(_this: vsanhealthService.vim.ManagedObjectReference, ipmiInfo: vsanhealthService.vim.HostIpmiInfo): Promise<void>;
         retrieveHardwareUptime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         prepareCrypto(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         enableCrypto(_this: vsanhealthService.vim.ManagedObjectReference, keyPlain: vsanhealthService.vim.CryptoKeyPlain): Promise<void>;
         configureCryptoKey(_this: vsanhealthService.vim.ManagedObjectReference, keyId: vsanhealthService.vim.CryptoKeyId): Promise<void>;
         httpNfcLeaseGetManifest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HttpNfcLeaseManifestEntry>>;
         httpNfcLeaseComplete(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         httpNfcLeaseAbort(_this: vsanhealthService.vim.ManagedObjectReference, fault: vsanhealthService.vim.LocalizedMethodFault): Promise<void>;
         httpNfcLeaseProgress(_this: vsanhealthService.vim.ManagedObjectReference, percent: number): Promise<void>;
         installIoFilterTask(_this: vsanhealthService.vim.ManagedObjectReference, vibUrl: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         uninstallIoFilterTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         upgradeIoFilterTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference, vibUrl: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryIoFilterIssues(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.IoFilterQueryIssueResult>;
         queryIoFilterInfo(_this: vsanhealthService.vim.ManagedObjectReference, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ClusterIoFilterInfo>>;
         resolveInstallationErrorsOnHostTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         resolveInstallationErrorsOnClusterTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryDisksUsingFilter(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VirtualDiskId>>;
         queryIpPools(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.IpPool>>;
         createIpPool(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.IpPool): Promise<number>;
         updateIpPool(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.IpPool): Promise<void>;
         destroyIpPool(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, id: number, force: boolean): Promise<void>;
         allocateIpv4Address(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, allocationId: string): Promise<string>;
         allocateIpv6Address(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, allocationId: string): Promise<string>;
         releaseIpAllocation(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, allocationId: string): Promise<void>;
         queryIPAllocations(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, extensionKey: string): Promise<Array<vsanhealthService.vim.IpPoolManagerIpAllocation>>;
         updateAssignedLicense(_this: vsanhealthService.vim.ManagedObjectReference, entity: string, licenseKey: string, entityDisplayName: string): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         removeAssignedLicense(_this: vsanhealthService.vim.ManagedObjectReference, entityId: string): Promise<void>;
         queryAssignedLicenses(_this: vsanhealthService.vim.ManagedObjectReference, entityId: string): Promise<Array<vsanhealthService.vim.LicenseAssignmentManagerLicenseAssignment>>;
         querySupportedFeatures(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.LicenseFeatureInfo>>;
         queryLicenseSourceAvailability(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.LicenseAvailabilityInfo>>;
         queryLicenseUsage(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.LicenseUsageInfo>;
         setLicenseEdition(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<void>;
         checkLicenseFeature(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<boolean>;
         enableFeature(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<boolean>;
         disableFeature(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<boolean>;
         configureLicenseSource(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, licenseSource: vsanhealthService.vim.LicenseSource): Promise<void>;
         updateLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labels: Array<vsanhealthService.vim.KeyValue>): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         addLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labels: Array<vsanhealthService.vim.KeyValue>): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         removeLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string): Promise<void>;
         decodeLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         updateLicenseLabel(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labelKey: string, labelValue: string): Promise<void>;
         removeLicenseLabel(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labelKey: string): Promise<void>;
         reload(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         renameTask(_this: vsanhealthService.vim.ManagedObjectReference, newName: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyNetwork(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         lookupVmOverheadMemory(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         validateHost(_this: vsanhealthService.vim.ManagedObjectReference, ovfDescriptor: string, host: vsanhealthService.vim.ManagedObjectReference, vhp: vsanhealthService.vim.OvfValidateHostParams): Promise<vsanhealthService.vim.OvfValidateHostResult>;
         parseDescriptor(_this: vsanhealthService.vim.ManagedObjectReference, ovfDescriptor: string, pdp: vsanhealthService.vim.OvfParseDescriptorParams): Promise<vsanhealthService.vim.OvfParseDescriptorResult>;
         createImportSpec(_this: vsanhealthService.vim.ManagedObjectReference, ovfDescriptor: string, resourcePool: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, cisp: vsanhealthService.vim.OvfCreateImportSpecParams): Promise<vsanhealthService.vim.OvfCreateImportSpecResult>;
         createDescriptor(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference, cdp: vsanhealthService.vim.OvfCreateDescriptorParams): Promise<vsanhealthService.vim.OvfCreateDescriptorResult>;
         queryPerfProviderSummary(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.PerfProviderSummary>;
         queryAvailablePerfMetric(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, beginTime: Date, endTime: Date, intervalId: number): Promise<Array<vsanhealthService.vim.PerfMetricId>>;
         queryPerfCounter(_this: vsanhealthService.vim.ManagedObjectReference, counterId: Array<number>): Promise<Array<vsanhealthService.vim.PerfCounterInfo>>;
         queryPerfCounterByLevel(_this: vsanhealthService.vim.ManagedObjectReference, level: number): Promise<Array<vsanhealthService.vim.PerfCounterInfo>>;
         queryPerf(_this: vsanhealthService.vim.ManagedObjectReference, querySpec: Array<vsanhealthService.vim.PerfQuerySpec>): Promise<Array<vsanhealthService.vim.PerfEntityMetricBase>>;
         queryPerfComposite(_this: vsanhealthService.vim.ManagedObjectReference, querySpec: vsanhealthService.vim.PerfQuerySpec): Promise<vsanhealthService.vim.PerfCompositeMetric>;
         createPerfInterval(_this: vsanhealthService.vim.ManagedObjectReference, intervalId: vsanhealthService.vim.PerfInterval): Promise<void>;
         removePerfInterval(_this: vsanhealthService.vim.ManagedObjectReference, samplePeriod: number): Promise<void>;
         updatePerfInterval(_this: vsanhealthService.vim.ManagedObjectReference, interval: vsanhealthService.vim.PerfInterval): Promise<void>;
         updateCounterLevelMapping(_this: vsanhealthService.vim.ManagedObjectReference, counterLevelMap: Array<vsanhealthService.vim.PerformanceManagerCounterLevelMapping>): Promise<void>;
         resetCounterLevelMapping(_this: vsanhealthService.vim.ManagedObjectReference, counters: Array<number>): Promise<void>;
         estimateDatabaseSize(_this: vsanhealthService.vim.ManagedObjectReference, dbSizeParam: vsanhealthService.vim.DatabaseSizeParam): Promise<vsanhealthService.vim.DatabaseSizeEstimate>;
         updateConfig(_this: vsanhealthService.vim.ManagedObjectReference, name: string, config: vsanhealthService.vim.ResourceConfigSpec): Promise<void>;
         moveIntoResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, list: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         updateChildResourceConfiguration(_this: vsanhealthService.vim.ManagedObjectReference, spec: Array<vsanhealthService.vim.ResourceConfigSpec>): Promise<void>;
         createResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.ResourceConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyChildren(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createVApp(_this: vsanhealthService.vim.ManagedObjectReference, name: string, resSpec: vsanhealthService.vim.ResourceConfigSpec, configSpec: vsanhealthService.vim.VAppConfigSpec, vmFolder: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createChildVMTask(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.VirtualMachineConfigSpec, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerChildVMTask(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         importVApp(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ImportSpec, folder: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryResourceConfigOption(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ResourceConfigOption>;
         refreshRuntime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         findByUuid(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, uuid: string, vmSearch: boolean, instanceUuid: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByDatastorePath(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, path: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByDnsName(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, dnsName: string, vmSearch: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByIp(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, ip: string, vmSearch: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByInventoryPath(_this: vsanhealthService.vim.ManagedObjectReference, inventoryPath: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findChild(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findAllByUuid(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, uuid: string, vmSearch: boolean, instanceUuid: boolean): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         findAllByDnsName(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, dnsName: string, vmSearch: boolean): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         findAllByIp(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, ip: string, vmSearch: boolean): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         currentTime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Date>;
         retrieveServiceContent(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ServiceContent>;
         validateMigration(_this: vsanhealthService.vim.ManagedObjectReference, vm: Array<vsanhealthService.vim.ManagedObjectReference>, state: vsanhealthService.vim.VirtualMachinePowerState, testType: Array<string>, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.Event>>;
         queryVMotionCompatibility(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>, compatibility: Array<string>): Promise<Array<vsanhealthService.vim.HostVMotionCompatibility>>;
         retrieveProductComponents(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProductComponentInfo>>;
         queryServiceList(_this: vsanhealthService.vim.ManagedObjectReference, serviceName: string, location: Array<string>): Promise<Array<vsanhealthService.vim.ServiceManagerServiceInfo>>;
         updateServiceMessage(_this: vsanhealthService.vim.ManagedObjectReference, message: string): Promise<void>;
         loginByToken(_this: vsanhealthService.vim.ManagedObjectReference, locale: string): Promise<vsanhealthService.vim.UserSession>;
         login(_this: vsanhealthService.vim.ManagedObjectReference, userName: string, password: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         loginBySSPI(_this: vsanhealthService.vim.ManagedObjectReference, base64Token: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         logout(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         acquireLocalTicket(_this: vsanhealthService.vim.ManagedObjectReference, userName: string): Promise<vsanhealthService.vim.SessionManagerLocalTicket>;
         acquireGenericServiceTicket(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.SessionManagerServiceRequestSpec): Promise<vsanhealthService.vim.SessionManagerGenericServiceTicket>;
         terminateSession(_this: vsanhealthService.vim.ManagedObjectReference, sessionId: Array<string>): Promise<void>;
         setLocale(_this: vsanhealthService.vim.ManagedObjectReference, locale: string): Promise<void>;
         loginExtensionBySubjectName(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         loginExtensionByCertificate(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         impersonateUser(_this: vsanhealthService.vim.ManagedObjectReference, userName: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         sessionIsActive(_this: vsanhealthService.vim.ManagedObjectReference, sessionID: string, userName: string): Promise<boolean>;
         acquireCloneTicket(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         cloneSession(_this: vsanhealthService.vim.ManagedObjectReference, cloneTicket: string): Promise<vsanhealthService.vim.UserSession>;
         executeSimpleCommand(_this: vsanhealthService.vim.ManagedObjectReference, argumentsb: Array<string>): Promise<string>;
         configureDatastoreIORMTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.StorageIORMConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryIORMConfigOption(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.StorageIORMConfigOption>;
         queryDatastorePerformanceSummary(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.StoragePerformanceSummary>>;
         applyStorageDrsRecommendationToPodTask(_this: vsanhealthService.vim.ManagedObjectReference, pod: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         applyStorageDrsRecommendationTask(_this: vsanhealthService.vim.ManagedObjectReference, key: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         cancelStorageDrsRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, key: Array<string>): Promise<void>;
         refreshStorageDrsRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, pod: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         configureStorageDrsForPodTask(_this: vsanhealthService.vim.ManagedObjectReference, pod: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.StorageDrsConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         recommendDatastores(_this: vsanhealthService.vim.ManagedObjectReference, storageSpec: vsanhealthService.vim.StoragePlacementSpec): Promise<vsanhealthService.vim.StoragePlacementResult>;
         cancelTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateProgress(_this: vsanhealthService.vim.ManagedObjectReference, percentDone: number): Promise<void>;
         setTaskState(_this: vsanhealthService.vim.ManagedObjectReference, state: vsanhealthService.vim.TaskInfoState, result: any, fault: vsanhealthService.vim.LocalizedMethodFault): Promise<void>;
         setTaskDescription(_this: vsanhealthService.vim.ManagedObjectReference, description: vsanhealthService.vim.LocalizableMessage): Promise<void>;
         readNextTasks(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.TaskInfo>>;
         readPreviousTasks(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.TaskInfo>>;
         createCollectorForTasks(_this: vsanhealthService.vim.ManagedObjectReference, filter: vsanhealthService.vim.TaskFilterSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createTask(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference, taskTypeId: string, initiatedBy: string, cancelable: boolean, parentTaskKey: string, activationId: string): Promise<vsanhealthService.vim.TaskInfo>;
         retrieveUserGroups(_this: vsanhealthService.vim.ManagedObjectReference, domain: string, searchStr: string, belongsToGroup: string, belongsToUser: string, exactMatch: boolean, findUsers: boolean, findGroups: boolean): Promise<Array<vsanhealthService.vim.UserSearchResult>>;
         updateVAppConfig(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VAppConfigSpec): Promise<void>;
         updateLinkedChildren(_this: vsanhealthService.vim.ManagedObjectReference, addChangeSet: Array<vsanhealthService.vim.VirtualAppLinkInfo>, removeSet: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         cloneVAppTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, target: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VAppCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exportVApp(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerOnVAppTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerOffVAppTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         suspendVAppTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unregisterVAppTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualDiskSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destName: string, destDatacenter: vsanhealthService.vim.ManagedObjectReference, force: boolean, profile: Array<vsanhealthService.vim.VirtualMachineProfileSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         copyVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destName: string, destDatacenter: vsanhealthService.vim.ManagedObjectReference, destSpec: vsanhealthService.vim.VirtualDiskSpec, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         extendVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, newCapacityKb: number, eagerZero: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryVirtualDiskFragmentation(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         defragmentVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         shrinkVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, copy: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         inflateVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         eagerZeroVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         zeroFillVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         setVirtualDiskUuid(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, uuid: string): Promise<void>;
         queryVirtualDiskUuid(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         queryVirtualDiskGeometry(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostDiskDimensionsChs>;
         importUnmanagedSnapshot(_this: vsanhealthService.vim.ManagedObjectReference, vdisk: string, datacenter: vsanhealthService.vim.ManagedObjectReference, vvolId: string): Promise<void>;
         releaseManagedSnapshot(_this: vsanhealthService.vim.ManagedObjectReference, vdisk: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         refreshStorageInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string, memory: boolean, quiesce: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createSnapshotExTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string, memory: boolean, quiesceSpec: vsanhealthService.vim.VirtualMachineGuestQuiesceSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         revertToCurrentSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, suppressPowerOn: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeAllSnapshotsTask(_this: vsanhealthService.vim.ManagedObjectReference, consolidate: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         consolidateVMDisksTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         estimateStorageForConsolidateSnapshotsTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         reconfigVMTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         upgradeVMTask(_this: vsanhealthService.vim.ManagedObjectReference, version: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         extractOvfEnvironment(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         powerOnVMTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerOffVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         suspendVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         resetVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         shutdownGuest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         rebootGuest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         standbyGuest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         answerVM(_this: vsanhealthService.vim.ManagedObjectReference, questionId: string, answerChoice: string): Promise<void>;
         customizeVMTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.CustomizationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.CustomizationSpec): Promise<void>;
         migrateVMTask(_this: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, priority: vsanhealthService.vim.VirtualMachineMovePriority, state: vsanhealthService.vim.VirtualMachinePowerState): Promise<vsanhealthService.vim.ManagedObjectReference>;
         relocateVMTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineRelocateSpec, priority: vsanhealthService.vim.VirtualMachineMovePriority): Promise<vsanhealthService.vim.ManagedObjectReference>;
         cloneVMTask(_this: vsanhealthService.vim.ManagedObjectReference, folder: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.VirtualMachineCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exportVm(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsTemplate(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         markAsVirtualMachine(_this: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         unregisterVM(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetGuestInformation(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         mountToolsInstaller(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         unmountToolsInstaller(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         upgradeToolsTask(_this: vsanhealthService.vim.ManagedObjectReference, installerOptions: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         acquireMksTicket(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VirtualMachineMksTicket>;
         acquireTicket(_this: vsanhealthService.vim.ManagedObjectReference, ticketType: string): Promise<vsanhealthService.vim.VirtualMachineTicket>;
         setScreenResolution(_this: vsanhealthService.vim.ManagedObjectReference, width: number, height: number): Promise<void>;
         defragmentAllDisks(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createSecondaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createSecondaryVMExTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.FaultToleranceConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         turnOffFaultToleranceForVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         makePrimaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         terminateFaultTolerantVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         disableSecondaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enableSecondaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         setDisplayTopology(_this: vsanhealthService.vim.ManagedObjectReference, displays: Array<vsanhealthService.vim.VirtualMachineDisplayTopology>): Promise<void>;
         startRecordingTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         stopRecordingTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         startReplayingTask(_this: vsanhealthService.vim.ManagedObjectReference, replaySnapshot: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         stopReplayingTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         promoteDisksTask(_this: vsanhealthService.vim.ManagedObjectReference, unlink: boolean, disks: Array<vsanhealthService.vim.VirtualDisk>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createScreenshotTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         putUsbScanCodes(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.UsbScanCodeSpec): Promise<number>;
         queryChangedDiskAreas(_this: vsanhealthService.vim.ManagedObjectReference, snapshot: vsanhealthService.vim.ManagedObjectReference, deviceKey: number, startOffset: number, changeId: string): Promise<vsanhealthService.vim.DiskChangeInfo>;
         queryUnownedFiles(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         reloadVirtualMachineFromPathTask(_this: vsanhealthService.vim.ManagedObjectReference, configurationPath: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryFaultToleranceCompatibility(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.LocalizedMethodFault>>;
         queryFaultToleranceCompatibilityEx(_this: vsanhealthService.vim.ManagedObjectReference, forLegacyFt: boolean): Promise<Array<vsanhealthService.vim.LocalizedMethodFault>>;
         terminateVM(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         sendNMI(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         attachDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, diskId: string, datastore: vsanhealthService.vim.ManagedObjectReference, controllerKey: number, unitNumber: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         detachDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, diskId: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         performVsanUpgradePreflightCheck(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, downgradeFormat: boolean): Promise<vsanhealthService.vim.VsanUpgradeSystemPreflightCheckResult>;
         queryVsanUpgradeStatus(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanUpgradeSystemUpgradeStatus>;
         performVsanUpgradeTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, performObjectUpgrade: boolean, downgradeFormat: boolean, allowReducedRedundancy: boolean, excludeHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeAlarm(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureAlarm(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.AlarmSpec): Promise<void>;
         createAlarm(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.AlarmSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getAlarm(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         areAlarmActionsEnabled(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         enableAlarmActions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, enabled: boolean): Promise<void>;
         getAlarmState(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.AlarmState>>;
         acknowledgeAlarm(_this: vsanhealthService.vim.ManagedObjectReference, alarm: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         configureEvcModeTask(_this: vsanhealthService.vim.ManagedObjectReference, evcModeKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         disableEvcModeTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkConfigureEvcModeTask(_this: vsanhealthService.vim.ManagedObjectReference, evcModeKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkAddHostEvcTask(_this: vsanhealthService.vim.ManagedObjectReference, cnxSpec: vsanhealthService.vim.HostConnectSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         reconfigureDVPortgroupTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVPortgroupConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVPortgroupRollbackTask(_this: vsanhealthService.vim.ManagedObjectReference, entityBackup: vsanhealthService.vim.EntityBackupConfig): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryAvailableDvsSpec(_this: vsanhealthService.vim.ManagedObjectReference, recommended: boolean): Promise<Array<vsanhealthService.vim.DistributedVirtualSwitchProductSpec>>;
         queryCompatibleHostForNewDvs(_this: vsanhealthService.vim.ManagedObjectReference, container: vsanhealthService.vim.ManagedObjectReference, recursive: boolean, switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         queryCompatibleHostForExistingDvs(_this: vsanhealthService.vim.ManagedObjectReference, container: vsanhealthService.vim.ManagedObjectReference, recursive: boolean, dvs: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         queryDvsCompatibleHostSpec(_this: vsanhealthService.vim.ManagedObjectReference, switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<Array<vsanhealthService.vim.DistributedVirtualSwitchHostProductSpec>>;
         queryDvsFeatureCapability(_this: vsanhealthService.vim.ManagedObjectReference, switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<vsanhealthService.vim.DVSFeatureCapability>;
         queryDvsByUuid(_this: vsanhealthService.vim.ManagedObjectReference, uuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryDvsConfigTarget(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, dvs: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.DVSManagerDvsConfigTarget>;
         queryDvsCheckCompatibility(_this: vsanhealthService.vim.ManagedObjectReference, hostContainer: vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainer, dvsProductSpec: vsanhealthService.vim.DistributedVirtualSwitchManagerDvsProductSpec, hostFilterSpec: Array<vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec>): Promise<Array<vsanhealthService.vim.DistributedVirtualSwitchManagerCompatibilityResult>>;
         rectifyDvsOnHostTask(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVSManagerExportEntityTask(_this: vsanhealthService.vim.ManagedObjectReference, selectionSet: Array<vsanhealthService.vim.SelectionSet>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVSManagerImportEntityTask(_this: vsanhealthService.vim.ManagedObjectReference, entityBackup: Array<vsanhealthService.vim.EntityBackupConfig>, importType: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVSManagerLookupDvPortGroup(_this: vsanhealthService.vim.ManagedObjectReference, switchUuid: string, portgroupKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDVSLacpGroupConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, lacpGroupSpec: Array<vsanhealthService.vim.VMwareDvsLacpGroupSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addKey(_this: vsanhealthService.vim.ManagedObjectReference, key: vsanhealthService.vim.CryptoKeyPlain): Promise<void>;
         addKeys(_this: vsanhealthService.vim.ManagedObjectReference, keys: Array<vsanhealthService.vim.CryptoKeyPlain>): Promise<Array<vsanhealthService.vim.CryptoKeyResult>>;
         removeKey(_this: vsanhealthService.vim.ManagedObjectReference, key: vsanhealthService.vim.CryptoKeyId, force: boolean): Promise<void>;
         removeKeys(_this: vsanhealthService.vim.ManagedObjectReference, keys: Array<vsanhealthService.vim.CryptoKeyId>, force: boolean): Promise<Array<vsanhealthService.vim.CryptoKeyResult>>;
         listKeys(_this: vsanhealthService.vim.ManagedObjectReference, limit: number): Promise<Array<vsanhealthService.vim.CryptoKeyId>>;
         registerKmipServer(_this: vsanhealthService.vim.ManagedObjectReference, server: vsanhealthService.vim.KmipServerSpec): Promise<void>;
         markDefault(_this: vsanhealthService.vim.ManagedObjectReference, clusterId: vsanhealthService.vim.KeyProviderId): Promise<void>;
         updateKmipServer(_this: vsanhealthService.vim.ManagedObjectReference, server: vsanhealthService.vim.KmipServerSpec): Promise<void>;
         removeKmipServer(_this: vsanhealthService.vim.ManagedObjectReference, clusterId: vsanhealthService.vim.KeyProviderId, serverName: string): Promise<void>;
         listKmipServers(_this: vsanhealthService.vim.ManagedObjectReference, limit: number): Promise<Array<vsanhealthService.vim.KmipClusterInfo>>;
         retrieveKmipServersStatusTask(_this: vsanhealthService.vim.ManagedObjectReference, clusters: Array<vsanhealthService.vim.KmipClusterInfo>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         generateKey(_this: vsanhealthService.vim.ManagedObjectReference, keyProvider: vsanhealthService.vim.KeyProviderId): Promise<vsanhealthService.vim.CryptoKeyResult>;
         retrieveKmipServerCert(_this: vsanhealthService.vim.ManagedObjectReference, keyProvider: vsanhealthService.vim.KeyProviderId, server: vsanhealthService.vim.KmipServerInfo): Promise<vsanhealthService.vim.CryptoManagerKmipServerCertInfo>;
         uploadKmipServerCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string): Promise<void>;
         generateSelfSignedClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         generateClientCsr(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         retrieveSelfSignedClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         retrieveClientCsr(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         retrieveClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         updateSelfSignedClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string): Promise<void>;
         updateKmsSignedCsrClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string): Promise<void>;
         uploadClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string, privateKey: string): Promise<void>;
         readNextEvents(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.Event>>;
         readPreviousEvents(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.Event>>;
         retrieveArgumentDescription(_this: vsanhealthService.vim.ManagedObjectReference, eventTypeId: string): Promise<Array<vsanhealthService.vim.EventArgDesc>>;
         createCollectorForEvents(_this: vsanhealthService.vim.ManagedObjectReference, filter: vsanhealthService.vim.EventFilterSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         logUserEvent(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, msg: string): Promise<void>;
         queryEvents(_this: vsanhealthService.vim.ManagedObjectReference, filter: vsanhealthService.vim.EventFilterSpec): Promise<Array<vsanhealthService.vim.Event>>;
         postEvent(_this: vsanhealthService.vim.ManagedObjectReference, eventToPost: vsanhealthService.vim.Event, taskInfo: vsanhealthService.vim.TaskInfo): Promise<void>;
         joinDomainTask(_this: vsanhealthService.vim.ManagedObjectReference, domainName: string, userName: string, password: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         joinDomainWithCAMTask(_this: vsanhealthService.vim.ManagedObjectReference, domainName: string, camServer: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         importCertificateForCAMTask(_this: vsanhealthService.vim.ManagedObjectReference, certPath: string, camServer: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         leaveCurrentDomainTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enableSmartCardAuthentication(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         installSmartCardTrustAnchor(_this: vsanhealthService.vim.ManagedObjectReference, cert: string): Promise<void>;
         replaceSmartCardTrustAnchors(_this: vsanhealthService.vim.ManagedObjectReference, certs: Array<string>): Promise<void>;
         removeSmartCardTrustAnchor(_this: vsanhealthService.vim.ManagedObjectReference, issuer: string, serial: string): Promise<void>;
         removeSmartCardTrustAnchorByFingerprint(_this: vsanhealthService.vim.ManagedObjectReference, fingerprint: string, digest: string): Promise<void>;
         listSmartCardTrustAnchors(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         disableSmartCardAuthentication(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureAutostart(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostAutoStartManagerConfig): Promise<void>;
         autoStartPowerOn(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         autoStartPowerOff(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryBootDevices(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostBootDeviceInfo>;
         updateBootDevice(_this: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<void>;
         configureHostCacheTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostCacheConfigurationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         generateCertificateSigningRequest(_this: vsanhealthService.vim.ManagedObjectReference, useIpAddressAsCommonName: boolean): Promise<string>;
         generateCertificateSigningRequestByDn(_this: vsanhealthService.vim.ManagedObjectReference, distinguishedName: string): Promise<string>;
         installServerCertificate(_this: vsanhealthService.vim.ManagedObjectReference, cert: string): Promise<void>;
         replaceCACertificatesAndCRLs(_this: vsanhealthService.vim.ManagedObjectReference, caCert: Array<string>, caCrl: Array<string>): Promise<void>;
         listCACertificates(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         listCACertificateRevocationLists(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         enableHyperThreading(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         disableHyperThreading(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         searchDatastoreTask(_this: vsanhealthService.vim.ManagedObjectReference, datastorePath: string, searchSpec: vsanhealthService.vim.HostDatastoreBrowserSearchSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         searchDatastoreSubFoldersTask(_this: vsanhealthService.vim.ManagedObjectReference, datastorePath: string, searchSpec: vsanhealthService.vim.HostDatastoreBrowserSearchSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteFile(_this: vsanhealthService.vim.ManagedObjectReference, datastorePath: string): Promise<void>;
         updateLocalSwapDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryAvailableDisksForVmfs(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostScsiDisk>>;
         queryVmfsDatastoreCreateOptions(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: string, vmfsMajorVersion: number): Promise<Array<vsanhealthService.vim.VmfsDatastoreOption>>;
         createVmfsDatastore(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VmfsDatastoreCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryVmfsDatastoreExtendOptions(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, devicePath: string, suppressExpandCandidates: boolean): Promise<Array<vsanhealthService.vim.VmfsDatastoreOption>>;
         queryVmfsDatastoreExpandOptions(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VmfsDatastoreOption>>;
         extendVmfsDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VmfsDatastoreExtendSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         expandVmfsDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VmfsDatastoreExpandSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createNasDatastore(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostNasVolumeSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createLocalDatastore(_this: vsanhealthService.vim.ManagedObjectReference, name: string, path: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createVvolDatastore(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostDatastoreSystemVvolDatastoreSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         removeDatastoreExTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         configureDatastorePrincipal(_this: vsanhealthService.vim.ManagedObjectReference, userName: string, password: string): Promise<void>;
         queryUnresolvedVmfsVolumes(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostUnresolvedVmfsVolume>>;
         resignatureUnresolvedVmfsVolumeTask(_this: vsanhealthService.vim.ManagedObjectReference, resolutionSpec: vsanhealthService.vim.HostUnresolvedVmfsResignatureSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDateTimeConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostDateTimeConfig): Promise<void>;
         queryAvailableTimeZones(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostDateTimeSystemTimeZone>>;
         queryDateTime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Date>;
         updateDateTime(_this: vsanhealthService.vim.ManagedObjectReference, dateTime: Date): Promise<void>;
         refreshDateTimeSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryAvailablePartition(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostDiagnosticPartition>>;
         selectActivePartition(_this: vsanhealthService.vim.ManagedObjectReference, partition: vsanhealthService.vim.HostScsiDiskPartition): Promise<void>;
         queryPartitionCreateOptions(_this: vsanhealthService.vim.ManagedObjectReference, storageType: string, diagnosticType: string): Promise<Array<vsanhealthService.vim.HostDiagnosticPartitionCreateOption>>;
         queryPartitionCreateDesc(_this: vsanhealthService.vim.ManagedObjectReference, diskUuid: string, diagnosticType: string): Promise<vsanhealthService.vim.HostDiagnosticPartitionCreateDescription>;
         createDiagnosticPartition(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostDiagnosticPartitionCreateSpec): Promise<void>;
         esxAgentHostManagerUpdateConfig(_this: vsanhealthService.vim.ManagedObjectReference, configInfo: vsanhealthService.vim.HostEsxAgentHostManagerConfigInfo): Promise<void>;
         updateDefaultPolicy(_this: vsanhealthService.vim.ManagedObjectReference, defaultPolicy: vsanhealthService.vim.HostFirewallDefaultPolicy): Promise<void>;
         enableRuleset(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         disableRuleset(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         updateRuleset(_this: vsanhealthService.vim.ManagedObjectReference, id: string, spec: vsanhealthService.vim.HostFirewallRulesetRulesetSpec): Promise<void>;
         refreshFirewall(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetFirmwareToFactoryDefaults(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         backupFirmwareConfiguration(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         queryFirmwareConfigUploadURL(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         restoreFirmwareConfiguration(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<void>;
         refreshGraphicsManager(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         isSharedGraphicsActive(_this: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         updateGraphicsConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostGraphicsConfig): Promise<void>;
         refreshHealthStatusSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetSystemHealthInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         clearSystemEventLog(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         fetchSystemEventLog(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.SystemEventInfo>>;
         retrieveHostAccessControlEntries(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostAccessControlEntry>>;
         changeAccessMode(_this: vsanhealthService.vim.ManagedObjectReference, principal: string, isGroup: boolean, accessMode: vsanhealthService.vim.HostAccessMode): Promise<void>;
         querySystemUsers(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         updateSystemUsers(_this: vsanhealthService.vim.ManagedObjectReference, users: Array<string>): Promise<void>;
         queryLockdownExceptions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         updateLockdownExceptions(_this: vsanhealthService.vim.ManagedObjectReference, users: Array<string>): Promise<void>;
         changeLockdownMode(_this: vsanhealthService.vim.ManagedObjectReference, mode: vsanhealthService.vim.HostLockdownMode): Promise<void>;
         hostImageConfigGetAcceptance(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         hostImageConfigGetProfile(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostImageProfileSummary>;
         updateHostImageAcceptanceLevel(_this: vsanhealthService.vim.ManagedObjectReference, newAcceptanceLevel: string): Promise<void>;
         fetchSoftwarePackages(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.SoftwarePackage>>;
         installDate(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Date>;
         queryVnicStatus(_this: vsanhealthService.vim.ManagedObjectReference, vnicDevice: string): Promise<vsanhealthService.vim.IscsiStatus>;
         queryPnicStatus(_this: vsanhealthService.vim.ManagedObjectReference, pnicDevice: string): Promise<vsanhealthService.vim.IscsiStatus>;
         queryBoundVnics(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string): Promise<Array<vsanhealthService.vim.IscsiPortInfo>>;
         queryCandidateNics(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string): Promise<Array<vsanhealthService.vim.IscsiPortInfo>>;
         bindVnic(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string, vnicDevice: string): Promise<void>;
         unbindVnic(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string, vnicDevice: string, force: boolean): Promise<void>;
         queryMigrationDependencies(_this: vsanhealthService.vim.ManagedObjectReference, pnicDevice: Array<string>): Promise<vsanhealthService.vim.IscsiMigrationDependency>;
         queryModules(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.KernelModuleInfo>>;
         updateModuleOptionString(_this: vsanhealthService.vim.ManagedObjectReference, name: string, options: string): Promise<void>;
         queryConfiguredModuleOptionString(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<string>;
         createUser(_this: vsanhealthService.vim.ManagedObjectReference, user: vsanhealthService.vim.HostAccountSpec): Promise<void>;
         updateUser(_this: vsanhealthService.vim.ManagedObjectReference, user: vsanhealthService.vim.HostAccountSpec): Promise<void>;
         createGroup(_this: vsanhealthService.vim.ManagedObjectReference, group: vsanhealthService.vim.HostAccountSpec): Promise<void>;
         removeUser(_this: vsanhealthService.vim.ManagedObjectReference, userName: string): Promise<void>;
         removeGroup(_this: vsanhealthService.vim.ManagedObjectReference, groupName: string): Promise<void>;
         assignUserToGroup(_this: vsanhealthService.vim.ManagedObjectReference, user: string, group: string): Promise<void>;
         unassignUserFromGroup(_this: vsanhealthService.vim.ManagedObjectReference, user: string, group: string): Promise<void>;
         reconfigureServiceConsoleReservation(_this: vsanhealthService.vim.ManagedObjectReference, cfgBytes: number): Promise<void>;
         reconfigureVirtualMachineReservation(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineMemoryReservationSpec): Promise<void>;
         updateNetworkConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostNetworkConfig, changeMode: string): Promise<vsanhealthService.vim.HostNetworkConfigResult>;
         updateDnsConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostDnsConfig): Promise<void>;
         updateIpRouteConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostIpRouteConfig): Promise<void>;
         updateConsoleIpRouteConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostIpRouteConfig): Promise<void>;
         updateIpRouteTableConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostIpRouteTableConfig): Promise<void>;
         addVirtualSwitch(_this: vsanhealthService.vim.ManagedObjectReference, vswitchName: string, spec: vsanhealthService.vim.HostVirtualSwitchSpec): Promise<void>;
         removeVirtualSwitch(_this: vsanhealthService.vim.ManagedObjectReference, vswitchName: string): Promise<void>;
         updateVirtualSwitch(_this: vsanhealthService.vim.ManagedObjectReference, vswitchName: string, spec: vsanhealthService.vim.HostVirtualSwitchSpec): Promise<void>;
         addPortGroup(_this: vsanhealthService.vim.ManagedObjectReference, portgrp: vsanhealthService.vim.HostPortGroupSpec): Promise<void>;
         removePortGroup(_this: vsanhealthService.vim.ManagedObjectReference, pgName: string): Promise<void>;
         updatePortGroup(_this: vsanhealthService.vim.ManagedObjectReference, pgName: string, portgrp: vsanhealthService.vim.HostPortGroupSpec): Promise<void>;
         updatePhysicalNicLinkSpeed(_this: vsanhealthService.vim.ManagedObjectReference, device: string, linkSpeed: vsanhealthService.vim.PhysicalNicLinkInfo): Promise<void>;
         queryNetworkHint(_this: vsanhealthService.vim.ManagedObjectReference, device: Array<string>): Promise<Array<vsanhealthService.vim.PhysicalNicHintInfo>>;
         addVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, portgroup: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<string>;
         removeVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         updateVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<void>;
         addServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, portgroup: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<string>;
         removeServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         updateServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<void>;
         restartServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         refreshNetworkSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         checkHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         scanHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, repository: vsanhealthService.vim.HostPatchManagerLocator, updateID: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         scanHostPatchV2Task(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         stageHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, vibUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         installHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, repository: vsanhealthService.vim.HostPatchManagerLocator, updateID: string, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         installHostPatchV2Task(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, vibUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         uninstallHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, bulletinIds: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refresh(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updatePassthruConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: Array<vsanhealthService.vim.HostPciPassthruConfig>): Promise<void>;
         configurePowerPolicy(_this: vsanhealthService.vim.ManagedObjectReference, key: number): Promise<void>;
         updateServicePolicy(_this: vsanhealthService.vim.ManagedObjectReference, id: string, policy: string): Promise<void>;
         startService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         stopService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         restartService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         uninstallService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         refreshServices(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureSnmpAgent(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostSnmpConfigSpec): Promise<void>;
         sendTestNotification(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         retrieveDiskPartitionInfo(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: Array<string>): Promise<Array<vsanhealthService.vim.HostDiskPartitionInfo>>;
         computeDiskPartitionInfo(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: string, layout: vsanhealthService.vim.HostDiskPartitionLayout, partitionFormat: string): Promise<vsanhealthService.vim.HostDiskPartitionInfo>;
         computeDiskPartitionInfoForResize(_this: vsanhealthService.vim.ManagedObjectReference, partition: vsanhealthService.vim.HostScsiDiskPartition, blockRange: vsanhealthService.vim.HostDiskPartitionBlockRange, partitionFormat: string): Promise<vsanhealthService.vim.HostDiskPartitionInfo>;
         updateDiskPartitions(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: string, spec: vsanhealthService.vim.HostDiskPartitionSpec): Promise<void>;
         formatVmfs(_this: vsanhealthService.vim.ManagedObjectReference, createSpec: vsanhealthService.vim.HostVmfsSpec): Promise<vsanhealthService.vim.HostVmfsVolume>;
         mountVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         unmountVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         unmountVmfsVolumeExTask(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         mountVmfsVolumeExTask(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unmapVmfsVolumeExTask(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteVmfsVolumeState(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         rescanVmfs(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         attachVmfsExtent(_this: vsanhealthService.vim.ManagedObjectReference, vmfsPath: string, extent: vsanhealthService.vim.HostScsiDiskPartition): Promise<void>;
         expandVmfsExtent(_this: vsanhealthService.vim.ManagedObjectReference, vmfsPath: string, extent: vsanhealthService.vim.HostScsiDiskPartition): Promise<void>;
         upgradeVmfs(_this: vsanhealthService.vim.ManagedObjectReference, vmfsPath: string): Promise<void>;
         upgradeVmLayout(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryUnresolvedVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostUnresolvedVmfsVolume>>;
         resolveMultipleUnresolvedVmfsVolumes(_this: vsanhealthService.vim.ManagedObjectReference, resolutionSpec: Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec>): Promise<Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionResult>>;
         resolveMultipleUnresolvedVmfsVolumesExTask(_this: vsanhealthService.vim.ManagedObjectReference, resolutionSpec: Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unmountForceMountedVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         rescanHba(_this: vsanhealthService.vim.ManagedObjectReference, hbaDevice: string): Promise<void>;
         rescanAllHba(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateSoftwareInternetScsiEnabled(_this: vsanhealthService.vim.ManagedObjectReference, enabled: boolean): Promise<void>;
         updateInternetScsiDiscoveryProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, discoveryProperties: vsanhealthService.vim.HostInternetScsiHbaDiscoveryProperties): Promise<void>;
         updateInternetScsiAuthenticationProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, authenticationProperties: vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties, targetSet: vsanhealthService.vim.HostInternetScsiHbaTargetSet): Promise<void>;
         updateInternetScsiDigestProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targetSet: vsanhealthService.vim.HostInternetScsiHbaTargetSet, digestProperties: vsanhealthService.vim.HostInternetScsiHbaDigestProperties): Promise<void>;
         updateInternetScsiAdvancedOptions(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targetSet: vsanhealthService.vim.HostInternetScsiHbaTargetSet, options: Array<vsanhealthService.vim.HostInternetScsiHbaParamValue>): Promise<void>;
         updateInternetScsiIPProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, ipProperties: vsanhealthService.vim.HostInternetScsiHbaIPProperties): Promise<void>;
         updateInternetScsiName(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, iScsiName: string): Promise<void>;
         updateInternetScsiAlias(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, iScsiAlias: string): Promise<void>;
         addInternetScsiSendTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>): Promise<void>;
         removeInternetScsiSendTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>): Promise<void>;
         addInternetScsiStaticTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>): Promise<void>;
         removeInternetScsiStaticTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>): Promise<void>;
         enableMultipathPath(_this: vsanhealthService.vim.ManagedObjectReference, pathName: string): Promise<void>;
         disableMultipathPath(_this: vsanhealthService.vim.ManagedObjectReference, pathName: string): Promise<void>;
         setMultipathLunPolicy(_this: vsanhealthService.vim.ManagedObjectReference, lunId: string, policy: vsanhealthService.vim.HostMultipathInfoLogicalUnitPolicy): Promise<void>;
         queryPathSelectionPolicyOptions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostPathSelectionPolicyOption>>;
         queryStorageArrayTypePolicyOptions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostStorageArrayTypePolicyOption>>;
         updateScsiLunDisplayName(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: string, displayName: string): Promise<void>;
         detachScsiLun(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: string): Promise<void>;
         detachScsiLunExTask(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteScsiLunState(_this: vsanhealthService.vim.ManagedObjectReference, lunCanonicalName: string): Promise<void>;
         attachScsiLun(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: string): Promise<void>;
         attachScsiLunExTask(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshStorageSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         discoverFcoeHbas(_this: vsanhealthService.vim.ManagedObjectReference, fcoeSpec: vsanhealthService.vim.FcoeConfigFcoeSpecification): Promise<void>;
         markForRemoval(_this: vsanhealthService.vim.ManagedObjectReference, hbaName: string, remove: boolean): Promise<void>;
         formatVffs(_this: vsanhealthService.vim.ManagedObjectReference, createSpec: vsanhealthService.vim.HostVffsSpec): Promise<vsanhealthService.vim.HostVffsVolume>;
         extendVffs(_this: vsanhealthService.vim.ManagedObjectReference, vffsPath: string, devicePath: string, spec: vsanhealthService.vim.HostDiskPartitionSpec): Promise<void>;
         destroyVffs(_this: vsanhealthService.vim.ManagedObjectReference, vffsPath: string): Promise<void>;
         mountVffsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vffsUuid: string): Promise<void>;
         unmountVffsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vffsUuid: string): Promise<void>;
         deleteVffsVolumeState(_this: vsanhealthService.vim.ManagedObjectReference, vffsUuid: string): Promise<void>;
         rescanVffs(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryAvailableSsds(_this: vsanhealthService.vim.ManagedObjectReference, vffsPath: string): Promise<Array<vsanhealthService.vim.HostScsiDisk>>;
         setNFSUser(_this: vsanhealthService.vim.ManagedObjectReference, user: string, password: string): Promise<void>;
         changeNFSUserPassword(_this: vsanhealthService.vim.ManagedObjectReference, password: string): Promise<void>;
         queryNFSUser(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostNasVolumeUserInfo>;
         clearNFSUser(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         turnDiskLocatorLedOnTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuids: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         turnDiskLocatorLedOffTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuids: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsSsdTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsNonSsdTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsLocalTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsNonLocalTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateVmfsUnmapPriority(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string, unmapPriority: string): Promise<void>;
         queryVmfsConfigOption(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VmfsConfigOption>>;
         configureVFlashResourceExTask(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostConfigureVFlashResource(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigSpec): Promise<void>;
         hostRemoveVFlashResource(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         hostConfigVFlashCache(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigSpec): Promise<void>;
         hostGetVFlashModuleDefaultConfig(_this: vsanhealthService.vim.ManagedObjectReference, vFlashModule: string): Promise<vsanhealthService.vim.VirtualDiskVFlashCacheConfigInfo>;
         updateIpConfig(_this: vsanhealthService.vim.ManagedObjectReference, ipConfig: vsanhealthService.vim.HostIpConfig): Promise<void>;
         selectVnic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         deselectVnic(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryNetConfig(_this: vsanhealthService.vim.ManagedObjectReference, nicType: string): Promise<vsanhealthService.vim.VirtualNicManagerNetConfig>;
         selectVnicForNicType(_this: vsanhealthService.vim.ManagedObjectReference, nicType: string, device: string): Promise<void>;
         deselectVnicForNicType(_this: vsanhealthService.vim.ManagedObjectReference, nicType: string, device: string): Promise<void>;
         queryCmmds(_this: vsanhealthService.vim.ManagedObjectReference, queries: Array<vsanhealthService.vim.HostVsanInternalSystemCmmdsQuery>): Promise<string>;
         queryPhysicalVsanDisks(_this: vsanhealthService.vim.ManagedObjectReference, props: Array<string>): Promise<string>;
         queryVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<string>;
         queryObjectsOnPhysicalVsanDisk(_this: vsanhealthService.vim.ManagedObjectReference, disks: Array<string>): Promise<string>;
         abdicateDomOwnership(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<Array<string>>;
         queryVsanStatistics(_this: vsanhealthService.vim.ManagedObjectReference, labels: Array<string>): Promise<string>;
         reconfigureDomObject(_this: vsanhealthService.vim.ManagedObjectReference, uuid: string, policy: string): Promise<void>;
         querySyncingVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<string>;
         runVsanPhysicalDiskDiagnostics(_this: vsanhealthService.vim.ManagedObjectReference, disks: Array<string>): Promise<Array<vsanhealthService.vim.HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult>>;
         getVsanObjExtAttrs(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<string>;
         reconfigurationSatisfiable(_this: vsanhealthService.vim.ManagedObjectReference, pcbs: Array<vsanhealthService.vim.VsanPolicyChangeBatch>, ignoreSatisfiability: boolean): Promise<Array<vsanhealthService.vim.VsanPolicySatisfiability>>;
         canProvisionObjects(_this: vsanhealthService.vim.ManagedObjectReference, npbs: Array<vsanhealthService.vim.VsanNewPolicyBatch>, ignoreSatisfiability: boolean): Promise<Array<vsanhealthService.vim.VsanPolicySatisfiability>>;
         deleteVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, force: boolean): Promise<Array<vsanhealthService.vim.HostVsanInternalSystemDeleteVsanObjectsResult>>;
         upgradeVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, newVersion: number): Promise<Array<vsanhealthService.vim.HostVsanInternalSystemVsanObjectOperationResult>>;
         queryVsanObjectUuidsByFilter(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, limit: number, version: number): Promise<Array<string>>;
         queryDisksForVsan(_this: vsanhealthService.vim.ManagedObjectReference, canonicalName: Array<string>): Promise<Array<vsanhealthService.vim.VsanHostDiskResult>>;
         addDisksTask(_this: vsanhealthService.vim.ManagedObjectReference, disk: Array<vsanhealthService.vim.HostScsiDisk>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         initializeDisksTask(_this: vsanhealthService.vim.ManagedObjectReference, mapping: Array<vsanhealthService.vim.VsanHostDiskMapping>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, disk: Array<vsanhealthService.vim.HostScsiDisk>, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeDiskMappingTask(_this: vsanhealthService.vim.ManagedObjectReference, mapping: Array<vsanhealthService.vim.VsanHostDiskMapping>, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unmountDiskMappingTask(_this: vsanhealthService.vim.ManagedObjectReference, mapping: Array<vsanhealthService.vim.VsanHostDiskMapping>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateVsanTask(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.VsanHostConfigInfo): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryHostStatus(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanHostClusterStatus>;
         evacuateVsanNodeTask(_this: vsanhealthService.vim.ManagedObjectReference, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         recommissionVsanNodeTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryOptions(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<Array<vsanhealthService.vim.OptionValue>>;
         updateOptions(_this: vsanhealthService.vim.ManagedObjectReference, changedValue: Array<vsanhealthService.vim.OptionValue>): Promise<void>;
         checkComplianceTask(_this: vsanhealthService.vim.ManagedObjectReference, profile: Array<vsanhealthService.vim.ManagedObjectReference>, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryComplianceStatus(_this: vsanhealthService.vim.ManagedObjectReference, profile: Array<vsanhealthService.vim.ManagedObjectReference>, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ComplianceResult>>;
         clearComplianceStatus(_this: vsanhealthService.vim.ManagedObjectReference, profile: Array<vsanhealthService.vim.ManagedObjectReference>, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         queryExpressionMetadata(_this: vsanhealthService.vim.ManagedObjectReference, expressionName: Array<string>, profile: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProfileExpressionMetadata>>;
         retrieveDescription(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ProfileDescription>;
         destroyProfile(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         associateProfile(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         dissociateProfile(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         checkProfileComplianceTask(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exportProfile(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         createProfile(_this: vsanhealthService.vim.ManagedObjectReference, createSpec: vsanhealthService.vim.ProfileCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryPolicyMetadata(_this: vsanhealthService.vim.ManagedObjectReference, policyName: Array<string>, profile: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProfilePolicyMetadata>>;
         findAssociatedProfile(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         updateClusterProfile(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.ClusterProfileConfigSpec): Promise<void>;
         updateReferenceHost(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateHostProfile(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostProfileConfigSpec): Promise<void>;
         executeHostProfile(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, deferredParam: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>): Promise<vsanhealthService.vim.ProfileExecuteResult>;
         updateHostSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, hostSpec: vsanhealthService.vim.HostSpecification): Promise<void>;
         updateHostSubSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, hostSubSpec: vsanhealthService.vim.HostSubSpecification): Promise<void>;
         retrieveHostSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, fromHost: boolean): Promise<vsanhealthService.vim.HostSpecification>;
         deleteHostSubSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, subSpecName: string): Promise<void>;
         deleteHostSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         hostSpecGetUpdatedHosts(_this: vsanhealthService.vim.ManagedObjectReference, startChangeID: string, endChangeID: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         applyHostConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.HostConfigSpec, userInput: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         generateConfigTaskList(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.HostConfigSpec, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostProfileManagerConfigTaskList>;
         generateHostProfileTaskListTask(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.HostConfigSpec, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryHostProfileMetadata(_this: vsanhealthService.vim.ManagedObjectReference, profileName: Array<string>, profile: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProfileMetadata>>;
         queryProfileStructure(_this: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ProfileProfileStructure>;
         createDefaultProfile(_this: vsanhealthService.vim.ManagedObjectReference, profileType: string, profileTypeName: string, profile: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ApplyProfile>;
         updateAnswerFileTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.AnswerFileCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveAnswerFile(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.AnswerFile>;
         retrieveAnswerFileForProfile(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, applyProfile: vsanhealthService.vim.HostApplyProfile): Promise<vsanhealthService.vim.AnswerFile>;
         exportAnswerFileTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkAnswerFileStatusTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryAnswerFileStatus(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.AnswerFileStatusResult>>;
         updateHostCustomizationsTask(_this: vsanhealthService.vim.ManagedObjectReference, hostToConfigSpecMap: Array<vsanhealthService.vim.HostProfileManagerHostToConfigSpecMap>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveHostCustomizations(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.StructuredCustomizations>>;
         retrieveHostCustomizationsForProfile(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>, applyProfile: vsanhealthService.vim.HostApplyProfile): Promise<Array<vsanhealthService.vim.StructuredCustomizations>>;
         generateHostConfigTaskSpecTask(_this: vsanhealthService.vim.ManagedObjectReference, hostsInfo: Array<vsanhealthService.vim.StructuredCustomizations>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         applyEntitiesConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, applyConfigSpecs: Array<vsanhealthService.vim.ApplyHostProfileConfigurationSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ScheduledTaskSpec): Promise<void>;
         runScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ScheduledTaskSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveEntityScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         createObjectScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ScheduledTaskSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveObjectScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         prepareVchaTask(_this: vsanhealthService.vim.ManagedObjectReference, networkSpec: vsanhealthService.vim.VchaClusterNetworkSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deployVchaTask(_this: vsanhealthService.vim.ManagedObjectReference, deploymentSpec: vsanhealthService.vim.VchaClusterDeploymentSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         configureVchaTask(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.VchaClusterConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createPassiveNodeTask(_this: vsanhealthService.vim.ManagedObjectReference, passiveDeploymentSpec: vsanhealthService.vim.PassiveNodeDeploymentSpec, sourceVcSpec: vsanhealthService.vim.SourceNodeSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createWitnessNodeTask(_this: vsanhealthService.vim.ManagedObjectReference, witnessDeploymentSpec: vsanhealthService.vim.NodeDeploymentSpec, sourceVcSpec: vsanhealthService.vim.SourceNodeSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getVchaConfig(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VchaClusterConfigInfo>;
         destroyVchaTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         setClusterModeTask(_this: vsanhealthService.vim.ManagedObjectReference, mode: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getClusterMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         getVchaClusterHealth(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VchaClusterHealth>;
         initiateFailoverTask(_this: vsanhealthService.vim.ManagedObjectReference, planned: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         openInventoryViewFolder(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         closeInventoryViewFolder(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         modifyListView(_this: vsanhealthService.vim.ManagedObjectReference, add: Array<vsanhealthService.vim.ManagedObjectReference>, remove: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         resetListView(_this: vsanhealthService.vim.ManagedObjectReference, obj: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         resetListViewFromView(_this: vsanhealthService.vim.ManagedObjectReference, view: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         destroyView(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createInventoryView(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createContainerView(_this: vsanhealthService.vim.ManagedObjectReference, container: vsanhealthService.vim.ManagedObjectReference, type: Array<string>, recursive: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createListView(_this: vsanhealthService.vim.ManagedObjectReference, obj: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createListViewFromView(_this: vsanhealthService.vim.ManagedObjectReference, view: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         revertToSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, suppressPowerOn: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, removeChildren: boolean, consolidate: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         renameSnapshot(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string): Promise<void>;
         exportSnapshot(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkCompatibilityTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, testType: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryVMotionCompatibilityExTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: Array<vsanhealthService.vim.ManagedObjectReference>, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkMigrateTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, state: vsanhealthService.vim.VirtualMachinePowerState, testType: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkRelocateTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineRelocateSpec, testType: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addGuestAlias(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string, mapCert: boolean, base64Cert: string, aliasInfo: vsanhealthService.vim.GuestAuthAliasInfo): Promise<void>;
         removeGuestAlias(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string, base64Cert: string, subject: vsanhealthService.vim.GuestAuthSubject): Promise<void>;
         removeGuestAliasByCert(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string, base64Cert: string): Promise<void>;
         listGuestAliases(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string): Promise<Array<vsanhealthService.vim.GuestAliases>>;
         listGuestMappedAliases(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication): Promise<Array<vsanhealthService.vim.GuestMappedAliases>>;
         validateCredentialsInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication): Promise<void>;
         acquireCredentialsInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, requestedAuth: vsanhealthService.vim.GuestAuthentication, sessionID: number): Promise<vsanhealthService.vim.GuestAuthentication>;
         releaseCredentialsInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication): Promise<void>;
         makeDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, directoryPath: string, createParentDirectories: boolean): Promise<void>;
         deleteFileInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, filePath: string): Promise<void>;
         deleteDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, directoryPath: string, recursive: boolean): Promise<void>;
         moveDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, srcDirectoryPath: string, dstDirectoryPath: string): Promise<void>;
         moveFileInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, srcFilePath: string, dstFilePath: string, overwrite: boolean): Promise<void>;
         createTemporaryFileInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, prefix: string, suffix: string, directoryPath: string): Promise<string>;
         createTemporaryDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, prefix: string, suffix: string, directoryPath: string): Promise<string>;
         listFilesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, filePath: string, index: number, maxResults: number, matchPattern: string): Promise<vsanhealthService.vim.GuestListFileInfo>;
         changeFileAttributesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, guestFilePath: string, fileAttributes: vsanhealthService.vim.GuestFileAttributes): Promise<void>;
         initiateFileTransferFromGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, guestFilePath: string): Promise<vsanhealthService.vim.FileTransferInformation>;
         initiateFileTransferToGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, guestFilePath: string, fileAttributes: vsanhealthService.vim.GuestFileAttributes, fileSize: number, overwrite: boolean): Promise<string>;
         startProgramInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, spec: vsanhealthService.vim.GuestProgramSpec): Promise<number>;
         listProcessesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, pids: Array<number>): Promise<Array<vsanhealthService.vim.GuestProcessInfo>>;
         terminateProcessInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, pid: number): Promise<void>;
         readEnvironmentVariableInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, names: Array<string>): Promise<Array<string>>;
         createRegistryKeyInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, isVolatile: boolean, classType: string): Promise<void>;
         listRegistryKeysInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, recursive: boolean, matchPattern: string): Promise<Array<vsanhealthService.vim.GuestRegKeyRecordSpec>>;
         deleteRegistryKeyInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, recursive: boolean): Promise<void>;
         setRegistryValueInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, value: vsanhealthService.vim.GuestRegValueSpec): Promise<void>;
         listRegistryValuesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, expandStrings: boolean, matchPattern: string): Promise<Array<vsanhealthService.vim.GuestRegValueSpec>>;
         deleteRegistryValueInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, valueName: vsanhealthService.vim.GuestRegValueNameSpec): Promise<void>;
         hostCreateDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRegisterDisk(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string): Promise<vsanhealthService.vim.VStorageObject>;
         hostExtendDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, newCapacityInMB: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostInflateDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRenameVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<void>;
         hostDeleteVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRetrieveVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObject>;
         hostRetrieveVStorageObjectState(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObjectStateInfo>;
         hostListVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         hostCloneVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRelocateVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmRelocateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostReconcileDatastoreInventoryTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostScheduleReconcileDatastoreInventory(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerDisk(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string): Promise<vsanhealthService.vim.VStorageObject>;
         extendDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, newCapacityInMB: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         inflateDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         renameVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<void>;
         deleteVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObject>;
         retrieveVStorageObjectState(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObjectStateInfo>;
         listVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         cloneVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         relocateVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmRelocateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         attachTagToVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, category: string, tag: string): Promise<void>;
         detachTagFromVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, category: string, tag: string): Promise<void>;
         listVStorageObjectsAttachedToTag(_this: vsanhealthService.vim.ManagedObjectReference, category: string, tag: string): Promise<Array<string>>;
         listTagsAttachedToVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<Array<vsanhealthService.vim.VslmTagEntry>>;
         reconcileDatastoreInventoryTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         scheduleReconcileDatastoreInventory(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         destroyPropertyFilter(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createFilter(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.PropertyFilterSpec, partialUpdates: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveProperties(_this: vsanhealthService.vim.ManagedObjectReference, specSet: Array<vsanhealthService.vim.PropertyFilterSpec>): Promise<Array<vsanhealthService.vim.ObjectContent>>;
         checkForUpdates(_this: vsanhealthService.vim.ManagedObjectReference, version: string): Promise<vsanhealthService.vim.UpdateSet>;
         waitForUpdates(_this: vsanhealthService.vim.ManagedObjectReference, version: string): Promise<vsanhealthService.vim.UpdateSet>;
         cancelWaitForUpdates(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         waitForUpdatesEx(_this: vsanhealthService.vim.ManagedObjectReference, version: string, options: vsanhealthService.vim.WaitOptions): Promise<vsanhealthService.vim.UpdateSet>;
         retrievePropertiesEx(_this: vsanhealthService.vim.ManagedObjectReference, specSet: Array<vsanhealthService.vim.PropertyFilterSpec>, options: vsanhealthService.vim.RetrieveOptions): Promise<vsanhealthService.vim.RetrieveResult>;
         continueRetrievePropertiesEx(_this: vsanhealthService.vim.ManagedObjectReference, token: string): Promise<vsanhealthService.vim.RetrieveResult>;
         cancelRetrievePropertiesEx(_this: vsanhealthService.vim.ManagedObjectReference, token: string): Promise<void>;
         createPropertyCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyPropertyCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
      }
   }
   namespace vsanhealthService {
      interface xs {
      }
      namespace xs {
         interface AnyType {
            value: string;
         }
         interface AnyURI {
            value: string;
         }
         interface Base64Binary {
            value: string;
         }
         interface Boolean {
            value: string;
         }
         interface Byte {
            value: string;
         }
         interface DateTime {
            value: string;
         }
         interface Double {
            value: string;
         }
         interface Float {
            value: string;
         }
         interface ID {
            value: string;
         }
         interface Int {
            value: string;
         }
         interface Integer {
            value: string;
         }
         interface Long {
            value: string;
         }
         interface NCName {
            value: string;
         }
         interface NegativeInteger {
            value: string;
         }
         interface NonNegativeInteger {
            value: string;
         }
         interface NonPositiveInteger {
            value: string;
         }
         interface PositiveInteger {
            value: string;
         }
         interface QName {
            value: string;
         }
         interface Short {
            value: string;
         }
         interface String {
            value: string;
         }
         interface UnsignedLong {
            value: string;
         }
      }
      interface vim {
      }
      namespace vim {
         enum VsanStorageComplianceResultStorageComplianceStatus {
            "compliant",
            "nonCompliant",
            "unknown",
            "notApplicable",
         }
         interface VsanStorageComplianceResult extends vsanhealthService.vim.DynamicData {
            checkTime?: Date;
            profile?: string;
            objectUUID?: string;
            complianceStatus: string;
            mismatch: boolean;
            violatedPolicies?: Array<vsanhealthService.vim.VsanStoragePolicyStatus>;
            operationalStatus?: vsanhealthService.vim.VsanStorageOperationalStatus;
         }
         interface VsanStorageOperationalStatus extends vsanhealthService.vim.DynamicData {
            healthy?: boolean;
            operationETA?: Date;
            operationProgress?: number;
            transitional?: boolean;
         }
         interface VsanStoragePolicyStatus extends vsanhealthService.vim.DynamicData {
            id?: string;
            expectedValue?: string;
            currentValue?: string;
         }
         interface ArrayOfVsanStoragePolicyStatus {
            VsanStoragePolicyStatus?: Array<vsanhealthService.vim.VsanStoragePolicyStatus>;
         }
         interface VimClusterVSANPreferredFaultDomainInfo extends vsanhealthService.vim.DynamicData {
            preferredFaultDomainName?: string;
            preferredFaultDomainId?: string;
         }
         interface VimClusterVSANStretchedClusterCapability extends vsanhealthService.vim.DynamicData {
            hostMoId: string;
            connStatus?: string;
            isSupported?: boolean;
            hostCapability?: vsanhealthService.vim.VimHostVSANStretchedClusterHostCapability;
         }
         interface ArrayOfVimClusterVSANStretchedClusterCapability {
            VimClusterVSANStretchedClusterCapability?: Array<vsanhealthService.vim.VimClusterVSANStretchedClusterCapability>;
         }
         enum VimClusterVSANStretchedClusterConfigIssueInfoVSANStretchedClusterConfigIssueEnum {
            "ClusterWithoutOneWitnessHost",
            "ClusterWithoutTwoDataFaultDomains",
            "ClusterWithMultipleUnicastAgents",
            "WitnessPreferredFaultDomainInvalid",
            "WitnessPreferredFaultDomainNotExist",
            "WitnessInsideVcCluster",
            "WitnessFaultDomainInvalid",
            "HostUnicastAgentUnset",
            "WitnessWithNoDiskMapping",
            "HostWithNoStretchedClusterSupport",
            "HostWithInvalidUnicastAgent",
         }
         interface VimClusterVSANStretchedClusterFaultDomainConfig extends vsanhealthService.vim.DynamicData {
            firstFdName: string;
            firstFdHosts: Array<vsanhealthService.vim.ManagedObjectReference>;
            secondFdName: string;
            secondFdHosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VSANStretchedClusterHostVirtualApplianceStatus extends vsanhealthService.vim.DynamicData {
            vcCluster?: vsanhealthService.vim.ManagedObjectReference;
            isVirtualApp?: boolean;
         }
         interface VimClusterVSANWitnessHostInfo extends vsanhealthService.vim.DynamicData {
            nodeUuid: string;
            faultDomainName?: string;
            preferredFdName?: string;
            preferredFdUuid?: string;
            unicastAgentAddr?: string;
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfVimClusterVSANWitnessHostInfo {
            VimClusterVSANWitnessHostInfo?: Array<vsanhealthService.vim.VimClusterVSANWitnessHostInfo>;
         }
         interface VsanAttachToSrOperation extends vsanhealthService.vim.DynamicData {
            task?: vsanhealthService.vim.ManagedObjectReference;
            success?: boolean;
            timestamp?: Date;
            srNumber: string;
         }
         interface ArrayOfVsanAttachToSrOperation {
            VsanAttachToSrOperation?: Array<vsanhealthService.vim.VsanAttachToSrOperation>;
         }
         interface VsanClusterAdvCfgSyncHostResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            value: string;
         }
         interface ArrayOfVsanClusterAdvCfgSyncHostResult {
            VsanClusterAdvCfgSyncHostResult?: Array<vsanhealthService.vim.VsanClusterAdvCfgSyncHostResult>;
         }
         interface VsanClusterAdvCfgSyncResult extends vsanhealthService.vim.DynamicData {
            inSync: boolean;
            name: string;
            hostValues?: Array<vsanhealthService.vim.VsanClusterAdvCfgSyncHostResult>;
         }
         interface ArrayOfVsanClusterAdvCfgSyncResult {
            VsanClusterAdvCfgSyncResult?: Array<vsanhealthService.vim.VsanClusterAdvCfgSyncResult>;
         }
         interface VsanClusterBalancePerDiskInfo extends vsanhealthService.vim.DynamicData {
            uuid?: string;
            fullness: number;
            variance: number;
            fullnessAboveThreshold: number;
            dataToMoveB: number;
         }
         interface ArrayOfVsanClusterBalancePerDiskInfo {
            VsanClusterBalancePerDiskInfo?: Array<vsanhealthService.vim.VsanClusterBalancePerDiskInfo>;
         }
         interface VsanClusterBalanceSummary extends vsanhealthService.vim.DynamicData {
            varianceThreshold: number;
            disks?: Array<vsanhealthService.vim.VsanClusterBalancePerDiskInfo>;
         }
         interface VsanClusterClomdLivenessResult extends vsanhealthService.vim.DynamicData {
            clomdLivenessResult?: Array<vsanhealthService.vim.VsanHostClomdLivenessResult>;
            issueFound: boolean;
         }
         interface VsanClusterConfig extends vsanhealthService.vim.DynamicData {
            config: vsanhealthService.vim.VsanClusterConfigInfo;
            name: string;
            hosts?: Array<string>;
         }
         interface ArrayOfVsanClusterConfig {
            VsanClusterConfig?: Array<vsanhealthService.vim.VsanClusterConfig>;
         }
         interface VsanClusterCreateVmHealthTestResult extends vsanhealthService.vim.DynamicData {
            clusterResult: vsanhealthService.vim.VsanClusterProactiveTestResult;
            hostResults?: Array<vsanhealthService.vim.VsanHostCreateVmHealthTestResult>;
         }
         interface ArrayOfVsanClusterCreateVmHealthTestResult {
            VsanClusterCreateVmHealthTestResult?: Array<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>;
         }
         interface VsanClusterHclInfo extends vsanhealthService.vim.DynamicData {
            hclDbLastUpdate?: Date;
            hclDbAgeHealth?: string;
            hostResults?: Array<vsanhealthService.vim.VsanHostHclInfo>;
         }
         enum VsanClusterHealthActionVsanClusterHealthActionIdEnum {
            "RepairClusterObjectsAction",
            "UploadHclDb",
            "UpdateHclDbFromInternet",
            "EnableHealthService",
            "DiskBalance",
            "StopDiskBalance",
            "RemediateDedup",
            "UpgradeVsanDiskFormat",
            "EnableIscsiTargetService",
         }
         interface VsanClusterHealthAction extends vsanhealthService.vim.DynamicData {
            actionId: string;
            actionLabel: vsanhealthService.vim.LocalizableMessage;
            actionDescription: vsanhealthService.vim.LocalizableMessage;
            enabled: boolean;
         }
         interface ArrayOfVsanClusterHealthAction {
            VsanClusterHealthAction?: Array<vsanhealthService.vim.VsanClusterHealthAction>;
         }
         interface VsanClusterHealthConfigs extends vsanhealthService.vim.DynamicData {
            enableVsanTelemetry?: boolean;
            vsanTelemetryInterval?: number;
            vsanTelemetryProxy?: vsanhealthService.vim.VsanClusterTelemetryProxyConfig;
            configs?: Array<vsanhealthService.vim.VsanClusterHealthResultKeyValuePair>;
         }
         interface VsanClusterHealthGroup extends vsanhealthService.vim.DynamicData {
            groupId: string;
            groupName: string;
            groupHealth: string;
            groupTests?: Array<vsanhealthService.vim.VsanClusterHealthTest>;
            groupDetails?: Array<vsanhealthService.vim.VsanClusterHealthResultBase>;
         }
         interface ArrayOfVsanClusterHealthGroup {
            VsanClusterHealthGroup?: Array<vsanhealthService.vim.VsanClusterHealthGroup>;
         }
         interface VsanClusterHealthResultBase extends vsanhealthService.vim.DynamicData {
            label?: string;
         }
         interface ArrayOfVsanClusterHealthResultBase {
            VsanClusterHealthResultBase?: Array<vsanhealthService.vim.VsanClusterHealthResultBase>;
         }
         interface VsanClusterHealthResultColumnInfo extends vsanhealthService.vim.DynamicData {
            label: string;
            type: string;
         }
         interface ArrayOfVsanClusterHealthResultColumnInfo {
            VsanClusterHealthResultColumnInfo?: Array<vsanhealthService.vim.VsanClusterHealthResultColumnInfo>;
         }
         interface VsanClusterHealthResultKeyValuePair extends vsanhealthService.vim.DynamicData {
            key?: string;
            value?: string;
         }
         interface ArrayOfVsanClusterHealthResultKeyValuePair {
            VsanClusterHealthResultKeyValuePair?: Array<vsanhealthService.vim.VsanClusterHealthResultKeyValuePair>;
         }
         interface VsanClusterHealthResultRow extends vsanhealthService.vim.DynamicData {
            values: Array<string>;
            nestedRows?: Array<vsanhealthService.vim.VsanClusterHealthResultRow>;
         }
         interface ArrayOfVsanClusterHealthResultRow {
            VsanClusterHealthResultRow?: Array<vsanhealthService.vim.VsanClusterHealthResultRow>;
         }
         interface VsanClusterHealthResultTable extends vsanhealthService.vim.VsanClusterHealthResultBase {
            columns?: Array<vsanhealthService.vim.VsanClusterHealthResultColumnInfo>;
            rows?: Array<vsanhealthService.vim.VsanClusterHealthResultRow>;
         }
         interface VsanClusterHealthSummary extends vsanhealthService.vim.DynamicData {
            clusterStatus?: vsanhealthService.vim.VsanClusterHealthSystemStatusResult;
            timestamp?: Date;
            clusterVersions?: vsanhealthService.vim.VsanClusterHealthSystemVersionResult;
            objectHealth?: vsanhealthService.vim.VsanObjectOverallHealth;
            vmHealth?: vsanhealthService.vim.VsanClusterVMsHealthOverallResult;
            networkHealth?: vsanhealthService.vim.VsanClusterNetworkHealthResult;
            limitHealth?: vsanhealthService.vim.VsanClusterLimitHealthResult;
            advCfgSync?: Array<vsanhealthService.vim.VsanClusterAdvCfgSyncResult>;
            createVmHealth?: Array<vsanhealthService.vim.VsanHostCreateVmHealthTestResult>;
            physicalDisksHealth?: Array<vsanhealthService.vim.VsanPhysicalDiskHealthSummary>;
            hclInfo?: vsanhealthService.vim.VsanClusterHclInfo;
            groups?: Array<vsanhealthService.vim.VsanClusterHealthGroup>;
            overallHealth: string;
            overallHealthDescription: string;
            clomdLiveness?: vsanhealthService.vim.VsanClusterClomdLivenessResult;
            diskBalance?: vsanhealthService.vim.VsanClusterBalanceSummary;
         }
         interface VsanClusterHealthSystemObjectsRepairResult extends vsanhealthService.vim.DynamicData {
            inRepairingQueueObjects?: Array<string>;
            failedRepairObjects?: Array<vsanhealthService.vim.VsanFailedRepairObjectResult>;
            issueFound: boolean;
         }
         interface VsanClusterHealthSystemStatusResult extends vsanhealthService.vim.DynamicData {
            status: string;
            goalState: string;
            untrackedHosts?: Array<string>;
            trackedHostsStatus?: Array<vsanhealthService.vim.VsanHostHealthSystemStatusResult>;
         }
         interface VsanClusterHealthSystemVersionResult extends vsanhealthService.vim.DynamicData {
            hostResults?: Array<vsanhealthService.vim.VsanHostHealthSystemVersionResult>;
            vcVersion?: string;
            issueFound: boolean;
         }
         interface VsanClusterHealthTest extends vsanhealthService.vim.DynamicData {
            testId?: string;
            testName?: string;
            testDescription?: string;
            testShortDescription?: string;
            testHealth?: string;
            testDetails?: Array<vsanhealthService.vim.VsanClusterHealthResultBase>;
            testActions?: Array<vsanhealthService.vim.VsanClusterHealthAction>;
         }
         interface ArrayOfVsanClusterHealthTest {
            VsanClusterHealthTest?: Array<vsanhealthService.vim.VsanClusterHealthTest>;
         }
         interface VsanClusterHostVmknicMapping extends vsanhealthService.vim.DynamicData {
            host: string;
            vmknic: string;
         }
         interface ArrayOfVsanClusterHostVmknicMapping {
            VsanClusterHostVmknicMapping?: Array<vsanhealthService.vim.VsanClusterHostVmknicMapping>;
         }
         interface VsanClusterLimitHealthResult extends vsanhealthService.vim.DynamicData {
            issueFound: boolean;
            componentLimitHealth: string;
            diskFreeSpaceHealth: string;
            rcFreeReservationHealth: string;
            hostResults?: Array<vsanhealthService.vim.VsanLimitHealthResult>;
            whatifHostFailures?: Array<vsanhealthService.vim.VsanClusterWhatifHostFailuresResult>;
            hostsCommFailure?: Array<string>;
         }
         interface VsanClusterNetworkHealthResult extends vsanhealthService.vim.DynamicData {
            hostResults?: Array<vsanhealthService.vim.VsanNetworkHealthResult>;
            issueFound?: boolean;
            vsanVmknicPresent?: boolean;
            matchingMulticastConfig?: boolean;
            matchingIpSubnets?: boolean;
            pingTestSuccess?: boolean;
            largePingTestSuccess?: boolean;
            potentialMulticastIssue?: boolean;
            otherHostsInVsanCluster?: Array<string>;
            partitions?: Array<vsanhealthService.vim.VsanClusterNetworkPartitionInfo>;
            hostsWithVsanDisabled?: Array<string>;
            hostsDisconnected?: Array<string>;
            hostsCommFailure?: Array<string>;
            hostsInEsxMaintenanceMode?: Array<string>;
            hostsInVsanMaintenanceMode?: Array<string>;
            infoAboutUnexpectedHosts?: Array<vsanhealthService.vim.VsanQueryResultHostInfo>;
         }
         interface VsanClusterNetworkLoadTestResult extends vsanhealthService.vim.DynamicData {
            clusterResult: vsanhealthService.vim.VsanClusterProactiveTestResult;
            hostResults?: Array<vsanhealthService.vim.VsanNetworkLoadTestResult>;
         }
         interface ArrayOfVsanClusterNetworkLoadTestResult {
            VsanClusterNetworkLoadTestResult?: Array<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>;
         }
         interface VsanClusterNetworkPartitionInfo extends vsanhealthService.vim.DynamicData {
            hosts?: Array<string>;
         }
         interface ArrayOfVsanClusterNetworkPartitionInfo {
            VsanClusterNetworkPartitionInfo?: Array<vsanhealthService.vim.VsanClusterNetworkPartitionInfo>;
         }
         interface VsanClusterProactiveTestResult extends vsanhealthService.vim.DynamicData {
            overallStatus: string;
            overallStatusDescription: string;
            timestamp: Date;
            healthTest?: vsanhealthService.vim.VsanClusterHealthTest;
         }
         interface VsanClusterTelemetryProxyConfig extends vsanhealthService.vim.DynamicData {
            host?: string;
            port?: number;
            user?: string;
            password?: string;
            autoDiscovered?: boolean;
         }
         interface VsanClusterVMsHealthOverallResult extends vsanhealthService.vim.DynamicData {
            healthStateList?: Array<vsanhealthService.vim.VsanClusterVMsHealthSummaryResult>;
            overallHealthState?: string;
         }
         interface VsanClusterVMsHealthSummaryResult extends vsanhealthService.vim.DynamicData {
            numVMs: number;
            state?: string;
            health: string;
            vmInstanceUuids?: Array<string>;
         }
         interface ArrayOfVsanClusterVMsHealthSummaryResult {
            VsanClusterVMsHealthSummaryResult?: Array<vsanhealthService.vim.VsanClusterVMsHealthSummaryResult>;
         }
         interface VsanClusterVmdkLoadTestResult extends vsanhealthService.vim.DynamicData {
            task?: vsanhealthService.vim.ManagedObjectReference;
            clusterResult?: vsanhealthService.vim.VsanClusterProactiveTestResult;
            hostResults?: Array<vsanhealthService.vim.VsanHostVmdkLoadTestResult>;
         }
         interface ArrayOfVsanClusterVmdkLoadTestResult {
            VsanClusterVmdkLoadTestResult?: Array<vsanhealthService.vim.VsanClusterVmdkLoadTestResult>;
         }
         interface VsanClusterWhatifHostFailuresResult extends vsanhealthService.vim.DynamicData {
            numFailures: number;
            totalUsedCapacityB: number;
            totalCapacityB: number;
            totalRcReservationB: number;
            totalRcSizeB: number;
            usedComponents: number;
            totalComponents: number;
            componentLimitHealth?: string;
            diskFreeSpaceHealth?: string;
            rcFreeReservationHealth?: string;
         }
         interface ArrayOfVsanClusterWhatifHostFailuresResult {
            VsanClusterWhatifHostFailuresResult?: Array<vsanhealthService.vim.VsanClusterWhatifHostFailuresResult>;
         }
         interface VsanDiskFormatConversionCheckResult extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckResult {
            isSupported: boolean;
            targetVersion?: number;
         }
         interface VsanDiskFormatConversionSpec extends vsanhealthService.vim.DynamicData {
            dataEfficiencyConfig?: vsanhealthService.vim.VsanDataEfficiencyConfig;
         }
         interface VimClusterVsanDiskMappingsConfigSpec extends vsanhealthService.vim.DynamicData {
            hostDiskMappings: Array<vsanhealthService.vim.VimClusterVsanHostDiskMapping>;
         }
         interface VimClusterVsanFaultDomainSpec extends vsanhealthService.vim.DynamicData {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
            name: string;
         }
         interface ArrayOfVimClusterVsanFaultDomainSpec {
            VimClusterVsanFaultDomainSpec?: Array<vsanhealthService.vim.VimClusterVsanFaultDomainSpec>;
         }
         interface VimClusterVsanFaultDomainsConfigSpec extends vsanhealthService.vim.DynamicData {
            faultDomains: Array<vsanhealthService.vim.VimClusterVsanFaultDomainSpec>;
            witness?: vsanhealthService.vim.VimClusterVsanWitnessSpec;
         }
         interface VsanHealthExtMgmtPreCheckResult extends vsanhealthService.vim.DynamicData {
            overallResult: boolean;
            esxVersionCheckPassed?: boolean;
            drsCheckPassed?: boolean;
            eamConnectionCheckPassed?: boolean;
            installStateCheckPassed?: boolean;
            results: Array<vsanhealthService.vim.VsanClusterHealthTest>;
            vumRegistered?: boolean;
         }
         interface VsanHostClomdLivenessResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            clomdStat: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanHostClomdLivenessResult {
            VsanHostClomdLivenessResult?: Array<vsanhealthService.vim.VsanHostClomdLivenessResult>;
         }
         interface VsanHostCreateVmHealthTestResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            state: string;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanHostCreateVmHealthTestResult {
            VsanHostCreateVmHealthTestResult?: Array<vsanhealthService.vim.VsanHostCreateVmHealthTestResult>;
         }
         enum VimClusterVsanHostDiskMappingVsanDiskGroupCreationType {
            "allflash",
            "hybrid",
         }
         interface VimClusterVsanHostDiskMapping extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            cacheDisks?: Array<vsanhealthService.vim.HostScsiDisk>;
            capacityDisks: Array<vsanhealthService.vim.HostScsiDisk>;
            type: string;
         }
         interface ArrayOfVimClusterVsanHostDiskMapping {
            VimClusterVsanHostDiskMapping?: Array<vsanhealthService.vim.VimClusterVsanHostDiskMapping>;
         }
         interface VsanHostHealthSystemVersionResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            version?: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanHostHealthSystemVersionResult {
            VsanHostHealthSystemVersionResult?: Array<vsanhealthService.vim.VsanHostHealthSystemVersionResult>;
         }
         interface VsanIscsiHomeObjectSpec extends vsanhealthService.vim.DynamicData {
            storagePolicy?: vsanhealthService.vim.VirtualMachineProfileSpec;
            defaultConfig?: vsanhealthService.vim.VsanIscsiTargetServiceDefaultConfigSpec;
         }
         interface VsanIscsiInitiatorGroup extends vsanhealthService.vim.DynamicData {
            name: string;
            initiators?: Array<string>;
            targets?: Array<vsanhealthService.vim.VsanIscsiTargetBasicInfo>;
         }
         interface ArrayOfVsanIscsiInitiatorGroup {
            VsanIscsiInitiatorGroup?: Array<vsanhealthService.vim.VsanIscsiInitiatorGroup>;
         }
         interface VsanIscsiLUN extends vsanhealthService.vim.VsanIscsiLUNCommonInfo {
            targetAlias: string;
            uuid: string;
            actualSize: number;
            objectInformation?: vsanhealthService.vim.VsanObjectInformation;
         }
         interface ArrayOfVsanIscsiLUN {
            VsanIscsiLUN?: Array<vsanhealthService.vim.VsanIscsiLUN>;
         }
         enum VsanIscsiLUNCommonInfoVsanIscsiLUNStatus {
            "Online",
            "Offline",
         }
         interface VsanIscsiLUNCommonInfo extends vsanhealthService.vim.DynamicData {
            lunId?: number;
            alias?: string;
            lunSize: number;
            status?: string;
         }
         interface VsanIscsiLUNSpec extends vsanhealthService.vim.VsanIscsiLUNCommonInfo {
            storagePolicy?: vsanhealthService.vim.VirtualMachineProfileSpec;
            newLunId?: number;
         }
         interface VsanIscsiTarget extends vsanhealthService.vim.VsanIscsiTargetCommonInfo {
            lunCount?: number;
            objectInformation?: vsanhealthService.vim.VsanObjectInformation;
            ioOwnerHost?: string;
            initiators?: Array<string>;
            initiatorGroups?: Array<string>;
         }
         interface ArrayOfVsanIscsiTarget {
            VsanIscsiTarget?: Array<vsanhealthService.vim.VsanIscsiTarget>;
         }
         enum VsanIscsiTargetAuthSpecVsanIscsiTargetAuthType {
            "NoAuth",
            "CHAP",
            "CHAP_Mutual",
         }
         interface VsanIscsiTargetAuthSpec extends vsanhealthService.vim.DynamicData {
            authType?: string;
            userNameAttachToTarget?: string;
            userSecretAttachToTarget?: string;
            userNameAttachToInitiator?: string;
            userSecretAttachToInitiator?: string;
         }
         interface VsanIscsiTargetBasicInfo extends vsanhealthService.vim.DynamicData {
            alias: string;
            iqn?: string;
         }
         interface ArrayOfVsanIscsiTargetBasicInfo {
            VsanIscsiTargetBasicInfo?: Array<vsanhealthService.vim.VsanIscsiTargetBasicInfo>;
         }
         interface VsanIscsiTargetCommonInfo extends vsanhealthService.vim.VsanIscsiTargetBasicInfo {
            authSpec?: vsanhealthService.vim.VsanIscsiTargetAuthSpec;
            port?: number;
            networkInterface?: string;
         }
         interface VsanIscsiTargetServiceConfig extends vsanhealthService.vim.DynamicData {
            defaultConfig?: vsanhealthService.vim.VsanIscsiTargetServiceDefaultConfigSpec;
            enabled?: boolean;
         }
         interface VsanIscsiTargetServiceDefaultConfigSpec extends vsanhealthService.vim.DynamicData {
            networkInterface: string;
            port?: number;
            iscsiTargetAuthSpec?: vsanhealthService.vim.VsanIscsiTargetAuthSpec;
         }
         interface VsanIscsiTargetServiceSpec extends vsanhealthService.vim.VsanIscsiTargetServiceConfig {
            homeObjectStoragePolicy?: vsanhealthService.vim.VirtualMachineProfileSpec;
         }
         interface VsanIscsiTargetSpec extends vsanhealthService.vim.VsanIscsiTargetCommonInfo {
            storagePolicy?: vsanhealthService.vim.VirtualMachineProfileSpec;
            newAlias?: string;
         }
         interface VsanObjectIdentity extends vsanhealthService.vim.DynamicData {
            uuid: string;
            type: string;
            vmInstanceUuid?: string;
            vmNsObjectUuid?: string;
            vm?: vsanhealthService.vim.ManagedObjectReference;
            description?: string;
         }
         interface ArrayOfVsanObjectIdentity {
            VsanObjectIdentity?: Array<vsanhealthService.vim.VsanObjectIdentity>;
         }
         interface VsanObjectIdentityAndHealth extends vsanhealthService.vim.DynamicData {
            identities?: Array<vsanhealthService.vim.VsanObjectIdentity>;
            health?: vsanhealthService.vim.VsanObjectOverallHealth;
            spaceSummary?: Array<vsanhealthService.vim.VsanObjectSpaceSummary>;
            rawData?: string;
         }
         interface VsanObjectInformation extends vsanhealthService.vim.DynamicData {
            directoryName?: string;
            vsanObjectUuid?: string;
            vsanHealth?: string;
            policyAttributes?: Array<vsanhealthService.vim.KeyValue>;
            spbmProfileUuid?: string;
            spbmProfileGenerationId?: string;
            spbmComplianceResult?: vsanhealthService.vim.VsanStorageComplianceResult;
         }
         interface ArrayOfVsanObjectInformation {
            VsanObjectInformation?: Array<vsanhealthService.vim.VsanObjectInformation>;
         }
         interface VsanObjectQuerySpec extends vsanhealthService.vim.DynamicData {
            uuid: string;
            spbmProfileGenerationId?: string;
         }
         interface ArrayOfVsanObjectQuerySpec {
            VsanObjectQuerySpec?: Array<vsanhealthService.vim.VsanObjectQuerySpec>;
         }
         enum VsanObjectSpaceSummaryVsanObjectTypeEnum {
            "vmswap",
            "vdisk",
            "namespace",
            "vmem",
            "statsdb",
            "iscsiTarget",
            "iscsiLun",
            "other",
            "fileSystemOverhead",
            "dedupOverhead",
            "checksumOverhead",
         }
         interface VsanObjectSpaceSummary extends vsanhealthService.vim.DynamicData {
            objType?: string;
            overheadB?: number;
            temporaryOverheadB?: number;
            primaryCapacityB?: number;
            provisionCapacityB?: number;
            reservedCapacityB?: number;
            overReservedB?: number;
            physicalUsedB?: number;
            usedB?: number;
         }
         interface ArrayOfVsanObjectSpaceSummary {
            VsanObjectSpaceSummary?: Array<vsanhealthService.vim.VsanObjectSpaceSummary>;
         }
         interface VsanPerfEntityMetricCSV extends vsanhealthService.vim.DynamicData {
            entityRefId: string;
            sampleInfo?: string;
            value?: Array<vsanhealthService.vim.VsanPerfMetricSeriesCSV>;
         }
         interface ArrayOfVsanPerfEntityMetricCSV {
            VsanPerfEntityMetricCSV?: Array<vsanhealthService.vim.VsanPerfEntityMetricCSV>;
         }
         interface VsanPerfEntityType extends vsanhealthService.vim.DynamicData {
            name: string;
            id: string;
            graphs: Array<vsanhealthService.vim.VsanPerfGraph>;
            description?: string;
         }
         interface ArrayOfVsanPerfEntityType {
            VsanPerfEntityType?: Array<vsanhealthService.vim.VsanPerfEntityType>;
         }
         enum VsanPerfGraphVsanPerfStatsUnitType {
            "number",
            "time_ms",
            "percentage",
            "size_bytes",
            "rate_bytes",
         }
         interface VsanPerfGraph extends vsanhealthService.vim.DynamicData {
            id: string;
            metrics: Array<vsanhealthService.vim.VsanPerfMetricId>;
            unit: string;
            threshold?: vsanhealthService.vim.VsanPerfThreshold;
            name?: string;
            description?: string;
         }
         interface ArrayOfVsanPerfGraph {
            VsanPerfGraph?: Array<vsanhealthService.vim.VsanPerfGraph>;
         }
         interface VsanPerfMasterInformation extends vsanhealthService.vim.DynamicData {
            secSinceLastStatsWrite?: number;
            secSinceLastStatsCollect?: number;
            statsIntervalSec: number;
            collectionFailureHostUuids?: Array<string>;
            renamedStatsDirectories?: Array<string>;
            statsDirectoryPercentFree?: number;
         }
         interface VsanPerfMemberInfo extends vsanhealthService.vim.DynamicData {
            thumbprint: string;
         }
         interface ArrayOfVsanPerfMemberInfo {
            VsanPerfMemberInfo?: Array<vsanhealthService.vim.VsanPerfMemberInfo>;
         }
         enum VsanPerfMetricIdVsanPerfSummaryType {
            "average",
            "maximum",
            "minimum",
            "latest",
            "summation",
            "none",
         }
         enum VsanPerfMetricIdVsanPerfStatsType {
            "absolute",
            "delta",
            "rate",
         }
         interface VsanPerfMetricId extends vsanhealthService.vim.DynamicData {
            label: string;
            group?: string;
            rollupType?: string;
            statsType?: string;
            name?: string;
            description?: string;
            metricsCollectInterval?: number;
         }
         interface ArrayOfVsanPerfMetricId {
            VsanPerfMetricId?: Array<vsanhealthService.vim.VsanPerfMetricId>;
         }
         interface VsanPerfMetricSeriesCSV extends vsanhealthService.vim.DynamicData {
            metricId: vsanhealthService.vim.VsanPerfMetricId;
            values?: string;
         }
         interface ArrayOfVsanPerfMetricSeriesCSV {
            VsanPerfMetricSeriesCSV?: Array<vsanhealthService.vim.VsanPerfMetricSeriesCSV>;
         }
         interface VsanPerfNodeInformation extends vsanhealthService.vim.DynamicData {
            version: string;
            hostname?: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
            isCmmdsMaster: boolean;
            isStatsMaster: boolean;
            vsanMasterUuid?: string;
            vsanNodeUuid?: string;
            masterInfo?: vsanhealthService.vim.VsanPerfMasterInformation;
         }
         interface ArrayOfVsanPerfNodeInformation {
            VsanPerfNodeInformation?: Array<vsanhealthService.vim.VsanPerfNodeInformation>;
         }
         interface VsanPerfQuerySpec extends vsanhealthService.vim.DynamicData {
            entityRefId: string;
            startTime?: Date;
            endTime?: Date;
            group?: string;
            labels?: Array<string>;
            interval?: number;
         }
         interface ArrayOfVsanPerfQuerySpec {
            VsanPerfQuerySpec?: Array<vsanhealthService.vim.VsanPerfQuerySpec>;
         }
         enum VsanPerfThresholdVsanPerfThresholdDirectionType {
            "upper",
            "lower",
         }
         interface VsanPerfThreshold extends vsanhealthService.vim.DynamicData {
            direction: string;
            yellow?: string;
            red?: string;
         }
         interface VsanPerfTopEntities extends vsanhealthService.vim.DynamicData {
            metricId: vsanhealthService.vim.VsanPerfMetricId;
            entities: Array<vsanhealthService.vim.VsanPerfTopEntity>;
         }
         interface VsanPerfTopEntity extends vsanhealthService.vim.DynamicData {
            entityRefId: string;
            value: string;
         }
         interface ArrayOfVsanPerfTopEntity {
            VsanPerfTopEntity?: Array<vsanhealthService.vim.VsanPerfTopEntity>;
         }
         interface VsanPerfDeleteStatsObjectTaskRequestType {
            _this: vsanhealthService.vim.ManagedObjectReference;
            cluster?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface VsanSpaceUsage extends vsanhealthService.vim.DynamicData {
            totalCapacityB: number;
            freeCapacityB?: number;
            spaceOverview?: vsanhealthService.vim.VsanObjectSpaceSummary;
            spaceDetail?: vsanhealthService.vim.VsanSpaceUsageDetailResult;
         }
         interface VsanSpaceUsageDetailResult extends vsanhealthService.vim.DynamicData {
            spaceUsageByObjectType?: Array<vsanhealthService.vim.VsanObjectSpaceSummary>;
         }
         interface VsanStorageWorkloadType extends vsanhealthService.vim.DynamicData {
            specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>;
            typeId: string;
            name: string;
            description: string;
         }
         interface ArrayOfVsanStorageWorkloadType {
            VsanStorageWorkloadType?: Array<vsanhealthService.vim.VsanStorageWorkloadType>;
         }
         interface VsanUpgradeStatusEx extends vsanhealthService.vim.VsanUpgradeSystemUpgradeStatus {
            isPrecheck?: boolean;
            precheckResult?: vsanhealthService.vim.VsanDiskFormatConversionCheckResult;
         }
         enum VsanVcClusterHealthSystemVsanHealthLogLevelEnum {
            "INFO",
            "WARNING",
            "ERROR",
            "DEBUG",
            "CRITICAL",
         }
         interface VsanVsanClusterPcapGroup extends vsanhealthService.vim.DynamicData {
            master: string;
            members?: Array<string>;
         }
         interface ArrayOfVsanVsanClusterPcapGroup {
            VsanVsanClusterPcapGroup?: Array<vsanhealthService.vim.VsanVsanClusterPcapGroup>;
         }
         interface VsanVsanClusterPcapResult extends vsanhealthService.vim.DynamicData {
            pkts?: Array<string>;
            groups?: Array<vsanhealthService.vim.VsanVsanClusterPcapGroup>;
            issues?: Array<string>;
            hostResults?: Array<vsanhealthService.vim.VsanVsanPcapResult>;
         }
         interface VimClusterVsanWitnessSpec extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            preferredFaultDomainName: string;
            diskMapping?: vsanhealthService.vim.VsanHostDiskMapping;
         }
         interface VsanNodeNotMaster extends vsanhealthService.vim.VimFault {
            vsanMasterUuid?: string;
            cmmdsMasterButNotStatsMaster?: boolean;
         }
         interface VimHostVSANStretchedClusterHostCapability extends vsanhealthService.vim.DynamicData {
            featureVersion: string;
         }
         interface VsanFailedRepairObjectResult extends vsanhealthService.vim.DynamicData {
            uuid: string;
            errMessage?: string;
         }
         interface ArrayOfVsanFailedRepairObjectResult {
            VsanFailedRepairObjectResult?: Array<vsanhealthService.vim.VsanFailedRepairObjectResult>;
         }
         interface VsanHclControllerInfo extends vsanhealthService.vim.DynamicData {
            deviceName: string;
            deviceDisplayName?: string;
            driverName?: string;
            driverVersion?: string;
            vendorId?: number;
            deviceId?: number;
            subVendorId?: number;
            subDeviceId?: number;
            extraInfo?: Array<vsanhealthService.vim.KeyValue>;
            deviceOnHcl?: boolean;
            releaseSupported?: boolean;
            releasesOnHcl?: Array<string>;
            driverVersionsOnHcl?: Array<string>;
            driverVersionSupported?: boolean;
            fwVersionSupported?: boolean;
            fwVersionOnHcl?: Array<string>;
            cacheConfigSupported?: boolean;
            cacheConfigOnHcl?: Array<string>;
            raidConfigSupported?: boolean;
            raidConfigOnHcl?: Array<string>;
            fwVersion?: string;
            raidConfig?: string;
            cacheConfig?: string;
            cimProviderInfo?: vsanhealthService.vim.VsanHostCimProviderInfo;
         }
         interface ArrayOfVsanHclControllerInfo {
            VsanHclControllerInfo?: Array<vsanhealthService.vim.VsanHclControllerInfo>;
         }
         interface VsanHostCimProviderInfo extends vsanhealthService.vim.DynamicData {
            cimProviderSupported?: boolean;
            installedCIMProvider?: string;
            cimProviderOnHcl?: Array<string>;
         }
         interface VsanHostHclInfo extends vsanhealthService.vim.DynamicData {
            hostname: string;
            hclChecked: boolean;
            releaseName?: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
            controllers?: Array<vsanhealthService.vim.VsanHclControllerInfo>;
         }
         interface ArrayOfVsanHostHclInfo {
            VsanHostHclInfo?: Array<vsanhealthService.vim.VsanHostHclInfo>;
         }
         interface VsanHostHealthSystemStatusResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            status: string;
            issues?: Array<string>;
         }
         interface ArrayOfVsanHostHealthSystemStatusResult {
            VsanHostHealthSystemStatusResult?: Array<vsanhealthService.vim.VsanHostHealthSystemStatusResult>;
         }
         interface VsanHostVirtualApplianceInfo extends vsanhealthService.vim.DynamicData {
            hostKey: vsanhealthService.vim.ManagedObjectReference;
            isVirtualApp: boolean;
         }
         interface ArrayOfVsanHostVirtualApplianceInfo {
            VsanHostVirtualApplianceInfo?: Array<vsanhealthService.vim.VsanHostVirtualApplianceInfo>;
         }
         interface VsanHostVmdkLoadTestResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            issueFound: boolean;
            faultMessage?: string;
            vmdkResults?: Array<vsanhealthService.vim.VsanVmdkLoadTestResult>;
         }
         interface ArrayOfVsanHostVmdkLoadTestResult {
            VsanHostVmdkLoadTestResult?: Array<vsanhealthService.vim.VsanHostVmdkLoadTestResult>;
         }
         interface VsanLimitHealthResult extends vsanhealthService.vim.DynamicData {
            hostname?: string;
            issueFound: boolean;
            maxComponents: number;
            freeComponents: number;
            componentLimitHealth: string;
            lowestFreeDiskSpacePct: number;
            usedDiskSpaceB: number;
            totalDiskSpaceB: number;
            diskFreeSpaceHealth: string;
            reservedRcSizeB: number;
            totalRcSizeB: number;
            rcFreeReservationHealth: string;
         }
         interface ArrayOfVsanLimitHealthResult {
            VsanLimitHealthResult?: Array<vsanhealthService.vim.VsanLimitHealthResult>;
         }
         interface VsanNetworkHealthResult extends vsanhealthService.vim.DynamicData {
            host?: vsanhealthService.vim.ManagedObjectReference;
            hostname?: string;
            vsanVmknicPresent?: boolean;
            ipSubnets?: Array<string>;
            issueFound?: boolean;
            peerHealth?: Array<vsanhealthService.vim.VsanNetworkPeerHealthResult>;
            multicastConfig?: string;
         }
         interface ArrayOfVsanNetworkHealthResult {
            VsanNetworkHealthResult?: Array<vsanhealthService.vim.VsanNetworkHealthResult>;
         }
         interface VsanNetworkLoadTestResult extends vsanhealthService.vim.DynamicData {
            hostname: string;
            status?: string;
            client: boolean;
            bandwidthBps: number;
            totalBytes: number;
            lostDatagrams?: number;
            lossPct?: number;
            sentDatagrams?: number;
            jitterMs?: number;
         }
         interface ArrayOfVsanNetworkLoadTestResult {
            VsanNetworkLoadTestResult?: Array<vsanhealthService.vim.VsanNetworkLoadTestResult>;
         }
         interface VsanNetworkPeerHealthResult extends vsanhealthService.vim.DynamicData {
            peer?: string;
            peerHostname?: string;
            peerVmknicName?: string;
            smallPingTestSuccessPct?: number;
            largePingTestSuccessPct?: number;
            maxLatencyUs?: number;
            onSameIpSubnet?: boolean;
            sourceVmknicName?: string;
         }
         interface ArrayOfVsanNetworkPeerHealthResult {
            VsanNetworkPeerHealthResult?: Array<vsanhealthService.vim.VsanNetworkPeerHealthResult>;
         }
         enum VsanObjectHealthVsanObjectHealthState {
            "inaccessible",
            "reducedavailabilitywithnorebuild",
            "reducedavailabilitywithnorebuilddelaytimer",
            "reducedavailabilitywithactiverebuild",
            "datamove",
            "nonavailabilityrelatedreconfig",
            "nonavailabilityrelatedincompliance",
            "healthy",
         }
         interface VsanObjectHealth extends vsanhealthService.vim.DynamicData {
            numObjects: number;
            health: string;
            objUuids?: Array<string>;
         }
         interface ArrayOfVsanObjectHealth {
            VsanObjectHealth?: Array<vsanhealthService.vim.VsanObjectHealth>;
         }
         interface VsanObjectOverallHealth extends vsanhealthService.vim.DynamicData {
            objectHealthDetail?: Array<vsanhealthService.vim.VsanObjectHealth>;
            objectVersionCompliance?: boolean;
         }
         interface VsanPhysicalDiskHealth extends vsanhealthService.vim.DynamicData {
            name: string;
            uuid: string;
            inCmmds: boolean;
            inVsi: boolean;
            dedupScope?: number;
            formatVersion?: number;
            isAllFlash?: number;
            congestionValue?: number;
            congestionArea?: string;
            congestionHealth?: string;
            metadataHealth?: string;
            operationalHealthDescription?: string;
            operationalHealth?: string;
            dedupUsageHealth?: string;
            capacityHealth?: string;
            summaryHealth: string;
            capacity?: number;
            usedCapacity?: number;
            reservedCapacity?: number;
            totalBytes?: number;
            freeBytes?: number;
            hashedBytes?: number;
            dedupedBytes?: number;
            scsiDisk?: vsanhealthService.vim.HostScsiDisk;
            usedComponents?: number;
            maxComponents?: number;
            compLimitHealth?: string;
         }
         interface ArrayOfVsanPhysicalDiskHealth {
            VsanPhysicalDiskHealth?: Array<vsanhealthService.vim.VsanPhysicalDiskHealth>;
         }
         interface VsanPhysicalDiskHealthSummary extends vsanhealthService.vim.DynamicData {
            overallHealth: string;
            heapsWithIssues?: Array<vsanhealthService.vim.VsanResourceHealth>;
            slabsWithIssues?: Array<vsanhealthService.vim.VsanResourceHealth>;
            disks?: Array<vsanhealthService.vim.VsanPhysicalDiskHealth>;
            componentsWithIssues?: Array<vsanhealthService.vim.VsanResourceHealth>;
            hostname?: string;
            hostDedupScope?: number;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanPhysicalDiskHealthSummary {
            VsanPhysicalDiskHealthSummary?: Array<vsanhealthService.vim.VsanPhysicalDiskHealthSummary>;
         }
         interface VsanProactiveRebalanceInfoEx extends vsanhealthService.vim.DynamicData {
            running?: boolean;
            startTs?: Date;
            stopTs?: Date;
            varianceThreshold?: number;
            timeThreshold?: number;
            rateThreshold?: number;
            hostname?: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VsanQueryResultHostInfo extends vsanhealthService.vim.DynamicData {
            uuid?: string;
            hostnameInCmmds?: string;
            vsanIpv4Addresses?: Array<string>;
         }
         interface ArrayOfVsanQueryResultHostInfo {
            VsanQueryResultHostInfo?: Array<vsanhealthService.vim.VsanQueryResultHostInfo>;
         }
         interface VsanRepairObjectsResult extends vsanhealthService.vim.DynamicData {
            inQueueObjects?: Array<string>;
            failedRepairObjects?: Array<vsanhealthService.vim.VsanFailedRepairObjectResult>;
            notInQueueObjects?: Array<string>;
         }
         interface VsanResourceHealth extends vsanhealthService.vim.DynamicData {
            resource: string;
            health: string;
            description?: string;
         }
         interface ArrayOfVsanResourceHealth {
            VsanResourceHealth?: Array<vsanhealthService.vim.VsanResourceHealth>;
         }
         interface VsanVmdkIOLoadSpec extends vsanhealthService.vim.DynamicData {
            readPct: number;
            oio: number;
            iosizeB: number;
            dataSizeMb: number;
            random: boolean;
            startOffsetB?: number;
         }
         interface ArrayOfVsanVmdkIOLoadSpec {
            VsanVmdkIOLoadSpec?: Array<vsanhealthService.vim.VsanVmdkIOLoadSpec>;
         }
         interface VsanVmdkLoadTestResult extends vsanhealthService.vim.DynamicData {
            success: boolean;
            faultMessage?: string;
            spec: vsanhealthService.vim.VsanVmdkLoadTestSpec;
            actualDurationSec?: number;
            totalBytes?: number;
            iops?: number;
            tputBps?: number;
            avgLatencyUs?: number;
            maxLatencyUs?: number;
            numIoAboveLatencyThreshold?: number;
         }
         interface ArrayOfVsanVmdkLoadTestResult {
            VsanVmdkLoadTestResult?: Array<vsanhealthService.vim.VsanVmdkLoadTestResult>;
         }
         interface VsanVmdkLoadTestSpec extends vsanhealthService.vim.DynamicData {
            vmdkCreateSpec?: vsanhealthService.vim.FileBackedVirtualDiskSpec;
            vmdkIOSpec?: vsanhealthService.vim.VsanVmdkIOLoadSpec;
            vmdkIOSpecSequence?: Array<vsanhealthService.vim.VsanVmdkIOLoadSpec>;
            stepDurationSec?: number;
         }
         interface ArrayOfVsanVmdkLoadTestSpec {
            VsanVmdkLoadTestSpec?: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>;
         }
         interface VsanVsanPcapResult extends vsanhealthService.vim.DynamicData {
            calltime: number;
            vmknic: string;
            tcpdumpFilter: string;
            snaplen: number;
            pkts?: Array<string>;
            pcap?: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
            hostname?: string;
         }
         interface ArrayOfVsanVsanPcapResult {
            VsanVsanPcapResult?: Array<vsanhealthService.vim.VsanVsanPcapResult>;
         }
         interface VsanConfigInfoEx extends vsanhealthService.vim.VsanClusterConfigInfo {
            dataEfficiencyConfig?: vsanhealthService.vim.VsanDataEfficiencyConfig;
            iscsiConfig?: vsanhealthService.vim.VsanIscsiTargetServiceConfig;
         }
         interface VsanDataEfficiencyConfig extends vsanhealthService.vim.DynamicData {
            dedupEnabled: boolean;
            compressionEnabled?: boolean;
         }
         interface VimVsanReconfigSpec extends vsanhealthService.vim.DynamicData {
            vsanClusterConfig?: vsanhealthService.vim.VsanClusterConfigInfo;
            dataEfficiencyConfig?: vsanhealthService.vim.VsanDataEfficiencyConfig;
            diskMappingSpec?: vsanhealthService.vim.VimClusterVsanDiskMappingsConfigSpec;
            faultDomainsSpec?: vsanhealthService.vim.VimClusterVsanFaultDomainsConfigSpec;
            modify: boolean;
            allowReducedRedundancy?: boolean;
            iscsiSpec?: vsanhealthService.vim.VsanIscsiTargetServiceSpec;
         }
         enum VimVsanVsanScanObjectsIssueVsanScanObjectsIssueType {
            "BROKEN_CHAIN",
            "LEAKED_OBJECT",
            "UNKNOWN",
         }
         interface VimVsanHostDiskMapInfoEx extends vsanhealthService.vim.DynamicData {
            mapping: vsanhealthService.vim.VsanHostDiskMapping;
            isMounted: boolean;
            isAllFlash: boolean;
            isDataEfficiency?: boolean;
         }
         interface ArrayOfVimVsanHostDiskMapInfoEx {
            VimVsanHostDiskMapInfoEx?: Array<vsanhealthService.vim.VimVsanHostDiskMapInfoEx>;
         }
         enum VimVsanHostDiskMappingCreationSpecDiskMappingCreationType {
            "hybrid",
            "allFlash",
         }
         interface VimVsanHostDiskMappingCreationSpec extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            cacheDisks?: Array<vsanhealthService.vim.HostScsiDisk>;
            capacityDisks: Array<vsanhealthService.vim.HostScsiDisk>;
            creationType: string;
         }
         interface VsanHostIpConfigEx extends vsanhealthService.vim.VsanHostIpConfig {
            upstreamIpV6Address?: string;
            downstreamIpV6Address?: string;
         }
         enum VsanHostPortConfigExTrafficType {
            "vsan",
            "witness",
         }
         interface VsanHostPortConfigEx extends vsanhealthService.vim.VsanHostConfigInfoNetworkInfoPortConfig {
            trafficTypes?: Array<string>;
         }
         interface VimVsanHostVsanDiskManagementSystemCapability extends vsanhealthService.vim.DynamicData {
            version: string;
         }
         interface VimVsanHostVsanHostCapability extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            isSupported: boolean;
            isLicensed: boolean;
         }
         interface ArrayOfVimVsanHostVsanHostCapability {
            VimVsanHostVsanHostCapability?: Array<vsanhealthService.vim.VimVsanHostVsanHostCapability>;
         }
         interface VsanBrokenDiskChainIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanDiskUnhealthIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanHigherObjectsPresentDuringDowngradeIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanHostPropertyRetrieveIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanHostWithHybridDiskgroupIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanMixedEsxVersionIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
         }
         interface VsanObjectInaccessibleIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanObjectPolicyIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanUnknownScanIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface AboutInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            fullName: string;
            vendor: string;
            version: string;
            build: string;
            localeVersion?: string;
            localeBuild?: string;
            osType: string;
            productLineId: string;
            apiType: string;
            apiVersion: string;
            instanceUuid?: string;
            licenseProductName?: string;
            licenseProductVersion?: string;
         }
         interface AuthorizationDescription extends vsanhealthService.vim.DynamicData {
            privilege: Array<vsanhealthService.vim.ElementDescription>;
            privilegeGroup: Array<vsanhealthService.vim.ElementDescription>;
         }
         interface Permission extends vsanhealthService.vim.DynamicData {
            entity?: vsanhealthService.vim.ManagedObjectReference;
            principal: string;
            group: boolean;
            roleId: number;
            propagate: boolean;
         }
         interface ArrayOfPermission {
            Permission?: Array<vsanhealthService.vim.Permission>;
         }
         interface AuthorizationRole extends vsanhealthService.vim.DynamicData {
            roleId: number;
            system: boolean;
            name: string;
            info: vsanhealthService.vim.Description;
            privilege?: Array<string>;
         }
         interface ArrayOfAuthorizationRole {
            AuthorizationRole?: Array<vsanhealthService.vim.AuthorizationRole>;
         }
         interface AuthorizationPrivilege extends vsanhealthService.vim.DynamicData {
            privId: string;
            onParent: boolean;
            name: string;
            privGroupName: string;
         }
         interface ArrayOfAuthorizationPrivilege {
            AuthorizationPrivilege?: Array<vsanhealthService.vim.AuthorizationPrivilege>;
         }
         interface PrivilegeAvailability extends vsanhealthService.vim.DynamicData {
            privId: string;
            isGranted: boolean;
         }
         interface ArrayOfPrivilegeAvailability {
            PrivilegeAvailability?: Array<vsanhealthService.vim.PrivilegeAvailability>;
         }
         interface EntityPrivilege extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            privAvailability: Array<vsanhealthService.vim.PrivilegeAvailability>;
         }
         interface ArrayOfEntityPrivilege {
            EntityPrivilege?: Array<vsanhealthService.vim.EntityPrivilege>;
         }
         interface UserPrivilegeResult extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            privileges?: Array<string>;
         }
         interface ArrayOfUserPrivilegeResult {
            UserPrivilegeResult?: Array<vsanhealthService.vim.UserPrivilegeResult>;
         }
         enum BatchResultResult {
            "success",
            "fail",
         }
         interface BatchResult extends vsanhealthService.vim.DynamicData {
            result: string;
            hostKey: string;
            ds?: vsanhealthService.vim.ManagedObjectReference;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface BoolPolicy extends vsanhealthService.vim.InheritablePolicy {
            value?: boolean;
         }
         interface Capability extends vsanhealthService.vim.DynamicData {
            provisioningSupported: boolean;
            multiHostSupported: boolean;
            userShellAccessSupported?: boolean;
            supportedEVCMode?: Array<vsanhealthService.vim.EVCMode>;
            networkBackupAndRestoreSupported?: boolean;
         }
         interface ClusterComputeResourceSummary extends vsanhealthService.vim.ComputeResourceSummary {
            currentFailoverLevel: number;
            admissionControlInfo?: vsanhealthService.vim.ClusterDasAdmissionControlInfo;
            numVmotions: number;
            targetBalance?: number;
            currentBalance?: number;
            usageSummary?: vsanhealthService.vim.ClusterUsageSummary;
            currentEVCModeKey?: string;
            dasData?: vsanhealthService.vim.ClusterDasData;
         }
         interface ComputeResourceSummary extends vsanhealthService.vim.DynamicData {
            totalCpu: number;
            totalMemory: number;
            numCpuCores: number;
            numCpuThreads: number;
            effectiveCpu: number;
            effectiveMemory: number;
            numHosts: number;
            numEffectiveHosts: number;
            overallStatus: vsanhealthService.vim.ManagedEntityStatus;
         }
         interface ComputeResourceConfigInfo extends vsanhealthService.vim.DynamicData {
            vmSwapPlacement: string;
            spbmEnabled?: boolean;
            defaultHardwareVersionKey?: string;
         }
         enum ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState {
            "licensed",
            "unlicensed",
            "unknown",
         }
         interface ComputeResourceHostSPBMLicenseInfo extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            licenseState: vsanhealthService.vim.ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState;
         }
         interface ArrayOfComputeResourceHostSPBMLicenseInfo {
            ComputeResourceHostSPBMLicenseInfo?: Array<vsanhealthService.vim.ComputeResourceHostSPBMLicenseInfo>;
         }
         interface ComputeResourceConfigSpec extends vsanhealthService.vim.DynamicData {
            vmSwapPlacement?: string;
            spbmEnabled?: boolean;
            defaultHardwareVersionKey?: string;
         }
         enum ConfigSpecOperation {
            "add",
            "edit",
            "remove",
         }
         interface CustomFieldDef extends vsanhealthService.vim.DynamicData {
            key: number;
            name: string;
            type: string;
            managedObjectType?: string;
            fieldDefPrivileges?: vsanhealthService.vim.PrivilegePolicyDef;
            fieldInstancePrivileges?: vsanhealthService.vim.PrivilegePolicyDef;
         }
         interface ArrayOfCustomFieldDef {
            CustomFieldDef?: Array<vsanhealthService.vim.CustomFieldDef>;
         }
         interface CustomFieldValue extends vsanhealthService.vim.DynamicData {
            key: number;
         }
         interface ArrayOfCustomFieldValue {
            CustomFieldValue?: Array<vsanhealthService.vim.CustomFieldValue>;
         }
         interface CustomFieldStringValue extends vsanhealthService.vim.CustomFieldValue {
            value: string;
         }
         interface CustomizationSpecInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            description: string;
            type: string;
            changeVersion?: string;
            lastUpdateTime?: Date;
         }
         interface ArrayOfCustomizationSpecInfo {
            CustomizationSpecInfo?: Array<vsanhealthService.vim.CustomizationSpecInfo>;
         }
         interface CustomizationSpecItem extends vsanhealthService.vim.DynamicData {
            info: vsanhealthService.vim.CustomizationSpecInfo;
            spec: vsanhealthService.vim.CustomizationSpec;
         }
         interface DatacenterConfigInfo extends vsanhealthService.vim.DynamicData {
            defaultHardwareVersionKey?: string;
         }
         interface DatacenterConfigSpec extends vsanhealthService.vim.DynamicData {
            defaultHardwareVersionKey?: string;
         }
         enum DatastoreAccessible {
            "True",
            "False",
         }
         enum DatastoreSummaryMaintenanceModeState {
            "normal",
            "enteringMaintenance",
            "inMaintenance",
         }
         interface DatastoreSummary extends vsanhealthService.vim.DynamicData {
            datastore?: vsanhealthService.vim.ManagedObjectReference;
            name: string;
            url: string;
            capacity: number;
            freeSpace: number;
            uncommitted?: number;
            accessible: boolean;
            multipleHostAccess?: boolean;
            type: string;
            maintenanceMode?: string;
         }
         interface DatastoreInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            url: string;
            freeSpace: number;
            maxFileSize: number;
            maxVirtualDiskCapacity?: number;
            maxMemoryFileSize?: number;
            timestamp?: Date;
            containerId?: string;
         }
         interface DatastoreCapability extends vsanhealthService.vim.DynamicData {
            directoryHierarchySupported: boolean;
            rawDiskMappingsSupported: boolean;
            perFileThinProvisioningSupported: boolean;
            storageIORMSupported?: boolean;
            nativeSnapshotSupported?: boolean;
            topLevelDirectoryCreateSupported?: boolean;
            seSparseSupported?: boolean;
            vmfsSparseSupported?: boolean;
            vsanSparseSupported?: boolean;
            upitSupported?: boolean;
         }
         interface DatastoreHostMount extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            mountInfo: vsanhealthService.vim.HostMountInfo;
         }
         interface ArrayOfDatastoreHostMount {
            DatastoreHostMount?: Array<vsanhealthService.vim.DatastoreHostMount>;
         }
         interface DatastoreMountPathDatastorePair extends vsanhealthService.vim.DynamicData {
            oldMountPath: string;
            datastore: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfDatastoreMountPathDatastorePair {
            DatastoreMountPathDatastorePair?: Array<vsanhealthService.vim.DatastoreMountPathDatastorePair>;
         }
         interface DatastoreVVolContainerFailoverPair extends vsanhealthService.vim.DynamicData {
            srcContainer?: string;
            tgtContainer: string;
            vvolMapping?: Array<vsanhealthService.vim.KeyValue>;
         }
         interface ArrayOfDatastoreVVolContainerFailoverPair {
            DatastoreVVolContainerFailoverPair?: Array<vsanhealthService.vim.DatastoreVVolContainerFailoverPair>;
         }
         interface Description extends vsanhealthService.vim.DynamicData {
            label: string;
            summary: string;
         }
         enum DiagnosticManagerLogCreator {
            "vpxd",
            "vpxa",
            "hostd",
            "serverd",
            "install",
            "vpxClient",
            "recordLog",
         }
         enum DiagnosticManagerLogFormat {
            "plain",
         }
         interface DiagnosticManagerLogDescriptor extends vsanhealthService.vim.DynamicData {
            key: string;
            fileName: string;
            creator: string;
            format: string;
            mimeType: string;
            info: vsanhealthService.vim.Description;
         }
         interface ArrayOfDiagnosticManagerLogDescriptor {
            DiagnosticManagerLogDescriptor?: Array<vsanhealthService.vim.DiagnosticManagerLogDescriptor>;
         }
         interface DiagnosticManagerLogHeader extends vsanhealthService.vim.DynamicData {
            lineStart: number;
            lineEnd: number;
            lineText?: Array<string>;
         }
         interface DiagnosticManagerBundleInfo extends vsanhealthService.vim.DynamicData {
            system?: vsanhealthService.vim.ManagedObjectReference;
            url: string;
         }
         interface ArrayOfDiagnosticManagerBundleInfo {
            DiagnosticManagerBundleInfo?: Array<vsanhealthService.vim.DiagnosticManagerBundleInfo>;
         }
         enum DistributedVirtualSwitchProductSpecOperationType {
            "preInstall",
            "upgrade",
            "notifyAvailableUpgrade",
            "proceedWithUpgrade",
            "updateBundleInfo",
         }
         interface DVSContactInfo extends vsanhealthService.vim.DynamicData {
            name?: string;
            contact?: string;
         }
         enum DistributedVirtualSwitchNicTeamingPolicyMode {
            "loadbalance_ip",
            "loadbalance_srcmac",
            "loadbalance_srcid",
            "failover_explicit",
            "loadbalance_loadbased",
         }
         interface DVSNetworkResourceManagementCapability extends vsanhealthService.vim.DynamicData {
            networkResourceManagementSupported: boolean;
            networkResourcePoolHighShareValue: number;
            qosSupported: boolean;
            userDefinedNetworkResourcePoolsSupported: boolean;
            networkResourceControlVersion3Supported?: boolean;
         }
         interface DVSRollbackCapability extends vsanhealthService.vim.DynamicData {
            rollbackSupported: boolean;
         }
         interface DVSBackupRestoreCapability extends vsanhealthService.vim.DynamicData {
            backupRestoreSupported: boolean;
         }
         interface DVSFeatureCapability extends vsanhealthService.vim.DynamicData {
            networkResourceManagementSupported: boolean;
            vmDirectPathGen2Supported: boolean;
            nicTeamingPolicy?: Array<string>;
            networkResourcePoolHighShareValue?: number;
            networkResourceManagementCapability?: vsanhealthService.vim.DVSNetworkResourceManagementCapability;
            healthCheckCapability?: vsanhealthService.vim.DVSHealthCheckCapability;
            rollbackCapability?: vsanhealthService.vim.DVSRollbackCapability;
            backupRestoreCapability?: vsanhealthService.vim.DVSBackupRestoreCapability;
            networkFilterSupported?: boolean;
         }
         interface DVSHealthCheckCapability extends vsanhealthService.vim.DynamicData {
         }
         interface DVSCapability extends vsanhealthService.vim.DynamicData {
            dvsOperationSupported?: boolean;
            dvPortGroupOperationSupported?: boolean;
            dvPortOperationSupported?: boolean;
            compatibleHostComponentProductInfo?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostProductSpec>;
            featuresSupported?: vsanhealthService.vim.DVSFeatureCapability;
         }
         interface DVSSummary extends vsanhealthService.vim.DynamicData {
            name: string;
            uuid: string;
            numPorts: number;
            productInfo?: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
            hostMember?: Array<vsanhealthService.vim.ManagedObjectReference>;
            vm?: Array<vsanhealthService.vim.ManagedObjectReference>;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
            portgroupName?: Array<string>;
            description?: string;
            contact?: vsanhealthService.vim.DVSContactInfo;
            numHosts?: number;
         }
         interface DVSPolicy extends vsanhealthService.vim.DynamicData {
            autoPreInstallAllowed?: boolean;
            autoUpgradeAllowed?: boolean;
            partialUpgradeAllowed?: boolean;
         }
         interface DVSUplinkPortPolicy extends vsanhealthService.vim.DynamicData {
         }
         interface DVSNameArrayUplinkPortPolicy extends vsanhealthService.vim.DVSUplinkPortPolicy {
            uplinkPortName: Array<string>;
         }
         interface DVSConfigSpec extends vsanhealthService.vim.DynamicData {
            configVersion?: string;
            name?: string;
            numStandalonePorts?: number;
            maxPorts?: number;
            uplinkPortPolicy?: vsanhealthService.vim.DVSUplinkPortPolicy;
            uplinkPortgroup?: Array<vsanhealthService.vim.ManagedObjectReference>;
            defaultPortConfig?: vsanhealthService.vim.DVPortSetting;
            host?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigSpec>;
            extensionKey?: string;
            description?: string;
            policy?: vsanhealthService.vim.DVSPolicy;
            vendorSpecificConfig?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            contact?: vsanhealthService.vim.DVSContactInfo;
            switchIpAddress?: string;
            defaultProxySwitchMaxNumPorts?: number;
            infrastructureTrafficResourceConfig?: Array<vsanhealthService.vim.DvsHostInfrastructureTrafficResource>;
            networkResourceControlVersion?: string;
         }
         interface DVSCreateSpec extends vsanhealthService.vim.DynamicData {
            configSpec: vsanhealthService.vim.DVSConfigSpec;
            productInfo?: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
            capability?: vsanhealthService.vim.DVSCapability;
         }
         interface DVSConfigInfo extends vsanhealthService.vim.DynamicData {
            uuid: string;
            name: string;
            numStandalonePorts: number;
            numPorts: number;
            maxPorts: number;
            uplinkPortPolicy: vsanhealthService.vim.DVSUplinkPortPolicy;
            uplinkPortgroup?: Array<vsanhealthService.vim.ManagedObjectReference>;
            defaultPortConfig: vsanhealthService.vim.DVPortSetting;
            host?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostMember>;
            productInfo: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
            targetInfo?: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
            extensionKey?: string;
            vendorSpecificConfig?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            policy?: vsanhealthService.vim.DVSPolicy;
            description?: string;
            configVersion: string;
            contact: vsanhealthService.vim.DVSContactInfo;
            switchIpAddress?: string;
            createTime: Date;
            networkResourceManagementEnabled?: boolean;
            defaultProxySwitchMaxNumPorts?: number;
            healthCheckConfig?: Array<vsanhealthService.vim.DVSHealthCheckConfig>;
            infrastructureTrafficResourceConfig?: Array<vsanhealthService.vim.DvsHostInfrastructureTrafficResource>;
            networkResourceControlVersion?: string;
            vmVnicNetworkResourcePool?: Array<vsanhealthService.vim.DVSVmVnicNetworkResourcePool>;
            pnicCapacityRatioForReservation?: number;
         }
         enum DistributedVirtualSwitchNetworkResourceControlVersion {
            "version2",
            "version3",
         }
         enum DistributedVirtualSwitchHostInfrastructureTrafficClass {
            "management",
            "faultTolerance",
            "vmotion",
            "virtualMachine",
            "iSCSI",
            "nfs",
            "hbr",
            "vsan",
            "vdp",
         }
         interface DvsHostInfrastructureTrafficResourceAllocation extends vsanhealthService.vim.DynamicData {
            limit?: number;
            shares?: vsanhealthService.vim.SharesInfo;
            reservation?: number;
         }
         interface DvsHostInfrastructureTrafficResource extends vsanhealthService.vim.DynamicData {
            key: string;
            description?: string;
            allocationInfo: vsanhealthService.vim.DvsHostInfrastructureTrafficResourceAllocation;
         }
         interface ArrayOfDvsHostInfrastructureTrafficResource {
            DvsHostInfrastructureTrafficResource?: Array<vsanhealthService.vim.DvsHostInfrastructureTrafficResource>;
         }
         interface DVSHealthCheckConfig extends vsanhealthService.vim.DynamicData {
            enable?: boolean;
            interval?: number;
         }
         interface ArrayOfDVSHealthCheckConfig {
            DVSHealthCheckConfig?: Array<vsanhealthService.vim.DVSHealthCheckConfig>;
         }
         interface DvsResourceRuntimeInfo extends vsanhealthService.vim.DynamicData {
            capacity?: number;
            usage?: number;
            available?: number;
            allocatedResource?: Array<vsanhealthService.vim.DvsVnicAllocatedResource>;
            vmVnicNetworkResourcePoolRuntime?: Array<vsanhealthService.vim.DvsVmVnicNetworkResourcePoolRuntimeInfo>;
         }
         interface DVSRuntimeInfo extends vsanhealthService.vim.DynamicData {
            hostMemberRuntime?: Array<vsanhealthService.vim.HostMemberRuntimeInfo>;
            resourceRuntimeInfo?: vsanhealthService.vim.DvsResourceRuntimeInfo;
         }
         enum DrsInjectorWorkloadCorrelationState {
            "Correlated",
            "Uncorrelated",
         }
         interface EVCMode extends vsanhealthService.vim.ElementDescription {
            guaranteedCPUFeatures?: Array<vsanhealthService.vim.HostCpuIdInfo>;
            featureCapability?: Array<vsanhealthService.vim.HostFeatureCapability>;
            featureMask?: Array<vsanhealthService.vim.HostFeatureMask>;
            featureRequirement?: Array<vsanhealthService.vim.VirtualMachineFeatureRequirement>;
            vendor: string;
            track?: Array<string>;
            vendorTier: number;
         }
         interface ArrayOfEVCMode {
            EVCMode?: Array<vsanhealthService.vim.EVCMode>;
         }
         interface ElementDescription extends vsanhealthService.vim.Description {
            key: string;
         }
         interface ArrayOfElementDescription {
            ElementDescription?: Array<vsanhealthService.vim.ElementDescription>;
         }
         interface EnumDescription extends vsanhealthService.vim.DynamicData {
            key: string;
            tags: Array<vsanhealthService.vim.ElementDescription>;
         }
         interface ArrayOfEnumDescription {
            EnumDescription?: Array<vsanhealthService.vim.EnumDescription>;
         }
         interface EnvironmentBrowserConfigOptionQuerySpec extends vsanhealthService.vim.DynamicData {
            key?: string;
            host?: vsanhealthService.vim.ManagedObjectReference;
            guestId?: Array<string>;
         }
         interface ExtendedDescription extends vsanhealthService.vim.Description {
            messageCatalogKeyPrefix: string;
            messageArg?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface ExtendedElementDescription extends vsanhealthService.vim.ElementDescription {
            messageCatalogKeyPrefix: string;
            messageArg?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface ExtensionServerInfo extends vsanhealthService.vim.DynamicData {
            url: string;
            description: vsanhealthService.vim.Description;
            company: string;
            type: string;
            adminEmail: Array<string>;
            serverThumbprint?: string;
         }
         interface ArrayOfExtensionServerInfo {
            ExtensionServerInfo?: Array<vsanhealthService.vim.ExtensionServerInfo>;
         }
         interface ExtensionClientInfo extends vsanhealthService.vim.DynamicData {
            version: string;
            description: vsanhealthService.vim.Description;
            company: string;
            type: string;
            url: string;
         }
         interface ArrayOfExtensionClientInfo {
            ExtensionClientInfo?: Array<vsanhealthService.vim.ExtensionClientInfo>;
         }
         interface ExtensionTaskTypeInfo extends vsanhealthService.vim.DynamicData {
            taskID: string;
         }
         interface ArrayOfExtensionTaskTypeInfo {
            ExtensionTaskTypeInfo?: Array<vsanhealthService.vim.ExtensionTaskTypeInfo>;
         }
         interface ExtensionEventTypeInfo extends vsanhealthService.vim.DynamicData {
            eventID: string;
            eventTypeSchema?: string;
         }
         interface ArrayOfExtensionEventTypeInfo {
            ExtensionEventTypeInfo?: Array<vsanhealthService.vim.ExtensionEventTypeInfo>;
         }
         interface ExtensionFaultTypeInfo extends vsanhealthService.vim.DynamicData {
            faultID: string;
         }
         interface ArrayOfExtensionFaultTypeInfo {
            ExtensionFaultTypeInfo?: Array<vsanhealthService.vim.ExtensionFaultTypeInfo>;
         }
         interface ExtensionPrivilegeInfo extends vsanhealthService.vim.DynamicData {
            privID: string;
            privGroupName: string;
         }
         interface ArrayOfExtensionPrivilegeInfo {
            ExtensionPrivilegeInfo?: Array<vsanhealthService.vim.ExtensionPrivilegeInfo>;
         }
         interface ExtensionResourceInfo extends vsanhealthService.vim.DynamicData {
            locale: string;
            module: string;
            data: Array<vsanhealthService.vim.KeyValue>;
         }
         interface ArrayOfExtensionResourceInfo {
            ExtensionResourceInfo?: Array<vsanhealthService.vim.ExtensionResourceInfo>;
         }
         interface ExtensionHealthInfo extends vsanhealthService.vim.DynamicData {
            url: string;
         }
         interface ExtensionOvfConsumerInfo extends vsanhealthService.vim.DynamicData {
            callbackUrl: string;
            sectionType: Array<string>;
         }
         interface Extension extends vsanhealthService.vim.DynamicData {
            description: vsanhealthService.vim.Description;
            key: string;
            company?: string;
            type?: string;
            version: string;
            subjectName?: string;
            server?: Array<vsanhealthService.vim.ExtensionServerInfo>;
            client?: Array<vsanhealthService.vim.ExtensionClientInfo>;
            taskList?: Array<vsanhealthService.vim.ExtensionTaskTypeInfo>;
            eventList?: Array<vsanhealthService.vim.ExtensionEventTypeInfo>;
            faultList?: Array<vsanhealthService.vim.ExtensionFaultTypeInfo>;
            privilegeList?: Array<vsanhealthService.vim.ExtensionPrivilegeInfo>;
            resourceList?: Array<vsanhealthService.vim.ExtensionResourceInfo>;
            lastHeartbeatTime: Date;
            healthInfo?: vsanhealthService.vim.ExtensionHealthInfo;
            ovfConsumerInfo?: vsanhealthService.vim.ExtensionOvfConsumerInfo;
            extendedProductInfo?: vsanhealthService.vim.ExtExtendedProductInfo;
            managedEntityInfo?: Array<vsanhealthService.vim.ExtManagedEntityInfo>;
            shownInSolutionManager?: boolean;
            solutionManagerInfo?: vsanhealthService.vim.ExtSolutionManagerInfo;
         }
         interface ArrayOfExtension {
            Extension?: Array<vsanhealthService.vim.Extension>;
         }
         interface ExtensionManagerIpAllocationUsage extends vsanhealthService.vim.DynamicData {
            extensionKey: string;
            numAddresses: number;
         }
         interface ArrayOfExtensionManagerIpAllocationUsage {
            ExtensionManagerIpAllocationUsage?: Array<vsanhealthService.vim.ExtensionManagerIpAllocationUsage>;
         }
         enum ReplicationVmState {
            "none",
            "paused",
            "syncing",
            "idle",
            "active",
            "error",
         }
         interface ReplicationVmProgressInfo extends vsanhealthService.vim.DynamicData {
            progress: number;
            bytesTransferred: number;
            bytesToTransfer: number;
            checksumTotalBytes?: number;
            checksumComparedBytes?: number;
         }
         interface HbrManagerReplicationVmInfo extends vsanhealthService.vim.DynamicData {
            state: string;
            progressInfo?: vsanhealthService.vim.ReplicationVmProgressInfo;
            imageId?: string;
            lastError?: vsanhealthService.vim.LocalizedMethodFault;
         }
         enum QuiesceMode {
            "application",
            "filesystem",
            "none",
         }
         interface HbrManagerVmReplicationCapability extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            supportedQuiesceMode: string;
            compressionSupported: boolean;
            maxSupportedSourceDiskCapacity: number;
            minRpo?: number;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHbrManagerVmReplicationCapability {
            HbrManagerVmReplicationCapability?: Array<vsanhealthService.vim.HbrManagerVmReplicationCapability>;
         }
         enum HealthUpdateInfoComponentType {
            "Memory",
            "Power",
            "Fan",
            "Network",
            "Storage",
         }
         interface HealthUpdateInfo extends vsanhealthService.vim.DynamicData {
            id: string;
            componentType: string;
            description: string;
         }
         interface ArrayOfHealthUpdateInfo {
            HealthUpdateInfo?: Array<vsanhealthService.vim.HealthUpdateInfo>;
         }
         interface HealthUpdate extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            healthUpdateInfoId: string;
            id: string;
            status: vsanhealthService.vim.ManagedEntityStatus;
            remediation: string;
         }
         interface ArrayOfHealthUpdate {
            HealthUpdate?: Array<vsanhealthService.vim.HealthUpdate>;
         }
         interface HostServiceTicket extends vsanhealthService.vim.DynamicData {
            host?: string;
            port?: number;
            sslThumbprint?: string;
            service: string;
            serviceVersion: string;
            sessionId: string;
         }
         enum HostSystemConnectionState {
            "connected",
            "notResponding",
            "disconnected",
         }
         enum HostSystemPowerState {
            "poweredOn",
            "poweredOff",
            "standBy",
            "unknown",
         }
         enum HostStandbyMode {
            "entering",
            "exiting",
            "in",
            "none",
         }
         enum HostCryptoState {
            "incapable",
            "prepared",
            "safe",
         }
         interface HostSystemReconnectSpec extends vsanhealthService.vim.DynamicData {
            syncState?: boolean;
         }
         enum HttpNfcLeaseState {
            "initializing",
            "ready",
            "done",
            "error",
         }
         interface HttpNfcLeaseDatastoreLeaseInfo extends vsanhealthService.vim.DynamicData {
            datastoreKey: string;
            hosts: Array<vsanhealthService.vim.HttpNfcLeaseHostInfo>;
         }
         interface ArrayOfHttpNfcLeaseDatastoreLeaseInfo {
            HttpNfcLeaseDatastoreLeaseInfo?: Array<vsanhealthService.vim.HttpNfcLeaseDatastoreLeaseInfo>;
         }
         interface HttpNfcLeaseHostInfo extends vsanhealthService.vim.DynamicData {
            url: string;
            sslThumbprint: string;
         }
         interface ArrayOfHttpNfcLeaseHostInfo {
            HttpNfcLeaseHostInfo?: Array<vsanhealthService.vim.HttpNfcLeaseHostInfo>;
         }
         interface HttpNfcLeaseInfo extends vsanhealthService.vim.DynamicData {
            lease: vsanhealthService.vim.ManagedObjectReference;
            entity: vsanhealthService.vim.ManagedObjectReference;
            deviceUrl?: Array<vsanhealthService.vim.HttpNfcLeaseDeviceUrl>;
            totalDiskCapacityInKB: number;
            leaseTimeout: number;
            hostMap?: Array<vsanhealthService.vim.HttpNfcLeaseDatastoreLeaseInfo>;
         }
         interface HttpNfcLeaseDeviceUrl extends vsanhealthService.vim.DynamicData {
            key: string;
            importKey: string;
            url: string;
            sslThumbprint: string;
            disk?: boolean;
            targetId?: string;
            datastoreKey?: string;
            fileSize?: number;
         }
         interface ArrayOfHttpNfcLeaseDeviceUrl {
            HttpNfcLeaseDeviceUrl?: Array<vsanhealthService.vim.HttpNfcLeaseDeviceUrl>;
         }
         interface HttpNfcLeaseManifestEntry extends vsanhealthService.vim.DynamicData {
            key: string;
            sha1: string;
            size: number;
            disk: boolean;
            capacity?: number;
            populatedSize?: number;
         }
         interface ArrayOfHttpNfcLeaseManifestEntry {
            HttpNfcLeaseManifestEntry?: Array<vsanhealthService.vim.HttpNfcLeaseManifestEntry>;
         }
         interface ImportSpec extends vsanhealthService.vim.DynamicData {
            entityConfig?: vsanhealthService.vim.VAppEntityConfigInfo;
            instantiationOst?: vsanhealthService.vim.OvfConsumerOstNode;
         }
         interface ArrayOfImportSpec {
            ImportSpec?: Array<vsanhealthService.vim.ImportSpec>;
         }
         interface InheritablePolicy extends vsanhealthService.vim.DynamicData {
            inherited: boolean;
         }
         interface IntExpression extends vsanhealthService.vim.NegatableExpression {
            value?: number;
         }
         interface IntPolicy extends vsanhealthService.vim.InheritablePolicy {
            value?: number;
         }
         interface IoFilterInfo extends vsanhealthService.vim.DynamicData {
            id: string;
            name: string;
            vendor: string;
            version: string;
            type?: string;
            summary?: string;
            releaseDate?: string;
         }
         interface HostIoFilterInfo extends vsanhealthService.vim.IoFilterInfo {
            available: boolean;
         }
         interface ArrayOfHostIoFilterInfo {
            HostIoFilterInfo?: Array<vsanhealthService.vim.HostIoFilterInfo>;
         }
         enum IoFilterOperation {
            "install",
            "uninstall",
            "upgrade",
         }
         interface ClusterIoFilterInfo extends vsanhealthService.vim.IoFilterInfo {
            opType: string;
            vibUrl?: string;
         }
         interface ArrayOfClusterIoFilterInfo {
            ClusterIoFilterInfo?: Array<vsanhealthService.vim.ClusterIoFilterInfo>;
         }
         enum IoFilterType {
            "cache",
            "replication",
            "encryption",
            "compression",
            "inspection",
            "datastoreIoControl",
            "dataProvider",
         }
         interface IoFilterHostIssue extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            issue: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfIoFilterHostIssue {
            IoFilterHostIssue?: Array<vsanhealthService.vim.IoFilterHostIssue>;
         }
         interface IoFilterQueryIssueResult extends vsanhealthService.vim.DynamicData {
            opType: string;
            hostIssue?: Array<vsanhealthService.vim.IoFilterHostIssue>;
         }
         interface IpAddress extends vsanhealthService.vim.NegatableExpression {
         }
         interface IpPoolManagerIpAllocation extends vsanhealthService.vim.DynamicData {
            ipAddress: string;
            allocationId: string;
         }
         interface ArrayOfIpPoolManagerIpAllocation {
            IpPoolManagerIpAllocation?: Array<vsanhealthService.vim.IpPoolManagerIpAllocation>;
         }
         interface IpRange extends vsanhealthService.vim.IpAddress {
            addressPrefix: string;
            prefixLength?: number;
         }
         interface KeyValue extends vsanhealthService.vim.DynamicData {
            key: string;
            value: string;
         }
         interface ArrayOfKeyValue {
            KeyValue?: Array<vsanhealthService.vim.KeyValue>;
         }
         enum LatencySensitivitySensitivityLevel {
            "low",
            "normal",
            "medium",
            "high",
            "custom",
         }
         interface LatencySensitivity extends vsanhealthService.vim.DynamicData {
            level: vsanhealthService.vim.LatencySensitivitySensitivityLevel;
            sensitivity?: number;
         }
         interface LicenseAssignmentManagerLicenseAssignment extends vsanhealthService.vim.DynamicData {
            entityId: string;
            scope?: string;
            entityDisplayName?: string;
            assignedLicense: vsanhealthService.vim.LicenseManagerLicenseInfo;
            properties?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface ArrayOfLicenseAssignmentManagerLicenseAssignment {
            LicenseAssignmentManagerLicenseAssignment?: Array<vsanhealthService.vim.LicenseAssignmentManagerLicenseAssignment>;
         }
         enum LicenseManagerState {
            "initializing",
            "normal",
            "marginal",
            "fault",
         }
         enum LicenseManagerLicenseKey {
            "esxFull",
            "esxVmtn",
            "esxExpress",
            "san",
            "iscsi",
            "nas",
            "vsmp",
            "backup",
            "vc",
            "vcExpress",
            "esxHost",
            "gsxHost",
            "serverHost",
            "drsPower",
            "vmotion",
            "drs",
            "das",
         }
         interface LicenseSource extends vsanhealthService.vim.DynamicData {
         }
         interface LicenseServerSource extends vsanhealthService.vim.LicenseSource {
            licenseServer: string;
         }
         interface LocalLicenseSource extends vsanhealthService.vim.LicenseSource {
            licenseKeys: string;
         }
         interface EvaluationLicenseSource extends vsanhealthService.vim.LicenseSource {
            remainingHours?: number;
         }
         enum LicenseFeatureInfoUnit {
            "host",
            "cpuCore",
            "cpuPackage",
            "server",
            "vm",
         }
         enum LicenseFeatureInfoState {
            "enabled",
            "disabled",
            "optional",
         }
         enum LicenseFeatureInfoSourceRestriction {
            "unrestricted",
            "served",
            "file",
         }
         interface LicenseFeatureInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            featureName: string;
            featureDescription?: string;
            state?: vsanhealthService.vim.LicenseFeatureInfoState;
            costUnit: string;
            sourceRestriction?: string;
            dependentKey?: Array<string>;
            edition?: boolean;
            expiresOn?: Date;
         }
         interface ArrayOfLicenseFeatureInfo {
            LicenseFeatureInfo?: Array<vsanhealthService.vim.LicenseFeatureInfo>;
         }
         enum LicenseReservationInfoState {
            "notUsed",
            "noLicense",
            "unlicensedUse",
            "licensed",
         }
         interface LicenseReservationInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            state: vsanhealthService.vim.LicenseReservationInfoState;
            required: number;
         }
         interface ArrayOfLicenseReservationInfo {
            LicenseReservationInfo?: Array<vsanhealthService.vim.LicenseReservationInfo>;
         }
         interface LicenseAvailabilityInfo extends vsanhealthService.vim.DynamicData {
            feature: vsanhealthService.vim.LicenseFeatureInfo;
            total: number;
            available: number;
         }
         interface ArrayOfLicenseAvailabilityInfo {
            LicenseAvailabilityInfo?: Array<vsanhealthService.vim.LicenseAvailabilityInfo>;
         }
         interface LicenseDiagnostics extends vsanhealthService.vim.DynamicData {
            sourceLastChanged: Date;
            sourceLost: string;
            sourceLatency: number;
            licenseRequests: string;
            licenseRequestFailures: string;
            licenseFeatureUnknowns: string;
            opState: vsanhealthService.vim.LicenseManagerState;
            lastStatusUpdate: Date;
            opFailureMessage: string;
         }
         interface LicenseUsageInfo extends vsanhealthService.vim.DynamicData {
            source: vsanhealthService.vim.LicenseSource;
            sourceAvailable: boolean;
            reservationInfo?: Array<vsanhealthService.vim.LicenseReservationInfo>;
            featureInfo?: Array<vsanhealthService.vim.LicenseFeatureInfo>;
         }
         interface LicenseManagerEvaluationInfo extends vsanhealthService.vim.DynamicData {
            properties: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         enum HostLicensableResourceKey {
            "numCpuPackages",
            "numCpuCores",
            "memorySize",
            "memoryForVms",
            "numVmsStarted",
            "numVmsStarting",
         }
         interface HostLicensableResourceInfo extends vsanhealthService.vim.DynamicData {
            resource: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface LicenseManagerLicenseInfo extends vsanhealthService.vim.DynamicData {
            licenseKey: string;
            editionKey: string;
            name: string;
            total: number;
            used?: number;
            costUnit: string;
            properties?: Array<vsanhealthService.vim.KeyAnyValue>;
            labels?: Array<vsanhealthService.vim.KeyValue>;
         }
         interface ArrayOfLicenseManagerLicenseInfo {
            LicenseManagerLicenseInfo?: Array<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         }
         interface LocalizationManagerMessageCatalog extends vsanhealthService.vim.DynamicData {
            moduleName: string;
            catalogName: string;
            locale: string;
            catalogUri: string;
            lastModified?: Date;
            md5sum?: string;
            version?: string;
         }
         interface ArrayOfLocalizationManagerMessageCatalog {
            LocalizationManagerMessageCatalog?: Array<vsanhealthService.vim.LocalizationManagerMessageCatalog>;
         }
         interface LongPolicy extends vsanhealthService.vim.InheritablePolicy {
            value?: number;
         }
         interface MacAddress extends vsanhealthService.vim.NegatableExpression {
         }
         interface MacRange extends vsanhealthService.vim.MacAddress {
            address: string;
            mask: string;
         }
         enum ManagedEntityStatus {
            "gray",
            "green",
            "yellow",
            "red",
         }
         interface MethodDescription extends vsanhealthService.vim.Description {
            key: string;
         }
         interface NegatableExpression extends vsanhealthService.vim.DynamicData {
            negate?: boolean;
         }
         interface NetworkSummary extends vsanhealthService.vim.DynamicData {
            network?: vsanhealthService.vim.ManagedObjectReference;
            name: string;
            accessible: boolean;
            ipPoolName?: string;
            ipPoolId?: number;
         }
         interface NumericRange extends vsanhealthService.vim.DynamicData {
            start: number;
            end: number;
         }
         interface ArrayOfNumericRange {
            NumericRange?: Array<vsanhealthService.vim.NumericRange>;
         }
         interface OpaqueNetworkSummary extends vsanhealthService.vim.NetworkSummary {
            opaqueNetworkId: string;
            opaqueNetworkType: string;
         }
         interface OpaqueNetworkCapability extends vsanhealthService.vim.DynamicData {
            networkReservationSupported: boolean;
         }
         interface OvfConsumerOvfSection extends vsanhealthService.vim.DynamicData {
            lineNumber: number;
            xml: string;
         }
         interface ArrayOfOvfConsumerOvfSection {
            OvfConsumerOvfSection?: Array<vsanhealthService.vim.OvfConsumerOvfSection>;
         }
         enum OvfConsumerOstNodeType {
            "envelope",
            "virtualSystem",
            "virtualSystemCollection",
         }
         interface OvfConsumerOstNode extends vsanhealthService.vim.DynamicData {
            id: string;
            type: string;
            section?: Array<vsanhealthService.vim.OvfConsumerOvfSection>;
            child?: Array<vsanhealthService.vim.OvfConsumerOstNode>;
            entity?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfOvfConsumerOstNode {
            OvfConsumerOstNode?: Array<vsanhealthService.vim.OvfConsumerOstNode>;
         }
         interface OvfOptionInfo extends vsanhealthService.vim.DynamicData {
            option: string;
            description: vsanhealthService.vim.LocalizableMessage;
         }
         interface ArrayOfOvfOptionInfo {
            OvfOptionInfo?: Array<vsanhealthService.vim.OvfOptionInfo>;
         }
         interface OvfDeploymentOption extends vsanhealthService.vim.DynamicData {
            key: string;
            label: string;
            description: string;
         }
         interface ArrayOfOvfDeploymentOption {
            OvfDeploymentOption?: Array<vsanhealthService.vim.OvfDeploymentOption>;
         }
         interface OvfManagerCommonParams extends vsanhealthService.vim.DynamicData {
            locale: string;
            deploymentOption: string;
            msgBundle?: Array<vsanhealthService.vim.KeyValue>;
            importOption?: Array<string>;
         }
         interface OvfValidateHostParams extends vsanhealthService.vim.OvfManagerCommonParams {
         }
         interface OvfValidateHostResult extends vsanhealthService.vim.DynamicData {
            downloadSize?: number;
            flatDeploymentSize?: number;
            sparseDeploymentSize?: number;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            warning?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            supportedDiskProvisioning?: Array<string>;
         }
         interface OvfParseDescriptorParams extends vsanhealthService.vim.OvfManagerCommonParams {
         }
         interface OvfParseDescriptorResult extends vsanhealthService.vim.DynamicData {
            eula?: Array<string>;
            network?: Array<vsanhealthService.vim.OvfNetworkInfo>;
            ipAllocationScheme?: Array<string>;
            ipProtocols?: Array<string>;
            property?: Array<vsanhealthService.vim.VAppPropertyInfo>;
            productInfo?: vsanhealthService.vim.VAppProductInfo;
            annotation: string;
            approximateDownloadSize?: number;
            approximateFlatDeploymentSize?: number;
            approximateSparseDeploymentSize?: number;
            defaultEntityName: string;
            virtualApp: boolean;
            deploymentOption?: Array<vsanhealthService.vim.OvfDeploymentOption>;
            defaultDeploymentOption: string;
            entityName?: Array<vsanhealthService.vim.KeyValue>;
            annotatedOst?: vsanhealthService.vim.OvfConsumerOstNode;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            warning?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface OvfNetworkInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            description: string;
         }
         interface ArrayOfOvfNetworkInfo {
            OvfNetworkInfo?: Array<vsanhealthService.vim.OvfNetworkInfo>;
         }
         enum OvfCreateImportSpecParamsDiskProvisioningType {
            "monolithicSparse",
            "monolithicFlat",
            "twoGbMaxExtentSparse",
            "twoGbMaxExtentFlat",
            "thin",
            "thick",
            "seSparse",
            "eagerZeroedThick",
            "sparse",
            "flat",
         }
         interface OvfCreateImportSpecParams extends vsanhealthService.vim.OvfManagerCommonParams {
            entityName: string;
            hostSystem?: vsanhealthService.vim.ManagedObjectReference;
            networkMapping?: Array<vsanhealthService.vim.OvfNetworkMapping>;
            ipAllocationPolicy?: string;
            ipProtocol?: string;
            propertyMapping?: Array<vsanhealthService.vim.KeyValue>;
            resourceMapping?: Array<vsanhealthService.vim.OvfResourceMap>;
            diskProvisioning?: string;
            instantiationOst?: vsanhealthService.vim.OvfConsumerOstNode;
         }
         interface OvfResourceMap extends vsanhealthService.vim.DynamicData {
            source: string;
            parent?: vsanhealthService.vim.ManagedObjectReference;
            resourceSpec?: vsanhealthService.vim.ResourceConfigSpec;
            datastore?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfOvfResourceMap {
            OvfResourceMap?: Array<vsanhealthService.vim.OvfResourceMap>;
         }
         interface OvfNetworkMapping extends vsanhealthService.vim.DynamicData {
            name: string;
            network: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfOvfNetworkMapping {
            OvfNetworkMapping?: Array<vsanhealthService.vim.OvfNetworkMapping>;
         }
         interface OvfCreateImportSpecResult extends vsanhealthService.vim.DynamicData {
            importSpec?: vsanhealthService.vim.ImportSpec;
            fileItem?: Array<vsanhealthService.vim.OvfFileItem>;
            warning?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface OvfFileItem extends vsanhealthService.vim.DynamicData {
            deviceId: string;
            path: string;
            compressionMethod?: string;
            chunkSize?: number;
            size?: number;
            cimType: number;
            create: boolean;
         }
         interface ArrayOfOvfFileItem {
            OvfFileItem?: Array<vsanhealthService.vim.OvfFileItem>;
         }
         interface OvfCreateDescriptorParams extends vsanhealthService.vim.DynamicData {
            ovfFiles?: Array<vsanhealthService.vim.OvfFile>;
            name?: string;
            description?: string;
            includeImageFiles?: boolean;
            exportOption?: Array<string>;
            snapshot?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface OvfCreateDescriptorResult extends vsanhealthService.vim.DynamicData {
            ovfDescriptor: string;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            warning?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            includeImageFiles?: boolean;
         }
         interface OvfFile extends vsanhealthService.vim.DynamicData {
            deviceId: string;
            path: string;
            compressionMethod?: string;
            chunkSize?: number;
            size: number;
            capacity?: number;
            populatedSize?: number;
         }
         interface ArrayOfOvfFile {
            OvfFile?: Array<vsanhealthService.vim.OvfFile>;
         }
         interface PasswordField extends vsanhealthService.vim.DynamicData {
            value: string;
         }
         interface PerformanceDescription extends vsanhealthService.vim.DynamicData {
            counterType: Array<vsanhealthService.vim.ElementDescription>;
            statsType: Array<vsanhealthService.vim.ElementDescription>;
         }
         enum PerfFormat {
            "normal",
            "csv",
         }
         interface PerfProviderSummary extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            currentSupported: boolean;
            summarySupported: boolean;
            refreshRate?: number;
         }
         enum PerfSummaryType {
            "average",
            "maximum",
            "minimum",
            "latest",
            "summation",
            "none",
         }
         enum PerfStatsType {
            "absolute",
            "delta",
            "rate",
         }
         enum PerformanceManagerUnit {
            "percent",
            "kiloBytes",
            "megaBytes",
            "megaHertz",
            "number",
            "microsecond",
            "millisecond",
            "second",
            "kiloBytesPerSecond",
            "megaBytesPerSecond",
            "watt",
            "joule",
            "teraBytes",
         }
         interface PerfCounterInfo extends vsanhealthService.vim.DynamicData {
            key: number;
            nameInfo: vsanhealthService.vim.ElementDescription;
            groupInfo: vsanhealthService.vim.ElementDescription;
            unitInfo: vsanhealthService.vim.ElementDescription;
            rollupType: vsanhealthService.vim.PerfSummaryType;
            statsType: vsanhealthService.vim.PerfStatsType;
            level?: number;
            perDeviceLevel?: number;
            associatedCounterId?: Array<number>;
         }
         interface ArrayOfPerfCounterInfo {
            PerfCounterInfo?: Array<vsanhealthService.vim.PerfCounterInfo>;
         }
         interface PerfMetricId extends vsanhealthService.vim.DynamicData {
            counterId: number;
            instance: string;
         }
         interface ArrayOfPerfMetricId {
            PerfMetricId?: Array<vsanhealthService.vim.PerfMetricId>;
         }
         interface PerfQuerySpec extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            startTime?: Date;
            endTime?: Date;
            maxSample?: number;
            metricId?: Array<vsanhealthService.vim.PerfMetricId>;
            intervalId?: number;
            format?: string;
         }
         interface ArrayOfPerfQuerySpec {
            PerfQuerySpec?: Array<vsanhealthService.vim.PerfQuerySpec>;
         }
         interface PerfSampleInfo extends vsanhealthService.vim.DynamicData {
            timestamp: Date;
            interval: number;
         }
         interface ArrayOfPerfSampleInfo {
            PerfSampleInfo?: Array<vsanhealthService.vim.PerfSampleInfo>;
         }
         interface PerfMetricSeries extends vsanhealthService.vim.DynamicData {
            id: vsanhealthService.vim.PerfMetricId;
         }
         interface ArrayOfPerfMetricSeries {
            PerfMetricSeries?: Array<vsanhealthService.vim.PerfMetricSeries>;
         }
         interface PerfMetricIntSeries extends vsanhealthService.vim.PerfMetricSeries {
            value?: Array<number>;
         }
         interface PerfMetricSeriesCSV extends vsanhealthService.vim.PerfMetricSeries {
            value?: string;
         }
         interface ArrayOfPerfMetricSeriesCSV {
            PerfMetricSeriesCSV?: Array<vsanhealthService.vim.PerfMetricSeriesCSV>;
         }
         interface PerfEntityMetricBase extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfPerfEntityMetricBase {
            PerfEntityMetricBase?: Array<vsanhealthService.vim.PerfEntityMetricBase>;
         }
         interface PerfEntityMetric extends vsanhealthService.vim.PerfEntityMetricBase {
            sampleInfo?: Array<vsanhealthService.vim.PerfSampleInfo>;
            value?: Array<vsanhealthService.vim.PerfMetricSeries>;
         }
         interface PerfEntityMetricCSV extends vsanhealthService.vim.PerfEntityMetricBase {
            sampleInfoCSV: string;
            value?: Array<vsanhealthService.vim.PerfMetricSeriesCSV>;
         }
         interface PerfCompositeMetric extends vsanhealthService.vim.DynamicData {
            entity?: vsanhealthService.vim.PerfEntityMetricBase;
            childEntity?: Array<vsanhealthService.vim.PerfEntityMetricBase>;
         }
         interface PerformanceManagerCounterLevelMapping extends vsanhealthService.vim.DynamicData {
            counterId: number;
            aggregateLevel?: number;
            perDeviceLevel?: number;
         }
         interface ArrayOfPerformanceManagerCounterLevelMapping {
            PerformanceManagerCounterLevelMapping?: Array<vsanhealthService.vim.PerformanceManagerCounterLevelMapping>;
         }
         interface PerfInterval extends vsanhealthService.vim.DynamicData {
            key?: number;
            samplingPeriod: number;
            name: string;
            length: number;
            level?: number;
            enabled?: boolean;
         }
         interface ArrayOfPerfInterval {
            PerfInterval?: Array<vsanhealthService.vim.PerfInterval>;
         }
         interface PosixUserSearchResult extends vsanhealthService.vim.UserSearchResult {
            id: number;
            shellAccess?: boolean;
         }
         interface PrivilegePolicyDef extends vsanhealthService.vim.DynamicData {
            createPrivilege: string;
            readPrivilege: string;
            updatePrivilege: string;
            deletePrivilege: string;
         }
         interface ResourceAllocationInfo extends vsanhealthService.vim.DynamicData {
            reservation?: number;
            expandableReservation?: boolean;
            limit?: number;
            shares?: vsanhealthService.vim.SharesInfo;
            overheadLimit?: number;
         }
         interface ResourceAllocationOption extends vsanhealthService.vim.DynamicData {
            sharesOption: vsanhealthService.vim.SharesOption;
         }
         interface ResourceConfigOption extends vsanhealthService.vim.DynamicData {
            cpuAllocationOption: vsanhealthService.vim.ResourceAllocationOption;
            memoryAllocationOption: vsanhealthService.vim.ResourceAllocationOption;
         }
         interface ResourceConfigSpec extends vsanhealthService.vim.DynamicData {
            entity?: vsanhealthService.vim.ManagedObjectReference;
            changeVersion?: string;
            lastModified?: Date;
            cpuAllocation: vsanhealthService.vim.ResourceAllocationInfo;
            memoryAllocation: vsanhealthService.vim.ResourceAllocationInfo;
         }
         interface ArrayOfResourceConfigSpec {
            ResourceConfigSpec?: Array<vsanhealthService.vim.ResourceConfigSpec>;
         }
         interface DatabaseSizeParam extends vsanhealthService.vim.DynamicData {
            inventoryDesc: vsanhealthService.vim.InventoryDescription;
            perfStatsDesc?: vsanhealthService.vim.PerformanceStatisticsDescription;
         }
         interface InventoryDescription extends vsanhealthService.vim.DynamicData {
            numHosts: number;
            numVirtualMachines: number;
            numResourcePools?: number;
            numClusters?: number;
            numCpuDev?: number;
            numNetDev?: number;
            numDiskDev?: number;
            numvCpuDev?: number;
            numvNetDev?: number;
            numvDiskDev?: number;
         }
         interface PerformanceStatisticsDescription extends vsanhealthService.vim.DynamicData {
            intervals?: Array<vsanhealthService.vim.PerfInterval>;
         }
         interface DatabaseSizeEstimate extends vsanhealthService.vim.DynamicData {
            size: number;
         }
         interface ResourcePoolResourceUsage extends vsanhealthService.vim.DynamicData {
            reservationUsed: number;
            reservationUsedForVm: number;
            unreservedForPool: number;
            unreservedForVm: number;
            overallUsage: number;
            maxUsage: number;
         }
         interface ResourcePoolRuntimeInfo extends vsanhealthService.vim.DynamicData {
            memory: vsanhealthService.vim.ResourcePoolResourceUsage;
            cpu: vsanhealthService.vim.ResourcePoolResourceUsage;
            overallStatus: vsanhealthService.vim.ManagedEntityStatus;
         }
         interface ResourcePoolQuickStats extends vsanhealthService.vim.DynamicData {
            overallCpuUsage?: number;
            overallCpuDemand?: number;
            guestMemoryUsage?: number;
            hostMemoryUsage?: number;
            distributedCpuEntitlement?: number;
            distributedMemoryEntitlement?: number;
            staticCpuEntitlement?: number;
            staticMemoryEntitlement?: number;
            privateMemory?: number;
            sharedMemory?: number;
            swappedMemory?: number;
            balloonedMemory?: number;
            overheadMemory?: number;
            consumedOverheadMemory?: number;
            compressedMemory?: number;
         }
         interface ResourcePoolSummary extends vsanhealthService.vim.DynamicData {
            name: string;
            config: vsanhealthService.vim.ResourceConfigSpec;
            runtime: vsanhealthService.vim.ResourcePoolRuntimeInfo;
            quickStats?: vsanhealthService.vim.ResourcePoolQuickStats;
            configuredMemoryMB?: number;
         }
         interface SelectionSet extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfSelectionSet {
            SelectionSet?: Array<vsanhealthService.vim.SelectionSet>;
         }
         enum ValidateMigrationTestType {
            "sourceTests",
            "compatibilityTests",
            "diskAccessibilityTests",
            "resourceTests",
         }
         enum VMotionCompatibilityType {
            "cpu",
            "software",
         }
         interface HostVMotionCompatibility extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            compatibility?: Array<string>;
         }
         interface ArrayOfHostVMotionCompatibility {
            HostVMotionCompatibility?: Array<vsanhealthService.vim.HostVMotionCompatibility>;
         }
         interface ProductComponentInfo extends vsanhealthService.vim.DynamicData {
            id: string;
            name: string;
            version: string;
            release: number;
         }
         interface ArrayOfProductComponentInfo {
            ProductComponentInfo?: Array<vsanhealthService.vim.ProductComponentInfo>;
         }
         interface ServiceContent extends vsanhealthService.vim.DynamicData {
            rootFolder: vsanhealthService.vim.ManagedObjectReference;
            propertyCollector: vsanhealthService.vim.ManagedObjectReference;
            viewManager?: vsanhealthService.vim.ManagedObjectReference;
            about: vsanhealthService.vim.AboutInfo;
            setting?: vsanhealthService.vim.ManagedObjectReference;
            userDirectory?: vsanhealthService.vim.ManagedObjectReference;
            sessionManager?: vsanhealthService.vim.ManagedObjectReference;
            authorizationManager?: vsanhealthService.vim.ManagedObjectReference;
            serviceManager?: vsanhealthService.vim.ManagedObjectReference;
            perfManager?: vsanhealthService.vim.ManagedObjectReference;
            scheduledTaskManager?: vsanhealthService.vim.ManagedObjectReference;
            alarmManager?: vsanhealthService.vim.ManagedObjectReference;
            eventManager?: vsanhealthService.vim.ManagedObjectReference;
            taskManager?: vsanhealthService.vim.ManagedObjectReference;
            extensionManager?: vsanhealthService.vim.ManagedObjectReference;
            customizationSpecManager?: vsanhealthService.vim.ManagedObjectReference;
            customFieldsManager?: vsanhealthService.vim.ManagedObjectReference;
            accountManager?: vsanhealthService.vim.ManagedObjectReference;
            diagnosticManager?: vsanhealthService.vim.ManagedObjectReference;
            licenseManager?: vsanhealthService.vim.ManagedObjectReference;
            searchIndex?: vsanhealthService.vim.ManagedObjectReference;
            fileManager?: vsanhealthService.vim.ManagedObjectReference;
            datastoreNamespaceManager?: vsanhealthService.vim.ManagedObjectReference;
            virtualDiskManager?: vsanhealthService.vim.ManagedObjectReference;
            virtualizationManager?: vsanhealthService.vim.ManagedObjectReference;
            snmpSystem?: vsanhealthService.vim.ManagedObjectReference;
            vmProvisioningChecker?: vsanhealthService.vim.ManagedObjectReference;
            vmCompatibilityChecker?: vsanhealthService.vim.ManagedObjectReference;
            ovfManager?: vsanhealthService.vim.ManagedObjectReference;
            ipPoolManager?: vsanhealthService.vim.ManagedObjectReference;
            dvSwitchManager?: vsanhealthService.vim.ManagedObjectReference;
            hostProfileManager?: vsanhealthService.vim.ManagedObjectReference;
            clusterProfileManager?: vsanhealthService.vim.ManagedObjectReference;
            complianceManager?: vsanhealthService.vim.ManagedObjectReference;
            localizationManager?: vsanhealthService.vim.ManagedObjectReference;
            storageResourceManager?: vsanhealthService.vim.ManagedObjectReference;
            guestOperationsManager?: vsanhealthService.vim.ManagedObjectReference;
            overheadMemoryManager?: vsanhealthService.vim.ManagedObjectReference;
            certificateManager?: vsanhealthService.vim.ManagedObjectReference;
            ioFilterManager?: vsanhealthService.vim.ManagedObjectReference;
            vStorageObjectManager?: vsanhealthService.vim.ManagedObjectReference;
            hostSpecManager?: vsanhealthService.vim.ManagedObjectReference;
            cryptoManager?: vsanhealthService.vim.ManagedObjectReference;
            healthUpdateManager?: vsanhealthService.vim.ManagedObjectReference;
            failoverClusterConfigurator?: vsanhealthService.vim.ManagedObjectReference;
            failoverClusterManager?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ServiceLocatorCredential extends vsanhealthService.vim.DynamicData {
         }
         interface ServiceLocatorNamePassword extends vsanhealthService.vim.ServiceLocatorCredential {
            username: string;
            password: string;
         }
         interface ServiceLocatorSAMLCredential extends vsanhealthService.vim.ServiceLocatorCredential {
            token?: string;
         }
         interface ServiceLocator extends vsanhealthService.vim.DynamicData {
            instanceUuid: string;
            url: string;
            credential: vsanhealthService.vim.ServiceLocatorCredential;
            sslThumbprint?: string;
         }
         interface ArrayOfServiceLocator {
            ServiceLocator?: Array<vsanhealthService.vim.ServiceLocator>;
         }
         interface ServiceManagerServiceInfo extends vsanhealthService.vim.DynamicData {
            serviceName: string;
            location?: Array<string>;
            service: vsanhealthService.vim.ManagedObjectReference;
            description: string;
         }
         interface ArrayOfServiceManagerServiceInfo {
            ServiceManagerServiceInfo?: Array<vsanhealthService.vim.ServiceManagerServiceInfo>;
         }
         interface SessionManagerLocalTicket extends vsanhealthService.vim.DynamicData {
            userName: string;
            passwordFilePath: string;
         }
         interface SessionManagerGenericServiceTicket extends vsanhealthService.vim.DynamicData {
            id: string;
            hostName?: string;
            sslThumbprint?: string;
         }
         interface SessionManagerServiceRequestSpec extends vsanhealthService.vim.DynamicData {
         }
         interface SessionManagerVmomiServiceRequestSpec extends vsanhealthService.vim.SessionManagerServiceRequestSpec {
            method: string;
         }
         enum SessionManagerHttpServiceRequestSpecMethod {
            "httpOptions",
            "httpGet",
            "httpHead",
            "httpPost",
            "httpPut",
            "httpDelete",
            "httpTrace",
            "httpConnect",
         }
         interface SessionManagerHttpServiceRequestSpec extends vsanhealthService.vim.SessionManagerServiceRequestSpec {
            method?: string;
            url: string;
         }
         enum SharesLevel {
            "low",
            "normal",
            "high",
            "custom",
         }
         interface SharesInfo extends vsanhealthService.vim.DynamicData {
            shares: number;
            level: vsanhealthService.vim.SharesLevel;
         }
         interface SharesOption extends vsanhealthService.vim.DynamicData {
            sharesOption: vsanhealthService.vim.IntOption;
            defaultLevel: vsanhealthService.vim.SharesLevel;
         }
         enum SimpleCommandEncoding {
            "CSV",
            "HEX",
            "STRING",
         }
         interface SingleIp extends vsanhealthService.vim.IpAddress {
            address: string;
         }
         interface SingleMac extends vsanhealthService.vim.MacAddress {
            address: string;
         }
         interface StoragePodSummary extends vsanhealthService.vim.DynamicData {
            name: string;
            capacity: number;
            freeSpace: number;
         }
         interface StorageIOAllocationInfo extends vsanhealthService.vim.DynamicData {
            limit?: number;
            shares?: vsanhealthService.vim.SharesInfo;
            reservation?: number;
         }
         interface StorageIOAllocationOption extends vsanhealthService.vim.DynamicData {
            limitOption: vsanhealthService.vim.LongOption;
            sharesOption: vsanhealthService.vim.SharesOption;
         }
         enum StorageIORMThresholdMode {
            "automatic",
            "manual",
         }
         interface StorageIORMInfo extends vsanhealthService.vim.DynamicData {
            enabled: boolean;
            congestionThresholdMode?: string;
            congestionThreshold: number;
            percentOfPeakThroughput?: number;
            statsCollectionEnabled?: boolean;
            reservationEnabled?: boolean;
            statsAggregationDisabled?: boolean;
            reservableIopsThreshold?: number;
         }
         interface StorageIORMConfigSpec extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            congestionThresholdMode?: string;
            congestionThreshold?: number;
            percentOfPeakThroughput?: number;
            statsCollectionEnabled?: boolean;
            reservationEnabled?: boolean;
            statsAggregationDisabled?: boolean;
            reservableIopsThreshold?: number;
         }
         interface StorageIORMConfigOption extends vsanhealthService.vim.DynamicData {
            enabledOption: vsanhealthService.vim.BoolOption;
            congestionThresholdOption: vsanhealthService.vim.IntOption;
            statsCollectionEnabledOption?: vsanhealthService.vim.BoolOption;
            reservationEnabledOption?: vsanhealthService.vim.BoolOption;
         }
         interface StoragePerformanceSummary extends vsanhealthService.vim.DynamicData {
            interval: number;
            percentile: Array<number>;
            datastoreReadLatency: Array<number>;
            datastoreWriteLatency: Array<number>;
            datastoreVmLatency: Array<number>;
            datastoreReadIops: Array<number>;
            datastoreWriteIops: Array<number>;
            siocActivityDuration: number;
         }
         interface ArrayOfStoragePerformanceSummary {
            StoragePerformanceSummary?: Array<vsanhealthService.vim.StoragePerformanceSummary>;
         }
         interface PodStorageDrsEntry extends vsanhealthService.vim.DynamicData {
            storageDrsConfig: vsanhealthService.vim.StorageDrsConfigInfo;
            recommendation?: Array<vsanhealthService.vim.ClusterRecommendation>;
            drsFault?: Array<vsanhealthService.vim.ClusterDrsFaults>;
            actionHistory?: Array<vsanhealthService.vim.ClusterActionHistory>;
         }
         interface StorageResourceManagerStorageProfileStatistics extends vsanhealthService.vim.DynamicData {
            profileId: string;
            totalSpaceMB: number;
            usedSpaceMB: number;
         }
         interface StringExpression extends vsanhealthService.vim.NegatableExpression {
            value?: string;
         }
         interface StringPolicy extends vsanhealthService.vim.InheritablePolicy {
            value?: string;
         }
         interface Tag extends vsanhealthService.vim.DynamicData {
            key: string;
         }
         interface ArrayOfTag {
            Tag?: Array<vsanhealthService.vim.Tag>;
         }
         interface TaskDescription extends vsanhealthService.vim.DynamicData {
            methodInfo: Array<vsanhealthService.vim.ElementDescription>;
            state: Array<vsanhealthService.vim.ElementDescription>;
            reason: Array<vsanhealthService.vim.TypeDescription>;
         }
         enum TaskFilterSpecRecursionOption {
            "self",
            "children",
            "all",
         }
         enum TaskFilterSpecTimeOption {
            "queuedTime",
            "startedTime",
            "completedTime",
         }
         interface TaskFilterSpecByEntity extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            recursion: vsanhealthService.vim.TaskFilterSpecRecursionOption;
         }
         interface TaskFilterSpecByTime extends vsanhealthService.vim.DynamicData {
            timeType: vsanhealthService.vim.TaskFilterSpecTimeOption;
            beginTime?: Date;
            endTime?: Date;
         }
         interface TaskFilterSpecByUsername extends vsanhealthService.vim.DynamicData {
            systemUser: boolean;
            userList?: Array<string>;
         }
         interface TaskFilterSpec extends vsanhealthService.vim.DynamicData {
            entity?: vsanhealthService.vim.TaskFilterSpecByEntity;
            time?: vsanhealthService.vim.TaskFilterSpecByTime;
            userName?: vsanhealthService.vim.TaskFilterSpecByUsername;
            activationId?: Array<string>;
            state?: Array<vsanhealthService.vim.TaskInfoState>;
            alarm?: vsanhealthService.vim.ManagedObjectReference;
            scheduledTask?: vsanhealthService.vim.ManagedObjectReference;
            eventChainId?: Array<number>;
            tag?: Array<string>;
            parentTaskKey?: Array<string>;
            rootTaskKey?: Array<string>;
         }
         enum TaskInfoState {
            "queued",
            "running",
            "success",
            "error",
         }
         interface ArrayOfTaskInfoState {
            TaskInfoState?: Array<vsanhealthService.vim.TaskInfoState>;
         }
         interface TaskInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            task: vsanhealthService.vim.ManagedObjectReference;
            description?: vsanhealthService.vim.LocalizableMessage;
            name?: string;
            descriptionId: string;
            entity?: vsanhealthService.vim.ManagedObjectReference;
            entityName?: string;
            locked?: Array<vsanhealthService.vim.ManagedObjectReference>;
            state: vsanhealthService.vim.TaskInfoState;
            cancelled: boolean;
            cancelable: boolean;
            error?: vsanhealthService.vim.LocalizedMethodFault;
            result?: any;
            progress?: number;
            reason: vsanhealthService.vim.TaskReason;
            queueTime: Date;
            startTime?: Date;
            completeTime?: Date;
            eventChainId: number;
            changeTag?: string;
            parentTaskKey?: string;
            rootTaskKey?: string;
            activationId?: string;
         }
         interface ArrayOfTaskInfo {
            TaskInfo?: Array<vsanhealthService.vim.TaskInfo>;
         }
         interface TaskReason extends vsanhealthService.vim.DynamicData {
         }
         interface TaskReasonSystem extends vsanhealthService.vim.TaskReason {
         }
         interface TaskReasonUser extends vsanhealthService.vim.TaskReason {
            userName: string;
         }
         interface TaskReasonAlarm extends vsanhealthService.vim.TaskReason {
            alarmName: string;
            alarm: vsanhealthService.vim.ManagedObjectReference;
            entityName: string;
            entity: vsanhealthService.vim.ManagedObjectReference;
         }
         interface TaskReasonSchedule extends vsanhealthService.vim.TaskReason {
            name: string;
            scheduledTask: vsanhealthService.vim.ManagedObjectReference;
         }
         interface TypeDescription extends vsanhealthService.vim.Description {
            key: string;
         }
         interface ArrayOfTypeDescription {
            TypeDescription?: Array<vsanhealthService.vim.TypeDescription>;
         }
         interface UpdateVirtualMachineFilesResultFailedVmFileInfo extends vsanhealthService.vim.DynamicData {
            vmFile: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo {
            UpdateVirtualMachineFilesResultFailedVmFileInfo?: Array<vsanhealthService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo>;
         }
         interface UpdateVirtualMachineFilesResult extends vsanhealthService.vim.DynamicData {
            failedVmFile?: Array<vsanhealthService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo>;
         }
         interface UserSearchResult extends vsanhealthService.vim.DynamicData {
            principal: string;
            fullName?: string;
            group: boolean;
         }
         interface ArrayOfUserSearchResult {
            UserSearchResult?: Array<vsanhealthService.vim.UserSearchResult>;
         }
         interface UserSession extends vsanhealthService.vim.DynamicData {
            key: string;
            userName: string;
            fullName: string;
            loginTime: Date;
            lastActiveTime: Date;
            locale: string;
            messageLocale: string;
            extensionSession?: boolean;
            ipAddress?: string;
            userAgent?: string;
            callCount?: number;
         }
         interface ArrayOfUserSession {
            UserSession?: Array<vsanhealthService.vim.UserSession>;
         }
         interface VrpResourceAllocationInfo extends vsanhealthService.vim.ResourceAllocationInfo {
            reservationLimit?: number;
         }
         interface VirtualResourcePoolSpec extends vsanhealthService.vim.DynamicData {
            vrpId?: string;
            vrpName?: string;
            description?: string;
            cpuAllocation: vsanhealthService.vim.VrpResourceAllocationInfo;
            memoryAllocation: vsanhealthService.vim.VrpResourceAllocationInfo;
            rpList?: Array<vsanhealthService.vim.ManagedObjectReference>;
            hubList?: Array<vsanhealthService.vim.ManagedObjectReference>;
            rootVRP?: boolean;
            staticVRP?: boolean;
            changeVersion?: number;
         }
         interface VRPEditSpec extends vsanhealthService.vim.DynamicData {
            vrpId: string;
            description?: string;
            cpuAllocation?: vsanhealthService.vim.VrpResourceAllocationInfo;
            memoryAllocation?: vsanhealthService.vim.VrpResourceAllocationInfo;
            addedHubs?: Array<vsanhealthService.vim.ManagedObjectReference>;
            removedHubs?: Array<vsanhealthService.vim.ManagedObjectReference>;
            changeVersion?: number;
         }
         interface VirtualResourcePoolUsage extends vsanhealthService.vim.DynamicData {
            vrpId: string;
            cpuReservationMhz: number;
            memReservationMB: number;
            cpuReservationUsedMhz: number;
            memReservationUsedMB: number;
         }
         interface VVolVmConfigFileUpdateResultFailedVmConfigFileInfo extends vsanhealthService.vim.DynamicData {
            targetConfigVVolId: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo {
            VVolVmConfigFileUpdateResultFailedVmConfigFileInfo?: Array<vsanhealthService.vim.VVolVmConfigFileUpdateResultFailedVmConfigFileInfo>;
         }
         interface VVolVmConfigFileUpdateResult extends vsanhealthService.vim.DynamicData {
            succeededVmConfigFile?: Array<vsanhealthService.vim.KeyValue>;
            failedVmConfigFile?: Array<vsanhealthService.vim.VVolVmConfigFileUpdateResultFailedVmConfigFileInfo>;
         }
         interface VASAStorageArray extends vsanhealthService.vim.DynamicData {
            name: string;
            uuid: string;
            vendorId: string;
            modelId: string;
         }
         interface ArrayOfVASAStorageArray {
            VASAStorageArray?: Array<vsanhealthService.vim.VASAStorageArray>;
         }
         interface VasaProviderContainerSpec extends vsanhealthService.vim.DynamicData {
            vasaProviderInfo?: Array<vsanhealthService.vim.VimVasaProviderInfo>;
            scId: string;
            deleted: boolean;
         }
         interface VimVasaProviderStatePerArray extends vsanhealthService.vim.DynamicData {
            priority: number;
            arrayId: string;
            active: boolean;
         }
         interface ArrayOfVimVasaProviderStatePerArray {
            VimVasaProviderStatePerArray?: Array<vsanhealthService.vim.VimVasaProviderStatePerArray>;
         }
         interface VimVasaProvider extends vsanhealthService.vim.DynamicData {
            url: string;
            name?: string;
            selfSignedCertificate?: string;
         }
         interface VimVasaProviderInfo extends vsanhealthService.vim.DynamicData {
            provider: vsanhealthService.vim.VimVasaProvider;
            arrayState?: Array<vsanhealthService.vim.VimVasaProviderStatePerArray>;
         }
         interface ArrayOfVimVasaProviderInfo {
            VimVasaProviderInfo?: Array<vsanhealthService.vim.VimVasaProviderInfo>;
         }
         enum VirtualAppVAppState {
            "started",
            "stopped",
            "starting",
            "stopping",
         }
         interface VirtualAppSummary extends vsanhealthService.vim.ResourcePoolSummary {
            product?: vsanhealthService.vim.VAppProductInfo;
            vAppState?: vsanhealthService.vim.VirtualAppVAppState;
            suspended?: boolean;
            installBootRequired?: boolean;
            instanceUuid?: string;
         }
         interface VirtualAppLinkInfo extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            destroyWithParent?: boolean;
         }
         interface ArrayOfVirtualAppLinkInfo {
            VirtualAppLinkInfo?: Array<vsanhealthService.vim.VirtualAppLinkInfo>;
         }
         enum VirtualDiskType {
            "preallocated",
            "thin",
            "seSparse",
            "rdm",
            "rdmp",
            "raw",
            "delta",
            "sparse2Gb",
            "thick2Gb",
            "eagerZeroedThick",
            "sparseMonolithic",
            "flatMonolithic",
            "thick",
         }
         enum VirtualDiskAdapterType {
            "ide",
            "busLogic",
            "lsiLogic",
         }
         interface VirtualDiskSpec extends vsanhealthService.vim.DynamicData {
            diskType: string;
            adapterType: string;
         }
         interface FileBackedVirtualDiskSpec extends vsanhealthService.vim.VirtualDiskSpec {
            capacityKb: number;
            profile?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
            crypto?: vsanhealthService.vim.CryptoSpec;
         }
         interface SeSparseVirtualDiskSpec extends vsanhealthService.vim.FileBackedVirtualDiskSpec {
            grainSizeKb?: number;
         }
         interface DeviceBackedVirtualDiskSpec extends vsanhealthService.vim.VirtualDiskSpec {
            device: string;
         }
         interface StorageRequirement extends vsanhealthService.vim.DynamicData {
            datastore: vsanhealthService.vim.ManagedObjectReference;
            freeSpaceRequiredInKb: number;
         }
         interface ArrayOfStorageRequirement {
            StorageRequirement?: Array<vsanhealthService.vim.StorageRequirement>;
         }
         enum VirtualMachinePowerState {
            "poweredOff",
            "poweredOn",
            "suspended",
         }
         enum VirtualMachineAppHeartbeatStatusType {
            "appStatusGray",
            "appStatusGreen",
            "appStatusRed",
         }
         enum VirtualMachineConnectionState {
            "connected",
            "disconnected",
            "orphaned",
            "inaccessible",
            "invalid",
         }
         enum VirtualMachineMovePriority {
            "lowPriority",
            "highPriority",
            "defaultPriority",
         }
         interface VirtualMachineTicket extends vsanhealthService.vim.DynamicData {
            ticket: string;
            cfgFile: string;
            host?: string;
            port?: number;
            sslThumbprint?: string;
         }
         interface VirtualMachineMksTicket extends vsanhealthService.vim.DynamicData {
            ticket: string;
            cfgFile: string;
            host?: string;
            port?: number;
            sslThumbprint?: string;
         }
         enum VirtualMachineFaultToleranceState {
            "notConfigured",
            "disabled",
            "enabled",
            "needSecondary",
            "starting",
            "running",
         }
         enum VirtualMachineRecordReplayState {
            "recording",
            "replaying",
            "inactive",
         }
         enum VirtualMachineNeedSecondaryReason {
            "initializing",
            "divergence",
            "lostConnection",
            "partialHardwareFailure",
            "userAction",
            "checkpointError",
            "other",
         }
         enum VirtualMachineFaultToleranceType {
            "unset",
            "recordReplay",
            "checkpointing",
         }
         enum VirtualMachineTicketType {
            "mks",
            "device",
            "guestControl",
            "webmks",
         }
         interface VirtualMachineDisplayTopology extends vsanhealthService.vim.DynamicData {
            x: number;
            y: number;
            width: number;
            height: number;
         }
         interface ArrayOfVirtualMachineDisplayTopology {
            VirtualMachineDisplayTopology?: Array<vsanhealthService.vim.VirtualMachineDisplayTopology>;
         }
         interface DiskChangeExtent extends vsanhealthService.vim.DynamicData {
            start: number;
            length: number;
         }
         interface ArrayOfDiskChangeExtent {
            DiskChangeExtent?: Array<vsanhealthService.vim.DiskChangeExtent>;
         }
         interface DiskChangeInfo extends vsanhealthService.vim.DynamicData {
            startOffset: number;
            length: number;
            changedArea?: Array<vsanhealthService.vim.DiskChangeExtent>;
         }
         interface VirtualMachineWipeResult extends vsanhealthService.vim.DynamicData {
            diskId: number;
            shrinkableDiskSpace: number;
         }
         interface VsanUpgradeSystemPreflightCheckIssue extends vsanhealthService.vim.DynamicData {
            msg: string;
         }
         interface ArrayOfVsanUpgradeSystemPreflightCheckIssue {
            VsanUpgradeSystemPreflightCheckIssue?: Array<vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue>;
         }
         interface VsanUpgradeSystemHostsDisconnectedIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanUpgradeSystemMissingHostsInClusterIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanUpgradeSystemRogueHostsInClusterIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanUpgradeSystemWrongEsxVersionIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanUpgradeSystemAutoClaimEnabledOnHostsIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanUpgradeSystemAPIBrokenIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            uuids: Array<string>;
         }
         interface VsanUpgradeSystemNotEnoughFreeCapacityIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            reducedRedundancyUpgradePossible: boolean;
         }
         interface VsanUpgradeSystemNetworkPartitionInfo extends vsanhealthService.vim.DynamicData {
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ArrayOfVsanUpgradeSystemNetworkPartitionInfo {
            VsanUpgradeSystemNetworkPartitionInfo?: Array<vsanhealthService.vim.VsanUpgradeSystemNetworkPartitionInfo>;
         }
         interface VsanUpgradeSystemNetworkPartitionIssue extends vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue {
            partitions: Array<vsanhealthService.vim.VsanUpgradeSystemNetworkPartitionInfo>;
         }
         interface VsanUpgradeSystemPreflightCheckResult extends vsanhealthService.vim.DynamicData {
            issues?: Array<vsanhealthService.vim.VsanUpgradeSystemPreflightCheckIssue>;
            diskMappingToRestore?: vsanhealthService.vim.VsanHostDiskMapping;
         }
         interface VsanUpgradeSystemUpgradeHistoryItem extends vsanhealthService.vim.DynamicData {
            timestamp: Date;
            host?: vsanhealthService.vim.ManagedObjectReference;
            message: string;
            task?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfVsanUpgradeSystemUpgradeHistoryItem {
            VsanUpgradeSystemUpgradeHistoryItem?: Array<vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryItem>;
         }
         enum VsanUpgradeSystemUpgradeHistoryDiskGroupOpType {
            "add",
            "remove",
         }
         interface VsanUpgradeSystemUpgradeHistoryDiskGroupOp extends vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryItem {
            operation: string;
            diskMapping: vsanhealthService.vim.VsanHostDiskMapping;
         }
         interface VsanUpgradeSystemUpgradeHistoryPreflightFail extends vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryItem {
            preflightResult: vsanhealthService.vim.VsanUpgradeSystemPreflightCheckResult;
         }
         interface VsanUpgradeSystemUpgradeStatus extends vsanhealthService.vim.DynamicData {
            inProgress: boolean;
            history?: Array<vsanhealthService.vim.VsanUpgradeSystemUpgradeHistoryItem>;
            aborted?: boolean;
            completed?: boolean;
            progress?: number;
         }
         enum ActionParameter {
            "targetName",
            "alarmName",
            "oldStatus",
            "newStatus",
            "triggeringSummary",
            "declaringSummary",
            "eventDescription",
            "target",
            "alarm",
         }
         interface Action extends vsanhealthService.vim.DynamicData {
         }
         interface MethodActionArgument extends vsanhealthService.vim.DynamicData {
            value?: any;
         }
         interface ArrayOfMethodActionArgument {
            MethodActionArgument?: Array<vsanhealthService.vim.MethodActionArgument>;
         }
         interface MethodAction extends vsanhealthService.vim.Action {
            name: string;
            argument?: Array<vsanhealthService.vim.MethodActionArgument>;
         }
         interface SendEmailAction extends vsanhealthService.vim.Action {
            toList: string;
            ccList: string;
            subject: string;
            body: string;
         }
         interface SendSNMPAction extends vsanhealthService.vim.Action {
         }
         interface RunScriptAction extends vsanhealthService.vim.Action {
            script: string;
         }
         interface CreateTaskAction extends vsanhealthService.vim.Action {
            taskTypeId: string;
            cancelable: boolean;
         }
         interface AlarmAction extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfAlarmAction {
            AlarmAction?: Array<vsanhealthService.vim.AlarmAction>;
         }
         interface AlarmTriggeringActionTransitionSpec extends vsanhealthService.vim.DynamicData {
            startState: vsanhealthService.vim.ManagedEntityStatus;
            finalState: vsanhealthService.vim.ManagedEntityStatus;
            repeats: boolean;
         }
         interface ArrayOfAlarmTriggeringActionTransitionSpec {
            AlarmTriggeringActionTransitionSpec?: Array<vsanhealthService.vim.AlarmTriggeringActionTransitionSpec>;
         }
         interface AlarmTriggeringAction extends vsanhealthService.vim.AlarmAction {
            action: vsanhealthService.vim.Action;
            transitionSpecs?: Array<vsanhealthService.vim.AlarmTriggeringActionTransitionSpec>;
            green2yellow: boolean;
            yellow2red: boolean;
            red2yellow: boolean;
            yellow2green: boolean;
         }
         interface GroupAlarmAction extends vsanhealthService.vim.AlarmAction {
            action: Array<vsanhealthService.vim.AlarmAction>;
         }
         interface AlarmDescription extends vsanhealthService.vim.DynamicData {
            expr: Array<vsanhealthService.vim.TypeDescription>;
            stateOperator: Array<vsanhealthService.vim.ElementDescription>;
            metricOperator: Array<vsanhealthService.vim.ElementDescription>;
            hostSystemConnectionState: Array<vsanhealthService.vim.ElementDescription>;
            virtualMachinePowerState: Array<vsanhealthService.vim.ElementDescription>;
            datastoreConnectionState?: Array<vsanhealthService.vim.ElementDescription>;
            hostSystemPowerState?: Array<vsanhealthService.vim.ElementDescription>;
            virtualMachineGuestHeartbeatStatus?: Array<vsanhealthService.vim.ElementDescription>;
            entityStatus: Array<vsanhealthService.vim.ElementDescription>;
            action: Array<vsanhealthService.vim.TypeDescription>;
         }
         interface AlarmExpression extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfAlarmExpression {
            AlarmExpression?: Array<vsanhealthService.vim.AlarmExpression>;
         }
         interface AndAlarmExpression extends vsanhealthService.vim.AlarmExpression {
            expression: Array<vsanhealthService.vim.AlarmExpression>;
         }
         interface OrAlarmExpression extends vsanhealthService.vim.AlarmExpression {
            expression: Array<vsanhealthService.vim.AlarmExpression>;
         }
         enum StateAlarmOperator {
            "isEqual",
            "isUnequal",
         }
         interface StateAlarmExpression extends vsanhealthService.vim.AlarmExpression {
            operator: vsanhealthService.vim.StateAlarmOperator;
            type: string;
            statePath: string;
            yellow?: string;
            red?: string;
         }
         enum EventAlarmExpressionComparisonOperator {
            "equals",
            "notEqualTo",
            "startsWith",
            "doesNotStartWith",
            "endsWith",
            "doesNotEndWith",
         }
         interface EventAlarmExpressionComparison extends vsanhealthService.vim.DynamicData {
            attributeName: string;
            operator: string;
            value: string;
         }
         interface ArrayOfEventAlarmExpressionComparison {
            EventAlarmExpressionComparison?: Array<vsanhealthService.vim.EventAlarmExpressionComparison>;
         }
         interface EventAlarmExpression extends vsanhealthService.vim.AlarmExpression {
            comparisons?: Array<vsanhealthService.vim.EventAlarmExpressionComparison>;
            eventType: string;
            eventTypeId?: string;
            objectType?: string;
            status?: vsanhealthService.vim.ManagedEntityStatus;
         }
         enum MetricAlarmOperator {
            "isAbove",
            "isBelow",
         }
         interface MetricAlarmExpression extends vsanhealthService.vim.AlarmExpression {
            operator: vsanhealthService.vim.MetricAlarmOperator;
            type: string;
            metric: vsanhealthService.vim.PerfMetricId;
            yellow?: number;
            yellowInterval?: number;
            red?: number;
            redInterval?: number;
         }
         interface AlarmInfo extends vsanhealthService.vim.AlarmSpec {
            key: string;
            alarm: vsanhealthService.vim.ManagedObjectReference;
            entity: vsanhealthService.vim.ManagedObjectReference;
            lastModifiedTime: Date;
            lastModifiedUser: string;
            creationEventId: number;
         }
         interface AlarmSetting extends vsanhealthService.vim.DynamicData {
            toleranceRange: number;
            reportingFrequency: number;
         }
         interface AlarmSpec extends vsanhealthService.vim.DynamicData {
            name: string;
            systemName?: string;
            description: string;
            enabled: boolean;
            expression: vsanhealthService.vim.AlarmExpression;
            action?: vsanhealthService.vim.AlarmAction;
            actionFrequency?: number;
            setting?: vsanhealthService.vim.AlarmSetting;
         }
         interface AlarmState extends vsanhealthService.vim.DynamicData {
            key: string;
            entity: vsanhealthService.vim.ManagedObjectReference;
            alarm: vsanhealthService.vim.ManagedObjectReference;
            overallStatus: vsanhealthService.vim.ManagedEntityStatus;
            time: Date;
            acknowledged?: boolean;
            acknowledgedByUser?: string;
            acknowledgedTime?: Date;
            eventKey?: number;
         }
         interface ArrayOfAlarmState {
            AlarmState?: Array<vsanhealthService.vim.AlarmState>;
         }
         enum ActionType {
            "MigrationV1",
            "VmPowerV1",
            "HostPowerV1",
            "HostMaintenanceV1",
            "StorageMigrationV1",
            "StoragePlacementV1",
            "PlacementV1",
            "HostInfraUpdateHaV1",
         }
         interface ClusterAction extends vsanhealthService.vim.DynamicData {
            type: string;
            target?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfClusterAction {
            ClusterAction?: Array<vsanhealthService.vim.ClusterAction>;
         }
         interface ClusterActionHistory extends vsanhealthService.vim.DynamicData {
            action: vsanhealthService.vim.ClusterAction;
            time: Date;
         }
         interface ArrayOfClusterActionHistory {
            ClusterActionHistory?: Array<vsanhealthService.vim.ClusterActionHistory>;
         }
         interface ClusterAffinityRuleSpec extends vsanhealthService.vim.ClusterRuleInfo {
            vm: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ClusterAntiAffinityRuleSpec extends vsanhealthService.vim.ClusterRuleInfo {
            vm: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ClusterAttemptedVmInfo extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            task?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfClusterAttemptedVmInfo {
            ClusterAttemptedVmInfo?: Array<vsanhealthService.vim.ClusterAttemptedVmInfo>;
         }
         interface ClusterConfigInfo extends vsanhealthService.vim.DynamicData {
            dasConfig: vsanhealthService.vim.ClusterDasConfigInfo;
            dasVmConfig?: Array<vsanhealthService.vim.ClusterDasVmConfigInfo>;
            drsConfig: vsanhealthService.vim.ClusterDrsConfigInfo;
            drsVmConfig?: Array<vsanhealthService.vim.ClusterDrsVmConfigInfo>;
            rule?: Array<vsanhealthService.vim.ClusterRuleInfo>;
         }
         enum DrsBehavior {
            "manual",
            "partiallyAutomated",
            "fullyAutomated",
         }
         interface ClusterDrsConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            enableVmBehaviorOverrides?: boolean;
            defaultVmBehavior?: vsanhealthService.vim.DrsBehavior;
            vmotionRate?: number;
            option?: Array<vsanhealthService.vim.OptionValue>;
         }
         interface ClusterDrsVmConfigInfo extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            enabled?: boolean;
            behavior?: vsanhealthService.vim.DrsBehavior;
         }
         interface ArrayOfClusterDrsVmConfigInfo {
            ClusterDrsVmConfigInfo?: Array<vsanhealthService.vim.ClusterDrsVmConfigInfo>;
         }
         interface ClusterConfigInfoEx extends vsanhealthService.vim.ComputeResourceConfigInfo {
            dasConfig: vsanhealthService.vim.ClusterDasConfigInfo;
            dasVmConfig?: Array<vsanhealthService.vim.ClusterDasVmConfigInfo>;
            drsConfig: vsanhealthService.vim.ClusterDrsConfigInfo;
            drsVmConfig?: Array<vsanhealthService.vim.ClusterDrsVmConfigInfo>;
            rule?: Array<vsanhealthService.vim.ClusterRuleInfo>;
            orchestration?: vsanhealthService.vim.ClusterOrchestrationInfo;
            vmOrchestration?: Array<vsanhealthService.vim.ClusterVmOrchestrationInfo>;
            dpmConfigInfo?: vsanhealthService.vim.ClusterDpmConfigInfo;
            dpmHostConfig?: Array<vsanhealthService.vim.ClusterDpmHostConfigInfo>;
            vsanConfigInfo?: vsanhealthService.vim.VsanClusterConfigInfo;
            vsanHostConfig?: Array<vsanhealthService.vim.VsanHostConfigInfo>;
            group?: Array<vsanhealthService.vim.ClusterGroupInfo>;
            infraUpdateHaConfig?: vsanhealthService.vim.ClusterInfraUpdateHaConfigInfo;
            proactiveDrsConfig?: vsanhealthService.vim.ClusterProactiveDrsConfigInfo;
         }
         enum DpmBehavior {
            "manual",
            "automated",
         }
         interface ClusterDpmConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            defaultDpmBehavior?: vsanhealthService.vim.DpmBehavior;
            hostPowerActionRate?: number;
            option?: Array<vsanhealthService.vim.OptionValue>;
         }
         interface ClusterDpmHostConfigInfo extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            enabled?: boolean;
            behavior?: vsanhealthService.vim.DpmBehavior;
         }
         interface ArrayOfClusterDpmHostConfigInfo {
            ClusterDpmHostConfigInfo?: Array<vsanhealthService.vim.ClusterDpmHostConfigInfo>;
         }
         enum ClusterInfraUpdateHaConfigInfoBehaviorType {
            "Manual",
            "Automated",
         }
         enum ClusterInfraUpdateHaConfigInfoRemediationType {
            "QuarantineMode",
            "MaintenanceMode",
         }
         interface ClusterInfraUpdateHaConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            behavior?: string;
            moderateRemediation?: string;
            severeRemediation?: string;
            providers?: Array<string>;
         }
         interface ClusterProactiveDrsConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
         }
         interface ClusterConfigSpec extends vsanhealthService.vim.DynamicData {
            dasConfig?: vsanhealthService.vim.ClusterDasConfigInfo;
            dasVmConfigSpec?: Array<vsanhealthService.vim.ClusterDasVmConfigSpec>;
            drsConfig?: vsanhealthService.vim.ClusterDrsConfigInfo;
            drsVmConfigSpec?: Array<vsanhealthService.vim.ClusterDrsVmConfigSpec>;
            rulesSpec?: Array<vsanhealthService.vim.ClusterRuleSpec>;
         }
         interface ClusterDasVmConfigSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.ClusterDasVmConfigInfo;
         }
         interface ArrayOfClusterDasVmConfigSpec {
            ClusterDasVmConfigSpec?: Array<vsanhealthService.vim.ClusterDasVmConfigSpec>;
         }
         interface ClusterDrsVmConfigSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.ClusterDrsVmConfigInfo;
         }
         interface ArrayOfClusterDrsVmConfigSpec {
            ClusterDrsVmConfigSpec?: Array<vsanhealthService.vim.ClusterDrsVmConfigSpec>;
         }
         interface ClusterConfigSpecEx extends vsanhealthService.vim.ComputeResourceConfigSpec {
            dasConfig?: vsanhealthService.vim.ClusterDasConfigInfo;
            dasVmConfigSpec?: Array<vsanhealthService.vim.ClusterDasVmConfigSpec>;
            drsConfig?: vsanhealthService.vim.ClusterDrsConfigInfo;
            drsVmConfigSpec?: Array<vsanhealthService.vim.ClusterDrsVmConfigSpec>;
            rulesSpec?: Array<vsanhealthService.vim.ClusterRuleSpec>;
            orchestration?: vsanhealthService.vim.ClusterOrchestrationInfo;
            vmOrchestrationSpec?: Array<vsanhealthService.vim.ClusterVmOrchestrationSpec>;
            dpmConfig?: vsanhealthService.vim.ClusterDpmConfigInfo;
            dpmHostConfigSpec?: Array<vsanhealthService.vim.ClusterDpmHostConfigSpec>;
            vsanConfig?: vsanhealthService.vim.VsanClusterConfigInfo;
            vsanHostConfigSpec?: Array<vsanhealthService.vim.VsanHostConfigInfo>;
            groupSpec?: Array<vsanhealthService.vim.ClusterGroupSpec>;
            infraUpdateHaConfig?: vsanhealthService.vim.ClusterInfraUpdateHaConfigInfo;
            proactiveDrsConfig?: vsanhealthService.vim.ClusterProactiveDrsConfigInfo;
         }
         interface ClusterDpmHostConfigSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.ClusterDpmHostConfigInfo;
         }
         interface ArrayOfClusterDpmHostConfigSpec {
            ClusterDpmHostConfigSpec?: Array<vsanhealthService.vim.ClusterDpmHostConfigSpec>;
         }
         interface ClusterGroupSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.ClusterGroupInfo;
         }
         interface ArrayOfClusterGroupSpec {
            ClusterGroupSpec?: Array<vsanhealthService.vim.ClusterGroupSpec>;
         }
         interface ClusterVmOrchestrationSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.ClusterVmOrchestrationInfo;
         }
         interface ArrayOfClusterVmOrchestrationSpec {
            ClusterVmOrchestrationSpec?: Array<vsanhealthService.vim.ClusterVmOrchestrationSpec>;
         }
         interface ClusterDasAamHostInfo extends vsanhealthService.vim.ClusterDasHostInfo {
            hostDasState?: Array<vsanhealthService.vim.ClusterDasAamNodeState>;
            primaryHosts?: Array<string>;
         }
         enum ClusterDasAamNodeStateDasState {
            "uninitialized",
            "initialized",
            "configuring",
            "unconfiguring",
            "running",
            "error",
            "agentShutdown",
            "nodeFailed",
         }
         interface ClusterDasAamNodeState extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            name: string;
            configState: string;
            runtimeState: string;
         }
         interface ArrayOfClusterDasAamNodeState {
            ClusterDasAamNodeState?: Array<vsanhealthService.vim.ClusterDasAamNodeState>;
         }
         interface ClusterDasAdmissionControlInfo extends vsanhealthService.vim.DynamicData {
         }
         interface ClusterDasAdmissionControlPolicy extends vsanhealthService.vim.DynamicData {
            resourceReductionToToleratePercent?: number;
         }
         interface ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo extends vsanhealthService.vim.DynamicData {
            storageAPDSupported: boolean;
            storagePDLSupported: boolean;
         }
         interface DasHeartbeatDatastoreInfo extends vsanhealthService.vim.DynamicData {
            datastore: vsanhealthService.vim.ManagedObjectReference;
            hosts: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ArrayOfDasHeartbeatDatastoreInfo {
            DasHeartbeatDatastoreInfo?: Array<vsanhealthService.vim.DasHeartbeatDatastoreInfo>;
         }
         interface ClusterDasAdvancedRuntimeInfo extends vsanhealthService.vim.DynamicData {
            dasHostInfo?: vsanhealthService.vim.ClusterDasHostInfo;
            vmcpSupported?: vsanhealthService.vim.ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo;
            heartbeatDatastoreInfo?: Array<vsanhealthService.vim.DasHeartbeatDatastoreInfo>;
         }
         enum ClusterDasConfigInfoServiceState {
            "disabled",
            "enabled",
         }
         enum ClusterDasConfigInfoVmMonitoringState {
            "vmMonitoringDisabled",
            "vmMonitoringOnly",
            "vmAndAppMonitoring",
         }
         enum ClusterDasConfigInfoHBDatastoreCandidate {
            "userSelectedDs",
            "allFeasibleDs",
            "allFeasibleDsWithUserPreference",
         }
         interface ClusterDasConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            vmMonitoring?: string;
            hostMonitoring?: string;
            vmComponentProtecting?: string;
            failoverLevel?: number;
            admissionControlPolicy?: vsanhealthService.vim.ClusterDasAdmissionControlPolicy;
            admissionControlEnabled?: boolean;
            defaultVmSettings?: vsanhealthService.vim.ClusterDasVmSettings;
            option?: Array<vsanhealthService.vim.OptionValue>;
            heartbeatDatastore?: Array<vsanhealthService.vim.ManagedObjectReference>;
            hBDatastoreCandidatePolicy?: string;
         }
         interface ClusterDasData extends vsanhealthService.vim.DynamicData {
         }
         interface ClusterDasDataSummary extends vsanhealthService.vim.ClusterDasData {
            hostListVersion: number;
            clusterConfigVersion: number;
            compatListVersion: number;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo extends vsanhealthService.vim.DynamicData {
            numVcpus: number;
            cpuMHz: number;
            memoryMB: number;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            slots: number;
         }
         interface ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots {
            ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots?: Array<vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots>;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            slots: number;
         }
         interface ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots {
            ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots?: Array<vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots>;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfo extends vsanhealthService.vim.ClusterDasAdvancedRuntimeInfo {
            slotInfo: vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo;
            totalSlots: number;
            usedSlots: number;
            unreservedSlots: number;
            totalVms: number;
            totalHosts: number;
            totalGoodHosts: number;
            hostSlots?: Array<vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots>;
            vmsRequiringMultipleSlots?: Array<vsanhealthService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots>;
         }
         enum ClusterDasFdmAvailabilityState {
            "uninitialized",
            "election",
            "master",
            "connectedToMaster",
            "networkPartitionedFromMaster",
            "networkIsolated",
            "hostDown",
            "initializationError",
            "uninitializationError",
            "fdmUnreachable",
         }
         interface ClusterDasFdmHostState extends vsanhealthService.vim.DynamicData {
            state: string;
            stateReporter?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ClusterDasHostInfo extends vsanhealthService.vim.DynamicData {
         }
         interface ClusterDasHostRecommendation extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            drsRating?: number;
         }
         enum DasVmPriority {
            "disabled",
            "low",
            "medium",
            "high",
         }
         interface ClusterDasVmConfigInfo extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            restartPriority?: vsanhealthService.vim.DasVmPriority;
            powerOffOnIsolation?: boolean;
            dasSettings?: vsanhealthService.vim.ClusterDasVmSettings;
         }
         interface ArrayOfClusterDasVmConfigInfo {
            ClusterDasVmConfigInfo?: Array<vsanhealthService.vim.ClusterDasVmConfigInfo>;
         }
         enum ClusterDasVmSettingsRestartPriority {
            "disabled",
            "lowest",
            "low",
            "medium",
            "high",
            "highest",
            "clusterRestartPriority",
         }
         enum ClusterDasVmSettingsIsolationResponse {
            "none",
            "powerOff",
            "shutdown",
            "clusterIsolationResponse",
         }
         interface ClusterDasVmSettings extends vsanhealthService.vim.DynamicData {
            restartPriority?: string;
            restartPriorityTimeout?: number;
            isolationResponse?: string;
            vmToolsMonitoringSettings?: vsanhealthService.vim.ClusterVmToolsMonitoringSettings;
            vmComponentProtectionSettings?: vsanhealthService.vim.ClusterVmComponentProtectionSettings;
         }
         interface ClusterDependencyRuleInfo extends vsanhealthService.vim.ClusterRuleInfo {
            vmGroup: string;
            dependsOnVmGroup: string;
         }
         interface ClusterDrsFaultsFaultsByVm extends vsanhealthService.vim.DynamicData {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            fault: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfClusterDrsFaultsFaultsByVm {
            ClusterDrsFaultsFaultsByVm?: Array<vsanhealthService.vim.ClusterDrsFaultsFaultsByVm>;
         }
         interface ClusterDrsFaultsFaultsByVirtualDisk extends vsanhealthService.vim.ClusterDrsFaultsFaultsByVm {
            disk?: vsanhealthService.vim.VirtualDiskId;
         }
         interface ClusterDrsFaults extends vsanhealthService.vim.DynamicData {
            reason: string;
            faultsByVm: Array<vsanhealthService.vim.ClusterDrsFaultsFaultsByVm>;
         }
         interface ArrayOfClusterDrsFaults {
            ClusterDrsFaults?: Array<vsanhealthService.vim.ClusterDrsFaults>;
         }
         interface ClusterDrsMigration extends vsanhealthService.vim.DynamicData {
            key: string;
            time: Date;
            vm: vsanhealthService.vim.ManagedObjectReference;
            cpuLoad?: number;
            memoryLoad?: number;
            source: vsanhealthService.vim.ManagedObjectReference;
            sourceCpuLoad?: number;
            sourceMemoryLoad?: number;
            destination: vsanhealthService.vim.ManagedObjectReference;
            destinationCpuLoad?: number;
            destinationMemoryLoad?: number;
         }
         interface ArrayOfClusterDrsMigration {
            ClusterDrsMigration?: Array<vsanhealthService.vim.ClusterDrsMigration>;
         }
         enum DrsRecommendationReasonCode {
            "fairnessCpuAvg",
            "fairnessMemAvg",
            "jointAffin",
            "antiAffin",
            "hostMaint",
         }
         interface ClusterDrsRecommendation extends vsanhealthService.vim.DynamicData {
            key: string;
            rating: number;
            reason: string;
            reasonText: string;
            migrationList: Array<vsanhealthService.vim.ClusterDrsMigration>;
         }
         interface ArrayOfClusterDrsRecommendation {
            ClusterDrsRecommendation?: Array<vsanhealthService.vim.ClusterDrsRecommendation>;
         }
         interface ClusterEVCManagerEVCState extends vsanhealthService.vim.DynamicData {
            supportedEVCMode: Array<vsanhealthService.vim.EVCMode>;
            currentEVCModeKey?: string;
            guaranteedCPUFeatures?: Array<vsanhealthService.vim.HostCpuIdInfo>;
            featureCapability?: Array<vsanhealthService.vim.HostFeatureCapability>;
            featureMask?: Array<vsanhealthService.vim.HostFeatureMask>;
            featureRequirement?: Array<vsanhealthService.vim.VirtualMachineFeatureRequirement>;
         }
         interface ClusterEVCManagerCheckResult extends vsanhealthService.vim.DynamicData {
            evcModeKey: string;
            error: vsanhealthService.vim.LocalizedMethodFault;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ArrayOfClusterEVCManagerCheckResult {
            ClusterEVCManagerCheckResult?: Array<vsanhealthService.vim.ClusterEVCManagerCheckResult>;
         }
         interface ClusterEnterMaintenanceResult extends vsanhealthService.vim.DynamicData {
            recommendations?: Array<vsanhealthService.vim.ClusterRecommendation>;
            fault?: vsanhealthService.vim.ClusterDrsFaults;
         }
         interface ClusterFailoverHostAdmissionControlInfoHostStatus extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            status: vsanhealthService.vim.ManagedEntityStatus;
         }
         interface ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus {
            ClusterFailoverHostAdmissionControlInfoHostStatus?: Array<vsanhealthService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus>;
         }
         interface ClusterFailoverHostAdmissionControlInfo extends vsanhealthService.vim.ClusterDasAdmissionControlInfo {
            hostStatus?: Array<vsanhealthService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus>;
         }
         interface ClusterFailoverHostAdmissionControlPolicy extends vsanhealthService.vim.ClusterDasAdmissionControlPolicy {
            failoverHosts?: Array<vsanhealthService.vim.ManagedObjectReference>;
            failoverLevel?: number;
         }
         interface ClusterFailoverLevelAdmissionControlInfo extends vsanhealthService.vim.ClusterDasAdmissionControlInfo {
            currentFailoverLevel: number;
         }
         interface ClusterFailoverLevelAdmissionControlPolicy extends vsanhealthService.vim.ClusterDasAdmissionControlPolicy {
            failoverLevel: number;
            slotPolicy?: vsanhealthService.vim.ClusterSlotPolicy;
         }
         interface ClusterFailoverResourcesAdmissionControlInfo extends vsanhealthService.vim.ClusterDasAdmissionControlInfo {
            currentCpuFailoverResourcesPercent: number;
            currentMemoryFailoverResourcesPercent: number;
         }
         interface ClusterFailoverResourcesAdmissionControlPolicy extends vsanhealthService.vim.ClusterDasAdmissionControlPolicy {
            cpuFailoverResourcesPercent: number;
            memoryFailoverResourcesPercent: number;
            failoverLevel?: number;
            autoComputePercentages?: boolean;
         }
         interface ClusterGroupInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            userCreated?: boolean;
            uniqueID?: string;
         }
         interface ArrayOfClusterGroupInfo {
            ClusterGroupInfo?: Array<vsanhealthService.vim.ClusterGroupInfo>;
         }
         interface ClusterHostGroup extends vsanhealthService.vim.ClusterGroupInfo {
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         enum ClusterHostInfraUpdateHaModeActionOperationType {
            "enterQuarantine",
            "exitQuarantine",
            "enterMaintenance",
         }
         interface ClusterHostInfraUpdateHaModeAction extends vsanhealthService.vim.ClusterAction {
            operationType: string;
         }
         enum HostPowerOperationType {
            "powerOn",
            "powerOff",
         }
         interface ClusterHostPowerAction extends vsanhealthService.vim.ClusterAction {
            operationType: vsanhealthService.vim.HostPowerOperationType;
            powerConsumptionWatt?: number;
            cpuCapacityMHz?: number;
            memCapacityMB?: number;
         }
         interface ClusterHostRecommendation extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            rating: number;
         }
         interface ArrayOfClusterHostRecommendation {
            ClusterHostRecommendation?: Array<vsanhealthService.vim.ClusterHostRecommendation>;
         }
         interface ClusterInitialPlacementAction extends vsanhealthService.vim.ClusterAction {
            targetHost: vsanhealthService.vim.ManagedObjectReference;
            pool?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ClusterMigrationAction extends vsanhealthService.vim.ClusterAction {
            drsMigration?: vsanhealthService.vim.ClusterDrsMigration;
         }
         interface ClusterNotAttemptedVmInfo extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfClusterNotAttemptedVmInfo {
            ClusterNotAttemptedVmInfo?: Array<vsanhealthService.vim.ClusterNotAttemptedVmInfo>;
         }
         interface ClusterOrchestrationInfo extends vsanhealthService.vim.DynamicData {
            defaultVmReadiness?: vsanhealthService.vim.ClusterVmReadiness;
         }
         interface PlacementAction extends vsanhealthService.vim.ClusterAction {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            targetHost?: vsanhealthService.vim.ManagedObjectReference;
            relocateSpec?: vsanhealthService.vim.VirtualMachineRelocateSpec;
         }
         interface PlacementResult extends vsanhealthService.vim.DynamicData {
            recommendations?: Array<vsanhealthService.vim.ClusterRecommendation>;
            drsFault?: vsanhealthService.vim.ClusterDrsFaults;
         }
         enum PlacementSpecPlacementType {
            "create",
            "reconfigure",
            "relocate",
            "clone",
         }
         interface PlacementSpec extends vsanhealthService.vim.DynamicData {
            priority?: vsanhealthService.vim.VirtualMachineMovePriority;
            vm?: vsanhealthService.vim.ManagedObjectReference;
            configSpec?: vsanhealthService.vim.VirtualMachineConfigSpec;
            relocateSpec?: vsanhealthService.vim.VirtualMachineRelocateSpec;
            hosts?: Array<vsanhealthService.vim.ManagedObjectReference>;
            datastores?: Array<vsanhealthService.vim.ManagedObjectReference>;
            storagePods?: Array<vsanhealthService.vim.ManagedObjectReference>;
            disallowPrerequisiteMoves?: boolean;
            rules?: Array<vsanhealthService.vim.ClusterRuleInfo>;
            key?: string;
            placementType?: string;
            cloneSpec?: vsanhealthService.vim.VirtualMachineCloneSpec;
            cloneName?: string;
         }
         interface ArrayOfPlacementSpec {
            PlacementSpec?: Array<vsanhealthService.vim.PlacementSpec>;
         }
         enum ClusterPowerOnVmOption {
            "OverrideAutomationLevel",
            "ReserveResources",
         }
         interface ClusterPowerOnVmResult extends vsanhealthService.vim.DynamicData {
            attempted?: Array<vsanhealthService.vim.ClusterAttemptedVmInfo>;
            notAttempted?: Array<vsanhealthService.vim.ClusterNotAttemptedVmInfo>;
            recommendations?: Array<vsanhealthService.vim.ClusterRecommendation>;
         }
         enum RecommendationType {
            "V1",
         }
         enum RecommendationReasonCode {
            "fairnessCpuAvg",
            "fairnessMemAvg",
            "jointAffin",
            "antiAffin",
            "hostMaint",
            "enterStandby",
            "reservationCpu",
            "reservationMem",
            "powerOnVm",
            "powerSaving",
            "increaseCapacity",
            "checkResource",
            "unreservedCapacity",
            "vmHostHardAffinity",
            "vmHostSoftAffinity",
            "balanceDatastoreSpaceUsage",
            "balanceDatastoreIOLoad",
            "balanceDatastoreIOPSReservation",
            "datastoreMaint",
            "virtualDiskJointAffin",
            "virtualDiskAntiAffin",
            "datastoreSpaceOutage",
            "storagePlacement",
            "iolbDisabledInternal",
            "xvmotionPlacement",
            "networkBandwidthReservation",
            "hostInDegradation",
            "hostExitDegradation",
            "maxVmsConstraint",
            "ftConstraints",
         }
         interface ClusterRecommendation extends vsanhealthService.vim.DynamicData {
            key: string;
            type: string;
            time: Date;
            rating: number;
            reason: string;
            reasonText: string;
            warningText?: string;
            warningDetails?: vsanhealthService.vim.LocalizableMessage;
            prerequisite?: Array<string>;
            action?: Array<vsanhealthService.vim.ClusterAction>;
            target?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfClusterRecommendation {
            ClusterRecommendation?: Array<vsanhealthService.vim.ClusterRecommendation>;
         }
         interface ClusterResourceUsageSummary extends vsanhealthService.vim.DynamicData {
            cpuUsedMHz: number;
            cpuCapacityMHz: number;
            memUsedMB: number;
            memCapacityMB: number;
            storageUsedMB: number;
            storageCapacityMB: number;
         }
         interface ClusterRuleInfo extends vsanhealthService.vim.DynamicData {
            key?: number;
            status?: vsanhealthService.vim.ManagedEntityStatus;
            enabled?: boolean;
            name?: string;
            mandatory?: boolean;
            userCreated?: boolean;
            inCompliance?: boolean;
            ruleUuid?: string;
         }
         interface ArrayOfClusterRuleInfo {
            ClusterRuleInfo?: Array<vsanhealthService.vim.ClusterRuleInfo>;
         }
         interface ClusterRuleSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.ClusterRuleInfo;
         }
         interface ArrayOfClusterRuleSpec {
            ClusterRuleSpec?: Array<vsanhealthService.vim.ClusterRuleSpec>;
         }
         interface ClusterSlotPolicy extends vsanhealthService.vim.DynamicData {
         }
         interface ClusterFixedSizeSlotPolicy extends vsanhealthService.vim.ClusterSlotPolicy {
            cpu: number;
            memory: number;
         }
         interface ClusterUsageSummary extends vsanhealthService.vim.DynamicData {
            totalCpuCapacityMhz: number;
            totalMemCapacityMB: number;
            cpuReservationMhz: number;
            memReservationMB: number;
            poweredOffCpuReservationMhz?: number;
            poweredOffMemReservationMB?: number;
            cpuDemandMhz: number;
            memDemandMB: number;
            statsGenNumber: number;
            cpuEntitledMhz: number;
            memEntitledMB: number;
            poweredOffVmCount: number;
            totalVmCount: number;
         }
         enum ClusterVmComponentProtectionSettingsStorageVmReaction {
            "disabled",
            "warning",
            "restartConservative",
            "restartAggressive",
            "clusterDefault",
         }
         enum ClusterVmComponentProtectionSettingsVmReactionOnAPDCleared {
            "none",
            "reset",
            "useClusterDefault",
         }
         interface ClusterVmComponentProtectionSettings extends vsanhealthService.vim.DynamicData {
            vmStorageProtectionForAPD?: string;
            enableAPDTimeoutForHosts?: boolean;
            vmTerminateDelayForAPDSec?: number;
            vmReactionOnAPDCleared?: string;
            vmStorageProtectionForPDL?: string;
         }
         interface ClusterVmGroup extends vsanhealthService.vim.ClusterGroupInfo {
            vm?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ClusterVmHostRuleInfo extends vsanhealthService.vim.ClusterRuleInfo {
            vmGroupName?: string;
            affineHostGroupName?: string;
            antiAffineHostGroupName?: string;
         }
         interface ClusterVmOrchestrationInfo extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmReadiness: vsanhealthService.vim.ClusterVmReadiness;
         }
         interface ArrayOfClusterVmOrchestrationInfo {
            ClusterVmOrchestrationInfo?: Array<vsanhealthService.vim.ClusterVmOrchestrationInfo>;
         }
         enum ClusterVmReadinessReadyCondition {
            "none",
            "poweredOn",
            "guestHbStatusGreen",
            "appHbStatusGreen",
            "useClusterDefault",
         }
         interface ClusterVmReadiness extends vsanhealthService.vim.DynamicData {
            readyCondition?: string;
            postReadyDelay?: number;
         }
         interface ClusterVmToolsMonitoringSettings extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            vmMonitoring?: string;
            clusterSettings?: boolean;
            failureInterval?: number;
            minUpTime?: number;
            maxFailures?: number;
            maxFailureWindow?: number;
         }
         interface DVPortConfigSpec extends vsanhealthService.vim.DynamicData {
            operation: string;
            key?: string;
            name?: string;
            scope?: Array<vsanhealthService.vim.ManagedObjectReference>;
            description?: string;
            setting?: vsanhealthService.vim.DVPortSetting;
            configVersion?: string;
         }
         interface ArrayOfDVPortConfigSpec {
            DVPortConfigSpec?: Array<vsanhealthService.vim.DVPortConfigSpec>;
         }
         interface DVPortConfigInfo extends vsanhealthService.vim.DynamicData {
            name?: string;
            scope?: Array<vsanhealthService.vim.ManagedObjectReference>;
            description?: string;
            setting?: vsanhealthService.vim.DVPortSetting;
            configVersion: string;
         }
         interface DVSTrafficShapingPolicy extends vsanhealthService.vim.InheritablePolicy {
            enabled?: vsanhealthService.vim.BoolPolicy;
            averageBandwidth?: vsanhealthService.vim.LongPolicy;
            peakBandwidth?: vsanhealthService.vim.LongPolicy;
            burstSize?: vsanhealthService.vim.LongPolicy;
         }
         interface DVSHostLocalPortInfo extends vsanhealthService.vim.DynamicData {
            switchUuid: string;
            portKey: string;
            setting: vsanhealthService.vim.DVPortSetting;
            vnic: string;
         }
         interface DVSVendorSpecificConfig extends vsanhealthService.vim.InheritablePolicy {
            keyValue?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface DvsFilterParameter extends vsanhealthService.vim.DynamicData {
            parameters?: Array<string>;
         }
         enum DvsFilterOnFailure {
            "failOpen",
            "failClosed",
         }
         interface DvsFilterConfig extends vsanhealthService.vim.InheritablePolicy {
            key?: string;
            agentName?: string;
            slotNumber?: string;
            parameters?: vsanhealthService.vim.DvsFilterParameter;
            onFailure?: string;
         }
         interface ArrayOfDvsFilterConfig {
            DvsFilterConfig?: Array<vsanhealthService.vim.DvsFilterConfig>;
         }
         interface DvsTrafficFilterConfig extends vsanhealthService.vim.DvsFilterConfig {
            trafficRuleset?: vsanhealthService.vim.DvsTrafficRuleset;
         }
         interface DvsFilterConfigSpec extends vsanhealthService.vim.DvsFilterConfig {
            operation: string;
         }
         interface DvsTrafficFilterConfigSpec extends vsanhealthService.vim.DvsTrafficFilterConfig {
            operation: string;
         }
         interface DvsFilterPolicy extends vsanhealthService.vim.InheritablePolicy {
            filterConfig?: Array<vsanhealthService.vim.DvsFilterConfig>;
         }
         interface DVPortSetting extends vsanhealthService.vim.DynamicData {
            blocked?: vsanhealthService.vim.BoolPolicy;
            vmDirectPathGen2Allowed?: vsanhealthService.vim.BoolPolicy;
            inShapingPolicy?: vsanhealthService.vim.DVSTrafficShapingPolicy;
            outShapingPolicy?: vsanhealthService.vim.DVSTrafficShapingPolicy;
            vendorSpecificConfig?: vsanhealthService.vim.DVSVendorSpecificConfig;
            networkResourcePoolKey?: vsanhealthService.vim.StringPolicy;
            filterPolicy?: vsanhealthService.vim.DvsFilterPolicy;
         }
         enum DVPortStatusVmDirectPathGen2InactiveReasonNetwork {
            "portNptIncompatibleDvs",
            "portNptNoCompatibleNics",
            "portNptNoVirtualFunctionsAvailable",
            "portNptDisabledForPort",
         }
         enum DVPortStatusVmDirectPathGen2InactiveReasonOther {
            "portNptIncompatibleHost",
            "portNptIncompatibleConnectee",
         }
         interface DVPortStatus extends vsanhealthService.vim.DynamicData {
            linkUp: boolean;
            blocked: boolean;
            vlanIds?: Array<vsanhealthService.vim.NumericRange>;
            trunkingMode?: boolean;
            mtu?: number;
            linkPeer?: string;
            macAddress?: string;
            statusDetail?: string;
            vmDirectPathGen2Active?: boolean;
            vmDirectPathGen2InactiveReasonNetwork?: Array<string>;
            vmDirectPathGen2InactiveReasonOther?: Array<string>;
            vmDirectPathGen2InactiveReasonExtended?: string;
         }
         interface DVPortState extends vsanhealthService.vim.DynamicData {
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
            stats: vsanhealthService.vim.DistributedVirtualSwitchPortStatistics;
            vendorSpecificState?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface DistributedVirtualPort extends vsanhealthService.vim.DynamicData {
            key: string;
            config: vsanhealthService.vim.DVPortConfigInfo;
            dvsUuid: string;
            portgroupKey?: string;
            proxyHost?: vsanhealthService.vim.ManagedObjectReference;
            connectee?: vsanhealthService.vim.DistributedVirtualSwitchPortConnectee;
            conflict: boolean;
            conflictPortKey?: string;
            state?: vsanhealthService.vim.DVPortState;
            connectionCookie?: number;
            lastStatusChange: Date;
            hostLocalPort?: boolean;
         }
         interface ArrayOfDistributedVirtualPort {
            DistributedVirtualPort?: Array<vsanhealthService.vim.DistributedVirtualPort>;
         }
         enum DistributedVirtualPortgroupPortgroupType {
            "earlyBinding",
            "lateBinding",
            "ephemeral",
         }
         interface DVPortgroupPolicy extends vsanhealthService.vim.DynamicData {
            blockOverrideAllowed: boolean;
            shapingOverrideAllowed: boolean;
            vendorConfigOverrideAllowed: boolean;
            livePortMovingAllowed: boolean;
            portConfigResetAtDisconnect: boolean;
            networkResourcePoolOverrideAllowed?: boolean;
            trafficFilterOverrideAllowed?: boolean;
         }
         enum DistributedVirtualPortgroupMetaTagName {
            "dvsName",
            "portgroupName",
            "portIndex",
         }
         interface DVPortgroupConfigSpec extends vsanhealthService.vim.DynamicData {
            configVersion?: string;
            name?: string;
            numPorts?: number;
            portNameFormat?: string;
            defaultPortConfig?: vsanhealthService.vim.DVPortSetting;
            description?: string;
            type?: string;
            scope?: Array<vsanhealthService.vim.ManagedObjectReference>;
            policy?: vsanhealthService.vim.DVPortgroupPolicy;
            vendorSpecificConfig?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            autoExpand?: boolean;
            vmVnicNetworkResourcePoolKey?: string;
         }
         interface ArrayOfDVPortgroupConfigSpec {
            DVPortgroupConfigSpec?: Array<vsanhealthService.vim.DVPortgroupConfigSpec>;
         }
         interface DVPortgroupConfigInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            name: string;
            numPorts: number;
            distributedVirtualSwitch?: vsanhealthService.vim.ManagedObjectReference;
            defaultPortConfig?: vsanhealthService.vim.DVPortSetting;
            description?: string;
            type: string;
            policy: vsanhealthService.vim.DVPortgroupPolicy;
            portNameFormat?: string;
            scope?: Array<vsanhealthService.vim.ManagedObjectReference>;
            vendorSpecificConfig?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            configVersion?: string;
            autoExpand?: boolean;
            vmVnicNetworkResourcePoolKey?: string;
            uplink?: boolean;
         }
         interface DistributedVirtualPortgroupInfo extends vsanhealthService.vim.DynamicData {
            switchName: string;
            switchUuid: string;
            portgroupName: string;
            portgroupKey: string;
            portgroupType: string;
            uplinkPortgroup: boolean;
            portgroup: vsanhealthService.vim.ManagedObjectReference;
            networkReservationSupported?: boolean;
         }
         interface ArrayOfDistributedVirtualPortgroupInfo {
            DistributedVirtualPortgroupInfo?: Array<vsanhealthService.vim.DistributedVirtualPortgroupInfo>;
         }
         interface DVPortgroupSelection extends vsanhealthService.vim.SelectionSet {
            dvsUuid: string;
            portgroupKey: Array<string>;
         }
         interface DistributedVirtualSwitchInfo extends vsanhealthService.vim.DynamicData {
            switchName: string;
            switchUuid: string;
            distributedVirtualSwitch: vsanhealthService.vim.ManagedObjectReference;
            networkReservationSupported?: boolean;
         }
         interface ArrayOfDistributedVirtualSwitchInfo {
            DistributedVirtualSwitchInfo?: Array<vsanhealthService.vim.DistributedVirtualSwitchInfo>;
         }
         interface DVSManagerDvsConfigTarget extends vsanhealthService.vim.DynamicData {
            distributedVirtualPortgroup?: Array<vsanhealthService.vim.DistributedVirtualPortgroupInfo>;
            distributedVirtualSwitch?: Array<vsanhealthService.vim.DistributedVirtualSwitchInfo>;
         }
         interface DistributedVirtualSwitchManagerCompatibilityResult extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfDistributedVirtualSwitchManagerCompatibilityResult {
            DistributedVirtualSwitchManagerCompatibilityResult?: Array<vsanhealthService.vim.DistributedVirtualSwitchManagerCompatibilityResult>;
         }
         interface DistributedVirtualSwitchManagerHostContainer extends vsanhealthService.vim.DynamicData {
            container: vsanhealthService.vim.ManagedObjectReference;
            recursive: boolean;
         }
         interface DistributedVirtualSwitchManagerHostDvsFilterSpec extends vsanhealthService.vim.DynamicData {
            inclusive: boolean;
         }
         interface ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec {
            DistributedVirtualSwitchManagerHostDvsFilterSpec?: Array<vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec>;
         }
         interface DistributedVirtualSwitchManagerHostArrayFilter extends vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec {
            host: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface DistributedVirtualSwitchManagerHostContainerFilter extends vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec {
            hostContainer: vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainer;
         }
         interface DistributedVirtualSwitchManagerHostDvsMembershipFilter extends vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec {
            distributedVirtualSwitch: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DistributedVirtualSwitchManagerDvsProductSpec extends vsanhealthService.vim.DynamicData {
            newSwitchProductSpec?: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
            distributedVirtualSwitch?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DistributedVirtualSwitchManagerImportResult extends vsanhealthService.vim.DynamicData {
            distributedVirtualSwitch?: Array<vsanhealthService.vim.ManagedObjectReference>;
            distributedVirtualPortgroup?: Array<vsanhealthService.vim.ManagedObjectReference>;
            importFault?: Array<vsanhealthService.vim.ImportOperationBulkFaultFaultOnImport>;
         }
         interface DVSSelection extends vsanhealthService.vim.SelectionSet {
            dvsUuid: string;
         }
         interface EntityBackupConfig extends vsanhealthService.vim.DynamicData {
            entityType: string;
            configBlob: string;
            key?: string;
            name?: string;
            container?: vsanhealthService.vim.ManagedObjectReference;
            configVersion?: string;
         }
         interface ArrayOfEntityBackupConfig {
            EntityBackupConfig?: Array<vsanhealthService.vim.EntityBackupConfig>;
         }
         enum EntityType {
            "distributedVirtualSwitch",
            "distributedVirtualPortgroup",
         }
         enum EntityImportType {
            "createEntityWithNewIdentifier",
            "createEntityWithOriginalIdentifier",
            "applyToEntitySpecified",
         }
         interface EntityBackup extends vsanhealthService.vim.DynamicData {
         }
         enum DistributedVirtualSwitchHostMemberHostComponentState {
            "up",
            "pending",
            "outOfSync",
            "warning",
            "disconnected",
            "down",
         }
         interface DistributedVirtualSwitchHostMemberConfigSpec extends vsanhealthService.vim.DynamicData {
            operation: string;
            host: vsanhealthService.vim.ManagedObjectReference;
            backing?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberBacking;
            maxProxySwitchPorts?: number;
            vendorSpecificConfig?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface ArrayOfDistributedVirtualSwitchHostMemberConfigSpec {
            DistributedVirtualSwitchHostMemberConfigSpec?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigSpec>;
         }
         interface DistributedVirtualSwitchHostMemberPnicSpec extends vsanhealthService.vim.DynamicData {
            pnicDevice: string;
            uplinkPortKey?: string;
            uplinkPortgroupKey?: string;
            connectionCookie?: number;
         }
         interface ArrayOfDistributedVirtualSwitchHostMemberPnicSpec {
            DistributedVirtualSwitchHostMemberPnicSpec?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostMemberPnicSpec>;
         }
         interface DistributedVirtualSwitchHostMemberBacking extends vsanhealthService.vim.DynamicData {
         }
         interface DistributedVirtualSwitchHostMemberPnicBacking extends vsanhealthService.vim.DistributedVirtualSwitchHostMemberBacking {
            pnicSpec?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostMemberPnicSpec>;
         }
         interface DistributedVirtualSwitchHostMemberRuntimeState extends vsanhealthService.vim.DynamicData {
            currentMaxProxySwitchPorts: number;
         }
         interface DistributedVirtualSwitchHostMemberConfigInfo extends vsanhealthService.vim.DynamicData {
            host?: vsanhealthService.vim.ManagedObjectReference;
            maxProxySwitchPorts: number;
            vendorSpecificConfig?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            backing: vsanhealthService.vim.DistributedVirtualSwitchHostMemberBacking;
         }
         interface HostMemberRuntimeInfo extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            status?: string;
            statusDetail?: string;
            healthCheckResult?: Array<vsanhealthService.vim.HostMemberHealthCheckResult>;
         }
         interface ArrayOfHostMemberRuntimeInfo {
            HostMemberRuntimeInfo?: Array<vsanhealthService.vim.HostMemberRuntimeInfo>;
         }
         interface HostMemberHealthCheckResult extends vsanhealthService.vim.DynamicData {
            summary?: string;
         }
         interface ArrayOfHostMemberHealthCheckResult {
            HostMemberHealthCheckResult?: Array<vsanhealthService.vim.HostMemberHealthCheckResult>;
         }
         interface HostMemberUplinkHealthCheckResult extends vsanhealthService.vim.HostMemberHealthCheckResult {
            uplinkPortKey: string;
         }
         interface DistributedVirtualSwitchHostMember extends vsanhealthService.vim.DynamicData {
            runtimeState?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberRuntimeState;
            config: vsanhealthService.vim.DistributedVirtualSwitchHostMemberConfigInfo;
            productInfo?: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
            uplinkPortKey?: Array<string>;
            status: string;
            statusDetail?: string;
         }
         interface ArrayOfDistributedVirtualSwitchHostMember {
            DistributedVirtualSwitchHostMember?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostMember>;
         }
         interface DistributedVirtualSwitchHostProductSpec extends vsanhealthService.vim.DynamicData {
            productLineId?: string;
            version?: string;
         }
         interface ArrayOfDistributedVirtualSwitchHostProductSpec {
            DistributedVirtualSwitchHostProductSpec?: Array<vsanhealthService.vim.DistributedVirtualSwitchHostProductSpec>;
         }
         interface DistributedVirtualSwitchKeyedOpaqueBlob extends vsanhealthService.vim.DynamicData {
            key: string;
            opaqueData: string;
         }
         interface ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob {
            DistributedVirtualSwitchKeyedOpaqueBlob?: Array<vsanhealthService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface DVSNetworkResourcePoolAllocationInfo extends vsanhealthService.vim.DynamicData {
            limit?: number;
            shares?: vsanhealthService.vim.SharesInfo;
            priorityTag?: number;
         }
         interface DVSNetworkResourcePoolConfigSpec extends vsanhealthService.vim.DynamicData {
            key: string;
            configVersion?: string;
            allocationInfo?: vsanhealthService.vim.DVSNetworkResourcePoolAllocationInfo;
            name?: string;
            description?: string;
         }
         interface ArrayOfDVSNetworkResourcePoolConfigSpec {
            DVSNetworkResourcePoolConfigSpec?: Array<vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec>;
         }
         interface DVSNetworkResourcePool extends vsanhealthService.vim.DynamicData {
            key: string;
            name?: string;
            description?: string;
            configVersion: string;
            allocationInfo: vsanhealthService.vim.DVSNetworkResourcePoolAllocationInfo;
         }
         interface ArrayOfDVSNetworkResourcePool {
            DVSNetworkResourcePool?: Array<vsanhealthService.vim.DVSNetworkResourcePool>;
         }
         enum DistributedVirtualSwitchPortConnecteeConnecteeType {
            "pnic",
            "vmVnic",
            "hostConsoleVnic",
            "hostVmkVnic",
         }
         interface DistributedVirtualSwitchPortConnectee extends vsanhealthService.vim.DynamicData {
            connectedEntity?: vsanhealthService.vim.ManagedObjectReference;
            nicKey?: string;
            type?: string;
            addressHint?: string;
         }
         interface DistributedVirtualSwitchPortConnection extends vsanhealthService.vim.DynamicData {
            switchUuid: string;
            portgroupKey?: string;
            portKey?: string;
            connectionCookie?: number;
         }
         interface DistributedVirtualSwitchPortCriteria extends vsanhealthService.vim.DynamicData {
            connected?: boolean;
            active?: boolean;
            uplinkPort?: boolean;
            scope?: vsanhealthService.vim.ManagedObjectReference;
            portgroupKey?: Array<string>;
            inside?: boolean;
            portKey?: Array<string>;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface DistributedVirtualSwitchPortStatistics extends vsanhealthService.vim.DynamicData {
            packetsInMulticast: number;
            packetsOutMulticast: number;
            bytesInMulticast: number;
            bytesOutMulticast: number;
            packetsInUnicast: number;
            packetsOutUnicast: number;
            bytesInUnicast: number;
            bytesOutUnicast: number;
            packetsInBroadcast: number;
            packetsOutBroadcast: number;
            bytesInBroadcast: number;
            bytesOutBroadcast: number;
            packetsInDropped: number;
            packetsOutDropped: number;
            packetsInException: number;
            packetsOutException: number;
            bytesInFromPnic?: number;
            bytesOutToPnic?: number;
         }
         interface DistributedVirtualSwitchProductSpec extends vsanhealthService.vim.DynamicData {
            name?: string;
            vendor?: string;
            version?: string;
            build?: string;
            forwardingClass?: string;
            bundleId?: string;
            bundleUrl?: string;
         }
         interface ArrayOfDistributedVirtualSwitchProductSpec {
            DistributedVirtualSwitchProductSpec?: Array<vsanhealthService.vim.DistributedVirtualSwitchProductSpec>;
         }
         interface DvsNetworkRuleQualifier extends vsanhealthService.vim.DynamicData {
            key?: string;
         }
         interface ArrayOfDvsNetworkRuleQualifier {
            DvsNetworkRuleQualifier?: Array<vsanhealthService.vim.DvsNetworkRuleQualifier>;
         }
         interface DvsNetworkRuleAction extends vsanhealthService.vim.DynamicData {
         }
         enum DvsNetworkRuleDirectionType {
            "incomingPackets",
            "outgoingPackets",
            "both",
         }
         interface DvsIpNetworkRuleQualifier extends vsanhealthService.vim.DvsNetworkRuleQualifier {
            sourceAddress?: vsanhealthService.vim.IpAddress;
            destinationAddress?: vsanhealthService.vim.IpAddress;
            protocol?: vsanhealthService.vim.IntExpression;
            sourceIpPort?: vsanhealthService.vim.DvsIpPort;
            destinationIpPort?: vsanhealthService.vim.DvsIpPort;
            tcpFlags?: vsanhealthService.vim.IntExpression;
         }
         interface DvsIpPort extends vsanhealthService.vim.NegatableExpression {
         }
         interface DvsSingleIpPort extends vsanhealthService.vim.DvsIpPort {
            portNumber: number;
         }
         interface DvsIpPortRange extends vsanhealthService.vim.DvsIpPort {
            startPortNumber: number;
            endPortNumber: number;
         }
         interface DvsMacNetworkRuleQualifier extends vsanhealthService.vim.DvsNetworkRuleQualifier {
            sourceAddress?: vsanhealthService.vim.MacAddress;
            destinationAddress?: vsanhealthService.vim.MacAddress;
            protocol?: vsanhealthService.vim.IntExpression;
            vlanId?: vsanhealthService.vim.IntExpression;
         }
         interface DvsSystemTrafficNetworkRuleQualifier extends vsanhealthService.vim.DvsNetworkRuleQualifier {
            typeOfSystemTraffic?: vsanhealthService.vim.StringExpression;
         }
         interface DvsDropNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
         }
         interface DvsAcceptNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
         }
         interface DvsUpdateTagNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
            qosTag?: number;
            dscpTag?: number;
         }
         interface DvsRateLimitNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
            packetsPerSecond: number;
         }
         interface DvsLogNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
         }
         interface DvsGreEncapNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
            encapsulationIp: vsanhealthService.vim.SingleIp;
         }
         interface DvsMacRewriteNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
            rewriteMac: string;
         }
         interface DvsPuntNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
         }
         interface DvsCopyNetworkRuleAction extends vsanhealthService.vim.DvsNetworkRuleAction {
         }
         interface DvsTrafficRule extends vsanhealthService.vim.DynamicData {
            key?: string;
            description?: string;
            sequence?: number;
            qualifier?: Array<vsanhealthService.vim.DvsNetworkRuleQualifier>;
            action?: vsanhealthService.vim.DvsNetworkRuleAction;
            direction?: string;
         }
         interface ArrayOfDvsTrafficRule {
            DvsTrafficRule?: Array<vsanhealthService.vim.DvsTrafficRule>;
         }
         interface DvsTrafficRuleset extends vsanhealthService.vim.DynamicData {
            key?: string;
            enabled?: boolean;
            precedence?: number;
            rules?: Array<vsanhealthService.vim.DvsTrafficRule>;
         }
         interface DvsVmVnicResourceAllocation extends vsanhealthService.vim.DynamicData {
            reservationQuota?: number;
         }
         interface DvsVmVnicResourcePoolConfigSpec extends vsanhealthService.vim.DynamicData {
            operation: string;
            key?: string;
            configVersion?: string;
            allocationInfo?: vsanhealthService.vim.DvsVmVnicResourceAllocation;
            name?: string;
            description?: string;
         }
         interface ArrayOfDvsVmVnicResourcePoolConfigSpec {
            DvsVmVnicResourcePoolConfigSpec?: Array<vsanhealthService.vim.DvsVmVnicResourcePoolConfigSpec>;
         }
         interface DvsVnicAllocatedResource extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vnicKey: string;
            reservation?: number;
         }
         interface ArrayOfDvsVnicAllocatedResource {
            DvsVnicAllocatedResource?: Array<vsanhealthService.vim.DvsVnicAllocatedResource>;
         }
         interface DvsVmVnicNetworkResourcePoolRuntimeInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            name?: string;
            capacity?: number;
            usage?: number;
            available?: number;
            status: string;
            allocatedResource?: Array<vsanhealthService.vim.DvsVnicAllocatedResource>;
         }
         interface ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo {
            DvsVmVnicNetworkResourcePoolRuntimeInfo?: Array<vsanhealthService.vim.DvsVmVnicNetworkResourcePoolRuntimeInfo>;
         }
         interface DVSVmVnicNetworkResourcePool extends vsanhealthService.vim.DynamicData {
            key: string;
            name?: string;
            description?: string;
            configVersion: string;
            allocationInfo?: vsanhealthService.vim.DvsVmVnicResourceAllocation;
         }
         interface ArrayOfDVSVmVnicNetworkResourcePool {
            DVSVmVnicNetworkResourcePool?: Array<vsanhealthService.vim.DVSVmVnicNetworkResourcePool>;
         }
         interface VMwareDVSFeatureCapability extends vsanhealthService.vim.DVSFeatureCapability {
            vspanSupported?: boolean;
            lldpSupported?: boolean;
            ipfixSupported?: boolean;
            ipfixCapability?: vsanhealthService.vim.VMwareDvsIpfixCapability;
            multicastSnoopingSupported?: boolean;
            vspanCapability?: vsanhealthService.vim.VMwareDVSVspanCapability;
            lacpCapability?: vsanhealthService.vim.VMwareDvsLacpCapability;
         }
         interface VMwareDvsIpfixCapability extends vsanhealthService.vim.DynamicData {
            ipfixSupported?: boolean;
            ipv6ForIpfixSupported?: boolean;
            observationDomainIdSupported?: boolean;
         }
         interface VMwareDvsLacpCapability extends vsanhealthService.vim.DynamicData {
            lacpSupported?: boolean;
            multiLacpGroupSupported?: boolean;
         }
         interface VMwareDVSHealthCheckCapability extends vsanhealthService.vim.DVSHealthCheckCapability {
            vlanMtuSupported: boolean;
            teamingSupported: boolean;
         }
         interface VMwareDVSVspanCapability extends vsanhealthService.vim.DynamicData {
            mixedDestSupported: boolean;
            dvportSupported: boolean;
            remoteSourceSupported: boolean;
            remoteDestSupported: boolean;
            encapRemoteSourceSupported: boolean;
            erspanProtocolSupported?: boolean;
         }
         interface VMwareVspanPort extends vsanhealthService.vim.DynamicData {
            portKey?: Array<string>;
            uplinkPortName?: Array<string>;
            wildcardPortConnecteeType?: Array<string>;
            vlans?: Array<number>;
            ipAddress?: Array<string>;
         }
         interface VMwareVspanSession extends vsanhealthService.vim.DynamicData {
            key?: string;
            name?: string;
            description?: string;
            enabled: boolean;
            sourcePortTransmitted?: vsanhealthService.vim.VMwareVspanPort;
            sourcePortReceived?: vsanhealthService.vim.VMwareVspanPort;
            destinationPort?: vsanhealthService.vim.VMwareVspanPort;
            encapsulationVlanId?: number;
            stripOriginalVlan: boolean;
            mirroredPacketLength?: number;
            normalTrafficAllowed: boolean;
            sessionType?: string;
            samplingRate?: number;
            encapType?: string;
            erspanId?: number;
            erspanCOS?: number;
            erspanGraNanosec?: boolean;
         }
         interface ArrayOfVMwareVspanSession {
            VMwareVspanSession?: Array<vsanhealthService.vim.VMwareVspanSession>;
         }
         interface VMwareIpfixConfig extends vsanhealthService.vim.DynamicData {
            collectorIpAddress?: string;
            collectorPort?: number;
            observationDomainId?: number;
            activeFlowTimeout: number;
            idleFlowTimeout: number;
            samplingRate: number;
            internalFlowsOnly: boolean;
         }
         interface VMwareDVSConfigInfo extends vsanhealthService.vim.DVSConfigInfo {
            vspanSession?: Array<vsanhealthService.vim.VMwareVspanSession>;
            pvlanConfig?: Array<vsanhealthService.vim.VMwareDVSPvlanMapEntry>;
            maxMtu: number;
            linkDiscoveryProtocolConfig?: vsanhealthService.vim.LinkDiscoveryProtocolConfig;
            ipfixConfig?: vsanhealthService.vim.VMwareIpfixConfig;
            lacpGroupConfig?: Array<vsanhealthService.vim.VMwareDvsLacpGroupConfig>;
            lacpApiVersion?: string;
            multicastFilteringMode?: string;
         }
         interface VMwareDVSConfigSpec extends vsanhealthService.vim.DVSConfigSpec {
            pvlanConfigSpec?: Array<vsanhealthService.vim.VMwareDVSPvlanConfigSpec>;
            vspanConfigSpec?: Array<vsanhealthService.vim.VMwareDVSVspanConfigSpec>;
            maxMtu?: number;
            linkDiscoveryProtocolConfig?: vsanhealthService.vim.LinkDiscoveryProtocolConfig;
            ipfixConfig?: vsanhealthService.vim.VMwareIpfixConfig;
            lacpApiVersion?: string;
            multicastFilteringMode?: string;
         }
         interface VMwareUplinkPortOrderPolicy extends vsanhealthService.vim.InheritablePolicy {
            activeUplinkPort?: Array<string>;
            standbyUplinkPort?: Array<string>;
         }
         interface DVSFailureCriteria extends vsanhealthService.vim.InheritablePolicy {
            checkSpeed?: vsanhealthService.vim.StringPolicy;
            speed?: vsanhealthService.vim.IntPolicy;
            checkDuplex?: vsanhealthService.vim.BoolPolicy;
            fullDuplex?: vsanhealthService.vim.BoolPolicy;
            checkErrorPercent?: vsanhealthService.vim.BoolPolicy;
            percentage?: vsanhealthService.vim.IntPolicy;
            checkBeacon?: vsanhealthService.vim.BoolPolicy;
         }
         interface VmwareUplinkPortTeamingPolicy extends vsanhealthService.vim.InheritablePolicy {
            policy?: vsanhealthService.vim.StringPolicy;
            reversePolicy?: vsanhealthService.vim.BoolPolicy;
            notifySwitches?: vsanhealthService.vim.BoolPolicy;
            rollingOrder?: vsanhealthService.vim.BoolPolicy;
            failureCriteria?: vsanhealthService.vim.DVSFailureCriteria;
            uplinkPortOrder?: vsanhealthService.vim.VMwareUplinkPortOrderPolicy;
         }
         interface VmwareDistributedVirtualSwitchVlanSpec extends vsanhealthService.vim.InheritablePolicy {
         }
         interface VmwareDistributedVirtualSwitchPvlanSpec extends vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanSpec {
            pvlanId: number;
         }
         interface VmwareDistributedVirtualSwitchVlanIdSpec extends vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanSpec {
            vlanId: number;
         }
         interface VmwareDistributedVirtualSwitchTrunkVlanSpec extends vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanSpec {
            vlanId: Array<vsanhealthService.vim.NumericRange>;
         }
         interface DVSSecurityPolicy extends vsanhealthService.vim.InheritablePolicy {
            allowPromiscuous?: vsanhealthService.vim.BoolPolicy;
            macChanges?: vsanhealthService.vim.BoolPolicy;
            forgedTransmits?: vsanhealthService.vim.BoolPolicy;
         }
         interface VMwareDVSPortSetting extends vsanhealthService.vim.DVPortSetting {
            vlan?: vsanhealthService.vim.VmwareDistributedVirtualSwitchVlanSpec;
            qosTag?: vsanhealthService.vim.IntPolicy;
            uplinkTeamingPolicy?: vsanhealthService.vim.VmwareUplinkPortTeamingPolicy;
            securityPolicy?: vsanhealthService.vim.DVSSecurityPolicy;
            ipfixEnabled?: vsanhealthService.vim.BoolPolicy;
            txUplink?: vsanhealthService.vim.BoolPolicy;
            lacpPolicy?: vsanhealthService.vim.VMwareUplinkLacpPolicy;
         }
         interface VMwareDVSPortgroupPolicy extends vsanhealthService.vim.DVPortgroupPolicy {
            vlanOverrideAllowed: boolean;
            uplinkTeamingOverrideAllowed: boolean;
            securityPolicyOverrideAllowed: boolean;
            ipfixOverrideAllowed?: boolean;
         }
         enum VmwareDistributedVirtualSwitchPvlanPortType {
            "promiscuous",
            "isolated",
            "community",
         }
         interface VMwareDVSPvlanConfigSpec extends vsanhealthService.vim.DynamicData {
            pvlanEntry: vsanhealthService.vim.VMwareDVSPvlanMapEntry;
            operation: string;
         }
         interface ArrayOfVMwareDVSPvlanConfigSpec {
            VMwareDVSPvlanConfigSpec?: Array<vsanhealthService.vim.VMwareDVSPvlanConfigSpec>;
         }
         interface VMwareDVSPvlanMapEntry extends vsanhealthService.vim.DynamicData {
            primaryVlanId: number;
            secondaryVlanId: number;
            pvlanType: string;
         }
         interface ArrayOfVMwareDVSPvlanMapEntry {
            VMwareDVSPvlanMapEntry?: Array<vsanhealthService.vim.VMwareDVSPvlanMapEntry>;
         }
         interface VMwareDVSVspanConfigSpec extends vsanhealthService.vim.DynamicData {
            vspanSession: vsanhealthService.vim.VMwareVspanSession;
            operation: string;
         }
         interface ArrayOfVMwareDVSVspanConfigSpec {
            VMwareDVSVspanConfigSpec?: Array<vsanhealthService.vim.VMwareDVSVspanConfigSpec>;
         }
         enum VMwareDVSVspanSessionEncapType {
            "gre",
            "erspan2",
            "erspan3",
         }
         enum VMwareDVSVspanSessionType {
            "mixedDestMirror",
            "dvPortMirror",
            "remoteMirrorSource",
            "remoteMirrorDest",
            "encapsulatedRemoteMirrorSource",
         }
         interface VMwareDVSHealthCheckConfig extends vsanhealthService.vim.DVSHealthCheckConfig {
         }
         interface VMwareDVSVlanMtuHealthCheckConfig extends vsanhealthService.vim.VMwareDVSHealthCheckConfig {
         }
         interface VMwareDVSTeamingHealthCheckConfig extends vsanhealthService.vim.VMwareDVSHealthCheckConfig {
         }
         interface VMwareDVSVlanHealthCheckResult extends vsanhealthService.vim.HostMemberUplinkHealthCheckResult {
            trunkedVlan?: Array<vsanhealthService.vim.NumericRange>;
            untrunkedVlan?: Array<vsanhealthService.vim.NumericRange>;
         }
         interface VMwareDVSMtuHealthCheckResult extends vsanhealthService.vim.HostMemberUplinkHealthCheckResult {
            mtuMismatch: boolean;
            vlanSupportSwitchMtu?: Array<vsanhealthService.vim.NumericRange>;
            vlanNotSupportSwitchMtu?: Array<vsanhealthService.vim.NumericRange>;
         }
         enum VMwareDVSTeamingMatchStatus {
            "iphashMatch",
            "nonIphashMatch",
            "iphashMismatch",
            "nonIphashMismatch",
         }
         interface VMwareDVSTeamingHealthCheckResult extends vsanhealthService.vim.HostMemberHealthCheckResult {
            teamingStatus: string;
         }
         interface VMwareUplinkLacpPolicy extends vsanhealthService.vim.InheritablePolicy {
            enable?: vsanhealthService.vim.BoolPolicy;
            mode?: vsanhealthService.vim.StringPolicy;
         }
         interface VMwareDvsLacpGroupConfig extends vsanhealthService.vim.DynamicData {
            key?: string;
            name?: string;
            mode?: string;
            uplinkNum?: number;
            loadbalanceAlgorithm?: string;
            vlan?: vsanhealthService.vim.VMwareDvsLagVlanConfig;
            ipfix?: vsanhealthService.vim.VMwareDvsLagIpfixConfig;
            uplinkName?: Array<string>;
            uplinkPortKey?: Array<string>;
         }
         interface ArrayOfVMwareDvsLacpGroupConfig {
            VMwareDvsLacpGroupConfig?: Array<vsanhealthService.vim.VMwareDvsLacpGroupConfig>;
         }
         interface VMwareDvsLagVlanConfig extends vsanhealthService.vim.DynamicData {
            vlanId?: Array<vsanhealthService.vim.NumericRange>;
         }
         interface VMwareDvsLagIpfixConfig extends vsanhealthService.vim.DynamicData {
            ipfixEnabled?: boolean;
         }
         enum VMwareUplinkLacpMode {
            "active",
            "passive",
         }
         interface VMwareDvsLacpGroupSpec extends vsanhealthService.vim.DynamicData {
            lacpGroupConfig: vsanhealthService.vim.VMwareDvsLacpGroupConfig;
            operation: string;
         }
         interface ArrayOfVMwareDvsLacpGroupSpec {
            VMwareDvsLacpGroupSpec?: Array<vsanhealthService.vim.VMwareDvsLacpGroupSpec>;
         }
         enum VMwareDvsLacpLoadBalanceAlgorithm {
            "srcMac",
            "destMac",
            "srcDestMac",
            "destIpVlan",
            "srcIpVlan",
            "srcDestIpVlan",
            "destTcpUdpPort",
            "srcTcpUdpPort",
            "srcDestTcpUdpPort",
            "destIpTcpUdpPort",
            "srcIpTcpUdpPort",
            "srcDestIpTcpUdpPort",
            "destIpTcpUdpPortVlan",
            "srcIpTcpUdpPortVlan",
            "srcDestIpTcpUdpPortVlan",
            "destIp",
            "srcIp",
            "srcDestIp",
            "vlan",
            "srcPortId",
         }
         enum VMwareDvsLacpApiVersion {
            "singleLag",
            "multipleLag",
         }
         enum VMwareDvsMulticastFilteringMode {
            "legacyFiltering",
            "snooping",
         }
         interface CryptoKeyId extends vsanhealthService.vim.DynamicData {
            keyId: string;
            providerId?: vsanhealthService.vim.KeyProviderId;
         }
         interface ArrayOfCryptoKeyId {
            CryptoKeyId?: Array<vsanhealthService.vim.CryptoKeyId>;
         }
         interface CryptoKeyPlain extends vsanhealthService.vim.DynamicData {
            keyId: vsanhealthService.vim.CryptoKeyId;
            algorithm: string;
            keyData: string;
         }
         interface ArrayOfCryptoKeyPlain {
            CryptoKeyPlain?: Array<vsanhealthService.vim.CryptoKeyPlain>;
         }
         interface CryptoKeyResult extends vsanhealthService.vim.DynamicData {
            keyId: vsanhealthService.vim.CryptoKeyId;
            success: boolean;
            reason?: string;
         }
         interface ArrayOfCryptoKeyResult {
            CryptoKeyResult?: Array<vsanhealthService.vim.CryptoKeyResult>;
         }
         interface CryptoManagerKmipCertificateInfo extends vsanhealthService.vim.DynamicData {
            subject: string;
            issuer: string;
            serialNumber: string;
            notBefore: Date;
            notAfter: Date;
            fingerprint: string;
            checkTime: Date;
            secondsSinceValid?: number;
            secondsBeforeExpire?: number;
         }
         interface CryptoManagerKmipServerStatus extends vsanhealthService.vim.DynamicData {
            name: string;
            status: vsanhealthService.vim.ManagedEntityStatus;
            connectionStatus: string;
            certInfo?: vsanhealthService.vim.CryptoManagerKmipCertificateInfo;
            clientTrustServer?: boolean;
            serverTrustClient?: boolean;
         }
         interface ArrayOfCryptoManagerKmipServerStatus {
            CryptoManagerKmipServerStatus?: Array<vsanhealthService.vim.CryptoManagerKmipServerStatus>;
         }
         interface CryptoManagerKmipClusterStatus extends vsanhealthService.vim.DynamicData {
            clusterId: vsanhealthService.vim.KeyProviderId;
            servers: Array<vsanhealthService.vim.CryptoManagerKmipServerStatus>;
            clientCertInfo?: vsanhealthService.vim.CryptoManagerKmipCertificateInfo;
         }
         interface ArrayOfCryptoManagerKmipClusterStatus {
            CryptoManagerKmipClusterStatus?: Array<vsanhealthService.vim.CryptoManagerKmipClusterStatus>;
         }
         interface CryptoManagerKmipServerCertInfo extends vsanhealthService.vim.DynamicData {
            certificate: string;
            certInfo?: vsanhealthService.vim.CryptoManagerKmipCertificateInfo;
            clientTrustServer?: boolean;
         }
         interface CryptoSpec extends vsanhealthService.vim.DynamicData {
         }
         interface CryptoSpecDecrypt extends vsanhealthService.vim.CryptoSpec {
         }
         interface CryptoSpecDeepRecrypt extends vsanhealthService.vim.CryptoSpec {
            newKeyId: vsanhealthService.vim.CryptoKeyId;
         }
         interface CryptoSpecEncrypt extends vsanhealthService.vim.CryptoSpec {
            cryptoKeyId: vsanhealthService.vim.CryptoKeyId;
         }
         interface CryptoSpecNoOp extends vsanhealthService.vim.CryptoSpec {
         }
         interface CryptoSpecRegister extends vsanhealthService.vim.CryptoSpecNoOp {
            cryptoKeyId: vsanhealthService.vim.CryptoKeyId;
         }
         interface CryptoSpecShallowRecrypt extends vsanhealthService.vim.CryptoSpec {
            newKeyId: vsanhealthService.vim.CryptoKeyId;
         }
         interface KeyProviderId extends vsanhealthService.vim.DynamicData {
            id: string;
         }
         interface KmipClusterInfo extends vsanhealthService.vim.DynamicData {
            clusterId: vsanhealthService.vim.KeyProviderId;
            servers?: Array<vsanhealthService.vim.KmipServerInfo>;
            useAsDefault: boolean;
         }
         interface ArrayOfKmipClusterInfo {
            KmipClusterInfo?: Array<vsanhealthService.vim.KmipClusterInfo>;
         }
         interface KmipServerInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            address: string;
            port: number;
            proxyAddress?: string;
            proxyPort?: number;
            reconnect?: number;
            protocol?: string;
            nbio?: number;
            timeout?: number;
            userName?: string;
         }
         interface ArrayOfKmipServerInfo {
            KmipServerInfo?: Array<vsanhealthService.vim.KmipServerInfo>;
         }
         interface KmipServerSpec extends vsanhealthService.vim.DynamicData {
            clusterId: vsanhealthService.vim.KeyProviderId;
            info: vsanhealthService.vim.KmipServerInfo;
            password?: string;
         }
         interface KmipServerStatus extends vsanhealthService.vim.DynamicData {
            clusterId: vsanhealthService.vim.KeyProviderId;
            name: string;
            status: vsanhealthService.vim.ManagedEntityStatus;
            description: string;
         }
         enum EventEventSeverity {
            "error",
            "warning",
            "info",
            "user",
         }
         interface Event extends vsanhealthService.vim.DynamicData {
            key: number;
            chainId: number;
            createdTime: Date;
            userName: string;
            datacenter?: vsanhealthService.vim.DatacenterEventArgument;
            computeResource?: vsanhealthService.vim.ComputeResourceEventArgument;
            host?: vsanhealthService.vim.HostEventArgument;
            vm?: vsanhealthService.vim.VmEventArgument;
            ds?: vsanhealthService.vim.DatastoreEventArgument;
            net?: vsanhealthService.vim.NetworkEventArgument;
            dvs?: vsanhealthService.vim.DvsEventArgument;
            fullFormattedMessage?: string;
            changeTag?: string;
         }
         interface ArrayOfEvent {
            Event?: Array<vsanhealthService.vim.Event>;
         }
         interface GeneralEvent extends vsanhealthService.vim.Event {
            message: string;
         }
         interface GeneralHostInfoEvent extends vsanhealthService.vim.GeneralEvent {
         }
         interface GeneralHostWarningEvent extends vsanhealthService.vim.GeneralEvent {
         }
         interface GeneralHostErrorEvent extends vsanhealthService.vim.GeneralEvent {
         }
         interface GeneralVmInfoEvent extends vsanhealthService.vim.GeneralEvent {
         }
         interface GeneralVmWarningEvent extends vsanhealthService.vim.GeneralEvent {
         }
         interface GeneralVmErrorEvent extends vsanhealthService.vim.GeneralEvent {
         }
         interface GeneralUserEvent extends vsanhealthService.vim.GeneralEvent {
            entity?: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface ExtendedEventPair extends vsanhealthService.vim.DynamicData {
            key: string;
            value: string;
         }
         interface ArrayOfExtendedEventPair {
            ExtendedEventPair?: Array<vsanhealthService.vim.ExtendedEventPair>;
         }
         interface ExtendedEvent extends vsanhealthService.vim.GeneralEvent {
            eventTypeId: string;
            managedObject: vsanhealthService.vim.ManagedObjectReference;
            data?: Array<vsanhealthService.vim.ExtendedEventPair>;
         }
         interface HealthStatusChangedEvent extends vsanhealthService.vim.Event {
            componentId: string;
            oldStatus: string;
            newStatus: string;
            componentName: string;
            serviceId?: string;
         }
         interface HostInventoryUnreadableEvent extends vsanhealthService.vim.Event {
         }
         interface DatacenterEvent extends vsanhealthService.vim.Event {
         }
         interface DatacenterCreatedEvent extends vsanhealthService.vim.DatacenterEvent {
            parent: vsanhealthService.vim.FolderEventArgument;
         }
         interface DatacenterRenamedEvent extends vsanhealthService.vim.DatacenterEvent {
            oldName: string;
            newName: string;
         }
         interface SessionEvent extends vsanhealthService.vim.Event {
         }
         interface ServerStartedSessionEvent extends vsanhealthService.vim.SessionEvent {
         }
         interface UserLoginSessionEvent extends vsanhealthService.vim.SessionEvent {
            ipAddress: string;
            userAgent?: string;
            locale: string;
            sessionId: string;
         }
         interface UserLogoutSessionEvent extends vsanhealthService.vim.SessionEvent {
            ipAddress?: string;
            userAgent?: string;
            callCount?: number;
            sessionId?: string;
            loginTime?: Date;
         }
         interface BadUsernameSessionEvent extends vsanhealthService.vim.SessionEvent {
            ipAddress: string;
         }
         interface AlreadyAuthenticatedSessionEvent extends vsanhealthService.vim.SessionEvent {
         }
         interface NoAccessUserEvent extends vsanhealthService.vim.SessionEvent {
            ipAddress: string;
         }
         interface SessionTerminatedEvent extends vsanhealthService.vim.SessionEvent {
            sessionId: string;
            terminatedUsername: string;
         }
         interface GlobalMessageChangedEvent extends vsanhealthService.vim.SessionEvent {
            message: string;
            prevMessage?: string;
         }
         interface UpgradeEvent extends vsanhealthService.vim.Event {
            message: string;
         }
         interface InfoUpgradeEvent extends vsanhealthService.vim.UpgradeEvent {
         }
         interface WarningUpgradeEvent extends vsanhealthService.vim.UpgradeEvent {
         }
         interface ErrorUpgradeEvent extends vsanhealthService.vim.UpgradeEvent {
         }
         interface UserUpgradeEvent extends vsanhealthService.vim.UpgradeEvent {
         }
         interface HostEvent extends vsanhealthService.vim.Event {
         }
         interface HostDasEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostConnectedEvent extends vsanhealthService.vim.HostEvent {
         }
         enum HostDisconnectedEventReasonCode {
            "sslThumbprintVerifyFailed",
            "licenseExpired",
            "agentUpgrade",
            "userRequest",
            "insufficientLicenses",
            "agentOutOfDate",
            "passwordDecryptFailure",
            "unknown",
            "vcVRAMCapacityExceeded",
         }
         interface HostDisconnectedEvent extends vsanhealthService.vim.HostEvent {
            reason?: string;
         }
         interface HostSyncFailedEvent extends vsanhealthService.vim.HostEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface HostConnectionLostEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostReconnectionFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedNoConnectionEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedBadUsernameEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedBadVersionEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedAlreadyManagedEvent extends vsanhealthService.vim.HostEvent {
            serverName: string;
         }
         interface HostCnxFailedNoLicenseEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedNetworkErrorEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostRemovedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedCcagentUpgradeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedBadCcagentEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedAccountFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedNoAccessEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostShutdownEvent extends vsanhealthService.vim.HostEvent {
            reason: string;
         }
         interface HostCnxFailedNotFoundEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCnxFailedTimeoutEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostUpgradeFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface EnteringMaintenanceModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface EnteredMaintenanceModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface ExitMaintenanceModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface CanceledHostOperationEvent extends vsanhealthService.vim.HostEvent {
         }
         interface TimedOutHostOperationEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostDasEnabledEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostDasDisabledEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostDasEnablingEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostDasDisablingEvent extends vsanhealthService.vim.HostEvent {
         }
         enum HostDasErrorEventHostDasErrorReason {
            "configFailed",
            "timeout",
            "communicationInitFailed",
            "healthCheckScriptFailed",
            "agentFailed",
            "agentShutdown",
            "isolationAddressUnpingable",
            "other",
         }
         interface HostDasErrorEvent extends vsanhealthService.vim.HostEvent {
            message?: string;
            reason?: string;
         }
         interface HostDasOkEvent extends vsanhealthService.vim.HostEvent {
         }
         interface VcAgentUpgradedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface VcAgentUninstalledEvent extends vsanhealthService.vim.HostEvent {
         }
         interface VcAgentUpgradeFailedEvent extends vsanhealthService.vim.HostEvent {
            reason?: string;
         }
         interface VcAgentUninstallFailedEvent extends vsanhealthService.vim.HostEvent {
            reason?: string;
         }
         interface HostAddedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostAddFailedEvent extends vsanhealthService.vim.HostEvent {
            hostname: string;
         }
         interface HostIpChangedEvent extends vsanhealthService.vim.HostEvent {
            oldIP: string;
            newIP: string;
         }
         interface EnteringStandbyModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface DrsEnteringStandbyModeEvent extends vsanhealthService.vim.EnteringStandbyModeEvent {
         }
         interface EnteredStandbyModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface DrsEnteredStandbyModeEvent extends vsanhealthService.vim.EnteredStandbyModeEvent {
         }
         interface ExitingStandbyModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface DrsExitingStandbyModeEvent extends vsanhealthService.vim.ExitingStandbyModeEvent {
         }
         interface ExitedStandbyModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface DrsExitedStandbyModeEvent extends vsanhealthService.vim.ExitedStandbyModeEvent {
         }
         interface ExitStandbyModeFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface DrsExitStandbyModeFailedEvent extends vsanhealthService.vim.ExitStandbyModeFailedEvent {
         }
         interface UpdatedAgentBeingRestartedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface AccountCreatedEvent extends vsanhealthService.vim.HostEvent {
            spec: vsanhealthService.vim.HostAccountSpec;
            group: boolean;
         }
         interface AccountRemovedEvent extends vsanhealthService.vim.HostEvent {
            account: string;
            group: boolean;
         }
         interface UserPasswordChanged extends vsanhealthService.vim.HostEvent {
            userLogin: string;
         }
         interface AccountUpdatedEvent extends vsanhealthService.vim.HostEvent {
            spec: vsanhealthService.vim.HostAccountSpec;
            group: boolean;
            prevDescription?: string;
         }
         interface UserAssignedToGroup extends vsanhealthService.vim.HostEvent {
            userLogin: string;
            group: string;
         }
         interface UserUnassignedFromGroup extends vsanhealthService.vim.HostEvent {
            userLogin: string;
            group: string;
         }
         interface DatastorePrincipalConfigured extends vsanhealthService.vim.HostEvent {
            datastorePrincipal: string;
         }
         interface VMFSDatastoreCreatedEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
            datastoreUrl?: string;
         }
         interface NASDatastoreCreatedEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
            datastoreUrl?: string;
         }
         interface LocalDatastoreCreatedEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
            datastoreUrl?: string;
         }
         interface VMFSDatastoreExtendedEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VMFSDatastoreExpandedEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface DatastoreRemovedOnHostEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface DatastoreRenamedOnHostEvent extends vsanhealthService.vim.HostEvent {
            oldName: string;
            newName: string;
         }
         interface DuplicateIpDetectedEvent extends vsanhealthService.vim.HostEvent {
            duplicateIP: string;
            macAddress: string;
         }
         interface DatastoreDiscoveredEvent extends vsanhealthService.vim.HostEvent {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface DrsResourceConfigureFailedEvent extends vsanhealthService.vim.HostEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface DrsResourceConfigureSyncedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostGetShortNameFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostShortNameToIpFailedEvent extends vsanhealthService.vim.HostEvent {
            shortName: string;
         }
         interface HostIpToShortNameFailedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostPrimaryAgentNotShortNameEvent extends vsanhealthService.vim.HostDasEvent {
            primaryAgent: string;
         }
         interface HostNotInClusterEvent extends vsanhealthService.vim.HostDasEvent {
         }
         interface HostIsolationIpPingFailedEvent extends vsanhealthService.vim.HostDasEvent {
            isolationIp: string;
         }
         interface HostIpInconsistentEvent extends vsanhealthService.vim.HostEvent {
            ipAddress: string;
            ipAddress2: string;
         }
         interface HostUserWorldSwapNotEnabledEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostNonCompliantEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostCompliantEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostComplianceCheckedEvent extends vsanhealthService.vim.HostEvent {
            profile: vsanhealthService.vim.ProfileEventArgument;
         }
         interface ClusterComplianceCheckedEvent extends vsanhealthService.vim.ClusterEvent {
            profile: vsanhealthService.vim.ProfileEventArgument;
         }
         interface ProfileEvent extends vsanhealthService.vim.Event {
            profile: vsanhealthService.vim.ProfileEventArgument;
         }
         interface ProfileCreatedEvent extends vsanhealthService.vim.ProfileEvent {
         }
         interface ProfileRemovedEvent extends vsanhealthService.vim.ProfileEvent {
         }
         interface ProfileAssociatedEvent extends vsanhealthService.vim.ProfileEvent {
         }
         interface ProfileDissociatedEvent extends vsanhealthService.vim.ProfileEvent {
         }
         interface HostConfigAppliedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface ProfileReferenceHostChangedEvent extends vsanhealthService.vim.ProfileEvent {
            referenceHost?: vsanhealthService.vim.ManagedObjectReference;
            referenceHostName?: string;
            prevReferenceHostName?: string;
         }
         interface ProfileChangedEvent extends vsanhealthService.vim.ProfileEvent {
         }
         interface HostProfileAppliedEvent extends vsanhealthService.vim.HostEvent {
            profile: vsanhealthService.vim.ProfileEventArgument;
         }
         interface HostShortNameInconsistentEvent extends vsanhealthService.vim.HostDasEvent {
            shortName: string;
            shortName2: string;
         }
         interface HostNoRedundantManagementNetworkEvent extends vsanhealthService.vim.HostDasEvent {
         }
         interface HostNoAvailableNetworksEvent extends vsanhealthService.vim.HostDasEvent {
            ips?: string;
         }
         interface HostExtraNetworksEvent extends vsanhealthService.vim.HostDasEvent {
            ips?: string;
         }
         interface HostNoHAEnabledPortGroupsEvent extends vsanhealthService.vim.HostDasEvent {
         }
         interface HostMissingNetworksEvent extends vsanhealthService.vim.HostDasEvent {
            ips?: string;
         }
         interface VnicPortArgument extends vsanhealthService.vim.DynamicData {
            vnic: string;
            port: vsanhealthService.vim.DistributedVirtualSwitchPortConnection;
         }
         interface ArrayOfVnicPortArgument {
            VnicPortArgument?: Array<vsanhealthService.vim.VnicPortArgument>;
         }
         interface HostVnicConnectedToCustomizedDVPortEvent extends vsanhealthService.vim.HostEvent {
            vnic: vsanhealthService.vim.VnicPortArgument;
            prevPortKey?: string;
         }
         interface GhostDvsProxySwitchDetectedEvent extends vsanhealthService.vim.HostEvent {
            switchUuid: Array<string>;
         }
         interface GhostDvsProxySwitchRemovedEvent extends vsanhealthService.vim.HostEvent {
            switchUuid: Array<string>;
         }
         interface VmEvent extends vsanhealthService.vim.Event {
            template: boolean;
         }
         interface VmPoweredOffEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmPoweredOnEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmSuspendedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmStartingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmStoppingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmSuspendingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmResumingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmDisconnectedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmRemoteConsoleConnectedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmRemoteConsoleDisconnectedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmDiscoveredEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmOrphanedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmBeingCreatedEvent extends vsanhealthService.vim.VmEvent {
            configSpec?: vsanhealthService.vim.VirtualMachineConfigSpec;
         }
         interface VmCreatedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmStartRecordingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmEndRecordingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmStartReplayingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmEndReplayingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmRegisteredEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmAutoRenameEvent extends vsanhealthService.vim.VmEvent {
            oldName: string;
            newName: string;
         }
         interface VmBeingHotMigratedEvent extends vsanhealthService.vim.VmEvent {
            destHost: vsanhealthService.vim.HostEventArgument;
            destDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            destDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmResettingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmStaticMacConflictEvent extends vsanhealthService.vim.VmEvent {
            conflictedVm: vsanhealthService.vim.VmEventArgument;
            mac: string;
         }
         interface VmMacConflictEvent extends vsanhealthService.vim.VmEvent {
            conflictedVm: vsanhealthService.vim.VmEventArgument;
            mac: string;
         }
         interface VmBeingDeployedEvent extends vsanhealthService.vim.VmEvent {
            srcTemplate: vsanhealthService.vim.VmEventArgument;
         }
         interface VmDeployFailedEvent extends vsanhealthService.vim.VmEvent {
            destDatastore: vsanhealthService.vim.EntityEventArgument;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmDeployedEvent extends vsanhealthService.vim.VmEvent {
            srcTemplate: vsanhealthService.vim.VmEventArgument;
         }
         interface VmMacChangedEvent extends vsanhealthService.vim.VmEvent {
            adapter: string;
            oldMac: string;
            newMac: string;
         }
         interface VmMacAssignedEvent extends vsanhealthService.vim.VmEvent {
            adapter: string;
            mac: string;
         }
         interface VmUuidConflictEvent extends vsanhealthService.vim.VmEvent {
            conflictedVm: vsanhealthService.vim.VmEventArgument;
            uuid: string;
         }
         interface VmInstanceUuidConflictEvent extends vsanhealthService.vim.VmEvent {
            conflictedVm: vsanhealthService.vim.VmEventArgument;
            instanceUuid: string;
         }
         interface VmBeingMigratedEvent extends vsanhealthService.vim.VmEvent {
            destHost: vsanhealthService.vim.HostEventArgument;
            destDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            destDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmFailedMigrateEvent extends vsanhealthService.vim.VmEvent {
            destHost: vsanhealthService.vim.HostEventArgument;
            reason: vsanhealthService.vim.LocalizedMethodFault;
            destDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            destDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmMigratedEvent extends vsanhealthService.vim.VmEvent {
            sourceHost: vsanhealthService.vim.HostEventArgument;
            sourceDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            sourceDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmUnsupportedStartingEvent extends vsanhealthService.vim.VmStartingEvent {
            guestId: string;
         }
         interface DrsVmMigratedEvent extends vsanhealthService.vim.VmMigratedEvent {
         }
         interface DrsVmPoweredOnEvent extends vsanhealthService.vim.VmPoweredOnEvent {
         }
         interface DrsRuleViolationEvent extends vsanhealthService.vim.VmEvent {
         }
         interface DrsSoftRuleViolationEvent extends vsanhealthService.vim.VmEvent {
         }
         interface DrsRuleComplianceEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmRelocateSpecEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmBeingRelocatedEvent extends vsanhealthService.vim.VmRelocateSpecEvent {
            destHost: vsanhealthService.vim.HostEventArgument;
            destDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            destDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmRelocatedEvent extends vsanhealthService.vim.VmRelocateSpecEvent {
            sourceHost: vsanhealthService.vim.HostEventArgument;
            sourceDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            sourceDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmRelocateFailedEvent extends vsanhealthService.vim.VmRelocateSpecEvent {
            destHost: vsanhealthService.vim.HostEventArgument;
            reason: vsanhealthService.vim.LocalizedMethodFault;
            destDatacenter?: vsanhealthService.vim.DatacenterEventArgument;
            destDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface VmEmigratingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmCloneEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmBeingClonedEvent extends vsanhealthService.vim.VmCloneEvent {
            destFolder: vsanhealthService.vim.FolderEventArgument;
            destName: string;
            destHost: vsanhealthService.vim.HostEventArgument;
         }
         interface VmBeingClonedNoFolderEvent extends vsanhealthService.vim.VmCloneEvent {
            destName: string;
            destHost: vsanhealthService.vim.HostEventArgument;
         }
         interface VmCloneFailedEvent extends vsanhealthService.vim.VmCloneEvent {
            destFolder: vsanhealthService.vim.FolderEventArgument;
            destName: string;
            destHost: vsanhealthService.vim.HostEventArgument;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmClonedEvent extends vsanhealthService.vim.VmCloneEvent {
            sourceVm: vsanhealthService.vim.VmEventArgument;
         }
         interface VmResourceReallocatedEvent extends vsanhealthService.vim.VmEvent {
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface VmRenamedEvent extends vsanhealthService.vim.VmEvent {
            oldName: string;
            newName: string;
         }
         interface VmDateRolledBackEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmNoNetworkAccessEvent extends vsanhealthService.vim.VmEvent {
            destHost: vsanhealthService.vim.HostEventArgument;
         }
         interface VmDiskFailedEvent extends vsanhealthService.vim.VmEvent {
            disk: string;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToPowerOnEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToPowerOffEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToSuspendEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToResetEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToShutdownGuestEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToRebootGuestEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmFailedToStandbyGuestEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmRemovedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmGuestShutdownEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmGuestRebootEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmGuestStandbyEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmUpgradingEvent extends vsanhealthService.vim.VmEvent {
            version: string;
         }
         interface VmUpgradeCompleteEvent extends vsanhealthService.vim.VmEvent {
            version: string;
         }
         interface VmUpgradeFailedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmRestartedOnAlternateHostEvent extends vsanhealthService.vim.VmPoweredOnEvent {
            sourceHost: vsanhealthService.vim.HostEventArgument;
         }
         interface VmReconfiguredEvent extends vsanhealthService.vim.VmEvent {
            configSpec: vsanhealthService.vim.VirtualMachineConfigSpec;
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface VmMessageEvent extends vsanhealthService.vim.VmEvent {
            message: string;
            messageInfo?: Array<vsanhealthService.vim.VirtualMachineMessage>;
         }
         interface VmMessageWarningEvent extends vsanhealthService.vim.VmEvent {
            message: string;
            messageInfo?: Array<vsanhealthService.vim.VirtualMachineMessage>;
         }
         interface VmMessageErrorEvent extends vsanhealthService.vim.VmEvent {
            message: string;
            messageInfo?: Array<vsanhealthService.vim.VirtualMachineMessage>;
         }
         interface VmConfigMissingEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmPowerOffOnIsolationEvent extends vsanhealthService.vim.VmPoweredOffEvent {
            isolatedHost: vsanhealthService.vim.HostEventArgument;
         }
         enum VmShutdownOnIsolationEventOperation {
            "shutdown",
            "poweredOff",
         }
         interface VmShutdownOnIsolationEvent extends vsanhealthService.vim.VmPoweredOffEvent {
            isolatedHost: vsanhealthService.vim.HostEventArgument;
            shutdownResult?: string;
         }
         interface VmFailoverFailed extends vsanhealthService.vim.VmEvent {
            reason?: vsanhealthService.vim.LocalizedMethodFault;
         }
         enum VmDasBeingResetEventReasonCode {
            "vmtoolsHeartbeatFailure",
            "appHeartbeatFailure",
            "appImmediateResetRequest",
            "vmcpResetApdCleared",
         }
         interface VmDasBeingResetEvent extends vsanhealthService.vim.VmEvent {
            reason?: string;
         }
         interface VmDasResetFailedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmMaxRestartCountReached extends vsanhealthService.vim.VmEvent {
         }
         interface VmMaxFTRestartCountReached extends vsanhealthService.vim.VmEvent {
         }
         interface VmDasBeingResetWithScreenshotEvent extends vsanhealthService.vim.VmDasBeingResetEvent {
            screenshotFilePath: string;
         }
         interface NotEnoughResourcesToStartVmEvent extends vsanhealthService.vim.VmEvent {
            reason?: string;
         }
         interface VmUuidAssignedEvent extends vsanhealthService.vim.VmEvent {
            uuid: string;
         }
         interface VmInstanceUuidAssignedEvent extends vsanhealthService.vim.VmEvent {
            instanceUuid: string;
         }
         interface VmUuidChangedEvent extends vsanhealthService.vim.VmEvent {
            oldUuid: string;
            newUuid: string;
         }
         interface VmInstanceUuidChangedEvent extends vsanhealthService.vim.VmEvent {
            oldInstanceUuid: string;
            newInstanceUuid: string;
         }
         interface VmWwnConflictEvent extends vsanhealthService.vim.VmEvent {
            conflictedVms?: Array<vsanhealthService.vim.VmEventArgument>;
            conflictedHosts?: Array<vsanhealthService.vim.HostEventArgument>;
            wwn: number;
         }
         interface VmAcquiredMksTicketEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmAcquiredTicketEvent extends vsanhealthService.vim.VmEvent {
            ticketType: string;
         }
         interface VmGuestOSCrashedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface HostWwnConflictEvent extends vsanhealthService.vim.HostEvent {
            conflictedVms?: Array<vsanhealthService.vim.VmEventArgument>;
            conflictedHosts?: Array<vsanhealthService.vim.HostEventArgument>;
            wwn: number;
         }
         interface VmWwnAssignedEvent extends vsanhealthService.vim.VmEvent {
            nodeWwns: Array<number>;
            portWwns: Array<number>;
         }
         interface VmWwnChangedEvent extends vsanhealthService.vim.VmEvent {
            oldNodeWwns?: Array<number>;
            oldPortWwns?: Array<number>;
            newNodeWwns?: Array<number>;
            newPortWwns?: Array<number>;
         }
         interface VmSecondaryAddedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmFaultToleranceTurnedOffEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmFaultToleranceStateChangedEvent extends vsanhealthService.vim.VmEvent {
            oldState: vsanhealthService.vim.VirtualMachineFaultToleranceState;
            newState: vsanhealthService.vim.VirtualMachineFaultToleranceState;
         }
         interface VmSecondaryDisabledEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmSecondaryDisabledBySystemEvent extends vsanhealthService.vim.VmEvent {
            reason?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmSecondaryEnabledEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmStartingSecondaryEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmSecondaryStartedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmFailedUpdatingSecondaryConfig extends vsanhealthService.vim.VmEvent {
         }
         enum VmFailedStartingSecondaryEventFailureReason {
            "incompatibleHost",
            "loginFailed",
            "registerVmFailed",
            "migrateFailed",
         }
         interface VmFailedStartingSecondaryEvent extends vsanhealthService.vim.VmEvent {
            reason?: string;
         }
         interface VmTimedoutStartingSecondaryEvent extends vsanhealthService.vim.VmEvent {
            timeout?: number;
         }
         interface VmNoCompatibleHostForSecondaryEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmPrimaryFailoverEvent extends vsanhealthService.vim.VmEvent {
            reason?: string;
         }
         interface VmFaultToleranceVmTerminatedEvent extends vsanhealthService.vim.VmEvent {
            reason?: string;
         }
         interface HostWwnChangedEvent extends vsanhealthService.vim.HostEvent {
            oldNodeWwns?: Array<number>;
            oldPortWwns?: Array<number>;
            newNodeWwns?: Array<number>;
            newPortWwns?: Array<number>;
         }
         interface HostAdminDisableEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostAdminEnableEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostEnableAdminFailedEvent extends vsanhealthService.vim.HostEvent {
            permissions: Array<vsanhealthService.vim.Permission>;
         }
         interface VmFailedRelayoutOnVmfs2DatastoreEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmFailedRelayoutEvent extends vsanhealthService.vim.VmEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmRelayoutSuccessfulEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmRelayoutUpToDateEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmConnectedEvent extends vsanhealthService.vim.VmEvent {
         }
         interface VmPoweringOnWithCustomizedDVPortEvent extends vsanhealthService.vim.VmEvent {
            vnic: Array<vsanhealthService.vim.VnicPortArgument>;
         }
         interface VmDasUpdateErrorEvent extends vsanhealthService.vim.VmEvent {
         }
         interface NoMaintenanceModeDrsRecommendationForVM extends vsanhealthService.vim.VmEvent {
         }
         interface VmDasUpdateOkEvent extends vsanhealthService.vim.VmEvent {
         }
         interface ScheduledTaskEvent extends vsanhealthService.vim.Event {
            scheduledTask: vsanhealthService.vim.ScheduledTaskEventArgument;
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface ScheduledTaskCreatedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskStartedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskRemovedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskReconfiguredEvent extends vsanhealthService.vim.ScheduledTaskEvent {
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface ScheduledTaskCompletedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskFailedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ScheduledTaskEmailCompletedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
            to: string;
         }
         interface ScheduledTaskEmailFailedEvent extends vsanhealthService.vim.ScheduledTaskEvent {
            to: string;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface AlarmEvent extends vsanhealthService.vim.Event {
            alarm: vsanhealthService.vim.AlarmEventArgument;
         }
         interface AlarmCreatedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface AlarmStatusChangedEvent extends vsanhealthService.vim.AlarmEvent {
            source: vsanhealthService.vim.ManagedEntityEventArgument;
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            from: string;
            to: string;
         }
         interface AlarmActionTriggeredEvent extends vsanhealthService.vim.AlarmEvent {
            source: vsanhealthService.vim.ManagedEntityEventArgument;
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface AlarmEmailCompletedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            to: string;
         }
         interface AlarmEmailFailedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            to: string;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface AlarmSnmpCompletedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface AlarmSnmpFailedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface AlarmScriptCompleteEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            script: string;
         }
         interface AlarmScriptFailedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            script: string;
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface AlarmRemovedEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface AlarmReconfiguredEvent extends vsanhealthService.vim.AlarmEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface AlarmAcknowledgedEvent extends vsanhealthService.vim.AlarmEvent {
            source: vsanhealthService.vim.ManagedEntityEventArgument;
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
         }
         interface AlarmClearedEvent extends vsanhealthService.vim.AlarmEvent {
            source: vsanhealthService.vim.ManagedEntityEventArgument;
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            from: string;
         }
         interface CustomFieldEvent extends vsanhealthService.vim.Event {
         }
         interface CustomFieldDefEvent extends vsanhealthService.vim.CustomFieldEvent {
            fieldKey: number;
            name: string;
         }
         interface CustomFieldDefAddedEvent extends vsanhealthService.vim.CustomFieldDefEvent {
         }
         interface CustomFieldDefRemovedEvent extends vsanhealthService.vim.CustomFieldDefEvent {
         }
         interface CustomFieldDefRenamedEvent extends vsanhealthService.vim.CustomFieldDefEvent {
            newName: string;
         }
         interface CustomFieldValueChangedEvent extends vsanhealthService.vim.CustomFieldEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            fieldKey: number;
            name: string;
            value: string;
            prevState?: string;
         }
         interface AuthorizationEvent extends vsanhealthService.vim.Event {
         }
         interface PermissionEvent extends vsanhealthService.vim.AuthorizationEvent {
            entity: vsanhealthService.vim.ManagedEntityEventArgument;
            principal: string;
            group: boolean;
         }
         interface PermissionAddedEvent extends vsanhealthService.vim.PermissionEvent {
            role: vsanhealthService.vim.RoleEventArgument;
            propagate: boolean;
         }
         interface PermissionUpdatedEvent extends vsanhealthService.vim.PermissionEvent {
            role: vsanhealthService.vim.RoleEventArgument;
            propagate: boolean;
            prevRole?: vsanhealthService.vim.RoleEventArgument;
            prevPropagate?: boolean;
         }
         interface PermissionRemovedEvent extends vsanhealthService.vim.PermissionEvent {
         }
         interface RoleEvent extends vsanhealthService.vim.AuthorizationEvent {
            role: vsanhealthService.vim.RoleEventArgument;
         }
         interface RoleAddedEvent extends vsanhealthService.vim.RoleEvent {
            privilegeList?: Array<string>;
         }
         interface RoleUpdatedEvent extends vsanhealthService.vim.RoleEvent {
            privilegeList?: Array<string>;
            prevRoleName?: string;
            privilegesAdded?: Array<string>;
            privilegesRemoved?: Array<string>;
         }
         interface RoleRemovedEvent extends vsanhealthService.vim.RoleEvent {
         }
         interface DatastoreEvent extends vsanhealthService.vim.Event {
            datastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface DatastoreDestroyedEvent extends vsanhealthService.vim.DatastoreEvent {
         }
         interface DatastoreRenamedEvent extends vsanhealthService.vim.DatastoreEvent {
            oldName: string;
            newName: string;
         }
         interface DatastoreCapacityIncreasedEvent extends vsanhealthService.vim.DatastoreEvent {
            oldCapacity: number;
            newCapacity: number;
         }
         interface DatastoreDuplicatedEvent extends vsanhealthService.vim.DatastoreEvent {
         }
         interface DatastoreFileEvent extends vsanhealthService.vim.DatastoreEvent {
            targetFile: string;
            sourceOfOperation?: string;
            succeeded?: boolean;
         }
         interface DatastoreFileCopiedEvent extends vsanhealthService.vim.DatastoreFileEvent {
            sourceDatastore: vsanhealthService.vim.DatastoreEventArgument;
            sourceFile: string;
         }
         interface DatastoreFileMovedEvent extends vsanhealthService.vim.DatastoreFileEvent {
            sourceDatastore: vsanhealthService.vim.DatastoreEventArgument;
            sourceFile: string;
         }
         interface DatastoreFileDeletedEvent extends vsanhealthService.vim.DatastoreFileEvent {
         }
         interface NonVIWorkloadDetectedOnDatastoreEvent extends vsanhealthService.vim.DatastoreEvent {
         }
         interface DatastoreIORMReconfiguredEvent extends vsanhealthService.vim.DatastoreEvent {
         }
         interface TaskEvent extends vsanhealthService.vim.Event {
            info: vsanhealthService.vim.TaskInfo;
         }
         interface TaskTimeoutEvent extends vsanhealthService.vim.TaskEvent {
         }
         interface LicenseEvent extends vsanhealthService.vim.Event {
         }
         interface ServerLicenseExpiredEvent extends vsanhealthService.vim.LicenseEvent {
            product: string;
         }
         interface HostLicenseExpiredEvent extends vsanhealthService.vim.LicenseEvent {
         }
         interface VMotionLicenseExpiredEvent extends vsanhealthService.vim.LicenseEvent {
         }
         interface NoLicenseEvent extends vsanhealthService.vim.LicenseEvent {
            feature: vsanhealthService.vim.LicenseFeatureInfo;
         }
         interface LicenseServerUnavailableEvent extends vsanhealthService.vim.LicenseEvent {
            licenseServer: string;
         }
         interface LicenseServerAvailableEvent extends vsanhealthService.vim.LicenseEvent {
            licenseServer: string;
         }
         interface LicenseExpiredEvent extends vsanhealthService.vim.Event {
            feature: vsanhealthService.vim.LicenseFeatureInfo;
         }
         interface InvalidEditionEvent extends vsanhealthService.vim.LicenseEvent {
            feature: string;
         }
         interface HostInventoryFullEvent extends vsanhealthService.vim.LicenseEvent {
            capacity: number;
         }
         interface LicenseRestrictedEvent extends vsanhealthService.vim.LicenseEvent {
         }
         interface IncorrectHostInformationEvent extends vsanhealthService.vim.LicenseEvent {
         }
         interface UnlicensedVirtualMachinesEvent extends vsanhealthService.vim.LicenseEvent {
            unlicensed: number;
            available: number;
         }
         interface UnlicensedVirtualMachinesFoundEvent extends vsanhealthService.vim.LicenseEvent {
            available: number;
         }
         interface AllVirtualMachinesLicensedEvent extends vsanhealthService.vim.LicenseEvent {
         }
         interface LicenseNonComplianceEvent extends vsanhealthService.vim.LicenseEvent {
            url: string;
         }
         interface MigrationEvent extends vsanhealthService.vim.VmEvent {
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface MigrationWarningEvent extends vsanhealthService.vim.MigrationEvent {
         }
         interface MigrationErrorEvent extends vsanhealthService.vim.MigrationEvent {
         }
         interface MigrationHostWarningEvent extends vsanhealthService.vim.MigrationEvent {
            dstHost: vsanhealthService.vim.HostEventArgument;
         }
         interface MigrationHostErrorEvent extends vsanhealthService.vim.MigrationEvent {
            dstHost: vsanhealthService.vim.HostEventArgument;
         }
         interface MigrationResourceWarningEvent extends vsanhealthService.vim.MigrationEvent {
            dstPool: vsanhealthService.vim.ResourcePoolEventArgument;
            dstHost: vsanhealthService.vim.HostEventArgument;
         }
         interface MigrationResourceErrorEvent extends vsanhealthService.vim.MigrationEvent {
            dstPool: vsanhealthService.vim.ResourcePoolEventArgument;
            dstHost: vsanhealthService.vim.HostEventArgument;
         }
         interface ClusterEvent extends vsanhealthService.vim.Event {
         }
         interface DasEnabledEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DasDisabledEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DasAdmissionControlDisabledEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DasAdmissionControlEnabledEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DasHostFailedEvent extends vsanhealthService.vim.ClusterEvent {
            failedHost: vsanhealthService.vim.HostEventArgument;
         }
         interface DasHostIsolatedEvent extends vsanhealthService.vim.ClusterEvent {
            isolatedHost: vsanhealthService.vim.HostEventArgument;
         }
         interface DasClusterIsolatedEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DasAgentUnavailableEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DasAgentFoundEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface InsufficientFailoverResourcesEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface FailoverLevelRestored extends vsanhealthService.vim.ClusterEvent {
         }
         interface ClusterOvercommittedEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface HostOvercommittedEvent extends vsanhealthService.vim.ClusterOvercommittedEvent {
         }
         interface ClusterStatusChangedEvent extends vsanhealthService.vim.ClusterEvent {
            oldStatus: string;
            newStatus: string;
         }
         interface HostStatusChangedEvent extends vsanhealthService.vim.ClusterStatusChangedEvent {
         }
         interface ClusterCreatedEvent extends vsanhealthService.vim.ClusterEvent {
            parent: vsanhealthService.vim.FolderEventArgument;
         }
         interface ClusterDestroyedEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DrsEnabledEvent extends vsanhealthService.vim.ClusterEvent {
            behavior: string;
         }
         interface DrsDisabledEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface ClusterReconfiguredEvent extends vsanhealthService.vim.ClusterEvent {
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface HostMonitoringStateChangedEvent extends vsanhealthService.vim.ClusterEvent {
            state: string;
            prevState?: string;
         }
         interface VmHealthMonitoringStateChangedEvent extends vsanhealthService.vim.ClusterEvent {
            state: string;
            prevState?: string;
         }
         interface ResourcePoolEvent extends vsanhealthService.vim.Event {
            resourcePool: vsanhealthService.vim.ResourcePoolEventArgument;
         }
         interface ResourcePoolCreatedEvent extends vsanhealthService.vim.ResourcePoolEvent {
            parent: vsanhealthService.vim.ResourcePoolEventArgument;
         }
         interface ResourcePoolDestroyedEvent extends vsanhealthService.vim.ResourcePoolEvent {
         }
         interface ResourcePoolMovedEvent extends vsanhealthService.vim.ResourcePoolEvent {
            oldParent: vsanhealthService.vim.ResourcePoolEventArgument;
            newParent: vsanhealthService.vim.ResourcePoolEventArgument;
         }
         interface ResourcePoolReconfiguredEvent extends vsanhealthService.vim.ResourcePoolEvent {
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface ResourceViolatedEvent extends vsanhealthService.vim.ResourcePoolEvent {
         }
         interface VmResourcePoolMovedEvent extends vsanhealthService.vim.VmEvent {
            oldParent: vsanhealthService.vim.ResourcePoolEventArgument;
            newParent: vsanhealthService.vim.ResourcePoolEventArgument;
         }
         interface TemplateUpgradeEvent extends vsanhealthService.vim.Event {
            legacyTemplate: string;
         }
         interface TemplateBeingUpgradedEvent extends vsanhealthService.vim.TemplateUpgradeEvent {
         }
         interface TemplateUpgradeFailedEvent extends vsanhealthService.vim.TemplateUpgradeEvent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface TemplateUpgradedEvent extends vsanhealthService.vim.TemplateUpgradeEvent {
         }
         interface CustomizationEvent extends vsanhealthService.vim.VmEvent {
            logLocation?: string;
         }
         interface CustomizationStartedEvent extends vsanhealthService.vim.CustomizationEvent {
         }
         interface CustomizationSucceeded extends vsanhealthService.vim.CustomizationEvent {
         }
         interface CustomizationFailed extends vsanhealthService.vim.CustomizationEvent {
         }
         interface CustomizationUnknownFailure extends vsanhealthService.vim.CustomizationFailed {
         }
         interface CustomizationSysprepFailed extends vsanhealthService.vim.CustomizationFailed {
            sysprepVersion: string;
            systemVersion: string;
         }
         interface CustomizationLinuxIdentityFailed extends vsanhealthService.vim.CustomizationFailed {
         }
         interface CustomizationNetworkSetupFailed extends vsanhealthService.vim.CustomizationFailed {
         }
         interface LockerMisconfiguredEvent extends vsanhealthService.vim.Event {
            datastore: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface LockerReconfiguredEvent extends vsanhealthService.vim.Event {
            oldDatastore?: vsanhealthService.vim.DatastoreEventArgument;
            newDatastore?: vsanhealthService.vim.DatastoreEventArgument;
         }
         interface NoDatastoresConfiguredEvent extends vsanhealthService.vim.HostEvent {
         }
         interface AdminPasswordNotChangedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface HostInAuditModeEvent extends vsanhealthService.vim.HostEvent {
         }
         interface LocalTSMEnabledEvent extends vsanhealthService.vim.HostEvent {
         }
         interface RemoteTSMEnabledEvent extends vsanhealthService.vim.HostEvent {
         }
         interface VimAccountPasswordChangedEvent extends vsanhealthService.vim.HostEvent {
         }
         interface IScsiBootFailureEvent extends vsanhealthService.vim.HostEvent {
         }
         interface DvsHealthStatusChangeEvent extends vsanhealthService.vim.HostEvent {
            switchUuid: string;
            healthResult?: vsanhealthService.vim.HostMemberHealthCheckResult;
         }
         interface NetworkRollbackEvent extends vsanhealthService.vim.Event {
            methodName: string;
            transactionId: string;
         }
         interface UplinkPortVlanTrunkedEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface UplinkPortVlanUntrunkedEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface MtuMatchEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface MtuMismatchEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface UplinkPortMtuNotSupportEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface UplinkPortMtuSupportEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface TeamingMatchEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         interface TeamingMisMatchEvent extends vsanhealthService.vim.DvsHealthStatusChangeEvent {
         }
         enum DvsEventPortBlockState {
            "unset",
            "blocked",
            "unblocked",
            "unknown",
         }
         interface DvsEvent extends vsanhealthService.vim.Event {
         }
         interface DvsCreatedEvent extends vsanhealthService.vim.DvsEvent {
            parent: vsanhealthService.vim.FolderEventArgument;
         }
         interface DvsRenamedEvent extends vsanhealthService.vim.DvsEvent {
            oldName: string;
            newName: string;
         }
         interface DvsReconfiguredEvent extends vsanhealthService.vim.DvsEvent {
            configSpec: vsanhealthService.vim.DVSConfigSpec;
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface DvsUpgradeAvailableEvent extends vsanhealthService.vim.DvsEvent {
            productInfo: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsUpgradeInProgressEvent extends vsanhealthService.vim.DvsEvent {
            productInfo: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsUpgradeRejectedEvent extends vsanhealthService.vim.DvsEvent {
            productInfo: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsUpgradedEvent extends vsanhealthService.vim.DvsEvent {
            productInfo: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsHostJoinedEvent extends vsanhealthService.vim.DvsEvent {
            hostJoined: vsanhealthService.vim.HostEventArgument;
         }
         interface DvsHostLeftEvent extends vsanhealthService.vim.DvsEvent {
            hostLeft: vsanhealthService.vim.HostEventArgument;
         }
         interface DvsOutOfSyncHostArgument extends vsanhealthService.vim.DynamicData {
            outOfSyncHost: vsanhealthService.vim.HostEventArgument;
            configParamters: Array<string>;
         }
         interface ArrayOfDvsOutOfSyncHostArgument {
            DvsOutOfSyncHostArgument?: Array<vsanhealthService.vim.DvsOutOfSyncHostArgument>;
         }
         interface OutOfSyncDvsHost extends vsanhealthService.vim.DvsEvent {
            hostOutOfSync: Array<vsanhealthService.vim.DvsOutOfSyncHostArgument>;
         }
         interface DvsHostWentOutOfSyncEvent extends vsanhealthService.vim.DvsEvent {
            hostOutOfSync: vsanhealthService.vim.DvsOutOfSyncHostArgument;
         }
         interface DvsHostBackInSyncEvent extends vsanhealthService.vim.DvsEvent {
            hostBackInSync: vsanhealthService.vim.HostEventArgument;
         }
         interface DvsHostStatusUpdated extends vsanhealthService.vim.DvsEvent {
            hostMember: vsanhealthService.vim.HostEventArgument;
            oldStatus?: string;
            newStatus?: string;
            oldStatusDetail?: string;
            newStatusDetail?: string;
         }
         interface DvsPortCreatedEvent extends vsanhealthService.vim.DvsEvent {
            portKey: Array<string>;
         }
         interface DvsPortReconfiguredEvent extends vsanhealthService.vim.DvsEvent {
            portKey: Array<string>;
            configChanges?: Array<vsanhealthService.vim.ChangesInfoEventArgument>;
         }
         interface DvsPortDeletedEvent extends vsanhealthService.vim.DvsEvent {
            portKey: Array<string>;
         }
         interface DvsPortConnectedEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            connectee?: vsanhealthService.vim.DistributedVirtualSwitchPortConnectee;
         }
         interface DvsPortDisconnectedEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            connectee?: vsanhealthService.vim.DistributedVirtualSwitchPortConnectee;
         }
         interface DvsPortVendorSpecificStateChangeEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
         }
         interface DvsPortRuntimeChangeEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            runtimeInfo: vsanhealthService.vim.DVPortStatus;
         }
         interface DvsPortLinkUpEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
         }
         interface DvsPortLinkDownEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
         }
         interface DvsPortJoinPortgroupEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            portgroupKey: string;
            portgroupName: string;
         }
         interface DvsPortLeavePortgroupEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            portgroupKey: string;
            portgroupName: string;
         }
         interface DvsPortBlockedEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            statusDetail?: string;
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
            prevBlockState?: string;
         }
         interface DvsPortUnblockedEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
            prevBlockState?: string;
         }
         interface DvsPortEnteredPassthruEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
         }
         interface DvsPortExitedPassthruEvent extends vsanhealthService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: vsanhealthService.vim.DVPortStatus;
         }
         interface DvsDestroyedEvent extends vsanhealthService.vim.DvsEvent {
         }
         interface DvsMergedEvent extends vsanhealthService.vim.DvsEvent {
            sourceDvs: vsanhealthService.vim.DvsEventArgument;
            destinationDvs: vsanhealthService.vim.DvsEventArgument;
         }
         interface HostLocalPortCreatedEvent extends vsanhealthService.vim.DvsEvent {
            hostLocalPort: vsanhealthService.vim.DVSHostLocalPortInfo;
         }
         interface RollbackEvent extends vsanhealthService.vim.DvsEvent {
            hostName: string;
            methodName?: string;
         }
         interface RecoveryEvent extends vsanhealthService.vim.DvsEvent {
            hostName: string;
            portKey: string;
            dvsUuid?: string;
            vnic?: string;
         }
         interface DvsImportEvent extends vsanhealthService.vim.DvsEvent {
            importType: string;
         }
         interface DvsRestoreEvent extends vsanhealthService.vim.DvsEvent {
         }
         interface VmVnicPoolReservationViolationRaiseEvent extends vsanhealthService.vim.DvsEvent {
            vmVnicResourcePoolKey: string;
            vmVnicResourcePoolName?: string;
         }
         interface VmVnicPoolReservationViolationClearEvent extends vsanhealthService.vim.DvsEvent {
            vmVnicResourcePoolKey: string;
            vmVnicResourcePoolName?: string;
         }
         interface DVPortgroupEvent extends vsanhealthService.vim.Event {
         }
         interface DVPortgroupCreatedEvent extends vsanhealthService.vim.DVPortgroupEvent {
         }
         interface DVPortgroupRenamedEvent extends vsanhealthService.vim.DVPortgroupEvent {
            oldName: string;
            newName: string;
         }
         interface DVPortgroupReconfiguredEvent extends vsanhealthService.vim.DVPortgroupEvent {
            configSpec: vsanhealthService.vim.DVPortgroupConfigSpec;
            configChanges?: vsanhealthService.vim.ChangesInfoEventArgument;
         }
         interface DVPortgroupDestroyedEvent extends vsanhealthService.vim.DVPortgroupEvent {
         }
         interface DvpgImportEvent extends vsanhealthService.vim.DVPortgroupEvent {
            importType: string;
         }
         interface DvpgRestoreEvent extends vsanhealthService.vim.DVPortgroupEvent {
         }
         interface DrsInvocationFailedEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface DrsRecoveredFromFailureEvent extends vsanhealthService.vim.ClusterEvent {
         }
         interface VmReloadFromPathEvent extends vsanhealthService.vim.VmEvent {
            configPath: string;
         }
         interface VmReloadFromPathFailedEvent extends vsanhealthService.vim.VmEvent {
            configPath: string;
         }
         interface VmRequirementsExceedCurrentEVCModeEvent extends vsanhealthService.vim.VmEvent {
         }
         interface EventArgument extends vsanhealthService.vim.DynamicData {
         }
         interface RoleEventArgument extends vsanhealthService.vim.EventArgument {
            roleId: number;
            name: string;
         }
         interface EntityEventArgument extends vsanhealthService.vim.EventArgument {
            name: string;
         }
         interface ManagedEntityEventArgument extends vsanhealthService.vim.EntityEventArgument {
            entity: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FolderEventArgument extends vsanhealthService.vim.EntityEventArgument {
            folder: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DatacenterEventArgument extends vsanhealthService.vim.EntityEventArgument {
            datacenter: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ComputeResourceEventArgument extends vsanhealthService.vim.EntityEventArgument {
            computeResource: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ResourcePoolEventArgument extends vsanhealthService.vim.EntityEventArgument {
            resourcePool: vsanhealthService.vim.ManagedObjectReference;
         }
         interface HostEventArgument extends vsanhealthService.vim.EntityEventArgument {
            host: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfHostEventArgument {
            HostEventArgument?: Array<vsanhealthService.vim.HostEventArgument>;
         }
         interface VmEventArgument extends vsanhealthService.vim.EntityEventArgument {
            vm: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfVmEventArgument {
            VmEventArgument?: Array<vsanhealthService.vim.VmEventArgument>;
         }
         interface DatastoreEventArgument extends vsanhealthService.vim.EntityEventArgument {
            datastore: vsanhealthService.vim.ManagedObjectReference;
         }
         interface NetworkEventArgument extends vsanhealthService.vim.EntityEventArgument {
            network: vsanhealthService.vim.ManagedObjectReference;
         }
         interface AlarmEventArgument extends vsanhealthService.vim.EntityEventArgument {
            alarm: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ScheduledTaskEventArgument extends vsanhealthService.vim.EntityEventArgument {
            scheduledTask: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ProfileEventArgument extends vsanhealthService.vim.EventArgument {
            profile: vsanhealthService.vim.ManagedObjectReference;
            name: string;
         }
         interface DvsEventArgument extends vsanhealthService.vim.EntityEventArgument {
            dvs: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ChangesInfoEventArgument extends vsanhealthService.vim.DynamicData {
            modified?: string;
            added?: string;
            deleted?: string;
         }
         interface ArrayOfChangesInfoEventArgument {
            ChangesInfoEventArgument?: Array<vsanhealthService.vim.ChangesInfoEventArgument>;
         }
         enum EventCategory {
            "info",
            "warning",
            "error",
            "user",
         }
         interface EventArgDesc extends vsanhealthService.vim.DynamicData {
            name: string;
            type: string;
            description?: vsanhealthService.vim.ElementDescription;
         }
         interface ArrayOfEventArgDesc {
            EventArgDesc?: Array<vsanhealthService.vim.EventArgDesc>;
         }
         interface EventDescriptionEventDetail extends vsanhealthService.vim.DynamicData {
            key: string;
            description?: string;
            category: string;
            formatOnDatacenter: string;
            formatOnComputeResource: string;
            formatOnHost: string;
            formatOnVm: string;
            fullFormat: string;
            longDescription?: string;
         }
         interface ArrayOfEventDescriptionEventDetail {
            EventDescriptionEventDetail?: Array<vsanhealthService.vim.EventDescriptionEventDetail>;
         }
         interface EventDescription extends vsanhealthService.vim.DynamicData {
            category: Array<vsanhealthService.vim.ElementDescription>;
            eventInfo: Array<vsanhealthService.vim.EventDescriptionEventDetail>;
            enumeratedTypes?: Array<vsanhealthService.vim.EnumDescription>;
         }
         interface EventEx extends vsanhealthService.vim.Event {
            eventTypeId: string;
            severity?: string;
            message?: string;
            arguments?: Array<vsanhealthService.vim.KeyAnyValue>;
            objectId?: string;
            objectType?: string;
            objectName?: string;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         enum EventFilterSpecRecursionOption {
            "self",
            "children",
            "all",
         }
         interface EventFilterSpecByEntity extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            recursion: vsanhealthService.vim.EventFilterSpecRecursionOption;
         }
         interface EventFilterSpecByTime extends vsanhealthService.vim.DynamicData {
            beginTime?: Date;
            endTime?: Date;
         }
         interface EventFilterSpecByUsername extends vsanhealthService.vim.DynamicData {
            systemUser: boolean;
            userList?: Array<string>;
         }
         interface EventFilterSpec extends vsanhealthService.vim.DynamicData {
            entity?: vsanhealthService.vim.EventFilterSpecByEntity;
            time?: vsanhealthService.vim.EventFilterSpecByTime;
            userName?: vsanhealthService.vim.EventFilterSpecByUsername;
            eventChainId?: number;
            alarm?: vsanhealthService.vim.ManagedObjectReference;
            scheduledTask?: vsanhealthService.vim.ManagedObjectReference;
            disableFullMessage?: boolean;
            category?: Array<string>;
            type?: Array<string>;
            tag?: Array<string>;
            eventTypeId?: Array<string>;
            maxCount?: number;
         }
         interface ExtExtendedProductInfo extends vsanhealthService.vim.DynamicData {
            companyUrl?: string;
            productUrl?: string;
            managementUrl?: string;
            self?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ManagedByInfo extends vsanhealthService.vim.DynamicData {
            extensionKey: string;
            type: string;
         }
         interface ExtManagedEntityInfo extends vsanhealthService.vim.DynamicData {
            type: string;
            smallIconUrl?: string;
            iconUrl?: string;
            description?: string;
         }
         interface ArrayOfExtManagedEntityInfo {
            ExtManagedEntityInfo?: Array<vsanhealthService.vim.ExtManagedEntityInfo>;
         }
         interface ExtSolutionManagerInfoTabInfo extends vsanhealthService.vim.DynamicData {
            label: string;
            url: string;
         }
         interface ArrayOfExtSolutionManagerInfoTabInfo {
            ExtSolutionManagerInfoTabInfo?: Array<vsanhealthService.vim.ExtSolutionManagerInfoTabInfo>;
         }
         interface ExtSolutionManagerInfo extends vsanhealthService.vim.DynamicData {
            tab?: Array<vsanhealthService.vim.ExtSolutionManagerInfoTabInfo>;
            smallIconUrl?: string;
         }
         interface ActiveDirectoryFault extends vsanhealthService.vim.VimFault {
            errorCode?: number;
         }
         interface ActiveVMsBlockingEVC extends vsanhealthService.vim.EVCConfigFault {
            evcMode?: string;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
            hostName?: Array<string>;
         }
         interface AdminDisabled extends vsanhealthService.vim.HostConfigFault {
         }
         interface AdminNotDisabled extends vsanhealthService.vim.HostConfigFault {
         }
         enum AffinityType {
            "memory",
            "cpu",
         }
         interface AffinityConfigured extends vsanhealthService.vim.MigrationFault {
            configuredAffinity: Array<string>;
         }
         enum AgentInstallFailedReason {
            "NotEnoughSpaceOnDevice",
            "PrepareToUpgradeFailed",
            "AgentNotRunning",
            "AgentNotReachable",
            "InstallTimedout",
            "SignatureVerificationFailed",
            "AgentUploadFailed",
            "AgentUploadTimedout",
            "UnknownInstallerError",
         }
         interface AgentInstallFailed extends vsanhealthService.vim.HostConnectFault {
            reason?: string;
            statusCode?: number;
            installerOutput?: string;
         }
         interface AlreadyBeingManaged extends vsanhealthService.vim.HostConnectFault {
            ipAddress: string;
         }
         interface AlreadyConnected extends vsanhealthService.vim.HostConnectFault {
            name: string;
         }
         interface AlreadyExists extends vsanhealthService.vim.VimFault {
            name?: string;
         }
         interface AlreadyUpgraded extends vsanhealthService.vim.VimFault {
         }
         interface AnswerFileUpdateFailure extends vsanhealthService.vim.DynamicData {
            userInputPath: vsanhealthService.vim.ProfilePropertyPath;
            errMsg: vsanhealthService.vim.LocalizableMessage;
         }
         interface ArrayOfAnswerFileUpdateFailure {
            AnswerFileUpdateFailure?: Array<vsanhealthService.vim.AnswerFileUpdateFailure>;
         }
         interface AnswerFileUpdateFailed extends vsanhealthService.vim.VimFault {
            failure: Array<vsanhealthService.vim.AnswerFileUpdateFailure>;
         }
         interface ApplicationQuiesceFault extends vsanhealthService.vim.SnapshotFault {
         }
         interface AuthMinimumAdminPermission extends vsanhealthService.vim.VimFault {
         }
         interface BackupBlobReadFailure extends vsanhealthService.vim.DvsFault {
            entityName: string;
            entityType: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface BackupBlobWriteFailure extends vsanhealthService.vim.DvsFault {
            entityName: string;
            entityType: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface BlockedByFirewall extends vsanhealthService.vim.HostConfigFault {
         }
         interface CAMServerRefusedConnection extends vsanhealthService.vim.InvalidCAMServer {
         }
         interface CannotAccessFile extends vsanhealthService.vim.FileFault {
         }
         interface CannotAccessLocalSource extends vsanhealthService.vim.VimFault {
         }
         interface CannotAccessNetwork extends vsanhealthService.vim.CannotAccessVmDevice {
            network?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface CannotAccessVmComponent extends vsanhealthService.vim.VmConfigFault {
         }
         interface CannotAccessVmConfig extends vsanhealthService.vim.CannotAccessVmComponent {
            reason: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface CannotAccessVmDevice extends vsanhealthService.vim.CannotAccessVmComponent {
            device: string;
            backing: string;
            connected: boolean;
         }
         interface CannotAccessVmDisk extends vsanhealthService.vim.CannotAccessVmDevice {
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface CannotAddHostWithFTVmAsStandalone extends vsanhealthService.vim.HostConnectFault {
         }
         interface CannotAddHostWithFTVmToDifferentCluster extends vsanhealthService.vim.HostConnectFault {
         }
         interface CannotAddHostWithFTVmToNonHACluster extends vsanhealthService.vim.HostConnectFault {
         }
         interface CannotChangeDrsBehaviorForFtSecondary extends vsanhealthService.vim.VmFaultToleranceIssue {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotChangeHaSettingsForFtSecondary extends vsanhealthService.vim.VmFaultToleranceIssue {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotChangeVsanClusterUuid extends vsanhealthService.vim.VsanFault {
         }
         interface CannotChangeVsanNodeUuid extends vsanhealthService.vim.VsanFault {
         }
         interface CannotComputeFTCompatibleHosts extends vsanhealthService.vim.VmFaultToleranceIssue {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotCreateFile extends vsanhealthService.vim.FileFault {
         }
         interface CannotDecryptPasswords extends vsanhealthService.vim.CustomizationFault {
         }
         interface CannotDeleteFile extends vsanhealthService.vim.FileFault {
         }
         interface CannotDisableDrsOnClustersWithVApps extends vsanhealthService.vim.RuntimeFault {
         }
         interface CannotDisableSnapshot extends vsanhealthService.vim.VmConfigFault {
         }
         interface CannotDisconnectHostWithFaultToleranceVm extends vsanhealthService.vim.VimFault {
            hostName: string;
         }
         enum CannotEnableVmcpForClusterReason {
            "APDTimeoutDisabled",
            "IncompatibleHostVersion",
         }
         interface CannotEnableVmcpForCluster extends vsanhealthService.vim.VimFault {
            host?: vsanhealthService.vim.ManagedObjectReference;
            hostName?: string;
            reason?: string;
         }
         interface CannotModifyConfigCpuRequirements extends vsanhealthService.vim.MigrationFault {
         }
         enum CannotMoveFaultToleranceVmMoveType {
            "resourcePool",
            "cluster",
         }
         interface CannotMoveFaultToleranceVm extends vsanhealthService.vim.VimFault {
            moveType: string;
            vmName: string;
         }
         interface CannotMoveHostWithFaultToleranceVm extends vsanhealthService.vim.VimFault {
         }
         interface CannotMoveVmWithDeltaDisk extends vsanhealthService.vim.MigrationFault {
            device: string;
         }
         interface CannotMoveVmWithNativeDeltaDisk extends vsanhealthService.vim.MigrationFault {
         }
         interface CannotMoveVsanEnabledHost extends vsanhealthService.vim.VsanFault {
         }
         interface CannotPlaceWithoutPrerequisiteMoves extends vsanhealthService.vim.VimFault {
         }
         enum CannotPowerOffVmInClusterOperation {
            "suspend",
            "powerOff",
            "guestShutdown",
            "guestSuspend",
         }
         interface CannotPowerOffVmInCluster extends vsanhealthService.vim.InvalidState {
            operation: string;
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotReconfigureVsanWhenHaEnabled extends vsanhealthService.vim.VsanFault {
         }
         enum CannotUseNetworkReason {
            "NetworkReservationNotSupported",
            "MismatchedNetworkPolicies",
            "MismatchedDvsVersionOrVendor",
            "VMotionToUnsupportedNetworkType",
         }
         interface CannotUseNetwork extends vsanhealthService.vim.VmConfigFault {
            device: string;
            backing: string;
            connected: boolean;
            reason: string;
            network?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ClockSkew extends vsanhealthService.vim.HostConfigFault {
         }
         interface CloneFromSnapshotNotSupported extends vsanhealthService.vim.MigrationFault {
         }
         interface CollectorAddressUnset extends vsanhealthService.vim.DvsFault {
         }
         interface ConcurrentAccess extends vsanhealthService.vim.VimFault {
         }
         interface ConflictingConfigurationConfig extends vsanhealthService.vim.DynamicData {
            entity?: vsanhealthService.vim.ManagedObjectReference;
            propertyPath: string;
         }
         interface ArrayOfConflictingConfigurationConfig {
            ConflictingConfigurationConfig?: Array<vsanhealthService.vim.ConflictingConfigurationConfig>;
         }
         interface ConflictingConfiguration extends vsanhealthService.vim.DvsFault {
            configInConflict: Array<vsanhealthService.vim.ConflictingConfigurationConfig>;
         }
         interface ConflictingDatastoreFound extends vsanhealthService.vim.RuntimeFault {
            name: string;
            url: string;
         }
         interface ConnectedIso extends vsanhealthService.vim.OvfExport {
            cdrom: vsanhealthService.vim.VirtualCdrom;
            filename: string;
         }
         interface CpuCompatibilityUnknown extends vsanhealthService.vim.CpuIncompatible {
         }
         interface CpuHotPlugNotSupported extends vsanhealthService.vim.VmConfigFault {
         }
         interface CpuIncompatible extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            level: number;
            registerName: string;
            registerBits?: string;
            desiredBits?: string;
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface CpuIncompatible1ECX extends vsanhealthService.vim.CpuIncompatible {
            sse3: boolean;
            pclmulqdq?: boolean;
            ssse3: boolean;
            sse41: boolean;
            sse42: boolean;
            aes?: boolean;
            other: boolean;
            otherOnly: boolean;
         }
         interface CpuIncompatible81EDX extends vsanhealthService.vim.CpuIncompatible {
            nx: boolean;
            ffxsr: boolean;
            rdtscp: boolean;
            lm: boolean;
            other: boolean;
            otherOnly: boolean;
         }
         interface CustomizationFault extends vsanhealthService.vim.VimFault {
         }
         interface CustomizationPending extends vsanhealthService.vim.CustomizationFault {
         }
         interface DVPortNotSupported extends vsanhealthService.vim.DeviceBackingNotSupported {
         }
         enum DasConfigFaultDasConfigFaultReason {
            "HostNetworkMisconfiguration",
            "HostMisconfiguration",
            "InsufficientPrivileges",
            "NoPrimaryAgentAvailable",
            "Other",
            "NoDatastoresConfigured",
            "CreateConfigVvolFailed",
            "VSanNotSupportedOnHost",
            "DasNetworkMisconfiguration",
         }
         interface DasConfigFault extends vsanhealthService.vim.VimFault {
            reason?: string;
            output?: string;
            event?: Array<vsanhealthService.vim.Event>;
         }
         interface DatabaseError extends vsanhealthService.vim.RuntimeFault {
         }
         interface DatacenterMismatchArgument extends vsanhealthService.vim.DynamicData {
            entity: vsanhealthService.vim.ManagedObjectReference;
            inputDatacenter?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfDatacenterMismatchArgument {
            DatacenterMismatchArgument?: Array<vsanhealthService.vim.DatacenterMismatchArgument>;
         }
         interface DatacenterMismatch extends vsanhealthService.vim.MigrationFault {
            invalidArgument: Array<vsanhealthService.vim.DatacenterMismatchArgument>;
            expectedDatacenter: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DatastoreNotWritableOnHost extends vsanhealthService.vim.InvalidDatastore {
            host: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DeltaDiskFormatNotSupported extends vsanhealthService.vim.VmConfigFault {
            datastore?: Array<vsanhealthService.vim.ManagedObjectReference>;
            deltaDiskFormat: string;
         }
         interface DestinationSwitchFull extends vsanhealthService.vim.CannotAccessNetwork {
         }
         interface DestinationVsanDisabled extends vsanhealthService.vim.CannotMoveVsanEnabledHost {
            destinationCluster: string;
         }
         interface DeviceBackingNotSupported extends vsanhealthService.vim.DeviceNotSupported {
            backing: string;
         }
         interface DeviceControllerNotSupported extends vsanhealthService.vim.DeviceNotSupported {
            controller: string;
         }
         interface DeviceHotPlugNotSupported extends vsanhealthService.vim.InvalidDeviceSpec {
         }
         interface DeviceNotFound extends vsanhealthService.vim.InvalidDeviceSpec {
         }
         enum DeviceNotSupportedReason {
            "host",
            "guest",
         }
         interface DeviceNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            device: string;
            reason?: string;
         }
         interface DeviceUnsupportedForVmPlatform extends vsanhealthService.vim.InvalidDeviceSpec {
         }
         interface DeviceUnsupportedForVmVersion extends vsanhealthService.vim.InvalidDeviceSpec {
            currentVersion: string;
            expectedVersion: string;
         }
         interface DigestNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface DirectoryNotEmpty extends vsanhealthService.vim.FileFault {
         }
         interface DisableAdminNotSupported extends vsanhealthService.vim.HostConfigFault {
         }
         enum DisallowedChangeByServiceDisallowedChange {
            "hotExtendDisk",
         }
         interface DisallowedChangeByService extends vsanhealthService.vim.RuntimeFault {
            serviceName: string;
            disallowedChange?: string;
         }
         interface DisallowedDiskModeChange extends vsanhealthService.vim.InvalidDeviceSpec {
         }
         interface DisallowedMigrationDeviceAttached extends vsanhealthService.vim.MigrationFault {
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface DisallowedOperationOnFailoverHost extends vsanhealthService.vim.RuntimeFault {
            host: vsanhealthService.vim.ManagedObjectReference;
            hostname: string;
         }
         interface DisconnectedHostsBlockingEVC extends vsanhealthService.vim.EVCConfigFault {
         }
         interface DiskHasPartitions extends vsanhealthService.vim.VsanDiskFault {
         }
         interface DiskIsLastRemainingNonSSD extends vsanhealthService.vim.VsanDiskFault {
         }
         interface DiskIsNonLocal extends vsanhealthService.vim.VsanDiskFault {
         }
         interface DiskIsUSB extends vsanhealthService.vim.VsanDiskFault {
         }
         interface DiskMoveTypeNotSupported extends vsanhealthService.vim.MigrationFault {
         }
         interface DiskNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            disk: number;
         }
         interface DiskTooSmall extends vsanhealthService.vim.VsanDiskFault {
         }
         interface DomainNotFound extends vsanhealthService.vim.ActiveDirectoryFault {
            domainName: string;
         }
         interface DrsDisabledOnVm extends vsanhealthService.vim.VimFault {
         }
         interface DrsVmotionIncompatibleFault extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            host: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DuplicateDisks extends vsanhealthService.vim.VsanDiskFault {
         }
         interface DuplicateName extends vsanhealthService.vim.VimFault {
            name: string;
            object: vsanhealthService.vim.ManagedObjectReference;
         }
         interface DuplicateVsanNetworkInterface extends vsanhealthService.vim.VsanFault {
            device: string;
         }
         interface DvsApplyOperationFaultFaultOnObject extends vsanhealthService.vim.DynamicData {
            objectId: string;
            type: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfDvsApplyOperationFaultFaultOnObject {
            DvsApplyOperationFaultFaultOnObject?: Array<vsanhealthService.vim.DvsApplyOperationFaultFaultOnObject>;
         }
         interface DvsApplyOperationFault extends vsanhealthService.vim.DvsFault {
            objectFault: Array<vsanhealthService.vim.DvsApplyOperationFaultFaultOnObject>;
         }
         interface DvsFault extends vsanhealthService.vim.VimFault {
         }
         interface DvsNotAuthorized extends vsanhealthService.vim.DvsFault {
            sessionExtensionKey?: string;
            dvsExtensionKey?: string;
         }
         interface DvsOperationBulkFaultFaultOnHost extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfDvsOperationBulkFaultFaultOnHost {
            DvsOperationBulkFaultFaultOnHost?: Array<vsanhealthService.vim.DvsOperationBulkFaultFaultOnHost>;
         }
         interface DvsOperationBulkFault extends vsanhealthService.vim.DvsFault {
            hostFault: Array<vsanhealthService.vim.DvsOperationBulkFaultFaultOnHost>;
         }
         interface DvsScopeViolated extends vsanhealthService.vim.DvsFault {
            scope: Array<vsanhealthService.vim.ManagedObjectReference>;
            entity: vsanhealthService.vim.ManagedObjectReference;
         }
         interface EVCAdmissionFailed extends vsanhealthService.vim.NotSupportedHostInCluster {
            faults?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface EVCAdmissionFailedCPUFeaturesForMode extends vsanhealthService.vim.EVCAdmissionFailed {
            currentEVCModeKey: string;
         }
         interface EVCAdmissionFailedCPUModel extends vsanhealthService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedCPUModelForMode extends vsanhealthService.vim.EVCAdmissionFailed {
            currentEVCModeKey: string;
         }
         interface EVCAdmissionFailedCPUVendor extends vsanhealthService.vim.EVCAdmissionFailed {
            clusterCPUVendor: string;
            hostCPUVendor: string;
         }
         interface EVCAdmissionFailedCPUVendorUnknown extends vsanhealthService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedHostDisconnected extends vsanhealthService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedHostSoftware extends vsanhealthService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedHostSoftwareForMode extends vsanhealthService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedVmActive extends vsanhealthService.vim.EVCAdmissionFailed {
         }
         interface EVCConfigFault extends vsanhealthService.vim.VimFault {
            faults?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface EVCModeIllegalByVendor extends vsanhealthService.vim.EVCConfigFault {
            clusterCPUVendor: string;
            modeCPUVendor: string;
         }
         interface EVCModeUnsupportedByHosts extends vsanhealthService.vim.EVCConfigFault {
            evcMode?: string;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
            hostName?: Array<string>;
         }
         interface EVCUnsupportedByHostHardware extends vsanhealthService.vim.EVCConfigFault {
            host: Array<vsanhealthService.vim.ManagedObjectReference>;
            hostName: Array<string>;
         }
         interface EVCUnsupportedByHostSoftware extends vsanhealthService.vim.EVCConfigFault {
            host: Array<vsanhealthService.vim.ManagedObjectReference>;
            hostName: Array<string>;
         }
         interface EightHostLimitViolated extends vsanhealthService.vim.VmConfigFault {
         }
         interface ExpiredAddonLicense extends vsanhealthService.vim.ExpiredFeatureLicense {
         }
         interface ExpiredEditionLicense extends vsanhealthService.vim.ExpiredFeatureLicense {
         }
         interface ExpiredFeatureLicense extends vsanhealthService.vim.NotEnoughLicenses {
            feature: string;
            count: number;
            expirationDate: Date;
         }
         interface ExtendedFault extends vsanhealthService.vim.VimFault {
            faultTypeId: string;
            data?: Array<vsanhealthService.vim.KeyValue>;
         }
         interface FailToEnableSPBM extends vsanhealthService.vim.NotEnoughLicenses {
            cs: vsanhealthService.vim.ManagedObjectReference;
            csName: string;
            hostLicenseStates: Array<vsanhealthService.vim.ComputeResourceHostSPBMLicenseInfo>;
         }
         interface FailToLockFaultToleranceVMs extends vsanhealthService.vim.RuntimeFault {
            vmName: string;
            vm: vsanhealthService.vim.ManagedObjectReference;
            alreadyLockedVm: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FaultToleranceAntiAffinityViolated extends vsanhealthService.vim.MigrationFault {
            hostName: string;
            host: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FaultToleranceCannotEditMem extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
            vm: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FaultToleranceCpuIncompatible extends vsanhealthService.vim.CpuIncompatible {
            model: boolean;
            family: boolean;
            stepping: boolean;
         }
         interface FaultToleranceNeedsThickDisk extends vsanhealthService.vim.MigrationFault {
            vmName: string;
         }
         interface FaultToleranceNotLicensed extends vsanhealthService.vim.VmFaultToleranceIssue {
            hostName?: string;
         }
         interface FaultToleranceNotSameBuild extends vsanhealthService.vim.MigrationFault {
            build: string;
         }
         interface FaultTolerancePrimaryPowerOnNotAttempted extends vsanhealthService.vim.VmFaultToleranceIssue {
            secondaryVm: vsanhealthService.vim.ManagedObjectReference;
            primaryVm: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FaultToleranceVmNotDasProtected extends vsanhealthService.vim.VimFault {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface FcoeFault extends vsanhealthService.vim.VimFault {
         }
         interface FcoeFaultPnicHasNoPortSet extends vsanhealthService.vim.FcoeFault {
            nicDevice: string;
         }
         interface FeatureRequirementsNotMet extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            featureRequirement?: Array<vsanhealthService.vim.VirtualMachineFeatureRequirement>;
            vm?: vsanhealthService.vim.ManagedObjectReference;
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FileAlreadyExists extends vsanhealthService.vim.FileFault {
         }
         interface FileBackedPortNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface FileFault extends vsanhealthService.vim.VimFault {
            file: string;
         }
         interface FileLocked extends vsanhealthService.vim.FileFault {
         }
         interface FileNameTooLong extends vsanhealthService.vim.FileFault {
         }
         interface FileNotFound extends vsanhealthService.vim.FileFault {
         }
         interface FileNotWritable extends vsanhealthService.vim.FileFault {
         }
         interface FileTooLarge extends vsanhealthService.vim.FileFault {
            datastore: string;
            fileSize: number;
            maxFileSize?: number;
         }
         interface FilesystemQuiesceFault extends vsanhealthService.vim.SnapshotFault {
         }
         interface FilterInUse extends vsanhealthService.vim.ResourceInUse {
            disk?: Array<vsanhealthService.vim.VirtualDiskId>;
         }
         enum FtIssuesOnHostHostSelectionType {
            "user",
            "vc",
            "drs",
         }
         interface FtIssuesOnHost extends vsanhealthService.vim.VmFaultToleranceIssue {
            host: vsanhealthService.vim.ManagedObjectReference;
            hostName: string;
            errors?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface FullStorageVMotionNotSupported extends vsanhealthService.vim.MigrationFeatureNotSupported {
         }
         interface GatewayConnectFault extends vsanhealthService.vim.HostConnectFault {
            gatewayType: string;
            gatewayId: string;
            gatewayInfo: string;
            details?: vsanhealthService.vim.LocalizableMessage;
         }
         interface GatewayHostNotReachable extends vsanhealthService.vim.GatewayToHostConnectFault {
         }
         interface GatewayNotFound extends vsanhealthService.vim.GatewayConnectFault {
         }
         interface GatewayNotReachable extends vsanhealthService.vim.GatewayConnectFault {
         }
         interface GatewayOperationRefused extends vsanhealthService.vim.GatewayConnectFault {
         }
         interface GatewayToHostAuthFault extends vsanhealthService.vim.GatewayToHostConnectFault {
            invalidProperties: Array<string>;
            missingProperties: Array<string>;
         }
         interface GatewayToHostConnectFault extends vsanhealthService.vim.GatewayConnectFault {
            hostname: string;
            port?: number;
         }
         interface GatewayToHostTrustVerifyFault extends vsanhealthService.vim.GatewayToHostConnectFault {
            verificationToken: string;
            propertiesToVerify: Array<vsanhealthService.vim.KeyValue>;
         }
         interface GenericDrsFault extends vsanhealthService.vim.VimFault {
            hostFaults?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface GenericVmConfigFault extends vsanhealthService.vim.VmConfigFault {
            reason: string;
         }
         interface GuestAuthenticationChallenge extends vsanhealthService.vim.GuestOperationsFault {
            serverChallenge: vsanhealthService.vim.GuestAuthentication;
            sessionID: number;
         }
         interface GuestComponentsOutOfDate extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface GuestMultipleMappings extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface GuestOperationsFault extends vsanhealthService.vim.VimFault {
         }
         interface GuestOperationsUnavailable extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface GuestPermissionDenied extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface GuestProcessNotFound extends vsanhealthService.vim.GuestOperationsFault {
            pid: number;
         }
         interface GuestRegistryFault extends vsanhealthService.vim.GuestOperationsFault {
            windowsSystemErrorCode: number;
         }
         interface GuestRegistryKeyAlreadyExists extends vsanhealthService.vim.GuestRegistryKeyFault {
         }
         interface GuestRegistryKeyFault extends vsanhealthService.vim.GuestRegistryFault {
            keyName: string;
         }
         interface GuestRegistryKeyHasSubkeys extends vsanhealthService.vim.GuestRegistryKeyFault {
         }
         interface GuestRegistryKeyInvalid extends vsanhealthService.vim.GuestRegistryKeyFault {
         }
         interface GuestRegistryKeyParentVolatile extends vsanhealthService.vim.GuestRegistryKeyFault {
         }
         interface GuestRegistryValueFault extends vsanhealthService.vim.GuestRegistryFault {
            keyName: string;
            valueName: string;
         }
         interface GuestRegistryValueNotFound extends vsanhealthService.vim.GuestRegistryValueFault {
         }
         interface HAErrorsAtDest extends vsanhealthService.vim.MigrationFault {
         }
         interface HeterogenousHostsBlockingEVC extends vsanhealthService.vim.EVCConfigFault {
         }
         interface HostAccessRestrictedToManagementServer extends vsanhealthService.vim.NotSupported {
            managementServer: string;
         }
         interface HostConfigFailed extends vsanhealthService.vim.HostConfigFault {
            failure: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface HostConfigFault extends vsanhealthService.vim.VimFault {
         }
         interface HostConnectFault extends vsanhealthService.vim.VimFault {
         }
         enum HostHasComponentFailureHostComponentType {
            "Datastore",
         }
         interface HostHasComponentFailure extends vsanhealthService.vim.VimFault {
            hostName: string;
            componentType: string;
            componentName: string;
         }
         interface HostInDomain extends vsanhealthService.vim.HostConfigFault {
         }
         enum HostIncompatibleForFaultToleranceReason {
            "product",
            "processor",
         }
         interface HostIncompatibleForFaultTolerance extends vsanhealthService.vim.VmFaultToleranceIssue {
            hostName?: string;
            reason?: string;
         }
         enum HostIncompatibleForRecordReplayReason {
            "product",
            "processor",
         }
         interface HostIncompatibleForRecordReplay extends vsanhealthService.vim.VimFault {
            hostName?: string;
            reason?: string;
         }
         interface HostInventoryFull extends vsanhealthService.vim.NotEnoughLicenses {
            capacity: number;
         }
         interface HostPowerOpFailed extends vsanhealthService.vim.VimFault {
         }
         interface HostSpecificationOperationFailed extends vsanhealthService.vim.VimFault {
            host: vsanhealthService.vim.ManagedObjectReference;
         }
         interface HotSnapshotMoveNotSupported extends vsanhealthService.vim.SnapshotCopyNotSupported {
         }
         interface IDEDiskNotSupported extends vsanhealthService.vim.DiskNotSupported {
         }
         interface IORMNotSupportedHostOnDatastore extends vsanhealthService.vim.VimFault {
            datastore: vsanhealthService.vim.ManagedObjectReference;
            datastoreName: string;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ImportHostAddFailure extends vsanhealthService.vim.DvsFault {
            hostIp: Array<string>;
         }
         interface ImportOperationBulkFaultFaultOnImport extends vsanhealthService.vim.DynamicData {
            entityType?: string;
            key?: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfImportOperationBulkFaultFaultOnImport {
            ImportOperationBulkFaultFaultOnImport?: Array<vsanhealthService.vim.ImportOperationBulkFaultFaultOnImport>;
         }
         interface ImportOperationBulkFault extends vsanhealthService.vim.DvsFault {
            importFaults: Array<vsanhealthService.vim.ImportOperationBulkFaultFaultOnImport>;
         }
         interface InUseFeatureManipulationDisallowed extends vsanhealthService.vim.NotEnoughLicenses {
         }
         interface InaccessibleDatastore extends vsanhealthService.vim.InvalidDatastore {
            detail?: string;
         }
         interface InaccessibleFTMetadataDatastore extends vsanhealthService.vim.InaccessibleDatastore {
         }
         interface InaccessibleVFlashSource extends vsanhealthService.vim.VimFault {
            hostName: string;
         }
         interface IncompatibleDefaultDevice extends vsanhealthService.vim.MigrationFault {
            device: string;
         }
         interface IncompatibleHostForFtSecondary extends vsanhealthService.vim.VmFaultToleranceIssue {
            host: vsanhealthService.vim.ManagedObjectReference;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         enum IncompatibleHostForVmReplicationIncompatibleReason {
            "rpo",
            "netCompression",
         }
         interface IncompatibleHostForVmReplication extends vsanhealthService.vim.ReplicationFault {
            vmName: string;
            hostName: string;
            reason: string;
         }
         interface IncompatibleSetting extends vsanhealthService.vim.InvalidArgument {
            conflictingProperty: string;
         }
         interface IncorrectFileType extends vsanhealthService.vim.FileFault {
         }
         interface IncorrectHostInformation extends vsanhealthService.vim.NotEnoughLicenses {
         }
         interface IndependentDiskVMotionNotSupported extends vsanhealthService.vim.MigrationFeatureNotSupported {
         }
         interface InsufficientAgentVmsDeployed extends vsanhealthService.vim.InsufficientResourcesFault {
            hostName: string;
            requiredNumAgentVms: number;
            currentNumAgentVms: number;
         }
         interface InsufficientCpuResourcesFault extends vsanhealthService.vim.InsufficientResourcesFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientDisks extends vsanhealthService.vim.VsanDiskFault {
         }
         interface InsufficientFailoverResourcesFault extends vsanhealthService.vim.InsufficientResourcesFault {
         }
         interface InsufficientGraphicsResourcesFault extends vsanhealthService.vim.InsufficientResourcesFault {
         }
         interface InsufficientHostCapacityFault extends vsanhealthService.vim.InsufficientResourcesFault {
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface InsufficientHostCpuCapacityFault extends vsanhealthService.vim.InsufficientHostCapacityFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientHostMemoryCapacityFault extends vsanhealthService.vim.InsufficientHostCapacityFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientMemoryResourcesFault extends vsanhealthService.vim.InsufficientResourcesFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientNetworkCapacity extends vsanhealthService.vim.InsufficientResourcesFault {
         }
         interface InsufficientNetworkResourcePoolCapacity extends vsanhealthService.vim.InsufficientResourcesFault {
            dvsName: string;
            dvsUuid: string;
            resourcePoolKey: string;
            available: number;
            requested: number;
            device: Array<string>;
         }
         interface InsufficientPerCpuCapacity extends vsanhealthService.vim.InsufficientHostCapacityFault {
         }
         interface InsufficientResourcesFault extends vsanhealthService.vim.VimFault {
         }
         interface InsufficientStandbyCpuResource extends vsanhealthService.vim.InsufficientStandbyResource {
            available: number;
            requested: number;
         }
         interface InsufficientStandbyMemoryResource extends vsanhealthService.vim.InsufficientStandbyResource {
            available: number;
            requested: number;
         }
         interface InsufficientStandbyResource extends vsanhealthService.vim.InsufficientResourcesFault {
         }
         interface InsufficientStorageIops extends vsanhealthService.vim.VimFault {
            unreservedIops: number;
            requestedIops: number;
            datastoreName: string;
         }
         interface InsufficientStorageSpace extends vsanhealthService.vim.InsufficientResourcesFault {
         }
         interface InsufficientVFlashResourcesFault extends vsanhealthService.vim.InsufficientResourcesFault {
            freeSpaceInMB?: number;
            freeSpace: number;
            requestedSpaceInMB?: number;
            requestedSpace: number;
         }
         interface InvalidAffinitySettingFault extends vsanhealthService.vim.VimFault {
         }
         interface InvalidBmcRole extends vsanhealthService.vim.VimFault {
         }
         interface InvalidBundle extends vsanhealthService.vim.PlatformConfigFault {
         }
         interface InvalidCAMCertificate extends vsanhealthService.vim.InvalidCAMServer {
         }
         interface InvalidCAMServer extends vsanhealthService.vim.ActiveDirectoryFault {
            camServer: string;
         }
         interface InvalidClientCertificate extends vsanhealthService.vim.InvalidLogin {
         }
         interface InvalidController extends vsanhealthService.vim.InvalidDeviceSpec {
            controllerKey: number;
         }
         enum InvalidDasConfigArgumentEntryForInvalidArgument {
            "admissionControl",
            "userHeartbeatDs",
            "vmConfig",
         }
         interface InvalidDasConfigArgument extends vsanhealthService.vim.InvalidArgument {
            entry?: string;
            clusterName?: string;
         }
         interface InvalidDasRestartPriorityForFtVm extends vsanhealthService.vim.InvalidArgument {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface InvalidDatastore extends vsanhealthService.vim.VimFault {
            datastore?: vsanhealthService.vim.ManagedObjectReference;
            name?: string;
         }
         interface InvalidDatastorePath extends vsanhealthService.vim.InvalidDatastore {
            datastorePath: string;
         }
         interface InvalidDatastoreState extends vsanhealthService.vim.InvalidState {
            datastoreName?: string;
         }
         interface InvalidDeviceBacking extends vsanhealthService.vim.InvalidDeviceSpec {
         }
         interface InvalidDeviceOperation extends vsanhealthService.vim.InvalidDeviceSpec {
            badOp?: vsanhealthService.vim.VirtualDeviceConfigSpecOperation;
            badFileOp?: vsanhealthService.vim.VirtualDeviceConfigSpecFileOperation;
         }
         interface InvalidDeviceSpec extends vsanhealthService.vim.InvalidVmConfig {
            deviceIndex: number;
         }
         interface InvalidDiskFormat extends vsanhealthService.vim.InvalidFormat {
         }
         interface InvalidDrsBehaviorForFtVm extends vsanhealthService.vim.InvalidArgument {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface InvalidEditionLicense extends vsanhealthService.vim.NotEnoughLicenses {
            feature: string;
         }
         interface InvalidEvent extends vsanhealthService.vim.VimFault {
         }
         interface InvalidFolder extends vsanhealthService.vim.VimFault {
            target: vsanhealthService.vim.ManagedObjectReference;
         }
         interface InvalidFormat extends vsanhealthService.vim.VmConfigFault {
         }
         interface InvalidGuestLogin extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface InvalidHostConnectionState extends vsanhealthService.vim.InvalidHostState {
         }
         interface InvalidHostName extends vsanhealthService.vim.HostConfigFault {
         }
         interface InvalidHostState extends vsanhealthService.vim.InvalidState {
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface InvalidIndexArgument extends vsanhealthService.vim.InvalidArgument {
            key: string;
         }
         interface InvalidIpfixConfig extends vsanhealthService.vim.DvsFault {
            property?: string;
         }
         interface InvalidIpmiLoginInfo extends vsanhealthService.vim.VimFault {
         }
         interface InvalidIpmiMacAddress extends vsanhealthService.vim.VimFault {
            userProvidedMacAddress: string;
            observedMacAddress: string;
         }
         interface InvalidLicense extends vsanhealthService.vim.VimFault {
            licenseContent: string;
         }
         interface InvalidLocale extends vsanhealthService.vim.VimFault {
         }
         interface InvalidLogin extends vsanhealthService.vim.VimFault {
         }
         interface InvalidName extends vsanhealthService.vim.VimFault {
            name: string;
            entity?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface InvalidNasCredentials extends vsanhealthService.vim.NasConfigFault {
            userName: string;
         }
         interface InvalidNetworkInType extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface InvalidNetworkResource extends vsanhealthService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
         }
         interface InvalidOperationOnSecondaryVm extends vsanhealthService.vim.VmFaultToleranceIssue {
            instanceUuid?: string;
         }
         interface InvalidPowerState extends vsanhealthService.vim.InvalidState {
            requestedState?: vsanhealthService.vim.VirtualMachinePowerState;
            existingState: vsanhealthService.vim.VirtualMachinePowerState;
         }
         interface InvalidPrivilege extends vsanhealthService.vim.VimFault {
            privilege: string;
         }
         enum InvalidProfileReferenceHostReason {
            "incompatibleVersion",
            "missingReferenceHost",
         }
         interface InvalidProfileReferenceHost extends vsanhealthService.vim.RuntimeFault {
            reason?: string;
            host?: vsanhealthService.vim.ManagedObjectReference;
            profile?: vsanhealthService.vim.ManagedObjectReference;
            profileName?: string;
         }
         interface InvalidPropertyType extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface InvalidPropertyValue extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface InvalidResourcePoolStructureFault extends vsanhealthService.vim.InsufficientResourcesFault {
         }
         interface InvalidSnapshotFormat extends vsanhealthService.vim.InvalidFormat {
         }
         interface InvalidState extends vsanhealthService.vim.VimFault {
         }
         interface InvalidVmConfig extends vsanhealthService.vim.VmConfigFault {
            property?: string;
         }
         interface InvalidVmState extends vsanhealthService.vim.InvalidState {
            vm: vsanhealthService.vim.ManagedObjectReference;
         }
         interface InventoryHasStandardAloneHosts extends vsanhealthService.vim.NotEnoughLicenses {
            hosts: Array<string>;
         }
         interface IpHostnameGeneratorError extends vsanhealthService.vim.CustomizationFault {
         }
         interface IscsiFault extends vsanhealthService.vim.VimFault {
         }
         interface IscsiFaultInvalidVnic extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultPnicInUse extends vsanhealthService.vim.IscsiFault {
            pnicDevice: string;
         }
         interface IscsiFaultVnicAlreadyBound extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasActivePaths extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasMultipleUplinks extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasNoUplinks extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasWrongUplink extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicInUse extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicIsLastPath extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicNotBound extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicNotFound extends vsanhealthService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface LargeRDMConversionNotSupported extends vsanhealthService.vim.MigrationFault {
            device: string;
         }
         interface LargeRDMNotSupportedOnDatastore extends vsanhealthService.vim.VmConfigFault {
            device: string;
            datastore: vsanhealthService.vim.ManagedObjectReference;
            datastoreName: string;
         }
         interface LegacyNetworkInterfaceInUse extends vsanhealthService.vim.CannotAccessNetwork {
         }
         enum LicenseAssignmentFailedReason {
            "keyEntityMismatch",
            "downgradeDisallowed",
            "inventoryNotManageableByVirtualCenter",
            "hostsUnmanageableByVirtualCenterWithoutLicenseServer",
         }
         interface LicenseAssignmentFailed extends vsanhealthService.vim.RuntimeFault {
            reason?: string;
         }
         interface LicenseDowngradeDisallowed extends vsanhealthService.vim.NotEnoughLicenses {
            edition: string;
            entityId: string;
            features: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface LicenseEntityNotFound extends vsanhealthService.vim.VimFault {
            entityId: string;
         }
         interface LicenseExpired extends vsanhealthService.vim.NotEnoughLicenses {
            licenseKey: string;
         }
         interface LicenseKeyEntityMismatch extends vsanhealthService.vim.NotEnoughLicenses {
         }
         interface LicenseRestricted extends vsanhealthService.vim.NotEnoughLicenses {
         }
         interface LicenseServerUnavailable extends vsanhealthService.vim.VimFault {
            licenseServer: string;
         }
         interface LicenseSourceUnavailable extends vsanhealthService.vim.NotEnoughLicenses {
            licenseSource: vsanhealthService.vim.LicenseSource;
         }
         interface LimitExceeded extends vsanhealthService.vim.VimFault {
            property?: string;
            limit?: number;
         }
         interface LinuxVolumeNotClean extends vsanhealthService.vim.CustomizationFault {
         }
         interface LogBundlingFailed extends vsanhealthService.vim.VimFault {
         }
         interface MaintenanceModeFileMove extends vsanhealthService.vim.MigrationFault {
         }
         interface MemoryFileFormatNotSupportedByDatastore extends vsanhealthService.vim.UnsupportedDatastore {
            datastoreName: string;
            type: string;
         }
         interface MemoryHotPlugNotSupported extends vsanhealthService.vim.VmConfigFault {
         }
         interface MemorySizeNotRecommended extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            memorySizeMB: number;
            minMemorySizeMB: number;
            maxMemorySizeMB: number;
         }
         interface MemorySizeNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            memorySizeMB: number;
            minMemorySizeMB: number;
            maxMemorySizeMB: number;
         }
         interface MemorySizeNotSupportedByDatastore extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            datastore: vsanhealthService.vim.ManagedObjectReference;
            memorySizeMB: number;
            maxMemorySizeMB: number;
         }
         interface MemorySnapshotOnIndependentDisk extends vsanhealthService.vim.SnapshotFault {
         }
         interface MethodAlreadyDisabledFault extends vsanhealthService.vim.RuntimeFault {
            sourceId: string;
         }
         interface MethodDisabled extends vsanhealthService.vim.RuntimeFault {
            source?: string;
         }
         interface MigrationDisabled extends vsanhealthService.vim.MigrationFault {
         }
         interface MigrationFault extends vsanhealthService.vim.VimFault {
         }
         interface MigrationFeatureNotSupported extends vsanhealthService.vim.MigrationFault {
            atSourceHost: boolean;
            failedHostName: string;
            failedHost: vsanhealthService.vim.ManagedObjectReference;
         }
         interface MigrationNotReady extends vsanhealthService.vim.MigrationFault {
            reason: string;
         }
         interface MismatchedBundle extends vsanhealthService.vim.VimFault {
            bundleUuid: string;
            hostUuid: string;
            bundleBuildNumber: number;
            hostBuildNumber: number;
         }
         interface MismatchedNetworkPolicies extends vsanhealthService.vim.MigrationFault {
            device: string;
            backing: string;
            connected: boolean;
         }
         interface MismatchedVMotionNetworkNames extends vsanhealthService.vim.MigrationFault {
            sourceNetwork: string;
            destNetwork: string;
         }
         interface MissingBmcSupport extends vsanhealthService.vim.VimFault {
         }
         interface MissingController extends vsanhealthService.vim.InvalidDeviceSpec {
         }
         interface MissingIpPool extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface MissingLinuxCustResources extends vsanhealthService.vim.CustomizationFault {
         }
         interface MissingNetworkIpConfig extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface MissingPowerOffConfiguration extends vsanhealthService.vim.VAppConfigFault {
         }
         interface MissingPowerOnConfiguration extends vsanhealthService.vim.VAppConfigFault {
         }
         interface MissingWindowsCustResources extends vsanhealthService.vim.CustomizationFault {
         }
         interface MksConnectionLimitReached extends vsanhealthService.vim.InvalidState {
            connectionLimit: number;
         }
         interface MountError extends vsanhealthService.vim.CustomizationFault {
            vm: vsanhealthService.vim.ManagedObjectReference;
            diskIndex: number;
         }
         interface MultiWriterNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface MultipleCertificatesVerifyFaultThumbprintData extends vsanhealthService.vim.DynamicData {
            port: number;
            thumbprint: string;
         }
         interface ArrayOfMultipleCertificatesVerifyFaultThumbprintData {
            MultipleCertificatesVerifyFaultThumbprintData?: Array<vsanhealthService.vim.MultipleCertificatesVerifyFaultThumbprintData>;
         }
         interface MultipleCertificatesVerifyFault extends vsanhealthService.vim.HostConnectFault {
            thumbprintData: Array<vsanhealthService.vim.MultipleCertificatesVerifyFaultThumbprintData>;
         }
         interface MultipleSnapshotsNotSupported extends vsanhealthService.vim.SnapshotFault {
         }
         interface NamespaceFull extends vsanhealthService.vim.VimFault {
            name: string;
            currentMaxSize: number;
            requiredSize?: number;
         }
         interface NamespaceLimitReached extends vsanhealthService.vim.VimFault {
            limit?: number;
         }
         interface NamespaceWriteProtected extends vsanhealthService.vim.VimFault {
            name: string;
         }
         interface NasConfigFault extends vsanhealthService.vim.HostConfigFault {
            name: string;
         }
         interface NasConnectionLimitReached extends vsanhealthService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
         }
         interface NasSessionCredentialConflict extends vsanhealthService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
            userName: string;
         }
         interface NasVolumeNotMounted extends vsanhealthService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
         }
         interface NetworkCopyFault extends vsanhealthService.vim.FileFault {
         }
         interface NetworkDisruptedAndConfigRolledBack extends vsanhealthService.vim.VimFault {
            host: string;
         }
         interface NetworkInaccessible extends vsanhealthService.vim.NasConfigFault {
         }
         interface NetworksMayNotBeTheSame extends vsanhealthService.vim.MigrationFault {
            name?: string;
         }
         interface NicSettingMismatch extends vsanhealthService.vim.CustomizationFault {
            numberOfNicsInSpec: number;
            numberOfNicsInVM: number;
         }
         interface NoActiveHostInCluster extends vsanhealthService.vim.InvalidState {
            computeResource: vsanhealthService.vim.ManagedObjectReference;
         }
         interface NoAvailableIp extends vsanhealthService.vim.VAppPropertyFault {
            network: vsanhealthService.vim.ManagedObjectReference;
         }
         interface NoClientCertificate extends vsanhealthService.vim.VimFault {
         }
         interface NoCompatibleDatastore extends vsanhealthService.vim.VimFault {
         }
         interface NoCompatibleHardAffinityHost extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
         }
         interface NoCompatibleHost extends vsanhealthService.vim.VimFault {
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface NoCompatibleHostWithAccessToDevice extends vsanhealthService.vim.NoCompatibleHost {
         }
         interface NoCompatibleSoftAffinityHost extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
         }
         interface NoConnectedDatastore extends vsanhealthService.vim.VimFault {
         }
         interface NoDiskFound extends vsanhealthService.vim.VimFault {
         }
         interface NoDiskSpace extends vsanhealthService.vim.FileFault {
            datastore: string;
         }
         interface NoDisksToCustomize extends vsanhealthService.vim.CustomizationFault {
         }
         interface NoGateway extends vsanhealthService.vim.HostConfigFault {
         }
         interface NoGuestHeartbeat extends vsanhealthService.vim.MigrationFault {
         }
         interface NoHost extends vsanhealthService.vim.HostConnectFault {
            name?: string;
         }
         interface NoHostSuitableForFtSecondary extends vsanhealthService.vim.VmFaultToleranceIssue {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface NoLicenseServerConfigured extends vsanhealthService.vim.NotEnoughLicenses {
         }
         interface NoPeerHostFound extends vsanhealthService.vim.HostPowerOpFailed {
         }
         interface NoPermission extends vsanhealthService.vim.SecurityError {
            object: vsanhealthService.vim.ManagedObjectReference;
            privilegeId: string;
         }
         interface NoPermissionOnAD extends vsanhealthService.vim.ActiveDirectoryFault {
         }
         interface NoPermissionOnHost extends vsanhealthService.vim.HostConnectFault {
         }
         interface NoPermissionOnNasVolume extends vsanhealthService.vim.NasConfigFault {
            userName?: string;
         }
         interface NoSubjectName extends vsanhealthService.vim.VimFault {
         }
         interface NoVcManagedIpConfigured extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface NoVirtualNic extends vsanhealthService.vim.HostConfigFault {
         }
         interface NoVmInVApp extends vsanhealthService.vim.VAppConfigFault {
         }
         interface NonADUserRequired extends vsanhealthService.vim.ActiveDirectoryFault {
         }
         interface NonHomeRDMVMotionNotSupported extends vsanhealthService.vim.MigrationFeatureNotSupported {
            device: string;
         }
         interface NonPersistentDisksNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface NonVmwareOuiMacNotSupportedHost extends vsanhealthService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotADirectory extends vsanhealthService.vim.FileFault {
         }
         interface NotAFile extends vsanhealthService.vim.FileFault {
         }
         interface NotAuthenticated extends vsanhealthService.vim.NoPermission {
         }
         interface NotEnoughCpus extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            numCpuDest: number;
            numCpuVm: number;
         }
         interface NotEnoughLogicalCpus extends vsanhealthService.vim.NotEnoughCpus {
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface NotFound extends vsanhealthService.vim.VimFault {
         }
         enum NotSupportedDeviceForFTDeviceType {
            "virtualVmxnet3",
            "paraVirtualSCSIController",
         }
         interface NotSupportedDeviceForFT extends vsanhealthService.vim.VmFaultToleranceIssue {
            host: vsanhealthService.vim.ManagedObjectReference;
            hostName?: string;
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName?: string;
            deviceType: string;
            deviceLabel?: string;
         }
         interface NotSupportedHost extends vsanhealthService.vim.HostConnectFault {
            productName?: string;
            productVersion?: string;
         }
         interface NotSupportedHostForChecksum extends vsanhealthService.vim.VimFault {
         }
         interface NotSupportedHostForVFlash extends vsanhealthService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotSupportedHostForVmcp extends vsanhealthService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotSupportedHostForVmemFile extends vsanhealthService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotSupportedHostForVsan extends vsanhealthService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotSupportedHostInCluster extends vsanhealthService.vim.NotSupportedHost {
         }
         interface NotSupportedHostInDvs extends vsanhealthService.vim.NotSupportedHost {
            switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface NotSupportedHostInHACluster extends vsanhealthService.vim.NotSupportedHost {
            hostName: string;
            build: string;
         }
         interface NotUserConfigurableProperty extends vsanhealthService.vim.VAppPropertyFault {
         }
         interface NumVirtualCoresPerSocketNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            maxSupportedCoresPerSocketDest: number;
            numCoresPerSocketVm: number;
         }
         interface NumVirtualCpusExceedsLimit extends vsanhealthService.vim.InsufficientResourcesFault {
            maxSupportedVcpus: number;
         }
         enum NumVirtualCpusIncompatibleReason {
            "recordReplay",
            "faultTolerance",
         }
         interface NumVirtualCpusIncompatible extends vsanhealthService.vim.VmConfigFault {
            reason: string;
            numCpu: number;
         }
         interface NumVirtualCpusNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            maxSupportedVcpusDest: number;
            numCpuVm: number;
         }
         interface OperationDisabledByGuest extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface OperationDisallowedOnHost extends vsanhealthService.vim.RuntimeFault {
         }
         interface OperationNotSupportedByGuest extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface OutOfBounds extends vsanhealthService.vim.VimFault {
            argumentName: string;
         }
         interface OvfAttribute extends vsanhealthService.vim.OvfInvalidPackage {
            elementName: string;
            attributeName: string;
         }
         interface OvfConnectedDevice extends vsanhealthService.vim.OvfHardwareExport {
         }
         interface OvfConnectedDeviceFloppy extends vsanhealthService.vim.OvfConnectedDevice {
            filename: string;
         }
         interface OvfConnectedDeviceIso extends vsanhealthService.vim.OvfConnectedDevice {
            filename: string;
         }
         interface OvfConstraint extends vsanhealthService.vim.OvfInvalidPackage {
            name: string;
         }
         interface OvfConsumerCallbackFault extends vsanhealthService.vim.OvfFault {
            extensionKey: string;
            extensionName: string;
         }
         interface OvfConsumerCommunicationError extends vsanhealthService.vim.OvfConsumerCallbackFault {
            description: string;
         }
         interface OvfConsumerFault extends vsanhealthService.vim.OvfConsumerCallbackFault {
            errorKey: string;
            message: string;
            params?: Array<vsanhealthService.vim.KeyValue>;
         }
         interface OvfConsumerInvalidSection extends vsanhealthService.vim.OvfConsumerCallbackFault {
            lineNumber: number;
            description: string;
         }
         interface OvfConsumerPowerOnFault extends vsanhealthService.vim.InvalidState {
            extensionKey: string;
            extensionName: string;
            description: string;
         }
         interface OvfConsumerUndeclaredSection extends vsanhealthService.vim.OvfConsumerCallbackFault {
            qualifiedSectionType: string;
         }
         interface OvfConsumerUndefinedPrefix extends vsanhealthService.vim.OvfConsumerCallbackFault {
            prefix: string;
         }
         interface OvfConsumerValidationFault extends vsanhealthService.vim.VmConfigFault {
            extensionKey: string;
            extensionName: string;
            message: string;
         }
         interface OvfCpuCompatibility extends vsanhealthService.vim.OvfImport {
            registerName: string;
            level: number;
            registerValue: string;
            desiredRegisterValue: string;
         }
         interface OvfCpuCompatibilityCheckNotSupported extends vsanhealthService.vim.OvfImport {
         }
         interface OvfDiskMappingNotFound extends vsanhealthService.vim.OvfSystemFault {
            diskName: string;
            vmName: string;
         }
         interface OvfDiskOrderConstraint extends vsanhealthService.vim.OvfConstraint {
         }
         interface OvfDuplicateElement extends vsanhealthService.vim.OvfElement {
         }
         interface OvfDuplicatedElementBoundary extends vsanhealthService.vim.OvfElement {
            boundary: string;
         }
         interface OvfDuplicatedPropertyIdExport extends vsanhealthService.vim.OvfExport {
            fqid: string;
         }
         interface OvfDuplicatedPropertyIdImport extends vsanhealthService.vim.OvfExport {
         }
         interface OvfElement extends vsanhealthService.vim.OvfInvalidPackage {
            name: string;
         }
         interface OvfElementInvalidValue extends vsanhealthService.vim.OvfElement {
            value: string;
         }
         interface OvfExport extends vsanhealthService.vim.OvfFault {
         }
         interface OvfExportFailed extends vsanhealthService.vim.OvfExport {
         }
         interface OvfFault extends vsanhealthService.vim.VimFault {
         }
         interface OvfHardwareCheck extends vsanhealthService.vim.OvfImport {
         }
         interface OvfHardwareExport extends vsanhealthService.vim.OvfExport {
            device?: vsanhealthService.vim.VirtualDevice;
            vmPath: string;
         }
         interface OvfHostResourceConstraint extends vsanhealthService.vim.OvfConstraint {
            value: string;
         }
         interface OvfHostValueNotParsed extends vsanhealthService.vim.OvfSystemFault {
            property: string;
            value: string;
         }
         interface OvfImport extends vsanhealthService.vim.OvfFault {
         }
         interface OvfImportFailed extends vsanhealthService.vim.OvfImport {
         }
         interface OvfInternalError extends vsanhealthService.vim.OvfSystemFault {
         }
         interface OvfInvalidPackage extends vsanhealthService.vim.OvfFault {
            lineNumber: number;
         }
         interface OvfInvalidValue extends vsanhealthService.vim.OvfAttribute {
            value: string;
         }
         interface OvfInvalidValueConfiguration extends vsanhealthService.vim.OvfInvalidValue {
         }
         interface OvfInvalidValueEmpty extends vsanhealthService.vim.OvfInvalidValue {
         }
         interface OvfInvalidValueFormatMalformed extends vsanhealthService.vim.OvfInvalidValue {
         }
         interface OvfInvalidValueReference extends vsanhealthService.vim.OvfInvalidValue {
         }
         interface OvfInvalidVmName extends vsanhealthService.vim.OvfUnsupportedPackage {
            name: string;
         }
         interface OvfMappedOsId extends vsanhealthService.vim.OvfImport {
            ovfId: number;
            ovfDescription: string;
            targetDescription: string;
         }
         interface OvfMissingAttribute extends vsanhealthService.vim.OvfAttribute {
         }
         interface OvfMissingElement extends vsanhealthService.vim.OvfElement {
         }
         interface OvfMissingElementNormalBoundary extends vsanhealthService.vim.OvfMissingElement {
            boundary: string;
         }
         interface OvfMissingHardware extends vsanhealthService.vim.OvfImport {
            name: string;
            resourceType: number;
         }
         interface OvfNetworkMappingNotSupported extends vsanhealthService.vim.OvfImport {
         }
         interface OvfNoHostNic extends vsanhealthService.vim.OvfUnsupportedPackage {
         }
         interface OvfNoSpaceOnController extends vsanhealthService.vim.OvfUnsupportedElement {
            parent: string;
         }
         interface OvfNoSupportedHardwareFamily extends vsanhealthService.vim.OvfUnsupportedPackage {
            version: string;
         }
         interface OvfProperty extends vsanhealthService.vim.OvfInvalidPackage {
            type: string;
            value: string;
         }
         interface OvfPropertyExport extends vsanhealthService.vim.OvfExport {
            type: string;
            value: string;
         }
         interface OvfPropertyNetwork extends vsanhealthService.vim.OvfProperty {
         }
         interface OvfPropertyNetworkExport extends vsanhealthService.vim.OvfExport {
            network: string;
         }
         interface OvfPropertyQualifier extends vsanhealthService.vim.OvfProperty {
            qualifier: string;
         }
         interface OvfPropertyQualifierDuplicate extends vsanhealthService.vim.OvfProperty {
            qualifier: string;
         }
         interface OvfPropertyQualifierIgnored extends vsanhealthService.vim.OvfProperty {
            qualifier: string;
         }
         interface OvfPropertyType extends vsanhealthService.vim.OvfProperty {
         }
         interface OvfPropertyValue extends vsanhealthService.vim.OvfProperty {
         }
         interface OvfSystemFault extends vsanhealthService.vim.OvfFault {
         }
         interface OvfToXmlUnsupportedElement extends vsanhealthService.vim.OvfSystemFault {
            name?: string;
         }
         interface OvfUnableToExportDisk extends vsanhealthService.vim.OvfHardwareExport {
            diskName: string;
         }
         interface OvfUnexpectedElement extends vsanhealthService.vim.OvfElement {
         }
         interface OvfUnknownDevice extends vsanhealthService.vim.OvfSystemFault {
            device?: vsanhealthService.vim.VirtualDevice;
            vmName: string;
         }
         interface OvfUnknownDeviceBacking extends vsanhealthService.vim.OvfHardwareExport {
            backing: vsanhealthService.vim.VirtualDeviceBackingInfo;
         }
         interface OvfUnknownEntity extends vsanhealthService.vim.OvfSystemFault {
            lineNumber: number;
         }
         interface OvfUnsupportedAttribute extends vsanhealthService.vim.OvfUnsupportedPackage {
            elementName: string;
            attributeName: string;
         }
         interface OvfUnsupportedAttributeValue extends vsanhealthService.vim.OvfUnsupportedAttribute {
            value: string;
         }
         interface OvfUnsupportedDeviceBackingInfo extends vsanhealthService.vim.OvfSystemFault {
            elementName?: string;
            instanceId?: string;
            deviceName: string;
            backingName?: string;
         }
         interface OvfUnsupportedDeviceBackingOption extends vsanhealthService.vim.OvfSystemFault {
            elementName?: string;
            instanceId?: string;
            deviceName: string;
            backingName?: string;
         }
         interface OvfUnsupportedDeviceExport extends vsanhealthService.vim.OvfHardwareExport {
         }
         interface OvfUnsupportedDiskProvisioning extends vsanhealthService.vim.OvfImport {
            diskProvisioning: string;
            supportedDiskProvisioning: string;
         }
         interface OvfUnsupportedElement extends vsanhealthService.vim.OvfUnsupportedPackage {
            name: string;
         }
         interface OvfUnsupportedElementValue extends vsanhealthService.vim.OvfUnsupportedElement {
            value: string;
         }
         interface OvfUnsupportedPackage extends vsanhealthService.vim.OvfFault {
            lineNumber?: number;
         }
         interface OvfUnsupportedSection extends vsanhealthService.vim.OvfUnsupportedElement {
            info: string;
         }
         interface OvfUnsupportedSubType extends vsanhealthService.vim.OvfUnsupportedPackage {
            elementName: string;
            instanceId: string;
            deviceType: number;
            deviceSubType: string;
         }
         interface OvfUnsupportedType extends vsanhealthService.vim.OvfUnsupportedPackage {
            name: string;
            instanceId: string;
            deviceType: number;
         }
         interface OvfWrongElement extends vsanhealthService.vim.OvfElement {
         }
         interface OvfWrongNamespace extends vsanhealthService.vim.OvfInvalidPackage {
            namespaceName: string;
         }
         interface OvfXmlFormat extends vsanhealthService.vim.OvfInvalidPackage {
            description: string;
         }
         interface PatchAlreadyInstalled extends vsanhealthService.vim.PatchNotApplicable {
         }
         interface PatchBinariesNotFound extends vsanhealthService.vim.VimFault {
            patchID: string;
            binary?: Array<string>;
         }
         interface PatchInstallFailed extends vsanhealthService.vim.PlatformConfigFault {
            rolledBack: boolean;
         }
         interface PatchIntegrityError extends vsanhealthService.vim.PlatformConfigFault {
         }
         interface PatchMetadataCorrupted extends vsanhealthService.vim.PatchMetadataInvalid {
         }
         interface PatchMetadataInvalid extends vsanhealthService.vim.VimFault {
            patchID: string;
            metaData?: Array<string>;
         }
         interface PatchMetadataNotFound extends vsanhealthService.vim.PatchMetadataInvalid {
         }
         interface PatchMissingDependencies extends vsanhealthService.vim.PatchNotApplicable {
            prerequisitePatch?: Array<string>;
            prerequisiteLib?: Array<string>;
         }
         interface PatchNotApplicable extends vsanhealthService.vim.VimFault {
            patchID: string;
         }
         interface PatchSuperseded extends vsanhealthService.vim.PatchNotApplicable {
            supersede?: Array<string>;
         }
         interface PhysCompatRDMNotSupported extends vsanhealthService.vim.RDMNotSupported {
         }
         interface PlatformConfigFault extends vsanhealthService.vim.HostConfigFault {
            text: string;
         }
         interface PowerOnFtSecondaryFailed extends vsanhealthService.vim.VmFaultToleranceIssue {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
            hostSelectionBy: vsanhealthService.vim.FtIssuesOnHostHostSelectionType;
            hostErrors?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            rootCause: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface PowerOnFtSecondaryTimedout extends vsanhealthService.vim.Timedout {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vmName: string;
            timeout: number;
         }
         interface ProfileUpdateFailedUpdateFailure extends vsanhealthService.vim.DynamicData {
            profilePath: vsanhealthService.vim.ProfilePropertyPath;
            errMsg: vsanhealthService.vim.LocalizableMessage;
         }
         interface ArrayOfProfileUpdateFailedUpdateFailure {
            ProfileUpdateFailedUpdateFailure?: Array<vsanhealthService.vim.ProfileUpdateFailedUpdateFailure>;
         }
         interface ProfileUpdateFailed extends vsanhealthService.vim.VimFault {
            failure: Array<vsanhealthService.vim.ProfileUpdateFailedUpdateFailure>;
         }
         enum QuarantineModeFaultFaultType {
            "NoCompatibleNonQuarantinedHost",
            "CorrectionDisallowed",
            "CorrectionImpact",
         }
         interface QuarantineModeFault extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
            faultType: string;
         }
         interface QuestionPending extends vsanhealthService.vim.InvalidState {
            text: string;
         }
         interface QuiesceDatastoreIOForHAFailed extends vsanhealthService.vim.ResourceInUse {
            host: vsanhealthService.vim.ManagedObjectReference;
            hostName: string;
            ds: vsanhealthService.vim.ManagedObjectReference;
            dsName: string;
         }
         interface RDMConversionNotSupported extends vsanhealthService.vim.MigrationFault {
            device: string;
         }
         interface RDMNotPreserved extends vsanhealthService.vim.MigrationFault {
            device: string;
         }
         interface RDMNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface RDMNotSupportedOnDatastore extends vsanhealthService.vim.VmConfigFault {
            device: string;
            datastore: vsanhealthService.vim.ManagedObjectReference;
            datastoreName: string;
         }
         interface RDMPointsToInaccessibleDisk extends vsanhealthService.vim.CannotAccessVmDisk {
         }
         interface RawDiskNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface ReadHostResourcePoolTreeFailed extends vsanhealthService.vim.HostConnectFault {
         }
         interface ReadOnlyDisksWithLegacyDestination extends vsanhealthService.vim.MigrationFault {
            roDiskCount: number;
            timeoutDanger: boolean;
         }
         interface RebootRequired extends vsanhealthService.vim.VimFault {
            patch?: string;
         }
         interface RecordReplayDisabled extends vsanhealthService.vim.VimFault {
         }
         interface RemoteDeviceNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface RemoveFailed extends vsanhealthService.vim.VimFault {
         }
         interface ReplicationConfigFault extends vsanhealthService.vim.ReplicationFault {
         }
         enum ReplicationDiskConfigFaultReasonForFault {
            "diskNotFound",
            "diskTypeNotSupported",
            "invalidDiskKey",
            "invalidDiskReplicationId",
            "duplicateDiskReplicationId",
            "invalidPersistentFilePath",
            "reconfigureDiskReplicationIdNotAllowed",
         }
         interface ReplicationDiskConfigFault extends vsanhealthService.vim.ReplicationConfigFault {
            reason?: string;
            vmRef?: vsanhealthService.vim.ManagedObjectReference;
            key?: number;
         }
         interface ReplicationFault extends vsanhealthService.vim.VimFault {
         }
         interface ReplicationIncompatibleWithFT extends vsanhealthService.vim.ReplicationFault {
         }
         interface ReplicationInvalidOptions extends vsanhealthService.vim.ReplicationFault {
            options: string;
            entity?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ReplicationNotSupportedOnHost extends vsanhealthService.vim.ReplicationFault {
         }
         enum ReplicationVmConfigFaultReasonForFault {
            "incompatibleHwVersion",
            "invalidVmReplicationId",
            "invalidGenerationNumber",
            "outOfBoundsRpoValue",
            "invalidDestinationIpAddress",
            "invalidDestinationPort",
            "invalidExtraVmOptions",
            "staleGenerationNumber",
            "reconfigureVmReplicationIdNotAllowed",
            "cannotRetrieveVmReplicationConfiguration",
            "replicationAlreadyEnabled",
            "invalidPriorConfiguration",
            "replicationNotEnabled",
            "replicationConfigurationFailed",
            "encryptedVm",
         }
         interface ReplicationVmConfigFault extends vsanhealthService.vim.ReplicationConfigFault {
            reason?: string;
            vmRef?: vsanhealthService.vim.ManagedObjectReference;
         }
         enum ReplicationVmFaultReasonForFault {
            "notConfigured",
            "poweredOff",
            "suspended",
            "poweredOn",
            "offlineReplicating",
            "invalidState",
            "invalidInstanceId",
            "closeDiskError",
         }
         interface ReplicationVmFault extends vsanhealthService.vim.ReplicationFault {
            reason?: string;
            state?: string;
            instanceId?: string;
            vm?: vsanhealthService.vim.ManagedObjectReference;
         }
         enum ReplicationVmInProgressFaultActivity {
            "fullSync",
            "delta",
         }
         interface ReplicationVmInProgressFault extends vsanhealthService.vim.ReplicationVmFault {
            requestedActivity: string;
            inProgressActivity: string;
         }
         interface ResourceInUse extends vsanhealthService.vim.VimFault {
            type?: string;
            name?: string;
         }
         interface ResourceNotAvailable extends vsanhealthService.vim.VimFault {
            containerType?: string;
            containerName?: string;
            type?: string;
         }
         interface RestrictedByAdministrator extends vsanhealthService.vim.RuntimeFault {
            details: string;
         }
         interface RestrictedVersion extends vsanhealthService.vim.SecurityError {
         }
         interface RollbackFailure extends vsanhealthService.vim.DvsFault {
            entityName: string;
            entityType: string;
         }
         interface RuleViolation extends vsanhealthService.vim.VmConfigFault {
            host?: vsanhealthService.vim.ManagedObjectReference;
            rule?: vsanhealthService.vim.ClusterRuleInfo;
         }
         interface SSLDisabledFault extends vsanhealthService.vim.HostConnectFault {
         }
         interface SSLVerifyFault extends vsanhealthService.vim.HostConnectFault {
            selfSigned: boolean;
            thumbprint: string;
         }
         interface SSPIChallenge extends vsanhealthService.vim.VimFault {
            base64Token: string;
         }
         interface SecondaryVmAlreadyDisabled extends vsanhealthService.vim.VmFaultToleranceIssue {
            instanceUuid: string;
         }
         interface SecondaryVmAlreadyEnabled extends vsanhealthService.vim.VmFaultToleranceIssue {
            instanceUuid: string;
         }
         interface SecondaryVmAlreadyRegistered extends vsanhealthService.vim.VmFaultToleranceIssue {
            instanceUuid?: string;
         }
         interface SecondaryVmNotRegistered extends vsanhealthService.vim.VmFaultToleranceIssue {
            instanceUuid?: string;
         }
         interface SharedBusControllerNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface ShrinkDiskFault extends vsanhealthService.vim.VimFault {
            diskId?: number;
         }
         interface SnapshotCloneNotSupported extends vsanhealthService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotCopyNotSupported extends vsanhealthService.vim.MigrationFault {
         }
         interface SnapshotDisabled extends vsanhealthService.vim.SnapshotFault {
         }
         interface SnapshotFault extends vsanhealthService.vim.VimFault {
         }
         interface SnapshotIncompatibleDeviceInVm extends vsanhealthService.vim.SnapshotFault {
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface SnapshotLocked extends vsanhealthService.vim.SnapshotFault {
         }
         interface SnapshotMoveFromNonHomeNotSupported extends vsanhealthService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotMoveNotSupported extends vsanhealthService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotMoveToNonHomeNotSupported extends vsanhealthService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotNoChange extends vsanhealthService.vim.SnapshotFault {
         }
         interface SnapshotRevertIssue extends vsanhealthService.vim.MigrationFault {
            snapshotName?: string;
            event?: Array<vsanhealthService.vim.Event>;
            errors: boolean;
         }
         interface SoftRuleVioCorrectionDisallowed extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
         }
         interface SoftRuleVioCorrectionImpact extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
         }
         interface SsdDiskNotAvailable extends vsanhealthService.vim.VimFault {
            devicePath: string;
         }
         interface StorageDrsCannotMoveDiskInMultiWriterMode extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveFTVm extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveIndependentDisk extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveManuallyPlacedSwapFile extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveManuallyPlacedVm extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveSharedDisk extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveTemplate extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveVmInUserFolder extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveVmWithMountedCDROM extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsCannotMoveVmWithNoFilesInLayout extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsDatacentersCannotShareDatastore extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsDisabledOnVm extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsHbrDiskNotMovable extends vsanhealthService.vim.VimFault {
            nonMovableDiskIds: string;
         }
         interface StorageDrsHmsMoveInProgress extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsHmsUnreachable extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsIolbDisabledInternally extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsRelocateDisabled extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsStaleHmsCollection extends vsanhealthService.vim.VimFault {
         }
         interface StorageDrsUnableToMoveFiles extends vsanhealthService.vim.VimFault {
         }
         interface StorageVMotionNotSupported extends vsanhealthService.vim.MigrationFeatureNotSupported {
         }
         interface StorageVmotionIncompatible extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            datastore?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface SuspendedRelocateNotSupported extends vsanhealthService.vim.MigrationFault {
         }
         interface SwapDatastoreNotWritableOnHost extends vsanhealthService.vim.DatastoreNotWritableOnHost {
         }
         interface SwapDatastoreUnset extends vsanhealthService.vim.VimFault {
         }
         interface SwapPlacementOverrideNotSupported extends vsanhealthService.vim.InvalidVmConfig {
         }
         interface SwitchIpUnset extends vsanhealthService.vim.DvsFault {
         }
         interface SwitchNotInUpgradeMode extends vsanhealthService.vim.DvsFault {
         }
         interface TaskInProgress extends vsanhealthService.vim.VimFault {
            task: vsanhealthService.vim.ManagedObjectReference;
         }
         enum ThirdPartyLicenseAssignmentFailedReason {
            "licenseAssignmentFailed",
            "moduleNotInstalled",
         }
         interface ThirdPartyLicenseAssignmentFailed extends vsanhealthService.vim.RuntimeFault {
            host: vsanhealthService.vim.ManagedObjectReference;
            module: string;
            reason?: string;
         }
         interface Timedout extends vsanhealthService.vim.VimFault {
         }
         interface TooManyConcurrentNativeClones extends vsanhealthService.vim.FileFault {
         }
         interface TooManyConsecutiveOverrides extends vsanhealthService.vim.VimFault {
         }
         interface TooManyDevices extends vsanhealthService.vim.InvalidVmConfig {
         }
         interface TooManyDisksOnLegacyHost extends vsanhealthService.vim.MigrationFault {
            diskCount: number;
            timeoutDanger: boolean;
         }
         interface TooManyGuestLogons extends vsanhealthService.vim.GuestOperationsFault {
         }
         interface TooManyHosts extends vsanhealthService.vim.HostConnectFault {
         }
         interface TooManyNativeCloneLevels extends vsanhealthService.vim.FileFault {
         }
         interface TooManyNativeClonesOnFile extends vsanhealthService.vim.FileFault {
         }
         interface TooManySnapshotLevels extends vsanhealthService.vim.SnapshotFault {
         }
         interface ToolsAlreadyUpgraded extends vsanhealthService.vim.VmToolsUpgradeFault {
         }
         interface ToolsAutoUpgradeNotSupported extends vsanhealthService.vim.VmToolsUpgradeFault {
         }
         interface ToolsImageCopyFailed extends vsanhealthService.vim.VmToolsUpgradeFault {
         }
         interface ToolsImageNotAvailable extends vsanhealthService.vim.VmToolsUpgradeFault {
         }
         interface ToolsImageSignatureCheckFailed extends vsanhealthService.vim.VmToolsUpgradeFault {
         }
         interface ToolsInstallationInProgress extends vsanhealthService.vim.MigrationFault {
         }
         interface ToolsUnavailable extends vsanhealthService.vim.VimFault {
         }
         interface ToolsUpgradeCancelled extends vsanhealthService.vim.VmToolsUpgradeFault {
         }
         interface UnSupportedDatastoreForVFlash extends vsanhealthService.vim.UnsupportedDatastore {
            datastoreName: string;
            type: string;
         }
         interface UncommittedUndoableDisk extends vsanhealthService.vim.MigrationFault {
         }
         interface UnconfiguredPropertyValue extends vsanhealthService.vim.InvalidPropertyValue {
         }
         interface UncustomizableGuest extends vsanhealthService.vim.CustomizationFault {
            uncustomizableGuestOS: string;
         }
         interface UnexpectedCustomizationFault extends vsanhealthService.vim.CustomizationFault {
         }
         interface UnrecognizedHost extends vsanhealthService.vim.VimFault {
            hostName: string;
         }
         interface UnsharedSwapVMotionNotSupported extends vsanhealthService.vim.MigrationFeatureNotSupported {
         }
         interface UnsupportedDatastore extends vsanhealthService.vim.VmConfigFault {
            datastore?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface UnsupportedGuest extends vsanhealthService.vim.InvalidVmConfig {
            unsupportedGuestOS: string;
         }
         interface UnsupportedVimApiVersion extends vsanhealthService.vim.VimFault {
            version?: string;
         }
         interface UnsupportedVmxLocation extends vsanhealthService.vim.VmConfigFault {
         }
         interface UnusedVirtualDiskBlocksNotScrubbed extends vsanhealthService.vim.DeviceBackingNotSupported {
         }
         interface UserNotFound extends vsanhealthService.vim.VimFault {
            principal: string;
            unresolved: boolean;
         }
         interface VAppConfigFault extends vsanhealthService.vim.VimFault {
         }
         interface VAppNotRunning extends vsanhealthService.vim.VmConfigFault {
         }
         interface VAppOperationInProgress extends vsanhealthService.vim.RuntimeFault {
         }
         interface VAppPropertyFault extends vsanhealthService.vim.VmConfigFault {
            id: string;
            category: string;
            label: string;
            type: string;
            value: string;
         }
         interface VAppTaskInProgress extends vsanhealthService.vim.TaskInProgress {
         }
         interface VFlashCacheHotConfigNotSupported extends vsanhealthService.vim.VmConfigFault {
         }
         enum VFlashModuleNotSupportedReason {
            "CacheModeNotSupported",
            "CacheConsistencyTypeNotSupported",
            "CacheBlockSizeNotSupported",
            "CacheReservationNotSupported",
            "DiskSizeNotSupported",
         }
         interface VFlashModuleNotSupported extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
            moduleName: string;
            reason: string;
            hostName: string;
         }
         interface VFlashModuleVersionIncompatible extends vsanhealthService.vim.VimFault {
            moduleName: string;
            vmRequestModuleVersion: string;
            hostMinSupportedVerson: string;
            hostModuleVersion: string;
         }
         interface VMINotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface VMOnConflictDVPort extends vsanhealthService.vim.CannotAccessNetwork {
         }
         interface VMOnVirtualIntranet extends vsanhealthService.vim.CannotAccessNetwork {
         }
         interface VMotionAcrossNetworkNotSupported extends vsanhealthService.vim.MigrationFeatureNotSupported {
         }
         interface VMotionInterfaceIssue extends vsanhealthService.vim.MigrationFault {
            atSourceHost: boolean;
            failedHost: string;
            failedHostEntity?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface VMotionLinkCapacityLow extends vsanhealthService.vim.VMotionInterfaceIssue {
            network: string;
         }
         interface VMotionLinkDown extends vsanhealthService.vim.VMotionInterfaceIssue {
            network: string;
         }
         interface VMotionNotConfigured extends vsanhealthService.vim.VMotionInterfaceIssue {
         }
         interface VMotionNotLicensed extends vsanhealthService.vim.VMotionInterfaceIssue {
         }
         interface VMotionNotSupported extends vsanhealthService.vim.VMotionInterfaceIssue {
         }
         interface VMotionProtocolIncompatible extends vsanhealthService.vim.MigrationFault {
         }
         interface VimFault extends vsanhealthService.vim.MethodFault {
         }
         interface VirtualDiskBlocksNotFullyProvisioned extends vsanhealthService.vim.DeviceBackingNotSupported {
         }
         interface VirtualDiskModeNotSupported extends vsanhealthService.vim.DeviceNotSupported {
            mode: string;
         }
         interface VirtualEthernetCardNotSupported extends vsanhealthService.vim.DeviceNotSupported {
         }
         interface VirtualHardwareCompatibilityIssue extends vsanhealthService.vim.VmConfigFault {
         }
         interface VirtualHardwareVersionNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
            hostName?: string;
            host?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface VmAlreadyExistsInDatacenter extends vsanhealthService.vim.InvalidFolder {
            host: vsanhealthService.vim.ManagedObjectReference;
            hostname: string;
            vm: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VmConfigFault extends vsanhealthService.vim.VimFault {
         }
         interface VmConfigIncompatibleForFaultTolerance extends vsanhealthService.vim.VmConfigFault {
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VmConfigIncompatibleForRecordReplay extends vsanhealthService.vim.VmConfigFault {
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         enum VmFaultToleranceConfigIssueReasonForIssue {
            "haNotEnabled",
            "moreThanOneSecondary",
            "recordReplayNotSupported",
            "replayNotSupported",
            "templateVm",
            "multipleVCPU",
            "hostInactive",
            "ftUnsupportedHardware",
            "ftUnsupportedProduct",
            "missingVMotionNic",
            "missingFTLoggingNic",
            "thinDisk",
            "verifySSLCertificateFlagNotSet",
            "hasSnapshots",
            "noConfig",
            "ftSecondaryVm",
            "hasLocalDisk",
            "esxAgentVm",
            "video3dEnabled",
            "hasUnsupportedDisk",
            "insufficientBandwidth",
            "hasNestedHVConfiguration",
            "hasVFlashConfiguration",
            "unsupportedProduct",
            "cpuHvUnsupported",
            "cpuHwmmuUnsupported",
            "cpuHvDisabled",
            "hasEFIFirmware",
         }
         interface VmFaultToleranceConfigIssue extends vsanhealthService.vim.VmFaultToleranceIssue {
            reason?: string;
            entityName?: string;
            entity?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface VmFaultToleranceConfigIssueWrapper extends vsanhealthService.vim.VmFaultToleranceIssue {
            entityName?: string;
            entity?: vsanhealthService.vim.ManagedObjectReference;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         enum VmFaultToleranceInvalidFileBackingDeviceType {
            "virtualFloppy",
            "virtualCdrom",
            "virtualSerialPort",
            "virtualParallelPort",
            "virtualDisk",
         }
         interface VmFaultToleranceInvalidFileBacking extends vsanhealthService.vim.VmFaultToleranceIssue {
            backingType?: string;
            backingFilename?: string;
         }
         interface VmFaultToleranceIssue extends vsanhealthService.vim.VimFault {
         }
         interface VmFaultToleranceOpIssuesList extends vsanhealthService.vim.VmFaultToleranceIssue {
            errors?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            warnings?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface VmFaultToleranceTooManyFtVcpusOnHost extends vsanhealthService.vim.InsufficientResourcesFault {
            hostName?: string;
            maxNumFtVcpus: number;
         }
         interface VmFaultToleranceTooManyVMsOnHost extends vsanhealthService.vim.InsufficientResourcesFault {
            hostName?: string;
            maxNumFtVms: number;
         }
         interface VmHostAffinityRuleViolation extends vsanhealthService.vim.VmConfigFault {
            vmName: string;
            hostName: string;
         }
         interface VmLimitLicense extends vsanhealthService.vim.NotEnoughLicenses {
            limit: number;
         }
         interface VmMetadataManagerFault extends vsanhealthService.vim.VimFault {
         }
         interface VmMonitorIncompatibleForFaultTolerance extends vsanhealthService.vim.VimFault {
         }
         interface VmPowerOnDisabled extends vsanhealthService.vim.InvalidState {
         }
         interface VmSmpFaultToleranceTooManyVMsOnHost extends vsanhealthService.vim.InsufficientResourcesFault {
            hostName?: string;
            maxNumSmpFtVms: number;
         }
         interface VmToolsUpgradeFault extends vsanhealthService.vim.VimFault {
         }
         interface VmValidateMaxDevice extends vsanhealthService.vim.VimFault {
            device: string;
            max: number;
            count: number;
         }
         interface VmWwnConflict extends vsanhealthService.vim.InvalidVmConfig {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            host?: vsanhealthService.vim.ManagedObjectReference;
            name?: string;
            wwn?: number;
         }
         interface VmfsAlreadyMounted extends vsanhealthService.vim.VmfsMountFault {
         }
         interface VmfsAmbiguousMount extends vsanhealthService.vim.VmfsMountFault {
         }
         interface VmfsMountFault extends vsanhealthService.vim.HostConfigFault {
            uuid: string;
         }
         interface VmotionInterfaceNotEnabled extends vsanhealthService.vim.HostPowerOpFailed {
         }
         interface VolumeEditorError extends vsanhealthService.vim.CustomizationFault {
         }
         interface VramLimitLicense extends vsanhealthService.vim.NotEnoughLicenses {
            limit: number;
         }
         interface VsanClusterUuidMismatch extends vsanhealthService.vim.CannotMoveVsanEnabledHost {
            hostClusterUuid: string;
            destinationClusterUuid: string;
         }
         interface VsanDiskFault extends vsanhealthService.vim.VsanFault {
            device?: string;
         }
         interface VsanFault extends vsanhealthService.vim.VimFault {
         }
         interface VsanIncompatibleDiskMapping extends vsanhealthService.vim.VsanDiskFault {
         }
         interface VspanDestPortConflict extends vsanhealthService.vim.DvsFault {
            vspanSessionKey1: string;
            vspanSessionKey2: string;
            portKey: string;
         }
         interface VspanPortConflict extends vsanhealthService.vim.DvsFault {
            vspanSessionKey1: string;
            vspanSessionKey2: string;
            portKey: string;
         }
         interface VspanPortMoveFault extends vsanhealthService.vim.DvsFault {
            srcPortgroupName: string;
            destPortgroupName: string;
            portKey: string;
         }
         interface VspanPortPromiscChangeFault extends vsanhealthService.vim.DvsFault {
            portKey: string;
         }
         interface VspanPortgroupPromiscChangeFault extends vsanhealthService.vim.DvsFault {
            portgroupName: string;
         }
         interface VspanPortgroupTypeChangeFault extends vsanhealthService.vim.DvsFault {
            portgroupName: string;
         }
         interface VspanPromiscuousPortNotSupported extends vsanhealthService.vim.DvsFault {
            vspanSessionKey: string;
            portKey: string;
         }
         interface VspanSameSessionPortConflict extends vsanhealthService.vim.DvsFault {
            vspanSessionKey: string;
            portKey: string;
         }
         interface WakeOnLanNotSupported extends vsanhealthService.vim.VirtualHardwareCompatibilityIssue {
         }
         interface WakeOnLanNotSupportedByVmotionNIC extends vsanhealthService.vim.HostPowerOpFailed {
         }
         enum WillLoseHAProtectionResolution {
            "svmotion",
            "relocate",
         }
         interface WillLoseHAProtection extends vsanhealthService.vim.MigrationFault {
            resolution: string;
         }
         interface WillModifyConfigCpuRequirements extends vsanhealthService.vim.MigrationFault {
         }
         interface WillResetSnapshotDirectory extends vsanhealthService.vim.MigrationFault {
         }
         interface WipeDiskFault extends vsanhealthService.vim.VimFault {
         }
         enum HostActiveDirectoryAuthenticationCertificateDigest {
            "SHA1",
         }
         enum HostActiveDirectoryInfoDomainMembershipStatus {
            "unknown",
            "ok",
            "noServers",
            "clientTrustBroken",
            "serverTrustBroken",
            "inconsistentTrust",
            "otherProblem",
         }
         interface HostActiveDirectoryInfo extends vsanhealthService.vim.HostDirectoryStoreInfo {
            joinedDomain?: string;
            trustedDomain?: Array<string>;
            domainMembershipStatus?: string;
            smartCardAuthenticationEnabled?: boolean;
         }
         interface HostActiveDirectorySpec extends vsanhealthService.vim.DynamicData {
            domainName?: string;
            userName?: string;
            password?: string;
            camServer?: string;
            thumbprint?: string;
            smartCardAuthenticationEnabled?: boolean;
            smartCardTrustAnchors?: Array<string>;
         }
         interface HostActiveDirectory extends vsanhealthService.vim.DynamicData {
            changeOperation: string;
            spec?: vsanhealthService.vim.HostActiveDirectorySpec;
         }
         interface ArrayOfHostActiveDirectory {
            HostActiveDirectory?: Array<vsanhealthService.vim.HostActiveDirectory>;
         }
         interface HostAuthenticationManagerInfo extends vsanhealthService.vim.DynamicData {
            authConfig: Array<vsanhealthService.vim.HostAuthenticationStoreInfo>;
         }
         interface HostAuthenticationStoreInfo extends vsanhealthService.vim.DynamicData {
            enabled: boolean;
         }
         interface ArrayOfHostAuthenticationStoreInfo {
            HostAuthenticationStoreInfo?: Array<vsanhealthService.vim.HostAuthenticationStoreInfo>;
         }
         enum AutoStartAction {
            "none",
            "systemDefault",
            "powerOn",
            "powerOff",
            "guestShutdown",
            "suspend",
         }
         interface AutoStartDefaults extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            startDelay?: number;
            stopDelay?: number;
            waitForHeartbeat?: boolean;
            stopAction?: string;
         }
         enum AutoStartWaitHeartbeatSetting {
            "yes",
            "no",
            "systemDefault",
         }
         interface AutoStartPowerInfo extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            startOrder: number;
            startDelay: number;
            waitForHeartbeat: vsanhealthService.vim.AutoStartWaitHeartbeatSetting;
            startAction: string;
            stopDelay: number;
            stopAction: string;
         }
         interface ArrayOfAutoStartPowerInfo {
            AutoStartPowerInfo?: Array<vsanhealthService.vim.AutoStartPowerInfo>;
         }
         interface HostAutoStartManagerConfig extends vsanhealthService.vim.DynamicData {
            defaults?: vsanhealthService.vim.AutoStartDefaults;
            powerInfo?: Array<vsanhealthService.vim.AutoStartPowerInfo>;
         }
         interface HostBootDeviceInfo extends vsanhealthService.vim.DynamicData {
            bootDevices?: Array<vsanhealthService.vim.HostBootDevice>;
            currentBootDeviceKey?: string;
         }
         interface HostBootDevice extends vsanhealthService.vim.DynamicData {
            key: string;
            description: string;
         }
         interface ArrayOfHostBootDevice {
            HostBootDevice?: Array<vsanhealthService.vim.HostBootDevice>;
         }
         interface HostCacheConfigurationSpec extends vsanhealthService.vim.DynamicData {
            datastore: vsanhealthService.vim.ManagedObjectReference;
            swapSize: number;
         }
         interface HostCacheConfigurationInfo extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            swapSize: number;
         }
         interface ArrayOfHostCacheConfigurationInfo {
            HostCacheConfigurationInfo?: Array<vsanhealthService.vim.HostCacheConfigurationInfo>;
         }
         enum HostReplayUnsupportedReason {
            "incompatibleProduct",
            "incompatibleCpu",
            "hvDisabled",
            "cpuidLimitSet",
            "oldBIOS",
            "unknown",
         }
         enum HostCapabilityFtUnsupportedReason {
            "vMotionNotLicensed",
            "missingVMotionNic",
            "missingFTLoggingNic",
            "ftNotLicensed",
            "haAgentIssue",
            "unsupportedProduct",
            "cpuHvUnsupported",
            "cpuHwmmuUnsupported",
            "cpuHvDisabled",
         }
         enum HostCapabilityVmDirectPathGen2UnsupportedReason {
            "hostNptIncompatibleProduct",
            "hostNptIncompatibleHardware",
            "hostNptDisabled",
         }
         interface HostCapability extends vsanhealthService.vim.DynamicData {
            recursiveResourcePoolsSupported: boolean;
            cpuMemoryResourceConfigurationSupported?: boolean;
            rebootSupported: boolean;
            shutdownSupported: boolean;
            vmotionSupported: boolean;
            standbySupported?: boolean;
            ipmiSupported?: boolean;
            maxSupportedVMs?: number;
            maxRunningVMs?: number;
            maxSupportedVcpus?: number;
            maxRegisteredVMs?: number;
            datastorePrincipalSupported: boolean;
            sanSupported: boolean;
            nfsSupported: boolean;
            iscsiSupported: boolean;
            vlanTaggingSupported: boolean;
            nicTeamingSupported: boolean;
            highGuestMemSupported: boolean;
            maintenanceModeSupported: boolean;
            suspendedRelocateSupported: boolean;
            restrictedSnapshotRelocateSupported?: boolean;
            perVmSwapFiles?: boolean;
            localSwapDatastoreSupported?: boolean;
            unsharedSwapVMotionSupported?: boolean;
            backgroundSnapshotsSupported?: boolean;
            preAssignedPCIUnitNumbersSupported?: boolean;
            screenshotSupported?: boolean;
            scaledScreenshotSupported?: boolean;
            storageVMotionSupported?: boolean;
            vmotionWithStorageVMotionSupported?: boolean;
            vmotionAcrossNetworkSupported?: boolean;
            maxNumDisksSVMotion?: number;
            hbrNicSelectionSupported?: boolean;
            vrNfcNicSelectionSupported?: boolean;
            recordReplaySupported?: boolean;
            ftSupported?: boolean;
            replayUnsupportedReason?: string;
            replayCompatibilityIssues?: Array<string>;
            smpFtSupported?: boolean;
            ftCompatibilityIssues?: Array<string>;
            smpFtCompatibilityIssues?: Array<string>;
            maxVcpusPerFtVm?: number;
            loginBySSLThumbprintSupported?: boolean;
            cloneFromSnapshotSupported?: boolean;
            deltaDiskBackingsSupported?: boolean;
            perVMNetworkTrafficShapingSupported?: boolean;
            tpmSupported?: boolean;
            supportedCpuFeature?: Array<vsanhealthService.vim.HostCpuIdInfo>;
            virtualExecUsageSupported?: boolean;
            storageIORMSupported?: boolean;
            vmDirectPathGen2Supported?: boolean;
            vmDirectPathGen2UnsupportedReason?: Array<string>;
            vmDirectPathGen2UnsupportedReasonExtended?: string;
            supportedVmfsMajorVersion?: Array<number>;
            vStorageCapable?: boolean;
            snapshotRelayoutSupported?: boolean;
            firewallIpRulesSupported?: boolean;
            servicePackageInfoSupported?: boolean;
            maxHostRunningVms?: number;
            maxHostSupportedVcpus?: number;
            vmfsDatastoreMountCapable?: boolean;
            eightPlusHostVmfsSharedAccessSupported?: boolean;
            nestedHVSupported?: boolean;
            vPMCSupported?: boolean;
            interVMCommunicationThroughVMCISupported?: boolean;
            scheduledHardwareUpgradeSupported?: boolean;
            featureCapabilitiesSupported?: boolean;
            latencySensitivitySupported?: boolean;
            storagePolicySupported?: boolean;
            accel3dSupported?: boolean;
            reliableMemoryAware?: boolean;
            multipleNetworkStackInstanceSupported?: boolean;
            messageBusProxySupported?: boolean;
            vsanSupported?: boolean;
            vFlashSupported?: boolean;
            hostAccessManagerSupported?: boolean;
            provisioningNicSelectionSupported?: boolean;
            nfs41Supported?: boolean;
            nfs41Krb5iSupported?: boolean;
            turnDiskLocatorLedSupported?: boolean;
            virtualVolumeDatastoreSupported?: boolean;
            markAsSsdSupported?: boolean;
            markAsLocalSupported?: boolean;
            smartCardAuthenticationSupported?: boolean;
            cryptoSupported?: boolean;
            oneKVolumeAPIsSupported?: boolean;
            gatewayOnNicSupported?: boolean;
            upitSupported?: boolean;
            cpuHwMmuSupported?: boolean;
            encryptedVMotionSupported?: boolean;
            encryptionChangeOnAddRemoveSupported?: boolean;
            encryptionHotOperationSupported?: boolean;
            encryptionWithSnapshotsSupported?: boolean;
            encryptionFaultToleranceSupported?: boolean;
            encryptionMemorySaveSupported?: boolean;
            encryptionRDMSupported?: boolean;
            encryptionVFlashSupported?: boolean;
            encryptionCBRCSupported?: boolean;
            encryptionHBRSupported?: boolean;
         }
         enum HostCertificateManagerCertificateInfoCertificateStatus {
            "unknown",
            "expired",
            "expiring",
            "expiringShortly",
            "expirationImminent",
            "good",
         }
         interface HostCertificateManagerCertificateInfo extends vsanhealthService.vim.DynamicData {
            issuer?: string;
            notBefore?: Date;
            notAfter?: Date;
            subject?: string;
            status: string;
         }
         enum HostConfigChangeMode {
            "modify",
            "replace",
         }
         enum HostConfigChangeOperation {
            "add",
            "remove",
            "edit",
            "ignore",
         }
         interface HostConfigChange extends vsanhealthService.vim.DynamicData {
         }
         interface HostConfigInfo extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            product: vsanhealthService.vim.AboutInfo;
            deploymentInfo?: vsanhealthService.vim.HostDeploymentInfo;
            hyperThread?: vsanhealthService.vim.HostHyperThreadScheduleInfo;
            consoleReservation?: vsanhealthService.vim.ServiceConsoleReservationInfo;
            virtualMachineReservation?: vsanhealthService.vim.VirtualMachineMemoryReservationInfo;
            storageDevice?: vsanhealthService.vim.HostStorageDeviceInfo;
            multipathState?: vsanhealthService.vim.HostMultipathStateInfo;
            fileSystemVolume?: vsanhealthService.vim.HostFileSystemVolumeInfo;
            systemFile?: Array<string>;
            network?: vsanhealthService.vim.HostNetworkInfo;
            vmotion?: vsanhealthService.vim.HostVMotionInfo;
            virtualNicManagerInfo?: vsanhealthService.vim.HostVirtualNicManagerInfo;
            capabilities?: vsanhealthService.vim.HostNetCapabilities;
            datastoreCapabilities?: vsanhealthService.vim.HostDatastoreSystemCapabilities;
            offloadCapabilities?: vsanhealthService.vim.HostNetOffloadCapabilities;
            service?: vsanhealthService.vim.HostServiceInfo;
            firewall?: vsanhealthService.vim.HostFirewallInfo;
            autoStart?: vsanhealthService.vim.HostAutoStartManagerConfig;
            activeDiagnosticPartition?: vsanhealthService.vim.HostDiagnosticPartition;
            option?: Array<vsanhealthService.vim.OptionValue>;
            optionDef?: Array<vsanhealthService.vim.OptionDef>;
            datastorePrincipal?: string;
            localSwapDatastore?: vsanhealthService.vim.ManagedObjectReference;
            systemSwapConfiguration?: vsanhealthService.vim.HostSystemSwapConfiguration;
            systemResources?: vsanhealthService.vim.HostSystemResourceInfo;
            dateTimeInfo?: vsanhealthService.vim.HostDateTimeInfo;
            flags?: vsanhealthService.vim.HostFlagInfo;
            adminDisabled?: boolean;
            lockdownMode?: vsanhealthService.vim.HostLockdownMode;
            ipmi?: vsanhealthService.vim.HostIpmiInfo;
            sslThumbprintInfo?: vsanhealthService.vim.HostSslThumbprintInfo;
            sslThumbprintData?: Array<vsanhealthService.vim.HostSslThumbprintInfo>;
            certificate?: Array<number>;
            pciPassthruInfo?: Array<vsanhealthService.vim.HostPciPassthruInfo>;
            authenticationManagerInfo?: vsanhealthService.vim.HostAuthenticationManagerInfo;
            featureVersion?: Array<vsanhealthService.vim.HostFeatureVersionInfo>;
            powerSystemCapability?: vsanhealthService.vim.PowerSystemCapability;
            powerSystemInfo?: vsanhealthService.vim.PowerSystemInfo;
            cacheConfigurationInfo?: Array<vsanhealthService.vim.HostCacheConfigurationInfo>;
            wakeOnLanCapable?: boolean;
            featureCapability?: Array<vsanhealthService.vim.HostFeatureCapability>;
            maskedFeatureCapability?: Array<vsanhealthService.vim.HostFeatureCapability>;
            vFlashConfigInfo?: vsanhealthService.vim.HostVFlashManagerVFlashConfigInfo;
            vsanHostConfig?: vsanhealthService.vim.VsanHostConfigInfo;
            domainList?: Array<string>;
            scriptCheckSum?: string;
            hostConfigCheckSum?: string;
            graphicsInfo?: Array<vsanhealthService.vim.HostGraphicsInfo>;
            sharedPassthruGpuTypes?: Array<string>;
            graphicsConfig?: vsanhealthService.vim.HostGraphicsConfig;
            ioFilterInfo?: Array<vsanhealthService.vim.HostIoFilterInfo>;
            sriovDevicePool?: Array<vsanhealthService.vim.HostSriovDevicePoolInfo>;
         }
         interface HostConfigManager extends vsanhealthService.vim.DynamicData {
            cpuScheduler?: vsanhealthService.vim.ManagedObjectReference;
            datastoreSystem?: vsanhealthService.vim.ManagedObjectReference;
            memoryManager?: vsanhealthService.vim.ManagedObjectReference;
            storageSystem?: vsanhealthService.vim.ManagedObjectReference;
            networkSystem?: vsanhealthService.vim.ManagedObjectReference;
            vmotionSystem?: vsanhealthService.vim.ManagedObjectReference;
            virtualNicManager?: vsanhealthService.vim.ManagedObjectReference;
            serviceSystem?: vsanhealthService.vim.ManagedObjectReference;
            firewallSystem?: vsanhealthService.vim.ManagedObjectReference;
            advancedOption?: vsanhealthService.vim.ManagedObjectReference;
            diagnosticSystem?: vsanhealthService.vim.ManagedObjectReference;
            autoStartManager?: vsanhealthService.vim.ManagedObjectReference;
            snmpSystem?: vsanhealthService.vim.ManagedObjectReference;
            dateTimeSystem?: vsanhealthService.vim.ManagedObjectReference;
            patchManager?: vsanhealthService.vim.ManagedObjectReference;
            imageConfigManager?: vsanhealthService.vim.ManagedObjectReference;
            bootDeviceSystem?: vsanhealthService.vim.ManagedObjectReference;
            firmwareSystem?: vsanhealthService.vim.ManagedObjectReference;
            healthStatusSystem?: vsanhealthService.vim.ManagedObjectReference;
            pciPassthruSystem?: vsanhealthService.vim.ManagedObjectReference;
            licenseManager?: vsanhealthService.vim.ManagedObjectReference;
            kernelModuleSystem?: vsanhealthService.vim.ManagedObjectReference;
            authenticationManager?: vsanhealthService.vim.ManagedObjectReference;
            powerSystem?: vsanhealthService.vim.ManagedObjectReference;
            cacheConfigurationManager?: vsanhealthService.vim.ManagedObjectReference;
            esxAgentHostManager?: vsanhealthService.vim.ManagedObjectReference;
            iscsiManager?: vsanhealthService.vim.ManagedObjectReference;
            vFlashManager?: vsanhealthService.vim.ManagedObjectReference;
            vsanSystem?: vsanhealthService.vim.ManagedObjectReference;
            messageBusProxy?: vsanhealthService.vim.ManagedObjectReference;
            userDirectory?: vsanhealthService.vim.ManagedObjectReference;
            accountManager?: vsanhealthService.vim.ManagedObjectReference;
            hostAccessManager?: vsanhealthService.vim.ManagedObjectReference;
            graphicsManager?: vsanhealthService.vim.ManagedObjectReference;
            vsanInternalSystem?: vsanhealthService.vim.ManagedObjectReference;
            certificateManager?: vsanhealthService.vim.ManagedObjectReference;
            cryptoManager?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface HostConfigSpec extends vsanhealthService.vim.DynamicData {
            nasDatastore?: Array<vsanhealthService.vim.HostNasVolumeConfig>;
            network?: vsanhealthService.vim.HostNetworkConfig;
            nicTypeSelection?: Array<vsanhealthService.vim.HostVirtualNicManagerNicTypeSelection>;
            service?: Array<vsanhealthService.vim.HostServiceConfig>;
            firewall?: vsanhealthService.vim.HostFirewallConfig;
            option?: Array<vsanhealthService.vim.OptionValue>;
            datastorePrincipal?: string;
            datastorePrincipalPasswd?: string;
            datetime?: vsanhealthService.vim.HostDateTimeConfig;
            storageDevice?: vsanhealthService.vim.HostStorageDeviceInfo;
            license?: vsanhealthService.vim.HostLicenseSpec;
            security?: vsanhealthService.vim.HostSecuritySpec;
            userAccount?: Array<vsanhealthService.vim.HostAccountSpec>;
            usergroupAccount?: Array<vsanhealthService.vim.HostAccountSpec>;
            memory?: vsanhealthService.vim.HostMemorySpec;
            activeDirectory?: Array<vsanhealthService.vim.HostActiveDirectory>;
            genericConfig?: Array<vsanhealthService.vim.KeyAnyValue>;
            graphicsConfig?: vsanhealthService.vim.HostGraphicsConfig;
         }
         interface HostConnectInfoNetworkInfo extends vsanhealthService.vim.DynamicData {
            summary: vsanhealthService.vim.NetworkSummary;
         }
         interface ArrayOfHostConnectInfoNetworkInfo {
            HostConnectInfoNetworkInfo?: Array<vsanhealthService.vim.HostConnectInfoNetworkInfo>;
         }
         interface HostNewNetworkConnectInfo extends vsanhealthService.vim.HostConnectInfoNetworkInfo {
         }
         interface HostDatastoreConnectInfo extends vsanhealthService.vim.DynamicData {
            summary: vsanhealthService.vim.DatastoreSummary;
         }
         interface ArrayOfHostDatastoreConnectInfo {
            HostDatastoreConnectInfo?: Array<vsanhealthService.vim.HostDatastoreConnectInfo>;
         }
         interface HostDatastoreExistsConnectInfo extends vsanhealthService.vim.HostDatastoreConnectInfo {
            newDatastoreName: string;
         }
         interface HostDatastoreNameConflictConnectInfo extends vsanhealthService.vim.HostDatastoreConnectInfo {
            newDatastoreName: string;
         }
         interface HostLicenseConnectInfo extends vsanhealthService.vim.DynamicData {
            license: vsanhealthService.vim.LicenseManagerLicenseInfo;
            evaluation: vsanhealthService.vim.LicenseManagerEvaluationInfo;
            resource?: vsanhealthService.vim.HostLicensableResourceInfo;
         }
         interface HostConnectInfo extends vsanhealthService.vim.DynamicData {
            serverIp?: string;
            inDasCluster?: boolean;
            host: vsanhealthService.vim.HostListSummary;
            vm?: Array<vsanhealthService.vim.VirtualMachineSummary>;
            vimAccountNameRequired?: boolean;
            clusterSupported?: boolean;
            network?: Array<vsanhealthService.vim.HostConnectInfoNetworkInfo>;
            datastore?: Array<vsanhealthService.vim.HostDatastoreConnectInfo>;
            license?: vsanhealthService.vim.HostLicenseConnectInfo;
            capability?: vsanhealthService.vim.HostCapability;
         }
         interface HostConnectSpec extends vsanhealthService.vim.DynamicData {
            hostName?: string;
            port?: number;
            sslThumbprint?: string;
            userName?: string;
            password?: string;
            vmFolder?: vsanhealthService.vim.ManagedObjectReference;
            force: boolean;
            vimAccountName?: string;
            vimAccountPassword?: string;
            managementIp?: string;
            lockdownMode?: vsanhealthService.vim.HostLockdownMode;
            hostGateway?: vsanhealthService.vim.HostGatewaySpec;
         }
         interface HostCpuIdInfo extends vsanhealthService.vim.DynamicData {
            level: number;
            vendor?: string;
            eax?: string;
            ebx?: string;
            ecx?: string;
            edx?: string;
         }
         interface ArrayOfHostCpuIdInfo {
            HostCpuIdInfo?: Array<vsanhealthService.vim.HostCpuIdInfo>;
         }
         interface HostHyperThreadScheduleInfo extends vsanhealthService.vim.DynamicData {
            available: boolean;
            active: boolean;
            config: boolean;
         }
         interface FileQueryFlags extends vsanhealthService.vim.DynamicData {
            fileType: boolean;
            fileSize: boolean;
            modification: boolean;
            fileOwner?: boolean;
         }
         interface FileInfo extends vsanhealthService.vim.DynamicData {
            path: string;
            friendlyName?: string;
            fileSize?: number;
            modification?: Date;
            owner?: string;
         }
         interface ArrayOfFileInfo {
            FileInfo?: Array<vsanhealthService.vim.FileInfo>;
         }
         interface FileQuery extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfFileQuery {
            FileQuery?: Array<vsanhealthService.vim.FileQuery>;
         }
         interface VmConfigFileQueryFilter extends vsanhealthService.vim.DynamicData {
            matchConfigVersion?: Array<number>;
            encrypted?: boolean;
         }
         interface VmConfigFileQueryFlags extends vsanhealthService.vim.DynamicData {
            configVersion: boolean;
            encryption?: boolean;
         }
         interface VmConfigFileQuery extends vsanhealthService.vim.FileQuery {
            filter?: vsanhealthService.vim.VmConfigFileQueryFilter;
            details?: vsanhealthService.vim.VmConfigFileQueryFlags;
         }
         interface TemplateConfigFileQuery extends vsanhealthService.vim.VmConfigFileQuery {
         }
         interface VmDiskFileQueryFilter extends vsanhealthService.vim.DynamicData {
            diskType?: Array<string>;
            matchHardwareVersion?: Array<number>;
            controllerType?: Array<string>;
            thin?: boolean;
            encrypted?: boolean;
         }
         interface VmDiskFileQueryFlags extends vsanhealthService.vim.DynamicData {
            diskType: boolean;
            capacityKb: boolean;
            hardwareVersion: boolean;
            controllerType?: boolean;
            diskExtents?: boolean;
            thin?: boolean;
            encryption?: boolean;
         }
         interface VmDiskFileQuery extends vsanhealthService.vim.FileQuery {
            filter?: vsanhealthService.vim.VmDiskFileQueryFilter;
            details?: vsanhealthService.vim.VmDiskFileQueryFlags;
         }
         interface FolderFileQuery extends vsanhealthService.vim.FileQuery {
         }
         interface VmSnapshotFileQuery extends vsanhealthService.vim.FileQuery {
         }
         interface IsoImageFileQuery extends vsanhealthService.vim.FileQuery {
         }
         interface FloppyImageFileQuery extends vsanhealthService.vim.FileQuery {
         }
         interface VmNvramFileQuery extends vsanhealthService.vim.FileQuery {
         }
         interface VmLogFileQuery extends vsanhealthService.vim.FileQuery {
         }
         interface VmConfigFileEncryptionInfo extends vsanhealthService.vim.DynamicData {
            keyId?: vsanhealthService.vim.CryptoKeyId;
         }
         interface VmConfigFileInfo extends vsanhealthService.vim.FileInfo {
            configVersion?: number;
            encryption?: vsanhealthService.vim.VmConfigFileEncryptionInfo;
         }
         interface TemplateConfigFileInfo extends vsanhealthService.vim.VmConfigFileInfo {
         }
         interface VmDiskFileEncryptionInfo extends vsanhealthService.vim.DynamicData {
            keyId?: vsanhealthService.vim.CryptoKeyId;
         }
         interface VmDiskFileInfo extends vsanhealthService.vim.FileInfo {
            diskType?: string;
            capacityKb?: number;
            hardwareVersion?: number;
            controllerType?: string;
            diskExtents?: Array<string>;
            thin?: boolean;
            encryption?: vsanhealthService.vim.VmDiskFileEncryptionInfo;
         }
         interface FolderFileInfo extends vsanhealthService.vim.FileInfo {
         }
         interface VmSnapshotFileInfo extends vsanhealthService.vim.FileInfo {
         }
         interface IsoImageFileInfo extends vsanhealthService.vim.FileInfo {
         }
         interface FloppyImageFileInfo extends vsanhealthService.vim.FileInfo {
         }
         interface VmNvramFileInfo extends vsanhealthService.vim.FileInfo {
         }
         interface VmLogFileInfo extends vsanhealthService.vim.FileInfo {
         }
         interface HostDatastoreBrowserSearchSpec extends vsanhealthService.vim.DynamicData {
            query?: Array<vsanhealthService.vim.FileQuery>;
            details?: vsanhealthService.vim.FileQueryFlags;
            searchCaseInsensitive?: boolean;
            matchPattern?: Array<string>;
            sortFoldersFirst?: boolean;
         }
         interface HostDatastoreBrowserSearchResults extends vsanhealthService.vim.DynamicData {
            datastore?: vsanhealthService.vim.ManagedObjectReference;
            folderPath?: string;
            file?: Array<vsanhealthService.vim.FileInfo>;
         }
         interface ArrayOfHostDatastoreBrowserSearchResults {
            HostDatastoreBrowserSearchResults?: Array<vsanhealthService.vim.HostDatastoreBrowserSearchResults>;
         }
         interface HostDatastoreSystemCapabilities extends vsanhealthService.vim.DynamicData {
            nfsMountCreationRequired: boolean;
            nfsMountCreationSupported: boolean;
            localDatastoreSupported: boolean;
            vmfsExtentExpansionSupported?: boolean;
         }
         interface HostDatastoreSystemVvolDatastoreSpec extends vsanhealthService.vim.DynamicData {
            name: string;
            scId: string;
         }
         interface HostDatastoreSystemDatastoreResult extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostDatastoreSystemDatastoreResult {
            HostDatastoreSystemDatastoreResult?: Array<vsanhealthService.vim.HostDatastoreSystemDatastoreResult>;
         }
         interface VmfsDatastoreInfo extends vsanhealthService.vim.DatastoreInfo {
            maxPhysicalRDMFileSize?: number;
            maxVirtualRDMFileSize?: number;
            vmfs?: vsanhealthService.vim.HostVmfsVolume;
         }
         interface NasDatastoreInfo extends vsanhealthService.vim.DatastoreInfo {
            nas?: vsanhealthService.vim.HostNasVolume;
         }
         interface LocalDatastoreInfo extends vsanhealthService.vim.DatastoreInfo {
            path?: string;
         }
         interface VmfsDatastoreSpec extends vsanhealthService.vim.DynamicData {
            diskUuid: string;
         }
         interface VmfsDatastoreCreateSpec extends vsanhealthService.vim.VmfsDatastoreSpec {
            partition: vsanhealthService.vim.HostDiskPartitionSpec;
            vmfs: vsanhealthService.vim.HostVmfsSpec;
            extent?: Array<vsanhealthService.vim.HostScsiDiskPartition>;
         }
         interface VmfsDatastoreExtendSpec extends vsanhealthService.vim.VmfsDatastoreSpec {
            partition: vsanhealthService.vim.HostDiskPartitionSpec;
            extent: Array<vsanhealthService.vim.HostScsiDiskPartition>;
         }
         interface VmfsDatastoreExpandSpec extends vsanhealthService.vim.VmfsDatastoreSpec {
            partition: vsanhealthService.vim.HostDiskPartitionSpec;
            extent: vsanhealthService.vim.HostScsiDiskPartition;
         }
         interface VmfsDatastoreBaseOption extends vsanhealthService.vim.DynamicData {
            layout: vsanhealthService.vim.HostDiskPartitionLayout;
            partitionFormatChange?: boolean;
         }
         interface VmfsDatastoreSingleExtentOption extends vsanhealthService.vim.VmfsDatastoreBaseOption {
            vmfsExtent: vsanhealthService.vim.HostDiskPartitionBlockRange;
         }
         interface VmfsDatastoreAllExtentOption extends vsanhealthService.vim.VmfsDatastoreSingleExtentOption {
         }
         interface VmfsDatastoreMultipleExtentOption extends vsanhealthService.vim.VmfsDatastoreBaseOption {
            vmfsExtent: Array<vsanhealthService.vim.HostDiskPartitionBlockRange>;
         }
         interface VmfsDatastoreOption extends vsanhealthService.vim.DynamicData {
            info: vsanhealthService.vim.VmfsDatastoreBaseOption;
            spec: vsanhealthService.vim.VmfsDatastoreSpec;
         }
         interface ArrayOfVmfsDatastoreOption {
            VmfsDatastoreOption?: Array<vsanhealthService.vim.VmfsDatastoreOption>;
         }
         interface VvolDatastoreInfo extends vsanhealthService.vim.DatastoreInfo {
            vvolDS?: vsanhealthService.vim.HostVvolVolume;
         }
         interface HostDateTimeConfig extends vsanhealthService.vim.DynamicData {
            timeZone?: string;
            ntpConfig?: vsanhealthService.vim.HostNtpConfig;
         }
         interface HostDateTimeInfo extends vsanhealthService.vim.DynamicData {
            timeZone: vsanhealthService.vim.HostDateTimeSystemTimeZone;
            ntpConfig?: vsanhealthService.vim.HostNtpConfig;
         }
         interface HostDateTimeSystemTimeZone extends vsanhealthService.vim.DynamicData {
            key: string;
            name: string;
            description: string;
            gmtOffset: number;
         }
         interface ArrayOfHostDateTimeSystemTimeZone {
            HostDateTimeSystemTimeZone?: Array<vsanhealthService.vim.HostDateTimeSystemTimeZone>;
         }
         interface HostDeploymentInfo extends vsanhealthService.vim.DynamicData {
            bootedFromStatelessCache?: boolean;
         }
         interface HostDevice extends vsanhealthService.vim.DynamicData {
            deviceName: string;
            deviceType: string;
         }
         interface HostDhcpServiceSpec extends vsanhealthService.vim.DynamicData {
            virtualSwitch: string;
            defaultLeaseDuration: number;
            leaseBeginIp: string;
            leaseEndIp: string;
            maxLeaseDuration: number;
            unlimitedLease: boolean;
            ipSubnetAddr: string;
            ipSubnetMask: string;
         }
         interface HostDhcpServiceConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            key: string;
            spec: vsanhealthService.vim.HostDhcpServiceSpec;
         }
         interface ArrayOfHostDhcpServiceConfig {
            HostDhcpServiceConfig?: Array<vsanhealthService.vim.HostDhcpServiceConfig>;
         }
         interface HostDhcpService extends vsanhealthService.vim.DynamicData {
            key: string;
            spec: vsanhealthService.vim.HostDhcpServiceSpec;
         }
         interface ArrayOfHostDhcpService {
            HostDhcpService?: Array<vsanhealthService.vim.HostDhcpService>;
         }
         enum DiagnosticPartitionStorageType {
            "directAttached",
            "networkAttached",
         }
         enum DiagnosticPartitionType {
            "singleHost",
            "multiHost",
         }
         interface HostDiagnosticPartitionCreateOption extends vsanhealthService.vim.DynamicData {
            storageType: string;
            diagnosticType: string;
            disk: vsanhealthService.vim.HostScsiDisk;
         }
         interface ArrayOfHostDiagnosticPartitionCreateOption {
            HostDiagnosticPartitionCreateOption?: Array<vsanhealthService.vim.HostDiagnosticPartitionCreateOption>;
         }
         interface HostDiagnosticPartitionCreateSpec extends vsanhealthService.vim.DynamicData {
            storageType: string;
            diagnosticType: string;
            id: vsanhealthService.vim.HostScsiDiskPartition;
            partition: vsanhealthService.vim.HostDiskPartitionSpec;
            active?: boolean;
         }
         interface HostDiagnosticPartitionCreateDescription extends vsanhealthService.vim.DynamicData {
            layout: vsanhealthService.vim.HostDiskPartitionLayout;
            diskUuid: string;
            spec: vsanhealthService.vim.HostDiagnosticPartitionCreateSpec;
         }
         interface HostDiagnosticPartition extends vsanhealthService.vim.DynamicData {
            storageType: string;
            diagnosticType: string;
            slots: number;
            id: vsanhealthService.vim.HostScsiDiskPartition;
         }
         interface ArrayOfHostDiagnosticPartition {
            HostDiagnosticPartition?: Array<vsanhealthService.vim.HostDiagnosticPartition>;
         }
         interface HostDirectoryStoreInfo extends vsanhealthService.vim.HostAuthenticationStoreInfo {
         }
         interface HostDiskConfigurationResult extends vsanhealthService.vim.DynamicData {
            devicePath?: string;
            success?: boolean;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostDiskConfigurationResult {
            HostDiskConfigurationResult?: Array<vsanhealthService.vim.HostDiskConfigurationResult>;
         }
         interface HostDiskDimensionsChs extends vsanhealthService.vim.DynamicData {
            cylinder: number;
            head: number;
            sector: number;
         }
         interface HostDiskDimensionsLba extends vsanhealthService.vim.DynamicData {
            blockSize: number;
            block: number;
         }
         interface HostDiskDimensions extends vsanhealthService.vim.DynamicData {
         }
         enum HostDiskPartitionInfoPartitionFormat {
            "gpt",
            "mbr",
            "unknown",
         }
         enum HostDiskPartitionInfoType {
            "none",
            "vmfs",
            "linuxNative",
            "linuxSwap",
            "extended",
            "ntfs",
            "vmkDiagnostic",
            "vffs",
         }
         interface HostDiskPartitionAttributes extends vsanhealthService.vim.DynamicData {
            partition: number;
            startSector: number;
            endSector: number;
            type: string;
            guid?: string;
            logical: boolean;
            attributes: number;
            partitionAlignment?: number;
         }
         interface ArrayOfHostDiskPartitionAttributes {
            HostDiskPartitionAttributes?: Array<vsanhealthService.vim.HostDiskPartitionAttributes>;
         }
         interface HostDiskPartitionBlockRange extends vsanhealthService.vim.DynamicData {
            partition?: number;
            type: string;
            start: vsanhealthService.vim.HostDiskDimensionsLba;
            end: vsanhealthService.vim.HostDiskDimensionsLba;
         }
         interface ArrayOfHostDiskPartitionBlockRange {
            HostDiskPartitionBlockRange?: Array<vsanhealthService.vim.HostDiskPartitionBlockRange>;
         }
         interface HostDiskPartitionSpec extends vsanhealthService.vim.DynamicData {
            partitionFormat?: string;
            chs?: vsanhealthService.vim.HostDiskDimensionsChs;
            totalSectors?: number;
            partition?: Array<vsanhealthService.vim.HostDiskPartitionAttributes>;
         }
         interface HostDiskPartitionLayout extends vsanhealthService.vim.DynamicData {
            total?: vsanhealthService.vim.HostDiskDimensionsLba;
            partition: Array<vsanhealthService.vim.HostDiskPartitionBlockRange>;
         }
         interface HostDiskPartitionInfo extends vsanhealthService.vim.DynamicData {
            deviceName: string;
            spec: vsanhealthService.vim.HostDiskPartitionSpec;
            layout: vsanhealthService.vim.HostDiskPartitionLayout;
         }
         interface ArrayOfHostDiskPartitionInfo {
            HostDiskPartitionInfo?: Array<vsanhealthService.vim.HostDiskPartitionInfo>;
         }
         interface HostDnsConfig extends vsanhealthService.vim.DynamicData {
            dhcp: boolean;
            virtualNicDevice?: string;
            hostName: string;
            domainName: string;
            address?: Array<string>;
            searchDomain?: Array<string>;
         }
         interface HostDnsConfigSpec extends vsanhealthService.vim.HostDnsConfig {
            virtualNicConnection?: vsanhealthService.vim.HostVirtualNicConnection;
         }
         interface HostEsxAgentHostManagerConfigInfo extends vsanhealthService.vim.DynamicData {
            agentVmDatastore?: vsanhealthService.vim.ManagedObjectReference;
            agentVmNetwork?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface HostFaultToleranceManagerComponentHealthInfo extends vsanhealthService.vim.DynamicData {
            isStorageHealthy: boolean;
            isNetworkHealthy: boolean;
         }
         interface FcoeConfigVlanRange extends vsanhealthService.vim.DynamicData {
            vlanLow: number;
            vlanHigh: number;
         }
         interface ArrayOfFcoeConfigVlanRange {
            FcoeConfigVlanRange?: Array<vsanhealthService.vim.FcoeConfigVlanRange>;
         }
         interface FcoeConfigFcoeCapabilities extends vsanhealthService.vim.DynamicData {
            priorityClass: boolean;
            sourceMacAddress: boolean;
            vlanRange: boolean;
         }
         interface FcoeConfigFcoeSpecification extends vsanhealthService.vim.DynamicData {
            underlyingPnic: string;
            priorityClass?: number;
            sourceMac?: string;
            vlanRange?: Array<vsanhealthService.vim.FcoeConfigVlanRange>;
         }
         interface FcoeConfig extends vsanhealthService.vim.DynamicData {
            priorityClass: number;
            sourceMac: string;
            vlanRange: Array<vsanhealthService.vim.FcoeConfigVlanRange>;
            capabilities: vsanhealthService.vim.FcoeConfigFcoeCapabilities;
            fcoeActive: boolean;
         }
         interface HostFeatureCapability extends vsanhealthService.vim.DynamicData {
            key: string;
            featureName: string;
            value: string;
         }
         interface ArrayOfHostFeatureCapability {
            HostFeatureCapability?: Array<vsanhealthService.vim.HostFeatureCapability>;
         }
         interface HostFeatureMask extends vsanhealthService.vim.DynamicData {
            key: string;
            featureName: string;
            value: string;
         }
         interface ArrayOfHostFeatureMask {
            HostFeatureMask?: Array<vsanhealthService.vim.HostFeatureMask>;
         }
         enum HostFeatureVersionKey {
            "faultTolerance",
         }
         interface HostFeatureVersionInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            value: string;
         }
         interface ArrayOfHostFeatureVersionInfo {
            HostFeatureVersionInfo?: Array<vsanhealthService.vim.HostFeatureVersionInfo>;
         }
         interface ModeInfo extends vsanhealthService.vim.DynamicData {
            browse?: string;
            read: string;
            modify: string;
            use: string;
            admin?: string;
            full: string;
         }
         interface HostFileAccess extends vsanhealthService.vim.DynamicData {
            who: string;
            what: string;
         }
         interface HostFileSystemVolumeInfo extends vsanhealthService.vim.DynamicData {
            volumeTypeList?: Array<string>;
            mountInfo?: Array<vsanhealthService.vim.HostFileSystemMountInfo>;
         }
         enum FileSystemMountInfoVStorageSupportStatus {
            "vStorageSupported",
            "vStorageUnsupported",
            "vStorageUnknown",
         }
         interface HostFileSystemMountInfo extends vsanhealthService.vim.DynamicData {
            mountInfo: vsanhealthService.vim.HostMountInfo;
            volume: vsanhealthService.vim.HostFileSystemVolume;
            vStorageSupport?: string;
         }
         interface ArrayOfHostFileSystemMountInfo {
            HostFileSystemMountInfo?: Array<vsanhealthService.vim.HostFileSystemMountInfo>;
         }
         enum HostFileSystemVolumeFileSystemType {
            "VMFS",
            "NFS",
            "NFS41",
            "CIFS",
            "vsan",
            "VFFS",
            "VVOL",
            "OTHER",
         }
         interface HostFileSystemVolume extends vsanhealthService.vim.DynamicData {
            type: string;
            name: string;
            capacity: number;
         }
         interface HostNasVolumeUserInfo extends vsanhealthService.vim.DynamicData {
            user: string;
         }
         enum HostNasVolumeSecurityType {
            "AUTH_SYS",
            "SEC_KRB5",
            "SEC_KRB5I",
         }
         interface HostNasVolumeSpec extends vsanhealthService.vim.DynamicData {
            remoteHost: string;
            remotePath: string;
            localPath: string;
            accessMode: string;
            type?: string;
            userName?: string;
            password?: string;
            remoteHostNames?: Array<string>;
            securityType?: string;
         }
         interface HostNasVolumeConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            spec?: vsanhealthService.vim.HostNasVolumeSpec;
         }
         interface ArrayOfHostNasVolumeConfig {
            HostNasVolumeConfig?: Array<vsanhealthService.vim.HostNasVolumeConfig>;
         }
         interface HostNasVolume extends vsanhealthService.vim.HostFileSystemVolume {
            remoteHost: string;
            remotePath: string;
            userName?: string;
            remoteHostNames?: Array<string>;
            securityType?: string;
            protocolEndpoint?: boolean;
         }
         interface HostLocalFileSystemVolumeSpec extends vsanhealthService.vim.DynamicData {
            device: string;
            localPath: string;
         }
         interface HostLocalFileSystemVolume extends vsanhealthService.vim.HostFileSystemVolume {
            device: string;
         }
         interface HostVfatVolume extends vsanhealthService.vim.HostFileSystemVolume {
         }
         interface HostFirewallConfigRuleSetConfig extends vsanhealthService.vim.DynamicData {
            rulesetId: string;
            enabled: boolean;
            allowedHosts?: vsanhealthService.vim.HostFirewallRulesetIpList;
         }
         interface ArrayOfHostFirewallConfigRuleSetConfig {
            HostFirewallConfigRuleSetConfig?: Array<vsanhealthService.vim.HostFirewallConfigRuleSetConfig>;
         }
         interface HostFirewallConfig extends vsanhealthService.vim.DynamicData {
            rule?: Array<vsanhealthService.vim.HostFirewallConfigRuleSetConfig>;
            defaultBlockingPolicy: vsanhealthService.vim.HostFirewallDefaultPolicy;
         }
         interface HostFirewallDefaultPolicy extends vsanhealthService.vim.DynamicData {
            incomingBlocked?: boolean;
            outgoingBlocked?: boolean;
         }
         interface HostFirewallInfo extends vsanhealthService.vim.DynamicData {
            defaultPolicy: vsanhealthService.vim.HostFirewallDefaultPolicy;
            ruleset?: Array<vsanhealthService.vim.HostFirewallRuleset>;
         }
         interface HostFlagInfo extends vsanhealthService.vim.DynamicData {
            backgroundSnapshotsEnabled?: boolean;
         }
         interface HostForceMountedInfo extends vsanhealthService.vim.DynamicData {
            persist: boolean;
            mounted: boolean;
         }
         interface HostGatewaySpec extends vsanhealthService.vim.DynamicData {
            gatewayType: string;
            gatewayId?: string;
            trustVerificationToken?: string;
            hostAuthParams?: Array<vsanhealthService.vim.KeyValue>;
         }
         enum HostGraphicsConfigGraphicsType {
            "shared",
            "sharedDirect",
         }
         enum HostGraphicsConfigSharedPassthruAssignmentPolicy {
            "performance",
            "consolidation",
         }
         interface HostGraphicsConfigDeviceType extends vsanhealthService.vim.DynamicData {
            deviceId: string;
            graphicsType: string;
         }
         interface ArrayOfHostGraphicsConfigDeviceType {
            HostGraphicsConfigDeviceType?: Array<vsanhealthService.vim.HostGraphicsConfigDeviceType>;
         }
         interface HostGraphicsConfig extends vsanhealthService.vim.DynamicData {
            hostDefaultGraphicsType: string;
            sharedPassthruAssignmentPolicy: string;
            deviceType?: Array<vsanhealthService.vim.HostGraphicsConfigDeviceType>;
         }
         enum HostGraphicsInfoGraphicsType {
            "basic",
            "shared",
            "direct",
            "sharedDirect",
         }
         interface HostGraphicsInfo extends vsanhealthService.vim.DynamicData {
            deviceName: string;
            vendorName: string;
            pciId: string;
            graphicsType: string;
            memorySizeInKB: number;
            vm?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ArrayOfHostGraphicsInfo {
            HostGraphicsInfo?: Array<vsanhealthService.vim.HostGraphicsInfo>;
         }
         interface HostHardwareInfo extends vsanhealthService.vim.DynamicData {
            systemInfo: vsanhealthService.vim.HostSystemInfo;
            cpuPowerManagementInfo?: vsanhealthService.vim.HostCpuPowerManagementInfo;
            cpuInfo: vsanhealthService.vim.HostCpuInfo;
            cpuPkg: Array<vsanhealthService.vim.HostCpuPackage>;
            memorySize: number;
            numaInfo?: vsanhealthService.vim.HostNumaInfo;
            smcPresent?: boolean;
            pciDevice?: Array<vsanhealthService.vim.HostPciDevice>;
            cpuFeature?: Array<vsanhealthService.vim.HostCpuIdInfo>;
            biosInfo?: vsanhealthService.vim.HostBIOSInfo;
            reliableMemoryInfo?: vsanhealthService.vim.HostReliableMemoryInfo;
         }
         interface HostSystemInfo extends vsanhealthService.vim.DynamicData {
            vendor: string;
            model: string;
            uuid: string;
            otherIdentifyingInfo?: Array<vsanhealthService.vim.HostSystemIdentificationInfo>;
         }
         enum HostCpuPowerManagementInfoPolicyType {
            "off",
            "staticPolicy",
            "dynamicPolicy",
         }
         interface HostCpuPowerManagementInfo extends vsanhealthService.vim.DynamicData {
            currentPolicy?: string;
            hardwareSupport?: string;
         }
         interface HostCpuInfo extends vsanhealthService.vim.DynamicData {
            numCpuPackages: number;
            numCpuCores: number;
            numCpuThreads: number;
            hz: number;
         }
         enum HostCpuPackageVendor {
            "unknown",
            "intel",
            "amd",
         }
         interface HostCpuPackage extends vsanhealthService.vim.DynamicData {
            index: number;
            vendor: string;
            hz: number;
            busHz: number;
            description: string;
            threadId: Array<number>;
            cpuFeature?: Array<vsanhealthService.vim.HostCpuIdInfo>;
         }
         interface ArrayOfHostCpuPackage {
            HostCpuPackage?: Array<vsanhealthService.vim.HostCpuPackage>;
         }
         interface HostNumaInfo extends vsanhealthService.vim.DynamicData {
            type: string;
            numNodes: number;
            numaNode?: Array<vsanhealthService.vim.HostNumaNode>;
         }
         interface HostNumaNode extends vsanhealthService.vim.DynamicData {
            typeId: number;
            cpuID: Array<number>;
            memoryRangeBegin: number;
            memoryRangeLength: number;
         }
         interface ArrayOfHostNumaNode {
            HostNumaNode?: Array<vsanhealthService.vim.HostNumaNode>;
         }
         interface HostBIOSInfo extends vsanhealthService.vim.DynamicData {
            biosVersion?: string;
            releaseDate?: Date;
            vendor?: string;
            majorRelease?: number;
            minorRelease?: number;
            firmwareMajorRelease?: number;
            firmwareMinorRelease?: number;
         }
         interface HostReliableMemoryInfo extends vsanhealthService.vim.DynamicData {
            memorySize: number;
         }
         enum HostHardwareElementStatus {
            "Unknown",
            "Green",
            "Yellow",
            "Red",
         }
         interface HostHardwareElementInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            status: vsanhealthService.vim.ElementDescription;
         }
         interface ArrayOfHostHardwareElementInfo {
            HostHardwareElementInfo?: Array<vsanhealthService.vim.HostHardwareElementInfo>;
         }
         interface HostStorageOperationalInfo extends vsanhealthService.vim.DynamicData {
            property: string;
            value: string;
         }
         interface ArrayOfHostStorageOperationalInfo {
            HostStorageOperationalInfo?: Array<vsanhealthService.vim.HostStorageOperationalInfo>;
         }
         interface HostStorageElementInfo extends vsanhealthService.vim.HostHardwareElementInfo {
            operationalInfo?: Array<vsanhealthService.vim.HostStorageOperationalInfo>;
         }
         interface ArrayOfHostStorageElementInfo {
            HostStorageElementInfo?: Array<vsanhealthService.vim.HostStorageElementInfo>;
         }
         interface HostHardwareStatusInfo extends vsanhealthService.vim.DynamicData {
            memoryStatusInfo?: Array<vsanhealthService.vim.HostHardwareElementInfo>;
            cpuStatusInfo?: Array<vsanhealthService.vim.HostHardwareElementInfo>;
            storageStatusInfo?: Array<vsanhealthService.vim.HostStorageElementInfo>;
         }
         interface HealthSystemRuntime extends vsanhealthService.vim.DynamicData {
            systemHealthInfo?: vsanhealthService.vim.HostSystemHealthInfo;
            hardwareStatusInfo?: vsanhealthService.vim.HostHardwareStatusInfo;
         }
         enum HostAccessMode {
            "accessNone",
            "accessAdmin",
            "accessNoAccess",
            "accessReadOnly",
            "accessOther",
         }
         interface HostAccessControlEntry extends vsanhealthService.vim.DynamicData {
            principal: string;
            group: boolean;
            accessMode: vsanhealthService.vim.HostAccessMode;
         }
         interface ArrayOfHostAccessControlEntry {
            HostAccessControlEntry?: Array<vsanhealthService.vim.HostAccessControlEntry>;
         }
         enum HostLockdownMode {
            "lockdownDisabled",
            "lockdownNormal",
            "lockdownStrict",
         }
         interface HostHostBusAdapter extends vsanhealthService.vim.DynamicData {
            key?: string;
            device: string;
            bus: number;
            status: string;
            model: string;
            driver?: string;
            pci?: string;
         }
         interface ArrayOfHostHostBusAdapter {
            HostHostBusAdapter?: Array<vsanhealthService.vim.HostHostBusAdapter>;
         }
         interface HostParallelScsiHba extends vsanhealthService.vim.HostHostBusAdapter {
         }
         interface HostSerialAttachedHba extends vsanhealthService.vim.HostHostBusAdapter {
            nodeWorldWideName: string;
         }
         interface HostBlockHba extends vsanhealthService.vim.HostHostBusAdapter {
         }
         enum FibreChannelPortType {
            "fabric",
            "loop",
            "pointToPoint",
            "unknown",
         }
         interface HostFibreChannelHba extends vsanhealthService.vim.HostHostBusAdapter {
            portWorldWideName: number;
            nodeWorldWideName: number;
            portType: vsanhealthService.vim.FibreChannelPortType;
            speed: number;
         }
         interface HostInternetScsiHbaParamValue extends vsanhealthService.vim.OptionValue {
            isInherited?: boolean;
         }
         interface ArrayOfHostInternetScsiHbaParamValue {
            HostInternetScsiHbaParamValue?: Array<vsanhealthService.vim.HostInternetScsiHbaParamValue>;
         }
         interface HostInternetScsiHbaDiscoveryCapabilities extends vsanhealthService.vim.DynamicData {
            iSnsDiscoverySettable: boolean;
            slpDiscoverySettable: boolean;
            staticTargetDiscoverySettable: boolean;
            sendTargetsDiscoverySettable: boolean;
         }
         enum InternetScsiSnsDiscoveryMethod {
            "isnsStatic",
            "isnsDhcp",
            "isnsSlp",
         }
         enum SlpDiscoveryMethod {
            "slpDhcp",
            "slpAutoUnicast",
            "slpAutoMulticast",
            "slpManual",
         }
         interface HostInternetScsiHbaDiscoveryProperties extends vsanhealthService.vim.DynamicData {
            iSnsDiscoveryEnabled: boolean;
            iSnsDiscoveryMethod?: string;
            iSnsHost?: string;
            slpDiscoveryEnabled: boolean;
            slpDiscoveryMethod?: string;
            slpHost?: string;
            staticTargetDiscoveryEnabled: boolean;
            sendTargetsDiscoveryEnabled: boolean;
         }
         enum HostInternetScsiHbaChapAuthenticationType {
            "chapProhibited",
            "chapDiscouraged",
            "chapPreferred",
            "chapRequired",
         }
         interface HostInternetScsiHbaAuthenticationCapabilities extends vsanhealthService.vim.DynamicData {
            chapAuthSettable: boolean;
            krb5AuthSettable: boolean;
            srpAuthSettable: boolean;
            spkmAuthSettable: boolean;
            mutualChapSettable?: boolean;
            targetChapSettable?: boolean;
            targetMutualChapSettable?: boolean;
         }
         interface HostInternetScsiHbaAuthenticationProperties extends vsanhealthService.vim.DynamicData {
            chapAuthEnabled: boolean;
            chapName?: string;
            chapSecret?: string;
            chapAuthenticationType?: string;
            chapInherited?: boolean;
            mutualChapName?: string;
            mutualChapSecret?: string;
            mutualChapAuthenticationType?: string;
            mutualChapInherited?: boolean;
         }
         enum HostInternetScsiHbaDigestType {
            "digestProhibited",
            "digestDiscouraged",
            "digestPreferred",
            "digestRequired",
         }
         interface HostInternetScsiHbaDigestCapabilities extends vsanhealthService.vim.DynamicData {
            headerDigestSettable?: boolean;
            dataDigestSettable?: boolean;
            targetHeaderDigestSettable?: boolean;
            targetDataDigestSettable?: boolean;
         }
         interface HostInternetScsiHbaDigestProperties extends vsanhealthService.vim.DynamicData {
            headerDigestType?: string;
            headerDigestInherited?: boolean;
            dataDigestType?: string;
            dataDigestInherited?: boolean;
         }
         interface HostInternetScsiHbaIPCapabilities extends vsanhealthService.vim.DynamicData {
            addressSettable: boolean;
            ipConfigurationMethodSettable: boolean;
            subnetMaskSettable: boolean;
            defaultGatewaySettable: boolean;
            primaryDnsServerAddressSettable: boolean;
            alternateDnsServerAddressSettable: boolean;
            ipv6Supported?: boolean;
            arpRedirectSettable?: boolean;
            mtuSettable?: boolean;
            hostNameAsTargetAddress?: boolean;
            nameAliasSettable?: boolean;
            ipv4EnableSettable?: boolean;
            ipv6EnableSettable?: boolean;
            ipv6PrefixLengthSettable?: boolean;
            ipv6PrefixLength?: number;
            ipv6DhcpConfigurationSettable?: boolean;
            ipv6LinkLocalAutoConfigurationSettable?: boolean;
            ipv6RouterAdvertisementConfigurationSettable?: boolean;
            ipv6DefaultGatewaySettable?: boolean;
            ipv6MaxStaticAddressesSupported?: number;
         }
         enum HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType {
            "DHCP",
            "AutoConfigured",
            "Static",
            "Other",
         }
         enum HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation {
            "add",
            "remove",
         }
         interface HostInternetScsiHbaIscsiIpv6Address extends vsanhealthService.vim.DynamicData {
            address: string;
            prefixLength: number;
            origin: string;
            operation?: string;
         }
         interface ArrayOfHostInternetScsiHbaIscsiIpv6Address {
            HostInternetScsiHbaIscsiIpv6Address?: Array<vsanhealthService.vim.HostInternetScsiHbaIscsiIpv6Address>;
         }
         interface HostInternetScsiHbaIPv6Properties extends vsanhealthService.vim.DynamicData {
            iscsiIpv6Address?: Array<vsanhealthService.vim.HostInternetScsiHbaIscsiIpv6Address>;
            ipv6DhcpConfigurationEnabled?: boolean;
            ipv6LinkLocalAutoConfigurationEnabled?: boolean;
            ipv6RouterAdvertisementConfigurationEnabled?: boolean;
            ipv6DefaultGateway?: string;
         }
         interface HostInternetScsiHbaIPProperties extends vsanhealthService.vim.DynamicData {
            mac?: string;
            address?: string;
            dhcpConfigurationEnabled: boolean;
            subnetMask?: string;
            defaultGateway?: string;
            primaryDnsServerAddress?: string;
            alternateDnsServerAddress?: string;
            ipv6Address?: string;
            ipv6SubnetMask?: string;
            ipv6DefaultGateway?: string;
            arpRedirectEnabled?: boolean;
            mtu?: number;
            jumboFramesEnabled?: boolean;
            ipv4Enabled?: boolean;
            ipv6Enabled?: boolean;
            ipv6properties?: vsanhealthService.vim.HostInternetScsiHbaIPv6Properties;
         }
         interface HostInternetScsiHbaSendTarget extends vsanhealthService.vim.DynamicData {
            address: string;
            port?: number;
            authenticationProperties?: vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties;
            digestProperties?: vsanhealthService.vim.HostInternetScsiHbaDigestProperties;
            supportedAdvancedOptions?: Array<vsanhealthService.vim.OptionDef>;
            advancedOptions?: Array<vsanhealthService.vim.HostInternetScsiHbaParamValue>;
            parent?: string;
         }
         interface ArrayOfHostInternetScsiHbaSendTarget {
            HostInternetScsiHbaSendTarget?: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>;
         }
         enum HostInternetScsiHbaStaticTargetTargetDiscoveryMethod {
            "staticMethod",
            "sendTargetMethod",
            "slpMethod",
            "isnsMethod",
            "unknownMethod",
         }
         interface HostInternetScsiHbaStaticTarget extends vsanhealthService.vim.DynamicData {
            address: string;
            port?: number;
            iScsiName: string;
            discoveryMethod?: string;
            authenticationProperties?: vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties;
            digestProperties?: vsanhealthService.vim.HostInternetScsiHbaDigestProperties;
            supportedAdvancedOptions?: Array<vsanhealthService.vim.OptionDef>;
            advancedOptions?: Array<vsanhealthService.vim.HostInternetScsiHbaParamValue>;
            parent?: string;
         }
         interface ArrayOfHostInternetScsiHbaStaticTarget {
            HostInternetScsiHbaStaticTarget?: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>;
         }
         interface HostInternetScsiHbaTargetSet extends vsanhealthService.vim.DynamicData {
            staticTargets?: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>;
            sendTargets?: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>;
         }
         enum HostInternetScsiHbaNetworkBindingSupportType {
            "notsupported",
            "optional",
            "required",
         }
         interface HostInternetScsiHba extends vsanhealthService.vim.HostHostBusAdapter {
            isSoftwareBased: boolean;
            canBeDisabled?: boolean;
            networkBindingSupport?: vsanhealthService.vim.HostInternetScsiHbaNetworkBindingSupportType;
            discoveryCapabilities: vsanhealthService.vim.HostInternetScsiHbaDiscoveryCapabilities;
            discoveryProperties: vsanhealthService.vim.HostInternetScsiHbaDiscoveryProperties;
            authenticationCapabilities: vsanhealthService.vim.HostInternetScsiHbaAuthenticationCapabilities;
            authenticationProperties: vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties;
            digestCapabilities?: vsanhealthService.vim.HostInternetScsiHbaDigestCapabilities;
            digestProperties?: vsanhealthService.vim.HostInternetScsiHbaDigestProperties;
            ipCapabilities: vsanhealthService.vim.HostInternetScsiHbaIPCapabilities;
            ipProperties: vsanhealthService.vim.HostInternetScsiHbaIPProperties;
            supportedAdvancedOptions?: Array<vsanhealthService.vim.OptionDef>;
            advancedOptions?: Array<vsanhealthService.vim.HostInternetScsiHbaParamValue>;
            iScsiName: string;
            iScsiAlias?: string;
            configuredSendTarget?: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>;
            configuredStaticTarget?: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>;
            maxSpeedMb?: number;
            currentSpeedMb?: number;
         }
         interface HostFibreChannelOverEthernetHbaLinkInfo extends vsanhealthService.vim.DynamicData {
            vnportMac: string;
            fcfMac: string;
            vlanId: number;
         }
         interface HostFibreChannelOverEthernetHba extends vsanhealthService.vim.HostFibreChannelHba {
            underlyingNic: string;
            linkInfo: vsanhealthService.vim.HostFibreChannelOverEthernetHbaLinkInfo;
            isSoftwareFcoe: boolean;
            markedForRemoval: boolean;
         }
         interface HostProxySwitchSpec extends vsanhealthService.vim.DynamicData {
            backing?: vsanhealthService.vim.DistributedVirtualSwitchHostMemberBacking;
         }
         interface HostProxySwitchConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            uuid: string;
            spec?: vsanhealthService.vim.HostProxySwitchSpec;
         }
         interface ArrayOfHostProxySwitchConfig {
            HostProxySwitchConfig?: Array<vsanhealthService.vim.HostProxySwitchConfig>;
         }
         interface HostProxySwitchHostLagConfig extends vsanhealthService.vim.DynamicData {
            lagKey: string;
            lagName?: string;
            uplinkPort?: Array<vsanhealthService.vim.KeyValue>;
         }
         interface ArrayOfHostProxySwitchHostLagConfig {
            HostProxySwitchHostLagConfig?: Array<vsanhealthService.vim.HostProxySwitchHostLagConfig>;
         }
         interface HostProxySwitch extends vsanhealthService.vim.DynamicData {
            dvsUuid: string;
            dvsName: string;
            key: string;
            numPorts: number;
            configNumPorts?: number;
            numPortsAvailable: number;
            uplinkPort?: Array<vsanhealthService.vim.KeyValue>;
            mtu?: number;
            pnic?: Array<string>;
            spec: vsanhealthService.vim.HostProxySwitchSpec;
            hostLag?: Array<vsanhealthService.vim.HostProxySwitchHostLagConfig>;
            networkReservationSupported?: boolean;
         }
         interface ArrayOfHostProxySwitch {
            HostProxySwitch?: Array<vsanhealthService.vim.HostProxySwitch>;
         }
         enum HostImageAcceptanceLevel {
            "vmware_certified",
            "vmware_accepted",
            "partner",
            "community",
         }
         interface HostImageProfileSummary extends vsanhealthService.vim.DynamicData {
            name: string;
            vendor: string;
         }
         enum HostIpConfigIpV6AddressConfigType {
            "other",
            "manual",
            "dhcp",
            "linklayer",
            "random",
         }
         enum HostIpConfigIpV6AddressStatus {
            "preferred",
            "deprecated",
            "invalid",
            "inaccessible",
            "unknown",
            "tentative",
            "duplicate",
         }
         interface HostIpConfigIpV6Address extends vsanhealthService.vim.DynamicData {
            ipAddress: string;
            prefixLength: number;
            origin?: string;
            dadState?: string;
            lifetime?: Date;
            operation?: string;
         }
         interface ArrayOfHostIpConfigIpV6Address {
            HostIpConfigIpV6Address?: Array<vsanhealthService.vim.HostIpConfigIpV6Address>;
         }
         interface HostIpConfigIpV6AddressConfiguration extends vsanhealthService.vim.DynamicData {
            ipV6Address?: Array<vsanhealthService.vim.HostIpConfigIpV6Address>;
            autoConfigurationEnabled?: boolean;
            dhcpV6Enabled?: boolean;
         }
         interface HostIpConfig extends vsanhealthService.vim.DynamicData {
            dhcp: boolean;
            ipAddress?: string;
            subnetMask?: string;
            ipV6Config?: vsanhealthService.vim.HostIpConfigIpV6AddressConfiguration;
         }
         interface HostIpRouteConfig extends vsanhealthService.vim.DynamicData {
            defaultGateway?: string;
            gatewayDevice?: string;
            ipV6DefaultGateway?: string;
            ipV6GatewayDevice?: string;
         }
         interface HostIpRouteConfigSpec extends vsanhealthService.vim.HostIpRouteConfig {
            gatewayDeviceConnection?: vsanhealthService.vim.HostVirtualNicConnection;
            ipV6GatewayDeviceConnection?: vsanhealthService.vim.HostVirtualNicConnection;
         }
         interface HostIpRouteEntry extends vsanhealthService.vim.DynamicData {
            network: string;
            prefixLength: number;
            gateway: string;
            deviceName?: string;
         }
         interface ArrayOfHostIpRouteEntry {
            HostIpRouteEntry?: Array<vsanhealthService.vim.HostIpRouteEntry>;
         }
         interface HostIpRouteOp extends vsanhealthService.vim.DynamicData {
            changeOperation: string;
            route: vsanhealthService.vim.HostIpRouteEntry;
         }
         interface ArrayOfHostIpRouteOp {
            HostIpRouteOp?: Array<vsanhealthService.vim.HostIpRouteOp>;
         }
         interface HostIpRouteTableConfig extends vsanhealthService.vim.DynamicData {
            ipRoute?: Array<vsanhealthService.vim.HostIpRouteOp>;
            ipv6Route?: Array<vsanhealthService.vim.HostIpRouteOp>;
         }
         interface HostIpRouteTableInfo extends vsanhealthService.vim.DynamicData {
            ipRoute?: Array<vsanhealthService.vim.HostIpRouteEntry>;
            ipv6Route?: Array<vsanhealthService.vim.HostIpRouteEntry>;
         }
         interface HostIpmiInfo extends vsanhealthService.vim.DynamicData {
            bmcIpAddress?: string;
            bmcMacAddress?: string;
            login?: string;
            password?: string;
         }
         interface IscsiStatus extends vsanhealthService.vim.DynamicData {
            reason?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         enum IscsiPortInfoPathStatus {
            "notUsed",
            "active",
            "standBy",
            "lastActive",
         }
         interface IscsiPortInfo extends vsanhealthService.vim.DynamicData {
            vnicDevice?: string;
            vnic?: vsanhealthService.vim.HostVirtualNic;
            pnicDevice?: string;
            pnic?: vsanhealthService.vim.PhysicalNic;
            switchName?: string;
            switchUuid?: string;
            portgroupName?: string;
            portgroupKey?: string;
            portKey?: string;
            opaqueNetworkId?: string;
            opaqueNetworkType?: string;
            opaqueNetworkName?: string;
            externalId?: string;
            complianceStatus?: vsanhealthService.vim.IscsiStatus;
            pathStatus?: string;
         }
         interface ArrayOfIscsiPortInfo {
            IscsiPortInfo?: Array<vsanhealthService.vim.IscsiPortInfo>;
         }
         interface IscsiDependencyEntity extends vsanhealthService.vim.DynamicData {
            pnicDevice: string;
            vnicDevice: string;
            vmhbaName: string;
         }
         interface ArrayOfIscsiDependencyEntity {
            IscsiDependencyEntity?: Array<vsanhealthService.vim.IscsiDependencyEntity>;
         }
         interface IscsiMigrationDependency extends vsanhealthService.vim.DynamicData {
            migrationAllowed: boolean;
            disallowReason?: vsanhealthService.vim.IscsiStatus;
            dependency?: Array<vsanhealthService.vim.IscsiDependencyEntity>;
         }
         interface KernelModuleSectionInfo extends vsanhealthService.vim.DynamicData {
            address: number;
            length?: number;
         }
         interface KernelModuleInfo extends vsanhealthService.vim.DynamicData {
            id: number;
            name: string;
            version: string;
            filename: string;
            optionString: string;
            loaded: boolean;
            enabled: boolean;
            useCount: number;
            readOnlySection: vsanhealthService.vim.KernelModuleSectionInfo;
            writableSection: vsanhealthService.vim.KernelModuleSectionInfo;
            textSection: vsanhealthService.vim.KernelModuleSectionInfo;
            dataSection: vsanhealthService.vim.KernelModuleSectionInfo;
            bssSection: vsanhealthService.vim.KernelModuleSectionInfo;
         }
         interface ArrayOfKernelModuleInfo {
            KernelModuleInfo?: Array<vsanhealthService.vim.KernelModuleInfo>;
         }
         interface HostLicenseSpec extends vsanhealthService.vim.DynamicData {
            source?: vsanhealthService.vim.LicenseSource;
            editionKey?: string;
            disabledFeatureKey?: Array<string>;
            enabledFeatureKey?: Array<string>;
         }
         enum LinkDiscoveryProtocolConfigProtocolType {
            "cdp",
            "lldp",
         }
         enum LinkDiscoveryProtocolConfigOperationType {
            "none",
            "listen",
            "advertise",
            "both",
         }
         interface LinkDiscoveryProtocolConfig extends vsanhealthService.vim.DynamicData {
            protocol: string;
            operation: string;
         }
         interface HostAccountSpec extends vsanhealthService.vim.DynamicData {
            id: string;
            password?: string;
            description?: string;
         }
         interface ArrayOfHostAccountSpec {
            HostAccountSpec?: Array<vsanhealthService.vim.HostAccountSpec>;
         }
         interface HostPosixAccountSpec extends vsanhealthService.vim.HostAccountSpec {
            posixId?: number;
            shellAccess?: boolean;
         }
         interface HostLocalAuthenticationInfo extends vsanhealthService.vim.HostAuthenticationStoreInfo {
         }
         interface HostLowLevelProvisioningManagerVmRecoveryInfo extends vsanhealthService.vim.DynamicData {
            version: string;
            biosUUID: string;
            instanceUUID: string;
            ftInfo?: vsanhealthService.vim.FaultToleranceConfigInfo;
         }
         interface HostLowLevelProvisioningManagerVmMigrationStatus extends vsanhealthService.vim.DynamicData {
            migrationId: number;
            type: string;
            source: boolean;
            consideredSuccessful: boolean;
         }
         enum HostLowLevelProvisioningManagerReloadTarget {
            "currentConfig",
            "snapshotConfig",
         }
         interface HostLowLevelProvisioningManagerDiskLayoutSpec extends vsanhealthService.vim.DynamicData {
            controllerType: string;
            busNumber: number;
            unitNumber: number;
            srcFilename: string;
            dstFilename: string;
         }
         interface ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec {
            HostLowLevelProvisioningManagerDiskLayoutSpec?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec>;
         }
         interface HostLowLevelProvisioningManagerSnapshotLayoutSpec extends vsanhealthService.vim.DynamicData {
            id: number;
            srcFilename: string;
            dstFilename: string;
            disk?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec>;
         }
         interface ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec {
            HostLowLevelProvisioningManagerSnapshotLayoutSpec?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerSnapshotLayoutSpec>;
         }
         enum HostLowLevelProvisioningManagerFileType {
            "File",
            "VirtualDisk",
            "Directory",
         }
         interface HostLowLevelProvisioningManagerFileReserveSpec extends vsanhealthService.vim.DynamicData {
            baseName: string;
            parentDir: string;
            fileType: string;
            storageProfile: string;
         }
         interface ArrayOfHostLowLevelProvisioningManagerFileReserveSpec {
            HostLowLevelProvisioningManagerFileReserveSpec?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerFileReserveSpec>;
         }
         interface HostLowLevelProvisioningManagerFileReserveResult extends vsanhealthService.vim.DynamicData {
            baseName: string;
            parentDir: string;
            reservedName: string;
         }
         interface ArrayOfHostLowLevelProvisioningManagerFileReserveResult {
            HostLowLevelProvisioningManagerFileReserveResult?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerFileReserveResult>;
         }
         interface HostLowLevelProvisioningManagerFileDeleteSpec extends vsanhealthService.vim.DynamicData {
            fileName: string;
            fileType: string;
         }
         interface ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec {
            HostLowLevelProvisioningManagerFileDeleteSpec?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerFileDeleteSpec>;
         }
         interface HostLowLevelProvisioningManagerFileDeleteResult extends vsanhealthService.vim.DynamicData {
            fileName: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostLowLevelProvisioningManagerFileDeleteResult {
            HostLowLevelProvisioningManagerFileDeleteResult?: Array<vsanhealthService.vim.HostLowLevelProvisioningManagerFileDeleteResult>;
         }
         interface HostMaintenanceSpec extends vsanhealthService.vim.DynamicData {
            vsanMode?: vsanhealthService.vim.VsanHostDecommissionMode;
         }
         interface ServiceConsoleReservationInfo extends vsanhealthService.vim.DynamicData {
            serviceConsoleReservedCfg: number;
            serviceConsoleReserved: number;
            unreserved: number;
         }
         enum VirtualMachineMemoryAllocationPolicy {
            "swapNone",
            "swapSome",
            "swapMost",
         }
         interface VirtualMachineMemoryReservationInfo extends vsanhealthService.vim.DynamicData {
            virtualMachineMin: number;
            virtualMachineMax: number;
            virtualMachineReserved: number;
            allocationPolicy: string;
         }
         interface VirtualMachineMemoryReservationSpec extends vsanhealthService.vim.DynamicData {
            virtualMachineReserved?: number;
            allocationPolicy?: string;
         }
         interface HostMemorySpec extends vsanhealthService.vim.DynamicData {
            serviceConsoleReservation?: number;
         }
         enum HostMountMode {
            "readWrite",
            "readOnly",
         }
         enum HostMountInfoInaccessibleReason {
            "AllPathsDown_Start",
            "AllPathsDown_Timeout",
            "PermanentDeviceLoss",
         }
         interface HostMountInfo extends vsanhealthService.vim.DynamicData {
            path?: string;
            accessMode: string;
            mounted?: boolean;
            accessible?: boolean;
            inaccessibleReason?: string;
         }
         enum MultipathState {
            "standby",
            "active",
            "disabled",
            "dead",
            "unknown",
         }
         interface HostMultipathInfoLogicalUnitPolicy extends vsanhealthService.vim.DynamicData {
            policy: string;
         }
         interface HostMultipathInfoLogicalUnitStorageArrayTypePolicy extends vsanhealthService.vim.DynamicData {
            policy: string;
         }
         interface HostMultipathInfoFixedLogicalUnitPolicy extends vsanhealthService.vim.HostMultipathInfoLogicalUnitPolicy {
            prefer: string;
         }
         interface HostMultipathInfoLogicalUnit extends vsanhealthService.vim.DynamicData {
            key: string;
            id: string;
            lun: string;
            path: Array<vsanhealthService.vim.HostMultipathInfoPath>;
            policy: vsanhealthService.vim.HostMultipathInfoLogicalUnitPolicy;
            storageArrayTypePolicy?: vsanhealthService.vim.HostMultipathInfoLogicalUnitStorageArrayTypePolicy;
         }
         interface ArrayOfHostMultipathInfoLogicalUnit {
            HostMultipathInfoLogicalUnit?: Array<vsanhealthService.vim.HostMultipathInfoLogicalUnit>;
         }
         interface HostMultipathInfoPath extends vsanhealthService.vim.DynamicData {
            key: string;
            name: string;
            pathState: string;
            state?: string;
            isWorkingPath?: boolean;
            adapter: string;
            lun: string;
            transport?: vsanhealthService.vim.HostTargetTransport;
         }
         interface ArrayOfHostMultipathInfoPath {
            HostMultipathInfoPath?: Array<vsanhealthService.vim.HostMultipathInfoPath>;
         }
         interface HostMultipathInfo extends vsanhealthService.vim.DynamicData {
            lun?: Array<vsanhealthService.vim.HostMultipathInfoLogicalUnit>;
         }
         interface HostMultipathStateInfoPath extends vsanhealthService.vim.DynamicData {
            name: string;
            pathState: string;
         }
         interface ArrayOfHostMultipathStateInfoPath {
            HostMultipathStateInfoPath?: Array<vsanhealthService.vim.HostMultipathStateInfoPath>;
         }
         interface HostMultipathStateInfo extends vsanhealthService.vim.DynamicData {
            path?: Array<vsanhealthService.vim.HostMultipathStateInfoPath>;
         }
         interface HostNatServicePortForwardSpec extends vsanhealthService.vim.DynamicData {
            type: string;
            name: string;
            hostPort: number;
            guestPort: number;
            guestIpAddress: string;
         }
         interface ArrayOfHostNatServicePortForwardSpec {
            HostNatServicePortForwardSpec?: Array<vsanhealthService.vim.HostNatServicePortForwardSpec>;
         }
         interface HostNatServiceNameServiceSpec extends vsanhealthService.vim.DynamicData {
            dnsAutoDetect: boolean;
            dnsPolicy: string;
            dnsRetries: number;
            dnsTimeout: number;
            dnsNameServer?: Array<string>;
            nbdsTimeout: number;
            nbnsRetries: number;
            nbnsTimeout: number;
         }
         interface HostNatServiceSpec extends vsanhealthService.vim.DynamicData {
            virtualSwitch: string;
            activeFtp: boolean;
            allowAnyOui: boolean;
            configPort: boolean;
            ipGatewayAddress: string;
            udpTimeout: number;
            portForward?: Array<vsanhealthService.vim.HostNatServicePortForwardSpec>;
            nameService?: vsanhealthService.vim.HostNatServiceNameServiceSpec;
         }
         interface HostNatServiceConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            key: string;
            spec: vsanhealthService.vim.HostNatServiceSpec;
         }
         interface ArrayOfHostNatServiceConfig {
            HostNatServiceConfig?: Array<vsanhealthService.vim.HostNatServiceConfig>;
         }
         interface HostNatService extends vsanhealthService.vim.DynamicData {
            key: string;
            spec: vsanhealthService.vim.HostNatServiceSpec;
         }
         interface ArrayOfHostNatService {
            HostNatService?: Array<vsanhealthService.vim.HostNatService>;
         }
         interface HostNetCapabilities extends vsanhealthService.vim.DynamicData {
            canSetPhysicalNicLinkSpeed: boolean;
            supportsNicTeaming: boolean;
            nicTeamingPolicy?: Array<string>;
            supportsVlan: boolean;
            usesServiceConsoleNic: boolean;
            supportsNetworkHints: boolean;
            maxPortGroupsPerVswitch?: number;
            vswitchConfigSupported?: boolean;
            vnicConfigSupported?: boolean;
            ipRouteConfigSupported?: boolean;
            dnsConfigSupported?: boolean;
            dhcpOnVnicSupported?: boolean;
            ipV6Supported?: boolean;
         }
         interface HostNetOffloadCapabilities extends vsanhealthService.vim.DynamicData {
            csumOffload?: boolean;
            tcpSegmentation?: boolean;
            zeroCopyXmit?: boolean;
         }
         enum HostNetStackInstanceSystemStackKey {
            "defaultTcpipStack",
            "vmotion",
            "vSphereProvisioning",
         }
         enum HostNetStackInstanceCongestionControlAlgorithmType {
            "newreno",
            "cubic",
         }
         interface HostNetStackInstance extends vsanhealthService.vim.DynamicData {
            key?: string;
            name?: string;
            dnsConfig?: vsanhealthService.vim.HostDnsConfig;
            ipRouteConfig?: vsanhealthService.vim.HostIpRouteConfig;
            requestedMaxNumberOfConnections?: number;
            congestionControlAlgorithm?: string;
            ipV6Enabled?: boolean;
            routeTableConfig?: vsanhealthService.vim.HostIpRouteTableConfig;
         }
         interface ArrayOfHostNetStackInstance {
            HostNetStackInstance?: Array<vsanhealthService.vim.HostNetStackInstance>;
         }
         interface HostNetworkConfigResult extends vsanhealthService.vim.DynamicData {
            vnicDevice?: Array<string>;
            consoleVnicDevice?: Array<string>;
         }
         interface HostNetworkConfigNetStackSpec extends vsanhealthService.vim.DynamicData {
            netStackInstance: vsanhealthService.vim.HostNetStackInstance;
            operation?: string;
         }
         interface ArrayOfHostNetworkConfigNetStackSpec {
            HostNetworkConfigNetStackSpec?: Array<vsanhealthService.vim.HostNetworkConfigNetStackSpec>;
         }
         interface HostNetworkConfig extends vsanhealthService.vim.DynamicData {
            vswitch?: Array<vsanhealthService.vim.HostVirtualSwitchConfig>;
            proxySwitch?: Array<vsanhealthService.vim.HostProxySwitchConfig>;
            portgroup?: Array<vsanhealthService.vim.HostPortGroupConfig>;
            pnic?: Array<vsanhealthService.vim.PhysicalNicConfig>;
            vnic?: Array<vsanhealthService.vim.HostVirtualNicConfig>;
            consoleVnic?: Array<vsanhealthService.vim.HostVirtualNicConfig>;
            dnsConfig?: vsanhealthService.vim.HostDnsConfig;
            ipRouteConfig?: vsanhealthService.vim.HostIpRouteConfig;
            consoleIpRouteConfig?: vsanhealthService.vim.HostIpRouteConfig;
            routeTableConfig?: vsanhealthService.vim.HostIpRouteTableConfig;
            dhcp?: Array<vsanhealthService.vim.HostDhcpServiceConfig>;
            nat?: Array<vsanhealthService.vim.HostNatServiceConfig>;
            ipV6Enabled?: boolean;
            netStackSpec?: Array<vsanhealthService.vim.HostNetworkConfigNetStackSpec>;
         }
         interface HostNetworkInfo extends vsanhealthService.vim.DynamicData {
            vswitch?: Array<vsanhealthService.vim.HostVirtualSwitch>;
            proxySwitch?: Array<vsanhealthService.vim.HostProxySwitch>;
            portgroup?: Array<vsanhealthService.vim.HostPortGroup>;
            pnic?: Array<vsanhealthService.vim.PhysicalNic>;
            vnic?: Array<vsanhealthService.vim.HostVirtualNic>;
            consoleVnic?: Array<vsanhealthService.vim.HostVirtualNic>;
            dnsConfig?: vsanhealthService.vim.HostDnsConfig;
            ipRouteConfig?: vsanhealthService.vim.HostIpRouteConfig;
            consoleIpRouteConfig?: vsanhealthService.vim.HostIpRouteConfig;
            routeTableInfo?: vsanhealthService.vim.HostIpRouteTableInfo;
            dhcp?: Array<vsanhealthService.vim.HostDhcpService>;
            nat?: Array<vsanhealthService.vim.HostNatService>;
            ipV6Enabled?: boolean;
            atBootIpV6Enabled?: boolean;
            netStackInstance?: Array<vsanhealthService.vim.HostNetStackInstance>;
            opaqueSwitch?: Array<vsanhealthService.vim.HostOpaqueSwitch>;
            opaqueNetwork?: Array<vsanhealthService.vim.HostOpaqueNetworkInfo>;
         }
         interface HostNetworkSecurityPolicy extends vsanhealthService.vim.DynamicData {
            allowPromiscuous?: boolean;
            macChanges?: boolean;
            forgedTransmits?: boolean;
         }
         interface HostNetworkTrafficShapingPolicy extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            averageBandwidth?: number;
            peakBandwidth?: number;
            burstSize?: number;
         }
         interface HostNicFailureCriteria extends vsanhealthService.vim.DynamicData {
            checkSpeed?: string;
            speed?: number;
            checkDuplex?: boolean;
            fullDuplex?: boolean;
            checkErrorPercent?: boolean;
            percentage?: number;
            checkBeacon?: boolean;
         }
         interface HostNicOrderPolicy extends vsanhealthService.vim.DynamicData {
            activeNic?: Array<string>;
            standbyNic?: Array<string>;
         }
         interface HostNicTeamingPolicy extends vsanhealthService.vim.DynamicData {
            policy?: string;
            reversePolicy?: boolean;
            notifySwitches?: boolean;
            rollingOrder?: boolean;
            failureCriteria?: vsanhealthService.vim.HostNicFailureCriteria;
            nicOrder?: vsanhealthService.vim.HostNicOrderPolicy;
         }
         interface HostNetworkPolicy extends vsanhealthService.vim.DynamicData {
            security?: vsanhealthService.vim.HostNetworkSecurityPolicy;
            nicTeaming?: vsanhealthService.vim.HostNicTeamingPolicy;
            offloadPolicy?: vsanhealthService.vim.HostNetOffloadCapabilities;
            shapingPolicy?: vsanhealthService.vim.HostNetworkTrafficShapingPolicy;
         }
         interface HostNtpConfig extends vsanhealthService.vim.DynamicData {
            server?: Array<string>;
            configFile?: Array<string>;
         }
         enum HostNumericSensorHealthState {
            "unknown",
            "green",
            "yellow",
            "red",
         }
         enum HostNumericSensorType {
            "fan",
            "power",
            "temperature",
            "voltage",
            "other",
            "processor",
            "memory",
            "storage",
            "systemBoard",
            "battery",
            "bios",
            "cable",
            "watchdog",
         }
         interface HostNumericSensorInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            healthState?: vsanhealthService.vim.ElementDescription;
            currentReading: number;
            unitModifier: number;
            baseUnits: string;
            rateUnits?: string;
            sensorType?: string;
            id?: string;
            timeStamp?: string;
         }
         interface ArrayOfHostNumericSensorInfo {
            HostNumericSensorInfo?: Array<vsanhealthService.vim.HostNumericSensorInfo>;
         }
         interface HostOpaqueNetworkInfo extends vsanhealthService.vim.DynamicData {
            opaqueNetworkId: string;
            opaqueNetworkName: string;
            opaqueNetworkType: string;
            pnicZone?: Array<string>;
            capability?: vsanhealthService.vim.OpaqueNetworkCapability;
            extraConfig?: Array<vsanhealthService.vim.OptionValue>;
         }
         interface ArrayOfHostOpaqueNetworkInfo {
            HostOpaqueNetworkInfo?: Array<vsanhealthService.vim.HostOpaqueNetworkInfo>;
         }
         enum HostOpaqueSwitchOpaqueSwitchState {
            "up",
            "warning",
            "down",
         }
         interface HostOpaqueSwitchPhysicalNicZone extends vsanhealthService.vim.DynamicData {
            key: string;
            pnicDevice?: Array<string>;
         }
         interface ArrayOfHostOpaqueSwitchPhysicalNicZone {
            HostOpaqueSwitchPhysicalNicZone?: Array<vsanhealthService.vim.HostOpaqueSwitchPhysicalNicZone>;
         }
         interface HostOpaqueSwitch extends vsanhealthService.vim.DynamicData {
            key: string;
            name?: string;
            pnic?: Array<string>;
            pnicZone?: Array<vsanhealthService.vim.HostOpaqueSwitchPhysicalNicZone>;
            status?: string;
            vtep?: Array<vsanhealthService.vim.HostVirtualNic>;
            extraConfig?: Array<vsanhealthService.vim.OptionValue>;
         }
         interface ArrayOfHostOpaqueSwitch {
            HostOpaqueSwitch?: Array<vsanhealthService.vim.HostOpaqueSwitch>;
         }
         interface HostPatchManagerResult extends vsanhealthService.vim.DynamicData {
            version: string;
            status?: Array<vsanhealthService.vim.HostPatchManagerStatus>;
            xmlResult?: string;
         }
         enum HostPatchManagerReason {
            "obsoleted",
            "missingPatch",
            "missingLib",
            "hasDependentPatch",
            "conflictPatch",
            "conflictLib",
         }
         enum HostPatchManagerIntegrityStatus {
            "validated",
            "keyNotFound",
            "keyRevoked",
            "keyExpired",
            "digestMismatch",
            "notEnoughSignatures",
            "validationError",
         }
         enum HostPatchManagerInstallState {
            "hostRestarted",
            "imageActive",
         }
         interface HostPatchManagerStatusPrerequisitePatch extends vsanhealthService.vim.DynamicData {
            id: string;
            installState?: Array<string>;
         }
         interface ArrayOfHostPatchManagerStatusPrerequisitePatch {
            HostPatchManagerStatusPrerequisitePatch?: Array<vsanhealthService.vim.HostPatchManagerStatusPrerequisitePatch>;
         }
         interface HostPatchManagerStatus extends vsanhealthService.vim.DynamicData {
            id: string;
            applicable: boolean;
            reason?: Array<string>;
            integrity?: string;
            installed: boolean;
            installState?: Array<string>;
            prerequisitePatch?: Array<vsanhealthService.vim.HostPatchManagerStatusPrerequisitePatch>;
            restartRequired: boolean;
            reconnectRequired: boolean;
            vmOffRequired: boolean;
            supersededPatchIds?: Array<string>;
         }
         interface ArrayOfHostPatchManagerStatus {
            HostPatchManagerStatus?: Array<vsanhealthService.vim.HostPatchManagerStatus>;
         }
         interface HostPatchManagerLocator extends vsanhealthService.vim.DynamicData {
            url: string;
            proxy?: string;
         }
         interface HostPatchManagerPatchManagerOperationSpec extends vsanhealthService.vim.DynamicData {
            proxy?: string;
            port?: number;
            userName?: string;
            password?: string;
            cmdOption?: string;
         }
         interface HostPathSelectionPolicyOption extends vsanhealthService.vim.DynamicData {
            policy: vsanhealthService.vim.ElementDescription;
         }
         interface ArrayOfHostPathSelectionPolicyOption {
            HostPathSelectionPolicyOption?: Array<vsanhealthService.vim.HostPathSelectionPolicyOption>;
         }
         interface HostPciDevice extends vsanhealthService.vim.DynamicData {
            id: string;
            classId: number;
            bus: number;
            slot: number;
            function: number;
            vendorId: number;
            subVendorId: number;
            vendorName: string;
            deviceId: number;
            subDeviceId: number;
            parentBridge?: string;
            deviceName: string;
         }
         interface ArrayOfHostPciDevice {
            HostPciDevice?: Array<vsanhealthService.vim.HostPciDevice>;
         }
         interface HostPciPassthruConfig extends vsanhealthService.vim.DynamicData {
            id: string;
            passthruEnabled: boolean;
         }
         interface ArrayOfHostPciPassthruConfig {
            HostPciPassthruConfig?: Array<vsanhealthService.vim.HostPciPassthruConfig>;
         }
         interface HostPciPassthruInfo extends vsanhealthService.vim.DynamicData {
            id: string;
            dependentDevice: string;
            passthruEnabled: boolean;
            passthruCapable: boolean;
            passthruActive: boolean;
         }
         interface ArrayOfHostPciPassthruInfo {
            HostPciPassthruInfo?: Array<vsanhealthService.vim.HostPciPassthruInfo>;
         }
         interface PhysicalNicSpec extends vsanhealthService.vim.DynamicData {
            ip?: vsanhealthService.vim.HostIpConfig;
            linkSpeed?: vsanhealthService.vim.PhysicalNicLinkInfo;
         }
         interface PhysicalNicConfig extends vsanhealthService.vim.DynamicData {
            device: string;
            spec: vsanhealthService.vim.PhysicalNicSpec;
         }
         interface ArrayOfPhysicalNicConfig {
            PhysicalNicConfig?: Array<vsanhealthService.vim.PhysicalNicConfig>;
         }
         interface PhysicalNicLinkInfo extends vsanhealthService.vim.DynamicData {
            speedMb: number;
            duplex: boolean;
         }
         interface ArrayOfPhysicalNicLinkInfo {
            PhysicalNicLinkInfo?: Array<vsanhealthService.vim.PhysicalNicLinkInfo>;
         }
         interface PhysicalNicHint extends vsanhealthService.vim.DynamicData {
            vlanId?: number;
         }
         interface PhysicalNicIpHint extends vsanhealthService.vim.PhysicalNicHint {
            ipSubnet: string;
         }
         interface ArrayOfPhysicalNicIpHint {
            PhysicalNicIpHint?: Array<vsanhealthService.vim.PhysicalNicIpHint>;
         }
         interface PhysicalNicNameHint extends vsanhealthService.vim.PhysicalNicHint {
            network: string;
         }
         interface ArrayOfPhysicalNicNameHint {
            PhysicalNicNameHint?: Array<vsanhealthService.vim.PhysicalNicNameHint>;
         }
         interface PhysicalNicHintInfo extends vsanhealthService.vim.DynamicData {
            device: string;
            subnet?: Array<vsanhealthService.vim.PhysicalNicIpHint>;
            network?: Array<vsanhealthService.vim.PhysicalNicNameHint>;
            connectedSwitchPort?: vsanhealthService.vim.PhysicalNicCdpInfo;
            lldpInfo?: vsanhealthService.vim.LinkLayerDiscoveryProtocolInfo;
         }
         interface ArrayOfPhysicalNicHintInfo {
            PhysicalNicHintInfo?: Array<vsanhealthService.vim.PhysicalNicHintInfo>;
         }
         interface PhysicalNicCdpDeviceCapability extends vsanhealthService.vim.DynamicData {
            router: boolean;
            transparentBridge: boolean;
            sourceRouteBridge: boolean;
            networkSwitch: boolean;
            host: boolean;
            igmpEnabled: boolean;
            repeater: boolean;
         }
         interface PhysicalNicCdpInfo extends vsanhealthService.vim.DynamicData {
            cdpVersion?: number;
            timeout?: number;
            ttl?: number;
            samples?: number;
            devId?: string;
            address?: string;
            portId?: string;
            deviceCapability?: vsanhealthService.vim.PhysicalNicCdpDeviceCapability;
            softwareVersion?: string;
            hardwarePlatform?: string;
            ipPrefix?: string;
            ipPrefixLen?: number;
            vlan?: number;
            fullDuplex?: boolean;
            mtu?: number;
            systemName?: string;
            systemOID?: string;
            mgmtAddr?: string;
            location?: string;
         }
         interface LinkLayerDiscoveryProtocolInfo extends vsanhealthService.vim.DynamicData {
            chassisId: string;
            portId: string;
            timeToLive: number;
            parameter?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         enum PhysicalNicVmDirectPathGen2SupportedMode {
            "upt",
         }
         enum PhysicalNicResourcePoolSchedulerDisallowedReason {
            "userOptOut",
            "hardwareUnsupported",
         }
         interface PhysicalNic extends vsanhealthService.vim.DynamicData {
            key?: string;
            device: string;
            pci: string;
            driver?: string;
            linkSpeed?: vsanhealthService.vim.PhysicalNicLinkInfo;
            validLinkSpecification?: Array<vsanhealthService.vim.PhysicalNicLinkInfo>;
            spec: vsanhealthService.vim.PhysicalNicSpec;
            wakeOnLanSupported?: boolean;
            mac?: string;
            fcoeConfiguration?: vsanhealthService.vim.FcoeConfig;
            vmDirectPathGen2Supported?: boolean;
            vmDirectPathGen2SupportedMode?: string;
            resourcePoolSchedulerAllowed?: boolean;
            resourcePoolSchedulerDisallowedReason?: Array<string>;
            autoNegotiateSupported?: boolean;
         }
         interface ArrayOfPhysicalNic {
            PhysicalNic?: Array<vsanhealthService.vim.PhysicalNic>;
         }
         interface HostPlugStoreTopologyAdapter extends vsanhealthService.vim.DynamicData {
            key: string;
            adapter: string;
            path?: Array<string>;
         }
         interface ArrayOfHostPlugStoreTopologyAdapter {
            HostPlugStoreTopologyAdapter?: Array<vsanhealthService.vim.HostPlugStoreTopologyAdapter>;
         }
         interface HostPlugStoreTopologyPath extends vsanhealthService.vim.DynamicData {
            key: string;
            name: string;
            channelNumber?: number;
            targetNumber?: number;
            lunNumber?: number;
            adapter?: string;
            target?: string;
            device?: string;
         }
         interface ArrayOfHostPlugStoreTopologyPath {
            HostPlugStoreTopologyPath?: Array<vsanhealthService.vim.HostPlugStoreTopologyPath>;
         }
         interface HostPlugStoreTopologyDevice extends vsanhealthService.vim.DynamicData {
            key: string;
            lun: string;
            path?: Array<string>;
         }
         interface ArrayOfHostPlugStoreTopologyDevice {
            HostPlugStoreTopologyDevice?: Array<vsanhealthService.vim.HostPlugStoreTopologyDevice>;
         }
         interface HostPlugStoreTopologyPlugin extends vsanhealthService.vim.DynamicData {
            key: string;
            name: string;
            device?: Array<string>;
            claimedPath?: Array<string>;
         }
         interface ArrayOfHostPlugStoreTopologyPlugin {
            HostPlugStoreTopologyPlugin?: Array<vsanhealthService.vim.HostPlugStoreTopologyPlugin>;
         }
         interface HostPlugStoreTopologyTarget extends vsanhealthService.vim.DynamicData {
            key: string;
            transport?: vsanhealthService.vim.HostTargetTransport;
         }
         interface ArrayOfHostPlugStoreTopologyTarget {
            HostPlugStoreTopologyTarget?: Array<vsanhealthService.vim.HostPlugStoreTopologyTarget>;
         }
         interface HostPlugStoreTopology extends vsanhealthService.vim.DynamicData {
            adapter?: Array<vsanhealthService.vim.HostPlugStoreTopologyAdapter>;
            path?: Array<vsanhealthService.vim.HostPlugStoreTopologyPath>;
            target?: Array<vsanhealthService.vim.HostPlugStoreTopologyTarget>;
            device?: Array<vsanhealthService.vim.HostPlugStoreTopologyDevice>;
            plugin?: Array<vsanhealthService.vim.HostPlugStoreTopologyPlugin>;
         }
         enum PortGroupConnecteeType {
            "virtualMachine",
            "systemManagement",
            "host",
            "unknown",
         }
         interface HostPortGroupSpec extends vsanhealthService.vim.DynamicData {
            name: string;
            vlanId: number;
            vswitchName: string;
            policy: vsanhealthService.vim.HostNetworkPolicy;
         }
         interface HostPortGroupConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            spec?: vsanhealthService.vim.HostPortGroupSpec;
         }
         interface ArrayOfHostPortGroupConfig {
            HostPortGroupConfig?: Array<vsanhealthService.vim.HostPortGroupConfig>;
         }
         interface HostPortGroupPort extends vsanhealthService.vim.DynamicData {
            key?: string;
            mac?: Array<string>;
            type: string;
         }
         interface ArrayOfHostPortGroupPort {
            HostPortGroupPort?: Array<vsanhealthService.vim.HostPortGroupPort>;
         }
         interface HostPortGroup extends vsanhealthService.vim.DynamicData {
            key?: string;
            port?: Array<vsanhealthService.vim.HostPortGroupPort>;
            vswitch?: string;
            computedPolicy: vsanhealthService.vim.HostNetworkPolicy;
            spec: vsanhealthService.vim.HostPortGroupSpec;
         }
         interface ArrayOfHostPortGroup {
            HostPortGroup?: Array<vsanhealthService.vim.HostPortGroup>;
         }
         interface HostPowerPolicy extends vsanhealthService.vim.DynamicData {
            key: number;
            name: string;
            shortName: string;
            description: string;
         }
         interface ArrayOfHostPowerPolicy {
            HostPowerPolicy?: Array<vsanhealthService.vim.HostPowerPolicy>;
         }
         interface PowerSystemCapability extends vsanhealthService.vim.DynamicData {
            availablePolicy: Array<vsanhealthService.vim.HostPowerPolicy>;
         }
         interface PowerSystemInfo extends vsanhealthService.vim.DynamicData {
            currentPolicy: vsanhealthService.vim.HostPowerPolicy;
         }
         enum HostProtocolEndpointPEType {
            "block",
            "nas",
         }
         enum HostProtocolEndpointProtocolEndpointType {
            "scsi",
            "nfs",
            "nfs4x",
         }
         interface HostProtocolEndpoint extends vsanhealthService.vim.DynamicData {
            peType: string;
            type?: string;
            uuid: string;
            hostKey?: Array<vsanhealthService.vim.ManagedObjectReference>;
            storageArray?: string;
            nfsServer?: string;
            nfsDir?: string;
            nfsServerScope?: string;
            nfsServerMajor?: string;
            nfsServerAuthType?: string;
            nfsServerUser?: string;
            deviceId?: string;
         }
         interface ArrayOfHostProtocolEndpoint {
            HostProtocolEndpoint?: Array<vsanhealthService.vim.HostProtocolEndpoint>;
         }
         interface HostResignatureRescanResult extends vsanhealthService.vim.DynamicData {
            rescan?: Array<vsanhealthService.vim.HostVmfsRescanResult>;
            result: vsanhealthService.vim.ManagedObjectReference;
         }
         interface HostFirewallRulesetIpNetwork extends vsanhealthService.vim.DynamicData {
            network: string;
            prefixLength: number;
         }
         interface ArrayOfHostFirewallRulesetIpNetwork {
            HostFirewallRulesetIpNetwork?: Array<vsanhealthService.vim.HostFirewallRulesetIpNetwork>;
         }
         interface HostFirewallRulesetIpList extends vsanhealthService.vim.DynamicData {
            ipAddress?: Array<string>;
            ipNetwork?: Array<vsanhealthService.vim.HostFirewallRulesetIpNetwork>;
            allIp: boolean;
         }
         interface HostFirewallRulesetRulesetSpec extends vsanhealthService.vim.DynamicData {
            allowedHosts: vsanhealthService.vim.HostFirewallRulesetIpList;
         }
         enum HostFirewallRuleDirection {
            "inbound",
            "outbound",
         }
         enum HostFirewallRulePortType {
            "src",
            "dst",
         }
         enum HostFirewallRuleProtocol {
            "tcp",
            "udp",
         }
         interface HostFirewallRule extends vsanhealthService.vim.DynamicData {
            port: number;
            endPort?: number;
            direction: vsanhealthService.vim.HostFirewallRuleDirection;
            portType?: vsanhealthService.vim.HostFirewallRulePortType;
            protocol: string;
         }
         interface ArrayOfHostFirewallRule {
            HostFirewallRule?: Array<vsanhealthService.vim.HostFirewallRule>;
         }
         interface HostFirewallRuleset extends vsanhealthService.vim.DynamicData {
            key: string;
            label: string;
            required: boolean;
            rule: Array<vsanhealthService.vim.HostFirewallRule>;
            service?: string;
            enabled: boolean;
            allowedHosts?: vsanhealthService.vim.HostFirewallRulesetIpList;
         }
         interface ArrayOfHostFirewallRuleset {
            HostFirewallRuleset?: Array<vsanhealthService.vim.HostFirewallRuleset>;
         }
         enum HostRuntimeInfoNetStackInstanceRuntimeInfoState {
            "inactive",
            "active",
            "deactivating",
            "activating",
         }
         interface HostRuntimeInfoNetStackInstanceRuntimeInfo extends vsanhealthService.vim.DynamicData {
            netStackInstanceKey: string;
            state?: string;
            vmknicKeys?: Array<string>;
            maxNumberOfConnections?: number;
            currentIpV6Enabled?: boolean;
         }
         interface ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo {
            HostRuntimeInfoNetStackInstanceRuntimeInfo?: Array<vsanhealthService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo>;
         }
         interface HostPlacedVirtualNicIdentifier extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            vnicKey: string;
            reservation?: number;
         }
         interface ArrayOfHostPlacedVirtualNicIdentifier {
            HostPlacedVirtualNicIdentifier?: Array<vsanhealthService.vim.HostPlacedVirtualNicIdentifier>;
         }
         interface HostPnicNetworkResourceInfo extends vsanhealthService.vim.DynamicData {
            pnicDevice: string;
            availableBandwidthForVMTraffic?: number;
            unusedBandwidthForVMTraffic?: number;
            placedVirtualNics?: Array<vsanhealthService.vim.HostPlacedVirtualNicIdentifier>;
         }
         interface ArrayOfHostPnicNetworkResourceInfo {
            HostPnicNetworkResourceInfo?: Array<vsanhealthService.vim.HostPnicNetworkResourceInfo>;
         }
         interface HostNetworkResourceRuntime extends vsanhealthService.vim.DynamicData {
            pnicResourceInfo: Array<vsanhealthService.vim.HostPnicNetworkResourceInfo>;
         }
         interface HostRuntimeInfoNetworkRuntimeInfo extends vsanhealthService.vim.DynamicData {
            netStackInstanceRuntimeInfo?: Array<vsanhealthService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo>;
            networkResourceRuntime?: vsanhealthService.vim.HostNetworkResourceRuntime;
         }
         interface HostRuntimeInfo extends vsanhealthService.vim.DynamicData {
            connectionState: vsanhealthService.vim.HostSystemConnectionState;
            powerState?: vsanhealthService.vim.HostSystemPowerState;
            standbyMode?: string;
            inMaintenanceMode: boolean;
            inQuarantineMode?: boolean;
            bootTime?: Date;
            healthSystemRuntime?: vsanhealthService.vim.HealthSystemRuntime;
            dasHostState?: vsanhealthService.vim.ClusterDasFdmHostState;
            tpmPcrValues?: Array<vsanhealthService.vim.HostTpmDigestInfo>;
            vsanRuntimeInfo?: vsanhealthService.vim.VsanHostRuntimeInfo;
            networkRuntimeInfo?: vsanhealthService.vim.HostRuntimeInfoNetworkRuntimeInfo;
            vFlashResourceRuntimeInfo?: vsanhealthService.vim.HostVFlashManagerVFlashResourceRunTimeInfo;
            hostMaxVirtualDiskCapacity?: number;
            cryptoState?: string;
            cryptoKeyId?: vsanhealthService.vim.CryptoKeyId;
         }
         interface HostScsiDiskPartition extends vsanhealthService.vim.DynamicData {
            diskName: string;
            partition: number;
         }
         interface ArrayOfHostScsiDiskPartition {
            HostScsiDiskPartition?: Array<vsanhealthService.vim.HostScsiDiskPartition>;
         }
         enum ScsiDiskType {
            "native512",
            "emulated512",
            "native4k",
            "unknown",
         }
         interface HostScsiDisk extends vsanhealthService.vim.ScsiLun {
            capacity: vsanhealthService.vim.HostDiskDimensionsLba;
            devicePath: string;
            ssd?: boolean;
            localDisk?: boolean;
            physicalLocation?: Array<string>;
            emulatedDIXDIFEnabled?: boolean;
            vsanDiskInfo?: vsanhealthService.vim.VsanHostVsanDiskInfo;
            scsiDiskType?: string;
         }
         interface ArrayOfHostScsiDisk {
            HostScsiDisk?: Array<vsanhealthService.vim.HostScsiDisk>;
         }
         enum ScsiLunType {
            "disk",
            "tape",
            "printer",
            "processor",
            "worm",
            "cdrom",
            "scanner",
            "opticalDevice",
            "mediaChanger",
            "communications",
            "storageArrayController",
            "enclosure",
            "unknown",
         }
         interface ScsiLunCapabilities extends vsanhealthService.vim.DynamicData {
            updateDisplayNameSupported: boolean;
         }
         interface ScsiLunDurableName extends vsanhealthService.vim.DynamicData {
            namespace: string;
            namespaceId: number;
            data?: Array<number>;
         }
         interface ArrayOfScsiLunDurableName {
            ScsiLunDurableName?: Array<vsanhealthService.vim.ScsiLunDurableName>;
         }
         enum ScsiLunState {
            "unknownState",
            "ok",
            "error",
            "off",
            "quiesced",
            "degraded",
            "lostCommunication",
            "timeout",
         }
         enum ScsiLunDescriptorQuality {
            "highQuality",
            "mediumQuality",
            "lowQuality",
            "unknownQuality",
         }
         interface ScsiLunDescriptor extends vsanhealthService.vim.DynamicData {
            quality: string;
            id: string;
         }
         interface ArrayOfScsiLunDescriptor {
            ScsiLunDescriptor?: Array<vsanhealthService.vim.ScsiLunDescriptor>;
         }
         enum ScsiLunVStorageSupportStatus {
            "vStorageSupported",
            "vStorageUnsupported",
            "vStorageUnknown",
         }
         interface ScsiLun extends vsanhealthService.vim.HostDevice {
            key?: string;
            uuid: string;
            descriptor?: Array<vsanhealthService.vim.ScsiLunDescriptor>;
            canonicalName?: string;
            displayName?: string;
            lunType: string;
            vendor?: string;
            model?: string;
            revision?: string;
            scsiLevel?: number;
            serialNumber?: string;
            durableName?: vsanhealthService.vim.ScsiLunDurableName;
            alternateName?: Array<vsanhealthService.vim.ScsiLunDurableName>;
            standardInquiry?: Array<number>;
            queueDepth?: number;
            operationalState: Array<string>;
            capabilities?: vsanhealthService.vim.ScsiLunCapabilities;
            vStorageSupport?: string;
            protocolEndpoint?: boolean;
         }
         interface ArrayOfScsiLun {
            ScsiLun?: Array<vsanhealthService.vim.ScsiLun>;
         }
         interface HostScsiTopologyInterface extends vsanhealthService.vim.DynamicData {
            key: string;
            adapter: string;
            target?: Array<vsanhealthService.vim.HostScsiTopologyTarget>;
         }
         interface ArrayOfHostScsiTopologyInterface {
            HostScsiTopologyInterface?: Array<vsanhealthService.vim.HostScsiTopologyInterface>;
         }
         interface HostScsiTopologyTarget extends vsanhealthService.vim.DynamicData {
            key: string;
            target: number;
            lun?: Array<vsanhealthService.vim.HostScsiTopologyLun>;
            transport?: vsanhealthService.vim.HostTargetTransport;
         }
         interface ArrayOfHostScsiTopologyTarget {
            HostScsiTopologyTarget?: Array<vsanhealthService.vim.HostScsiTopologyTarget>;
         }
         interface HostScsiTopologyLun extends vsanhealthService.vim.DynamicData {
            key: string;
            lun: number;
            scsiLun: string;
         }
         interface ArrayOfHostScsiTopologyLun {
            HostScsiTopologyLun?: Array<vsanhealthService.vim.HostScsiTopologyLun>;
         }
         interface HostScsiTopology extends vsanhealthService.vim.DynamicData {
            adapter?: Array<vsanhealthService.vim.HostScsiTopologyInterface>;
         }
         interface HostSecuritySpec extends vsanhealthService.vim.DynamicData {
            adminPassword?: string;
            removePermission?: Array<vsanhealthService.vim.Permission>;
            addPermission?: Array<vsanhealthService.vim.Permission>;
         }
         enum HostServicePolicy {
            "on",
            "automatic",
            "off",
         }
         interface HostServiceSourcePackage extends vsanhealthService.vim.DynamicData {
            sourcePackageName: string;
            description: string;
         }
         interface HostService extends vsanhealthService.vim.DynamicData {
            key: string;
            label: string;
            required: boolean;
            uninstallable: boolean;
            running: boolean;
            ruleset?: Array<string>;
            policy: string;
            sourcePackage?: vsanhealthService.vim.HostServiceSourcePackage;
         }
         interface ArrayOfHostService {
            HostService?: Array<vsanhealthService.vim.HostService>;
         }
         interface HostServiceConfig extends vsanhealthService.vim.DynamicData {
            serviceId: string;
            startupPolicy: string;
         }
         interface ArrayOfHostServiceConfig {
            HostServiceConfig?: Array<vsanhealthService.vim.HostServiceConfig>;
         }
         interface HostServiceInfo extends vsanhealthService.vim.DynamicData {
            service?: Array<vsanhealthService.vim.HostService>;
         }
         interface HostSnmpDestination extends vsanhealthService.vim.DynamicData {
            hostName: string;
            port: number;
            community: string;
         }
         interface ArrayOfHostSnmpDestination {
            HostSnmpDestination?: Array<vsanhealthService.vim.HostSnmpDestination>;
         }
         interface HostSnmpConfigSpec extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            port?: number;
            readOnlyCommunities?: Array<string>;
            trapTargets?: Array<vsanhealthService.vim.HostSnmpDestination>;
            option?: Array<vsanhealthService.vim.KeyValue>;
         }
         enum HostSnmpAgentCapability {
            "COMPLETE",
            "DIAGNOSTICS",
            "CONFIGURATION",
         }
         interface HostSnmpSystemAgentLimits extends vsanhealthService.vim.DynamicData {
            maxReadOnlyCommunities: number;
            maxTrapDestinations: number;
            maxCommunityLength: number;
            maxBufferSize: number;
            capability?: vsanhealthService.vim.HostSnmpAgentCapability;
         }
         enum SoftwarePackageVibType {
            "bootbank",
            "tools",
            "meta",
         }
         interface SoftwarePackageCapability extends vsanhealthService.vim.DynamicData {
            liveInstallAllowed?: boolean;
            liveRemoveAllowed?: boolean;
            statelessReady?: boolean;
            overlay?: boolean;
         }
         enum SoftwarePackageConstraint {
            "equals",
            "lessThan",
            "lessThanEqual",
            "greaterThanEqual",
            "greaterThan",
         }
         interface Relation extends vsanhealthService.vim.DynamicData {
            constraint?: string;
            name: string;
            version?: string;
         }
         interface ArrayOfRelation {
            Relation?: Array<vsanhealthService.vim.Relation>;
         }
         interface SoftwarePackage extends vsanhealthService.vim.DynamicData {
            name: string;
            version: string;
            type: string;
            vendor: string;
            acceptanceLevel: string;
            summary: string;
            description: string;
            referenceURL?: Array<string>;
            creationDate?: Date;
            depends?: Array<vsanhealthService.vim.Relation>;
            conflicts?: Array<vsanhealthService.vim.Relation>;
            replaces?: Array<vsanhealthService.vim.Relation>;
            provides?: Array<string>;
            maintenanceModeRequired?: boolean;
            hardwarePlatformsRequired?: Array<string>;
            capability: vsanhealthService.vim.SoftwarePackageCapability;
            tag?: Array<string>;
            payload?: Array<string>;
         }
         interface ArrayOfSoftwarePackage {
            SoftwarePackage?: Array<vsanhealthService.vim.SoftwarePackage>;
         }
         interface HostSriovConfig extends vsanhealthService.vim.HostPciPassthruConfig {
            sriovEnabled: boolean;
            numVirtualFunction: number;
         }
         interface HostSriovDevicePoolInfo extends vsanhealthService.vim.DynamicData {
            key: string;
         }
         interface ArrayOfHostSriovDevicePoolInfo {
            HostSriovDevicePoolInfo?: Array<vsanhealthService.vim.HostSriovDevicePoolInfo>;
         }
         interface HostSriovInfo extends vsanhealthService.vim.HostPciPassthruInfo {
            sriovEnabled: boolean;
            sriovCapable: boolean;
            sriovActive: boolean;
            numVirtualFunctionRequested: number;
            numVirtualFunction: number;
            maxVirtualFunctionSupported: number;
         }
         interface HostSriovNetworkDevicePoolInfo extends vsanhealthService.vim.HostSriovDevicePoolInfo {
            switchKey?: string;
            switchUuid?: string;
            pnic?: Array<vsanhealthService.vim.PhysicalNic>;
         }
         interface HostSslThumbprintInfo extends vsanhealthService.vim.DynamicData {
            principal: string;
            ownerTag?: string;
            sslThumbprints?: Array<string>;
         }
         interface ArrayOfHostSslThumbprintInfo {
            HostSslThumbprintInfo?: Array<vsanhealthService.vim.HostSslThumbprintInfo>;
         }
         interface HostStorageArrayTypePolicyOption extends vsanhealthService.vim.DynamicData {
            policy: vsanhealthService.vim.ElementDescription;
         }
         interface ArrayOfHostStorageArrayTypePolicyOption {
            HostStorageArrayTypePolicyOption?: Array<vsanhealthService.vim.HostStorageArrayTypePolicyOption>;
         }
         interface HostStorageDeviceInfo extends vsanhealthService.vim.DynamicData {
            hostBusAdapter?: Array<vsanhealthService.vim.HostHostBusAdapter>;
            scsiLun?: Array<vsanhealthService.vim.ScsiLun>;
            scsiTopology?: vsanhealthService.vim.HostScsiTopology;
            multipathInfo?: vsanhealthService.vim.HostMultipathInfo;
            plugStoreTopology?: vsanhealthService.vim.HostPlugStoreTopology;
            softwareInternetScsiEnabled: boolean;
         }
         interface HostStorageSystemVmfsVolumeResult extends vsanhealthService.vim.DynamicData {
            key: string;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostStorageSystemVmfsVolumeResult {
            HostStorageSystemVmfsVolumeResult?: Array<vsanhealthService.vim.HostStorageSystemVmfsVolumeResult>;
         }
         interface HostStorageSystemScsiLunResult extends vsanhealthService.vim.DynamicData {
            key: string;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostStorageSystemScsiLunResult {
            HostStorageSystemScsiLunResult?: Array<vsanhealthService.vim.HostStorageSystemScsiLunResult>;
         }
         interface HostStorageSystemDiskLocatorLedResult extends vsanhealthService.vim.DynamicData {
            key: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostStorageSystemDiskLocatorLedResult {
            HostStorageSystemDiskLocatorLedResult?: Array<vsanhealthService.vim.HostStorageSystemDiskLocatorLedResult>;
         }
         interface HostHardwareSummary extends vsanhealthService.vim.DynamicData {
            vendor: string;
            model: string;
            uuid: string;
            otherIdentifyingInfo?: Array<vsanhealthService.vim.HostSystemIdentificationInfo>;
            memorySize: number;
            cpuModel: string;
            cpuMhz: number;
            numCpuPkgs: number;
            numCpuCores: number;
            numCpuThreads: number;
            numNics: number;
            numHBAs: number;
         }
         interface HostListSummaryQuickStats extends vsanhealthService.vim.DynamicData {
            overallCpuUsage?: number;
            overallMemoryUsage?: number;
            distributedCpuFairness?: number;
            distributedMemoryFairness?: number;
            uptime?: number;
         }
         interface HostConfigSummary extends vsanhealthService.vim.DynamicData {
            name: string;
            port: number;
            sslThumbprint?: string;
            product?: vsanhealthService.vim.AboutInfo;
            vmotionEnabled: boolean;
            faultToleranceEnabled?: boolean;
            featureVersion?: Array<vsanhealthService.vim.HostFeatureVersionInfo>;
            agentVmDatastore?: vsanhealthService.vim.ManagedObjectReference;
            agentVmNetwork?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface HostListSummaryGatewaySummary extends vsanhealthService.vim.DynamicData {
            gatewayType: string;
            gatewayId: string;
         }
         interface HostListSummary extends vsanhealthService.vim.DynamicData {
            host?: vsanhealthService.vim.ManagedObjectReference;
            hardware?: vsanhealthService.vim.HostHardwareSummary;
            runtime?: vsanhealthService.vim.HostRuntimeInfo;
            config: vsanhealthService.vim.HostConfigSummary;
            quickStats: vsanhealthService.vim.HostListSummaryQuickStats;
            overallStatus: vsanhealthService.vim.ManagedEntityStatus;
            rebootRequired: boolean;
            customValue?: Array<vsanhealthService.vim.CustomFieldValue>;
            managementServerIp?: string;
            maxEVCModeKey?: string;
            currentEVCModeKey?: string;
            gateway?: vsanhealthService.vim.HostListSummaryGatewaySummary;
         }
         interface SystemEventInfo extends vsanhealthService.vim.DynamicData {
            recordId: number;
            when: string;
            selType: number;
            message: string;
            sensorNumber: number;
         }
         interface ArrayOfSystemEventInfo {
            SystemEventInfo?: Array<vsanhealthService.vim.SystemEventInfo>;
         }
         interface HostSystemHealthInfo extends vsanhealthService.vim.DynamicData {
            numericSensorInfo?: Array<vsanhealthService.vim.HostNumericSensorInfo>;
         }
         enum HostSystemIdentificationInfoIdentifier {
            "AssetTag",
            "ServiceTag",
            "OemSpecificString",
         }
         interface HostSystemIdentificationInfo extends vsanhealthService.vim.DynamicData {
            identifierValue: string;
            identifierType: vsanhealthService.vim.ElementDescription;
         }
         interface ArrayOfHostSystemIdentificationInfo {
            HostSystemIdentificationInfo?: Array<vsanhealthService.vim.HostSystemIdentificationInfo>;
         }
         interface HostSystemResourceInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            config?: vsanhealthService.vim.ResourceConfigSpec;
            child?: Array<vsanhealthService.vim.HostSystemResourceInfo>;
         }
         interface ArrayOfHostSystemResourceInfo {
            HostSystemResourceInfo?: Array<vsanhealthService.vim.HostSystemResourceInfo>;
         }
         interface HostSystemSwapConfigurationSystemSwapOption extends vsanhealthService.vim.DynamicData {
            key: number;
         }
         interface ArrayOfHostSystemSwapConfigurationSystemSwapOption {
            HostSystemSwapConfigurationSystemSwapOption?: Array<vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption>;
         }
         interface HostSystemSwapConfigurationDisabledOption extends vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption {
         }
         interface HostSystemSwapConfigurationHostCacheOption extends vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption {
         }
         interface HostSystemSwapConfigurationHostLocalSwapOption extends vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption {
         }
         interface HostSystemSwapConfigurationDatastoreOption extends vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption {
            datastore: string;
         }
         interface HostSystemSwapConfiguration extends vsanhealthService.vim.DynamicData {
            option?: Array<vsanhealthService.vim.HostSystemSwapConfigurationSystemSwapOption>;
         }
         interface HostTargetTransport extends vsanhealthService.vim.DynamicData {
         }
         interface HostParallelScsiTargetTransport extends vsanhealthService.vim.HostTargetTransport {
         }
         interface HostBlockAdapterTargetTransport extends vsanhealthService.vim.HostTargetTransport {
         }
         interface HostSerialAttachedTargetTransport extends vsanhealthService.vim.HostTargetTransport {
         }
         interface HostFibreChannelTargetTransport extends vsanhealthService.vim.HostTargetTransport {
            portWorldWideName: number;
            nodeWorldWideName: number;
         }
         interface HostInternetScsiTargetTransport extends vsanhealthService.vim.HostTargetTransport {
            iScsiName: string;
            iScsiAlias: string;
            address?: Array<string>;
         }
         interface HostFibreChannelOverEthernetTargetTransport extends vsanhealthService.vim.HostFibreChannelTargetTransport {
            vnportMac: string;
            fcfMac: string;
            vlanId: number;
         }
         interface HostTpmAttestationReport extends vsanhealthService.vim.DynamicData {
            tpmPcrValues: Array<vsanhealthService.vim.HostTpmDigestInfo>;
            tpmEvents: Array<vsanhealthService.vim.HostTpmEventLogEntry>;
            tpmLogReliable: boolean;
         }
         interface HostTpmBootSecurityOptionEventDetails extends vsanhealthService.vim.HostTpmEventDetails {
            bootSecurityOption: string;
         }
         interface HostTpmCommandEventDetails extends vsanhealthService.vim.HostTpmEventDetails {
            commandLine: string;
         }
         enum HostDigestInfoDigestMethodType {
            "SHA1",
            "MD5",
         }
         interface HostDigestInfo extends vsanhealthService.vim.DynamicData {
            digestMethod: string;
            digestValue: Array<number>;
            objectName?: string;
         }
         interface HostTpmDigestInfo extends vsanhealthService.vim.HostDigestInfo {
            pcrNumber: number;
         }
         interface ArrayOfHostTpmDigestInfo {
            HostTpmDigestInfo?: Array<vsanhealthService.vim.HostTpmDigestInfo>;
         }
         interface HostTpmEventDetails extends vsanhealthService.vim.DynamicData {
            dataHash: Array<number>;
         }
         interface HostTpmEventLogEntry extends vsanhealthService.vim.DynamicData {
            pcrIndex: number;
            eventDetails: vsanhealthService.vim.HostTpmEventDetails;
         }
         interface ArrayOfHostTpmEventLogEntry {
            HostTpmEventLogEntry?: Array<vsanhealthService.vim.HostTpmEventLogEntry>;
         }
         interface HostTpmOptionEventDetails extends vsanhealthService.vim.HostTpmEventDetails {
            optionsFileName: string;
            bootOptions?: Array<number>;
         }
         interface HostTpmSoftwareComponentEventDetails extends vsanhealthService.vim.HostTpmEventDetails {
            componentName: string;
            vibName: string;
            vibVersion: string;
            vibVendor: string;
         }
         enum HostUnresolvedVmfsExtentUnresolvedReason {
            "diskIdMismatch",
            "uuidConflict",
         }
         interface HostUnresolvedVmfsExtent extends vsanhealthService.vim.DynamicData {
            device: vsanhealthService.vim.HostScsiDiskPartition;
            devicePath: string;
            vmfsUuid: string;
            isHeadExtent: boolean;
            ordinal: number;
            startBlock: number;
            endBlock: number;
            reason: string;
         }
         interface ArrayOfHostUnresolvedVmfsExtent {
            HostUnresolvedVmfsExtent?: Array<vsanhealthService.vim.HostUnresolvedVmfsExtent>;
         }
         interface HostUnresolvedVmfsResignatureSpec extends vsanhealthService.vim.DynamicData {
            extentDevicePath: Array<string>;
         }
         interface HostUnresolvedVmfsResolutionResult extends vsanhealthService.vim.DynamicData {
            spec: vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec;
            vmfs?: vsanhealthService.vim.HostVmfsVolume;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostUnresolvedVmfsResolutionResult {
            HostUnresolvedVmfsResolutionResult?: Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionResult>;
         }
         enum HostUnresolvedVmfsResolutionSpecVmfsUuidResolution {
            "resignature",
            "forceMount",
         }
         interface HostUnresolvedVmfsResolutionSpec extends vsanhealthService.vim.DynamicData {
            extentDevicePath: Array<string>;
            uuidResolution: string;
         }
         interface ArrayOfHostUnresolvedVmfsResolutionSpec {
            HostUnresolvedVmfsResolutionSpec?: Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec>;
         }
         interface HostUnresolvedVmfsVolumeResolveStatus extends vsanhealthService.vim.DynamicData {
            resolvable: boolean;
            incompleteExtents?: boolean;
            multipleCopies?: boolean;
         }
         interface HostUnresolvedVmfsVolume extends vsanhealthService.vim.DynamicData {
            extent: Array<vsanhealthService.vim.HostUnresolvedVmfsExtent>;
            vmfsLabel: string;
            vmfsUuid: string;
            totalBlocks: number;
            resolveStatus: vsanhealthService.vim.HostUnresolvedVmfsVolumeResolveStatus;
         }
         interface ArrayOfHostUnresolvedVmfsVolume {
            HostUnresolvedVmfsVolume?: Array<vsanhealthService.vim.HostUnresolvedVmfsVolume>;
         }
         interface HostVFlashManagerVFlashResourceConfigSpec extends vsanhealthService.vim.DynamicData {
            vffsUuid: string;
         }
         interface HostVFlashManagerVFlashResourceConfigInfo extends vsanhealthService.vim.DynamicData {
            vffs?: vsanhealthService.vim.HostVffsVolume;
            capacity: number;
         }
         interface HostVFlashManagerVFlashResourceRunTimeInfo extends vsanhealthService.vim.DynamicData {
            usage: number;
            capacity: number;
            accessible: boolean;
            capacityForVmCache: number;
            freeForVmCache: number;
         }
         interface HostVFlashManagerVFlashCacheConfigSpec extends vsanhealthService.vim.DynamicData {
            defaultVFlashModule: string;
            swapCacheReservationInGB: number;
         }
         interface HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption extends vsanhealthService.vim.DynamicData {
            vFlashModule: string;
            vFlashModuleVersion: string;
            minSupportedModuleVersion: string;
            cacheConsistencyType: vsanhealthService.vim.ChoiceOption;
            cacheMode: vsanhealthService.vim.ChoiceOption;
            blockSizeInKBOption: vsanhealthService.vim.LongOption;
            reservationInMBOption: vsanhealthService.vim.LongOption;
            maxDiskSizeInKB: number;
         }
         interface ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption {
            HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption?: Array<vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption>;
         }
         interface HostVFlashManagerVFlashCacheConfigInfo extends vsanhealthService.vim.DynamicData {
            vFlashModuleConfigOption?: Array<vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption>;
            defaultVFlashModule?: string;
            swapCacheReservationInGB?: number;
         }
         interface HostVFlashManagerVFlashConfigInfo extends vsanhealthService.vim.DynamicData {
            vFlashResourceConfigInfo?: vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigInfo;
            vFlashCacheConfigInfo?: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfo;
         }
         interface HostVFlashResourceConfigurationResult extends vsanhealthService.vim.DynamicData {
            devicePath?: Array<string>;
            vffs?: vsanhealthService.vim.HostVffsVolume;
            diskConfigurationResult?: Array<vsanhealthService.vim.HostDiskConfigurationResult>;
         }
         interface HostVMotionConfig extends vsanhealthService.vim.DynamicData {
            vmotionNicKey?: string;
            enabled: boolean;
         }
         interface HostVMotionInfo extends vsanhealthService.vim.DynamicData {
            netConfig?: vsanhealthService.vim.HostVMotionNetConfig;
            ipConfig?: vsanhealthService.vim.HostIpConfig;
         }
         interface HostVMotionNetConfig extends vsanhealthService.vim.DynamicData {
            candidateVnic?: Array<vsanhealthService.vim.HostVirtualNic>;
            selectedVnic?: string;
         }
         interface HostVffsSpec extends vsanhealthService.vim.DynamicData {
            devicePath: string;
            partition?: vsanhealthService.vim.HostDiskPartitionSpec;
            majorVersion: number;
            volumeName: string;
         }
         interface HostVffsVolume extends vsanhealthService.vim.HostFileSystemVolume {
            majorVersion: number;
            version: string;
            uuid: string;
            extent: Array<vsanhealthService.vim.HostScsiDiskPartition>;
         }
         interface HostVirtualNicSpec extends vsanhealthService.vim.DynamicData {
            ip?: vsanhealthService.vim.HostIpConfig;
            mac?: string;
            distributedVirtualPort?: vsanhealthService.vim.DistributedVirtualSwitchPortConnection;
            portgroup?: string;
            mtu?: number;
            tsoEnabled?: boolean;
            netStackInstanceKey?: string;
            opaqueNetwork?: vsanhealthService.vim.HostVirtualNicOpaqueNetworkSpec;
            externalId?: string;
            pinnedPnic?: string;
            ipRouteSpec?: vsanhealthService.vim.HostVirtualNicIpRouteSpec;
         }
         interface HostVirtualNicConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            device?: string;
            portgroup: string;
            spec?: vsanhealthService.vim.HostVirtualNicSpec;
         }
         interface ArrayOfHostVirtualNicConfig {
            HostVirtualNicConfig?: Array<vsanhealthService.vim.HostVirtualNicConfig>;
         }
         interface HostVirtualNicOpaqueNetworkSpec extends vsanhealthService.vim.DynamicData {
            opaqueNetworkId: string;
            opaqueNetworkType: string;
         }
         interface HostVirtualNicIpRouteSpec extends vsanhealthService.vim.DynamicData {
            ipRouteConfig?: vsanhealthService.vim.HostIpRouteConfig;
         }
         interface HostVirtualNic extends vsanhealthService.vim.DynamicData {
            device: string;
            key: string;
            portgroup: string;
            spec: vsanhealthService.vim.HostVirtualNicSpec;
            port?: string;
         }
         interface ArrayOfHostVirtualNic {
            HostVirtualNic?: Array<vsanhealthService.vim.HostVirtualNic>;
         }
         interface HostVirtualNicConnection extends vsanhealthService.vim.DynamicData {
            portgroup?: string;
            dvPort?: vsanhealthService.vim.DistributedVirtualSwitchPortConnection;
         }
         enum HostVirtualNicManagerNicType {
            "vmotion",
            "faultToleranceLogging",
            "vSphereReplication",
            "vSphereReplicationNFC",
            "management",
            "vsan",
            "vSphereProvisioning",
            "vsanWitness",
         }
         interface HostVirtualNicManagerNicTypeSelection extends vsanhealthService.vim.DynamicData {
            vnic: vsanhealthService.vim.HostVirtualNicConnection;
            nicType?: Array<string>;
         }
         interface ArrayOfHostVirtualNicManagerNicTypeSelection {
            HostVirtualNicManagerNicTypeSelection?: Array<vsanhealthService.vim.HostVirtualNicManagerNicTypeSelection>;
         }
         interface VirtualNicManagerNetConfig extends vsanhealthService.vim.DynamicData {
            nicType: string;
            multiSelectAllowed: boolean;
            candidateVnic?: Array<vsanhealthService.vim.HostVirtualNic>;
            selectedVnic?: Array<string>;
         }
         interface ArrayOfVirtualNicManagerNetConfig {
            VirtualNicManagerNetConfig?: Array<vsanhealthService.vim.VirtualNicManagerNetConfig>;
         }
         interface HostVirtualNicManagerInfo extends vsanhealthService.vim.DynamicData {
            netConfig?: Array<vsanhealthService.vim.VirtualNicManagerNetConfig>;
         }
         interface HostVirtualSwitchBridge extends vsanhealthService.vim.DynamicData {
         }
         interface HostVirtualSwitchAutoBridge extends vsanhealthService.vim.HostVirtualSwitchBridge {
            excludedNicDevice?: Array<string>;
         }
         interface HostVirtualSwitchSimpleBridge extends vsanhealthService.vim.HostVirtualSwitchBridge {
            nicDevice: string;
         }
         interface HostVirtualSwitchBondBridge extends vsanhealthService.vim.HostVirtualSwitchBridge {
            nicDevice: Array<string>;
            beacon?: vsanhealthService.vim.HostVirtualSwitchBeaconConfig;
            linkDiscoveryProtocolConfig?: vsanhealthService.vim.LinkDiscoveryProtocolConfig;
         }
         interface HostVirtualSwitchBeaconConfig extends vsanhealthService.vim.DynamicData {
            interval: number;
         }
         interface HostVirtualSwitchSpec extends vsanhealthService.vim.DynamicData {
            numPorts: number;
            bridge?: vsanhealthService.vim.HostVirtualSwitchBridge;
            policy?: vsanhealthService.vim.HostNetworkPolicy;
            mtu?: number;
         }
         interface HostVirtualSwitchConfig extends vsanhealthService.vim.DynamicData {
            changeOperation?: string;
            name: string;
            spec?: vsanhealthService.vim.HostVirtualSwitchSpec;
         }
         interface ArrayOfHostVirtualSwitchConfig {
            HostVirtualSwitchConfig?: Array<vsanhealthService.vim.HostVirtualSwitchConfig>;
         }
         interface HostVirtualSwitch extends vsanhealthService.vim.DynamicData {
            name: string;
            key: string;
            numPorts: number;
            numPortsAvailable: number;
            mtu?: number;
            portgroup?: Array<string>;
            pnic?: Array<string>;
            spec: vsanhealthService.vim.HostVirtualSwitchSpec;
         }
         interface ArrayOfHostVirtualSwitch {
            HostVirtualSwitch?: Array<vsanhealthService.vim.HostVirtualSwitch>;
         }
         enum HostVmciAccessManagerMode {
            "grant",
            "replace",
            "revoke",
         }
         interface HostVmciAccessManagerAccessSpec extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            services?: Array<string>;
            mode: string;
         }
         interface ArrayOfHostVmciAccessManagerAccessSpec {
            HostVmciAccessManagerAccessSpec?: Array<vsanhealthService.vim.HostVmciAccessManagerAccessSpec>;
         }
         interface HostVmfsRescanResult extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostVmfsRescanResult {
            HostVmfsRescanResult?: Array<vsanhealthService.vim.HostVmfsRescanResult>;
         }
         interface HostVmfsSpec extends vsanhealthService.vim.DynamicData {
            extent: vsanhealthService.vim.HostScsiDiskPartition;
            blockSizeMb?: number;
            majorVersion: number;
            volumeName: string;
            blockSize?: number;
            unmapGranularity?: number;
            unmapPriority?: string;
         }
         enum HostVmfsVolumeUnmapPriority {
            "none",
            "low",
         }
         interface VmfsConfigOption extends vsanhealthService.vim.DynamicData {
            blockSizeOption: number;
            unmapGranularityOption?: Array<number>;
         }
         interface ArrayOfVmfsConfigOption {
            VmfsConfigOption?: Array<vsanhealthService.vim.VmfsConfigOption>;
         }
         interface HostVmfsVolume extends vsanhealthService.vim.HostFileSystemVolume {
            blockSizeMb: number;
            blockSize?: number;
            unmapGranularity?: number;
            unmapPriority?: string;
            maxBlocks: number;
            majorVersion: number;
            version: string;
            uuid: string;
            extent: Array<vsanhealthService.vim.HostScsiDiskPartition>;
            vmfsUpgradable: boolean;
            forceMountedInfo?: vsanhealthService.vim.HostForceMountedInfo;
            ssd?: boolean;
            local?: boolean;
            scsiDiskType?: string;
         }
         interface HostVsanInternalSystemCmmdsQuery extends vsanhealthService.vim.DynamicData {
            type?: string;
            uuid?: string;
            owner?: string;
         }
         interface ArrayOfHostVsanInternalSystemCmmdsQuery {
            HostVsanInternalSystemCmmdsQuery?: Array<vsanhealthService.vim.HostVsanInternalSystemCmmdsQuery>;
         }
         interface VsanPolicyCost extends vsanhealthService.vim.DynamicData {
            changeDataSize?: number;
            currentDataSize?: number;
            tempDataSize?: number;
            copyDataSize?: number;
            changeFlashReadCacheSize?: number;
            currentFlashReadCacheSize?: number;
            currentDiskSpaceToAddressSpaceRatio?: number;
            diskSpaceToAddressSpaceRatio?: number;
         }
         interface VsanPolicySatisfiability extends vsanhealthService.vim.DynamicData {
            uuid?: string;
            isSatisfiable: boolean;
            reason?: vsanhealthService.vim.LocalizableMessage;
            cost?: vsanhealthService.vim.VsanPolicyCost;
         }
         interface ArrayOfVsanPolicySatisfiability {
            VsanPolicySatisfiability?: Array<vsanhealthService.vim.VsanPolicySatisfiability>;
         }
         interface VsanPolicyChangeBatch extends vsanhealthService.vim.DynamicData {
            uuid?: Array<string>;
            policy?: string;
         }
         interface ArrayOfVsanPolicyChangeBatch {
            VsanPolicyChangeBatch?: Array<vsanhealthService.vim.VsanPolicyChangeBatch>;
         }
         interface VsanNewPolicyBatch extends vsanhealthService.vim.DynamicData {
            size?: Array<number>;
            policy?: string;
         }
         interface ArrayOfVsanNewPolicyBatch {
            VsanNewPolicyBatch?: Array<vsanhealthService.vim.VsanNewPolicyBatch>;
         }
         interface HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult extends vsanhealthService.vim.DynamicData {
            diskUuid: string;
            success: boolean;
            failureReason?: string;
         }
         interface ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult {
            HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult?: Array<vsanhealthService.vim.HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult>;
         }
         interface HostVsanInternalSystemDeleteVsanObjectsResult extends vsanhealthService.vim.DynamicData {
            uuid: string;
            success: boolean;
            failureReason?: Array<vsanhealthService.vim.LocalizableMessage>;
         }
         interface ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult {
            HostVsanInternalSystemDeleteVsanObjectsResult?: Array<vsanhealthService.vim.HostVsanInternalSystemDeleteVsanObjectsResult>;
         }
         interface HostVsanInternalSystemVsanObjectOperationResult extends vsanhealthService.vim.DynamicData {
            uuid: string;
            failureReason?: Array<vsanhealthService.vim.LocalizableMessage>;
         }
         interface ArrayOfHostVsanInternalSystemVsanObjectOperationResult {
            HostVsanInternalSystemVsanObjectOperationResult?: Array<vsanhealthService.vim.HostVsanInternalSystemVsanObjectOperationResult>;
         }
         interface HostVvolVolumeSpecification extends vsanhealthService.vim.DynamicData {
            maxSizeInMB: number;
            volumeName: string;
            vasaProviderInfo?: Array<vsanhealthService.vim.VimVasaProviderInfo>;
            storageArray?: Array<vsanhealthService.vim.VASAStorageArray>;
            uuid: string;
         }
         interface VVolHostPE extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            protocolEndpoint: Array<vsanhealthService.vim.HostProtocolEndpoint>;
         }
         interface ArrayOfVVolHostPE {
            VVolHostPE?: Array<vsanhealthService.vim.VVolHostPE>;
         }
         interface HostVvolVolume extends vsanhealthService.vim.HostFileSystemVolume {
            scId: string;
            hostPE?: Array<vsanhealthService.vim.VVolHostPE>;
            vasaProviderInfo?: Array<vsanhealthService.vim.VimVasaProviderInfo>;
            storageArray?: Array<vsanhealthService.vim.VASAStorageArray>;
         }
         interface NetDhcpConfigInfoDhcpOptions extends vsanhealthService.vim.DynamicData {
            enable: boolean;
            config?: Array<vsanhealthService.vim.KeyValue>;
         }
         interface NetDhcpConfigInfo extends vsanhealthService.vim.DynamicData {
            ipv6?: vsanhealthService.vim.NetDhcpConfigInfoDhcpOptions;
            ipv4?: vsanhealthService.vim.NetDhcpConfigInfoDhcpOptions;
         }
         interface NetDhcpConfigSpecDhcpOptionsSpec extends vsanhealthService.vim.DynamicData {
            enable?: boolean;
            config: Array<vsanhealthService.vim.KeyValue>;
            operation: string;
         }
         interface NetDhcpConfigSpec extends vsanhealthService.vim.DynamicData {
            ipv6?: vsanhealthService.vim.NetDhcpConfigSpecDhcpOptionsSpec;
            ipv4?: vsanhealthService.vim.NetDhcpConfigSpecDhcpOptionsSpec;
         }
         interface NetDnsConfigInfo extends vsanhealthService.vim.DynamicData {
            dhcp: boolean;
            hostName: string;
            domainName: string;
            ipAddress?: Array<string>;
            searchDomain?: Array<string>;
         }
         interface NetDnsConfigSpec extends vsanhealthService.vim.DynamicData {
            dhcp?: boolean;
            hostName?: string;
            domainName?: string;
            ipAddress?: Array<string>;
            searchDomain?: Array<string>;
         }
         enum NetIpConfigInfoIpAddressOrigin {
            "other",
            "manual",
            "dhcp",
            "linklayer",
            "random",
         }
         enum NetIpConfigInfoIpAddressStatus {
            "preferred",
            "deprecated",
            "invalid",
            "inaccessible",
            "unknown",
            "tentative",
            "duplicate",
         }
         interface NetIpConfigInfoIpAddress extends vsanhealthService.vim.DynamicData {
            ipAddress: string;
            prefixLength: number;
            origin?: string;
            state?: string;
            lifetime?: Date;
         }
         interface ArrayOfNetIpConfigInfoIpAddress {
            NetIpConfigInfoIpAddress?: Array<vsanhealthService.vim.NetIpConfigInfoIpAddress>;
         }
         interface NetIpConfigInfo extends vsanhealthService.vim.DynamicData {
            ipAddress?: Array<vsanhealthService.vim.NetIpConfigInfoIpAddress>;
            dhcp?: vsanhealthService.vim.NetDhcpConfigInfo;
            autoConfigurationEnabled?: boolean;
         }
         interface NetIpConfigSpecIpAddressSpec extends vsanhealthService.vim.DynamicData {
            ipAddress: string;
            prefixLength: number;
            operation: string;
         }
         interface ArrayOfNetIpConfigSpecIpAddressSpec {
            NetIpConfigSpecIpAddressSpec?: Array<vsanhealthService.vim.NetIpConfigSpecIpAddressSpec>;
         }
         interface NetIpConfigSpec extends vsanhealthService.vim.DynamicData {
            ipAddress?: Array<vsanhealthService.vim.NetIpConfigSpecIpAddressSpec>;
            dhcp?: vsanhealthService.vim.NetDhcpConfigSpec;
            autoConfigurationEnabled?: boolean;
         }
         interface NetIpRouteConfigInfoGateway extends vsanhealthService.vim.DynamicData {
            ipAddress?: string;
            device?: string;
         }
         interface NetIpRouteConfigInfoIpRoute extends vsanhealthService.vim.DynamicData {
            network: string;
            prefixLength: number;
            gateway: vsanhealthService.vim.NetIpRouteConfigInfoGateway;
         }
         interface ArrayOfNetIpRouteConfigInfoIpRoute {
            NetIpRouteConfigInfoIpRoute?: Array<vsanhealthService.vim.NetIpRouteConfigInfoIpRoute>;
         }
         interface NetIpRouteConfigInfo extends vsanhealthService.vim.DynamicData {
            ipRoute?: Array<vsanhealthService.vim.NetIpRouteConfigInfoIpRoute>;
         }
         interface NetIpRouteConfigSpecGatewaySpec extends vsanhealthService.vim.DynamicData {
            ipAddress?: string;
            device?: string;
         }
         interface NetIpRouteConfigSpecIpRouteSpec extends vsanhealthService.vim.DynamicData {
            network: string;
            prefixLength: number;
            gateway: vsanhealthService.vim.NetIpRouteConfigSpecGatewaySpec;
            operation: string;
         }
         interface ArrayOfNetIpRouteConfigSpecIpRouteSpec {
            NetIpRouteConfigSpecIpRouteSpec?: Array<vsanhealthService.vim.NetIpRouteConfigSpecIpRouteSpec>;
         }
         interface NetIpRouteConfigSpec extends vsanhealthService.vim.DynamicData {
            ipRoute?: Array<vsanhealthService.vim.NetIpRouteConfigSpecIpRouteSpec>;
         }
         enum NetIpStackInfoEntryType {
            "other",
            "invalid",
            "dynamic",
            "manual",
         }
         enum NetIpStackInfoPreference {
            "reserved",
            "low",
            "medium",
            "high",
         }
         interface NetIpStackInfoNetToMedia extends vsanhealthService.vim.DynamicData {
            ipAddress: string;
            physicalAddress: string;
            device: string;
            type: string;
         }
         interface ArrayOfNetIpStackInfoNetToMedia {
            NetIpStackInfoNetToMedia?: Array<vsanhealthService.vim.NetIpStackInfoNetToMedia>;
         }
         interface NetIpStackInfoDefaultRouter extends vsanhealthService.vim.DynamicData {
            ipAddress: string;
            device: string;
            lifetime: Date;
            preference: string;
         }
         interface ArrayOfNetIpStackInfoDefaultRouter {
            NetIpStackInfoDefaultRouter?: Array<vsanhealthService.vim.NetIpStackInfoDefaultRouter>;
         }
         interface NetIpStackInfo extends vsanhealthService.vim.DynamicData {
            neighbor?: Array<vsanhealthService.vim.NetIpStackInfoNetToMedia>;
            defaultRouter?: Array<vsanhealthService.vim.NetIpStackInfoDefaultRouter>;
         }
         enum NetBIOSConfigInfoMode {
            "unknown",
            "enabled",
            "disabled",
            "enabledViaDHCP",
         }
         interface NetBIOSConfigInfo extends vsanhealthService.vim.DynamicData {
            mode: string;
         }
         interface WinNetBIOSConfigInfo extends vsanhealthService.vim.NetBIOSConfigInfo {
            primaryWINS: string;
            secondaryWINS?: string;
         }
         enum ArrayUpdateOperation {
            "add",
            "remove",
            "edit",
         }
         interface ArrayUpdateSpec extends vsanhealthService.vim.DynamicData {
            operation: vsanhealthService.vim.ArrayUpdateOperation;
            removeKey?: any;
         }
         interface BoolOption extends vsanhealthService.vim.OptionType {
            supported: boolean;
            defaultValue: boolean;
         }
         interface ChoiceOption extends vsanhealthService.vim.OptionType {
            choiceInfo: Array<vsanhealthService.vim.ElementDescription>;
            defaultIndex?: number;
         }
         interface FloatOption extends vsanhealthService.vim.OptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface IntOption extends vsanhealthService.vim.OptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface LongOption extends vsanhealthService.vim.OptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface OptionDef extends vsanhealthService.vim.ElementDescription {
            optionType: vsanhealthService.vim.OptionType;
         }
         interface ArrayOfOptionDef {
            OptionDef?: Array<vsanhealthService.vim.OptionDef>;
         }
         interface OptionType extends vsanhealthService.vim.DynamicData {
            valueIsReadonly?: boolean;
         }
         interface OptionValue extends vsanhealthService.vim.DynamicData {
            key: string;
            value?: any;
         }
         interface ArrayOfOptionValue {
            OptionValue?: Array<vsanhealthService.vim.OptionValue>;
         }
         interface StringOption extends vsanhealthService.vim.OptionType {
            defaultValue: string;
            validCharacters?: string;
         }
         interface ApplyProfile extends vsanhealthService.vim.DynamicData {
            enabled: boolean;
            policy?: Array<vsanhealthService.vim.ProfilePolicy>;
            profileTypeName?: string;
            profileVersion?: string;
            property?: Array<vsanhealthService.vim.ProfileApplyProfileProperty>;
            favorite?: boolean;
            toBeMerged?: boolean;
            toReplaceWith?: boolean;
            toBeDeleted?: boolean;
            copyEnableStatus?: boolean;
         }
         interface ArrayOfApplyProfile {
            ApplyProfile?: Array<vsanhealthService.vim.ApplyProfile>;
         }
         interface ProfileApplyProfileElement extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ProfileApplyProfileProperty extends vsanhealthService.vim.DynamicData {
            propertyName: string;
            array: boolean;
            profile?: Array<vsanhealthService.vim.ApplyProfile>;
         }
         interface ArrayOfProfileApplyProfileProperty {
            ProfileApplyProfileProperty?: Array<vsanhealthService.vim.ProfileApplyProfileProperty>;
         }
         interface ComplianceLocator extends vsanhealthService.vim.DynamicData {
            expressionName: string;
            applyPath: vsanhealthService.vim.ProfilePropertyPath;
         }
         interface ArrayOfComplianceLocator {
            ComplianceLocator?: Array<vsanhealthService.vim.ComplianceLocator>;
         }
         interface ComplianceProfile extends vsanhealthService.vim.DynamicData {
            expression: Array<vsanhealthService.vim.ProfileExpression>;
            rootExpression: string;
         }
         enum ComplianceResultStatus {
            "compliant",
            "nonCompliant",
            "unknown",
         }
         interface ComplianceFailureComplianceFailureValues extends vsanhealthService.vim.DynamicData {
            comparisonIdentifier: string;
            profileInstance?: string;
            hostValue?: any;
            profileValue?: any;
         }
         interface ArrayOfComplianceFailureComplianceFailureValues {
            ComplianceFailureComplianceFailureValues?: Array<vsanhealthService.vim.ComplianceFailureComplianceFailureValues>;
         }
         interface ComplianceFailure extends vsanhealthService.vim.DynamicData {
            failureType: string;
            message: vsanhealthService.vim.LocalizableMessage;
            expressionName?: string;
            failureValues?: Array<vsanhealthService.vim.ComplianceFailureComplianceFailureValues>;
         }
         interface ArrayOfComplianceFailure {
            ComplianceFailure?: Array<vsanhealthService.vim.ComplianceFailure>;
         }
         interface ComplianceResult extends vsanhealthService.vim.DynamicData {
            profile?: vsanhealthService.vim.ManagedObjectReference;
            complianceStatus: string;
            entity?: vsanhealthService.vim.ManagedObjectReference;
            checkTime?: Date;
            failure?: Array<vsanhealthService.vim.ComplianceFailure>;
         }
         interface ArrayOfComplianceResult {
            ComplianceResult?: Array<vsanhealthService.vim.ComplianceResult>;
         }
         interface ProfileDeferredPolicyOptionParameter extends vsanhealthService.vim.DynamicData {
            inputPath: vsanhealthService.vim.ProfilePropertyPath;
            parameter?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface ArrayOfProfileDeferredPolicyOptionParameter {
            ProfileDeferredPolicyOptionParameter?: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>;
         }
         interface ProfileExpression extends vsanhealthService.vim.DynamicData {
            id: string;
            displayName: string;
            negated: boolean;
         }
         interface ArrayOfProfileExpression {
            ProfileExpression?: Array<vsanhealthService.vim.ProfileExpression>;
         }
         interface ProfileSimpleExpression extends vsanhealthService.vim.ProfileExpression {
            expressionType: string;
            parameter?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface ProfileCompositeExpression extends vsanhealthService.vim.ProfileExpression {
            operator: string;
            expressionName: Array<string>;
         }
         interface ProfileExpressionMetadata extends vsanhealthService.vim.DynamicData {
            expressionId: vsanhealthService.vim.ExtendedElementDescription;
            parameter?: Array<vsanhealthService.vim.ProfileParameterMetadata>;
         }
         interface ArrayOfProfileExpressionMetadata {
            ProfileExpressionMetadata?: Array<vsanhealthService.vim.ProfileExpressionMetadata>;
         }
         enum ProfileNumericComparator {
            "lessThan",
            "lessThanEqual",
            "equal",
            "notEqual",
            "greaterThanEqual",
            "greaterThan",
         }
         interface ProfileParameterMetadata extends vsanhealthService.vim.DynamicData {
            id: vsanhealthService.vim.ExtendedElementDescription;
            type: string;
            optional: boolean;
            defaultValue?: any;
            hidden?: boolean;
            securitySensitive?: boolean;
            readOnly?: boolean;
         }
         interface ArrayOfProfileParameterMetadata {
            ProfileParameterMetadata?: Array<vsanhealthService.vim.ProfileParameterMetadata>;
         }
         interface ProfilePolicy extends vsanhealthService.vim.DynamicData {
            id: string;
            policyOption: vsanhealthService.vim.PolicyOption;
         }
         interface ArrayOfProfilePolicy {
            ProfilePolicy?: Array<vsanhealthService.vim.ProfilePolicy>;
         }
         interface ProfilePolicyOptionMetadata extends vsanhealthService.vim.DynamicData {
            id: vsanhealthService.vim.ExtendedElementDescription;
            parameter?: Array<vsanhealthService.vim.ProfileParameterMetadata>;
         }
         interface ArrayOfProfilePolicyOptionMetadata {
            ProfilePolicyOptionMetadata?: Array<vsanhealthService.vim.ProfilePolicyOptionMetadata>;
         }
         interface ProfileCompositePolicyOptionMetadata extends vsanhealthService.vim.ProfilePolicyOptionMetadata {
            option: Array<string>;
         }
         interface UserInputRequiredParameterMetadata extends vsanhealthService.vim.ProfilePolicyOptionMetadata {
            userInputParameter?: Array<vsanhealthService.vim.ProfileParameterMetadata>;
         }
         interface ProfilePolicyMetadata extends vsanhealthService.vim.DynamicData {
            id: vsanhealthService.vim.ExtendedElementDescription;
            possibleOption: Array<vsanhealthService.vim.ProfilePolicyOptionMetadata>;
         }
         interface ArrayOfProfilePolicyMetadata {
            ProfilePolicyMetadata?: Array<vsanhealthService.vim.ProfilePolicyMetadata>;
         }
         interface PolicyOption extends vsanhealthService.vim.DynamicData {
            id: string;
            parameter?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface ArrayOfPolicyOption {
            PolicyOption?: Array<vsanhealthService.vim.PolicyOption>;
         }
         interface CompositePolicyOption extends vsanhealthService.vim.PolicyOption {
            option?: Array<vsanhealthService.vim.PolicyOption>;
         }
         interface ProfileCreateSpec extends vsanhealthService.vim.DynamicData {
            name?: string;
            annotation?: string;
            enabled?: boolean;
         }
         interface ProfileSerializedCreateSpec extends vsanhealthService.vim.ProfileCreateSpec {
            profileConfigString: string;
         }
         interface ProfileConfigInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            annotation?: string;
            enabled: boolean;
         }
         interface ProfileDescriptionSection extends vsanhealthService.vim.DynamicData {
            description: vsanhealthService.vim.ExtendedElementDescription;
            message?: Array<vsanhealthService.vim.LocalizableMessage>;
         }
         interface ArrayOfProfileDescriptionSection {
            ProfileDescriptionSection?: Array<vsanhealthService.vim.ProfileDescriptionSection>;
         }
         interface ProfileDescription extends vsanhealthService.vim.DynamicData {
            section: Array<vsanhealthService.vim.ProfileDescriptionSection>;
         }
         interface ProfileMetadataProfileSortSpec extends vsanhealthService.vim.DynamicData {
            policyId: string;
            parameter: string;
         }
         interface ArrayOfProfileMetadataProfileSortSpec {
            ProfileMetadataProfileSortSpec?: Array<vsanhealthService.vim.ProfileMetadataProfileSortSpec>;
         }
         interface ProfileMetadata extends vsanhealthService.vim.DynamicData {
            key: string;
            profileTypeName?: string;
            description?: vsanhealthService.vim.ExtendedDescription;
            sortSpec?: Array<vsanhealthService.vim.ProfileMetadataProfileSortSpec>;
            profileCategory?: string;
            profileComponent?: string;
         }
         interface ArrayOfProfileMetadata {
            ProfileMetadata?: Array<vsanhealthService.vim.ProfileMetadata>;
         }
         interface ProfilePropertyPath extends vsanhealthService.vim.DynamicData {
            profilePath: string;
            policyId?: string;
            parameterId?: string;
         }
         interface ArrayOfProfilePropertyPath {
            ProfilePropertyPath?: Array<vsanhealthService.vim.ProfilePropertyPath>;
         }
         interface ProfileProfileStructure extends vsanhealthService.vim.DynamicData {
            profileTypeName: string;
            child?: Array<vsanhealthService.vim.ProfileProfileStructureProperty>;
         }
         interface ProfileProfileStructureProperty extends vsanhealthService.vim.DynamicData {
            propertyName: string;
            array: boolean;
            element: vsanhealthService.vim.ProfileProfileStructure;
         }
         interface ArrayOfProfileProfileStructureProperty {
            ProfileProfileStructureProperty?: Array<vsanhealthService.vim.ProfileProfileStructureProperty>;
         }
         interface ClusterProfileConfigInfo extends vsanhealthService.vim.ProfileConfigInfo {
            complyProfile?: vsanhealthService.vim.ComplianceProfile;
         }
         interface ClusterProfileCreateSpec extends vsanhealthService.vim.ProfileCreateSpec {
         }
         interface ClusterProfileConfigSpec extends vsanhealthService.vim.ClusterProfileCreateSpec {
         }
         interface ClusterProfileCompleteConfigSpec extends vsanhealthService.vim.ClusterProfileConfigSpec {
            complyProfile?: vsanhealthService.vim.ComplianceProfile;
         }
         enum ClusterProfileServiceType {
            "DRS",
            "HA",
            "DPM",
            "FT",
         }
         interface ClusterProfileConfigServiceCreateSpec extends vsanhealthService.vim.ClusterProfileConfigSpec {
            serviceType?: Array<string>;
         }
         interface AnswerFile extends vsanhealthService.vim.DynamicData {
            userInput?: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>;
            createdTime: Date;
            modifiedTime: Date;
         }
         interface AnswerFileStatusError extends vsanhealthService.vim.DynamicData {
            userInputPath: vsanhealthService.vim.ProfilePropertyPath;
            errMsg: vsanhealthService.vim.LocalizableMessage;
         }
         interface ArrayOfAnswerFileStatusError {
            AnswerFileStatusError?: Array<vsanhealthService.vim.AnswerFileStatusError>;
         }
         interface AnswerFileStatusResult extends vsanhealthService.vim.DynamicData {
            checkedTime: Date;
            host: vsanhealthService.vim.ManagedObjectReference;
            status: string;
            error?: Array<vsanhealthService.vim.AnswerFileStatusError>;
         }
         interface ArrayOfAnswerFileStatusResult {
            AnswerFileStatusResult?: Array<vsanhealthService.vim.AnswerFileStatusResult>;
         }
         enum ProfileExecuteResultStatus {
            "success",
            "needInput",
            "error",
         }
         interface ProfileExecuteError extends vsanhealthService.vim.DynamicData {
            path?: vsanhealthService.vim.ProfilePropertyPath;
            message: vsanhealthService.vim.LocalizableMessage;
         }
         interface ArrayOfProfileExecuteError {
            ProfileExecuteError?: Array<vsanhealthService.vim.ProfileExecuteError>;
         }
         interface ProfileExecuteResult extends vsanhealthService.vim.DynamicData {
            status: string;
            configSpec?: vsanhealthService.vim.HostConfigSpec;
            inapplicablePath?: Array<string>;
            requireInput?: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>;
            error?: Array<vsanhealthService.vim.ProfileExecuteError>;
         }
         interface HostApplyProfile extends vsanhealthService.vim.ApplyProfile {
            memory?: vsanhealthService.vim.HostMemoryProfile;
            storage?: vsanhealthService.vim.StorageProfile;
            network?: vsanhealthService.vim.NetworkProfile;
            datetime?: vsanhealthService.vim.DateTimeProfile;
            firewall?: vsanhealthService.vim.FirewallProfile;
            security?: vsanhealthService.vim.SecurityProfile;
            service?: Array<vsanhealthService.vim.ServiceProfile>;
            option?: Array<vsanhealthService.vim.OptionProfile>;
            userAccount?: Array<vsanhealthService.vim.UserProfile>;
            usergroupAccount?: Array<vsanhealthService.vim.UserGroupProfile>;
            authentication?: vsanhealthService.vim.AuthenticationProfile;
         }
         interface PhysicalNicProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfPhysicalNicProfile {
            PhysicalNicProfile?: Array<vsanhealthService.vim.PhysicalNicProfile>;
         }
         interface HostMemoryProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface UserProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfUserProfile {
            UserProfile?: Array<vsanhealthService.vim.UserProfile>;
         }
         interface UserGroupProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfUserGroupProfile {
            UserGroupProfile?: Array<vsanhealthService.vim.UserGroupProfile>;
         }
         interface SecurityProfile extends vsanhealthService.vim.ApplyProfile {
            permission?: Array<vsanhealthService.vim.PermissionProfile>;
         }
         interface OptionProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfOptionProfile {
            OptionProfile?: Array<vsanhealthService.vim.OptionProfile>;
         }
         interface DateTimeProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface ServiceProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfServiceProfile {
            ServiceProfile?: Array<vsanhealthService.vim.ServiceProfile>;
         }
         interface FirewallProfileRulesetProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfFirewallProfileRulesetProfile {
            FirewallProfileRulesetProfile?: Array<vsanhealthService.vim.FirewallProfileRulesetProfile>;
         }
         interface FirewallProfile extends vsanhealthService.vim.ApplyProfile {
            ruleset?: Array<vsanhealthService.vim.FirewallProfileRulesetProfile>;
         }
         interface NasStorageProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfNasStorageProfile {
            NasStorageProfile?: Array<vsanhealthService.vim.NasStorageProfile>;
         }
         interface StorageProfile extends vsanhealthService.vim.ApplyProfile {
            nasStorage?: Array<vsanhealthService.vim.NasStorageProfile>;
         }
         interface NetworkProfileDnsConfigProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface NetworkProfile extends vsanhealthService.vim.ApplyProfile {
            vswitch?: Array<vsanhealthService.vim.VirtualSwitchProfile>;
            vmPortGroup?: Array<vsanhealthService.vim.VmPortGroupProfile>;
            hostPortGroup?: Array<vsanhealthService.vim.HostPortGroupProfile>;
            serviceConsolePortGroup?: Array<vsanhealthService.vim.ServiceConsolePortGroupProfile>;
            dnsConfig?: vsanhealthService.vim.NetworkProfileDnsConfigProfile;
            ipRouteConfig?: vsanhealthService.vim.IpRouteProfile;
            consoleIpRouteConfig?: vsanhealthService.vim.IpRouteProfile;
            pnic?: Array<vsanhealthService.vim.PhysicalNicProfile>;
            dvswitch?: Array<vsanhealthService.vim.DvsProfile>;
            dvsServiceConsoleNic?: Array<vsanhealthService.vim.DvsServiceConsoleVNicProfile>;
            dvsHostNic?: Array<vsanhealthService.vim.DvsHostVNicProfile>;
            netStackInstance?: Array<vsanhealthService.vim.NetStackInstanceProfile>;
         }
         interface DvsVNicProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
            ipConfig: vsanhealthService.vim.IpAddressProfile;
         }
         interface DvsServiceConsoleVNicProfile extends vsanhealthService.vim.DvsVNicProfile {
         }
         interface ArrayOfDvsServiceConsoleVNicProfile {
            DvsServiceConsoleVNicProfile?: Array<vsanhealthService.vim.DvsServiceConsoleVNicProfile>;
         }
         interface DvsHostVNicProfile extends vsanhealthService.vim.DvsVNicProfile {
         }
         interface ArrayOfDvsHostVNicProfile {
            DvsHostVNicProfile?: Array<vsanhealthService.vim.DvsHostVNicProfile>;
         }
         interface DvsProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
            name: string;
            uplink?: Array<vsanhealthService.vim.PnicUplinkProfile>;
         }
         interface ArrayOfDvsProfile {
            DvsProfile?: Array<vsanhealthService.vim.DvsProfile>;
         }
         interface PnicUplinkProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfPnicUplinkProfile {
            PnicUplinkProfile?: Array<vsanhealthService.vim.PnicUplinkProfile>;
         }
         interface IpRouteProfile extends vsanhealthService.vim.ApplyProfile {
            staticRoute?: Array<vsanhealthService.vim.StaticRouteProfile>;
         }
         interface StaticRouteProfile extends vsanhealthService.vim.ApplyProfile {
            key?: string;
         }
         interface ArrayOfStaticRouteProfile {
            StaticRouteProfile?: Array<vsanhealthService.vim.StaticRouteProfile>;
         }
         interface LinkProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface NumPortsProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface VirtualSwitchProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
            name: string;
            link: vsanhealthService.vim.LinkProfile;
            numPorts: vsanhealthService.vim.NumPortsProfile;
            networkPolicy: vsanhealthService.vim.NetworkPolicyProfile;
         }
         interface ArrayOfVirtualSwitchProfile {
            VirtualSwitchProfile?: Array<vsanhealthService.vim.VirtualSwitchProfile>;
         }
         interface NetStackInstanceProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
            dnsConfig: vsanhealthService.vim.NetworkProfileDnsConfigProfile;
            ipRouteConfig: vsanhealthService.vim.IpRouteProfile;
         }
         interface ArrayOfNetStackInstanceProfile {
            NetStackInstanceProfile?: Array<vsanhealthService.vim.NetStackInstanceProfile>;
         }
         interface VlanProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface VirtualSwitchSelectionProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface PortGroupProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
            name: string;
            vlan: vsanhealthService.vim.VlanProfile;
            vswitch: vsanhealthService.vim.VirtualSwitchSelectionProfile;
            networkPolicy: vsanhealthService.vim.NetworkPolicyProfile;
         }
         interface VmPortGroupProfile extends vsanhealthService.vim.PortGroupProfile {
         }
         interface ArrayOfVmPortGroupProfile {
            VmPortGroupProfile?: Array<vsanhealthService.vim.VmPortGroupProfile>;
         }
         interface HostPortGroupProfile extends vsanhealthService.vim.PortGroupProfile {
            ipConfig: vsanhealthService.vim.IpAddressProfile;
         }
         interface ArrayOfHostPortGroupProfile {
            HostPortGroupProfile?: Array<vsanhealthService.vim.HostPortGroupProfile>;
         }
         interface ServiceConsolePortGroupProfile extends vsanhealthService.vim.PortGroupProfile {
            ipConfig: vsanhealthService.vim.IpAddressProfile;
         }
         interface ArrayOfServiceConsolePortGroupProfile {
            ServiceConsolePortGroupProfile?: Array<vsanhealthService.vim.ServiceConsolePortGroupProfile>;
         }
         interface NetworkPolicyProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface IpAddressProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface AuthenticationProfile extends vsanhealthService.vim.ApplyProfile {
            activeDirectory?: vsanhealthService.vim.ActiveDirectoryProfile;
         }
         interface ActiveDirectoryProfile extends vsanhealthService.vim.ApplyProfile {
         }
         interface PermissionProfile extends vsanhealthService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfPermissionProfile {
            PermissionProfile?: Array<vsanhealthService.vim.PermissionProfile>;
         }
         interface HostProfileConfigInfo extends vsanhealthService.vim.ProfileConfigInfo {
            applyProfile?: vsanhealthService.vim.HostApplyProfile;
            defaultComplyProfile?: vsanhealthService.vim.ComplianceProfile;
            defaultComplyLocator?: Array<vsanhealthService.vim.ComplianceLocator>;
            customComplyProfile?: vsanhealthService.vim.ComplianceProfile;
            disabledExpressionList?: Array<string>;
            description?: vsanhealthService.vim.ProfileDescription;
         }
         interface HostProfileConfigSpec extends vsanhealthService.vim.ProfileCreateSpec {
         }
         interface HostProfileSerializedHostProfileSpec extends vsanhealthService.vim.ProfileSerializedCreateSpec {
            validatorHost?: vsanhealthService.vim.ManagedObjectReference;
            validating?: boolean;
         }
         interface HostProfileCompleteConfigSpec extends vsanhealthService.vim.HostProfileConfigSpec {
            applyProfile?: vsanhealthService.vim.HostApplyProfile;
            customComplyProfile?: vsanhealthService.vim.ComplianceProfile;
            disabledExpressionListChanged: boolean;
            disabledExpressionList?: Array<string>;
            validatorHost?: vsanhealthService.vim.ManagedObjectReference;
            validating?: boolean;
            hostConfig?: vsanhealthService.vim.HostProfileConfigInfo;
         }
         interface HostProfileHostBasedConfigSpec extends vsanhealthService.vim.HostProfileConfigSpec {
            host: vsanhealthService.vim.ManagedObjectReference;
            useHostProfileEngine?: boolean;
         }
         interface HostSpecification extends vsanhealthService.vim.DynamicData {
            createdTime: Date;
            lastModified?: Date;
            host: vsanhealthService.vim.ManagedObjectReference;
            subSpecs?: Array<vsanhealthService.vim.HostSubSpecification>;
            changeID?: string;
         }
         interface HostSubSpecification extends vsanhealthService.vim.DynamicData {
            name: string;
            createdTime: Date;
            data?: Array<number>;
         }
         interface ArrayOfHostSubSpecification {
            HostSubSpecification?: Array<vsanhealthService.vim.HostSubSpecification>;
         }
         enum HostProfileManagerTaskListRequirement {
            "maintenanceModeRequired",
            "rebootRequired",
         }
         interface HostProfileManagerConfigTaskList extends vsanhealthService.vim.DynamicData {
            configSpec?: vsanhealthService.vim.HostConfigSpec;
            taskDescription?: Array<vsanhealthService.vim.LocalizableMessage>;
            taskListRequirement?: Array<string>;
         }
         interface AnswerFileCreateSpec extends vsanhealthService.vim.DynamicData {
            validating?: boolean;
         }
         interface AnswerFileOptionsCreateSpec extends vsanhealthService.vim.AnswerFileCreateSpec {
            userInput?: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>;
         }
         interface AnswerFileSerializedCreateSpec extends vsanhealthService.vim.AnswerFileCreateSpec {
            answerFileConfigString: string;
         }
         enum HostProfileManagerAnswerFileStatus {
            "valid",
            "invalid",
            "unknown",
         }
         interface HostProfilesEntityCustomizations extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfHostProfilesEntityCustomizations {
            HostProfilesEntityCustomizations?: Array<vsanhealthService.vim.HostProfilesEntityCustomizations>;
         }
         interface StructuredCustomizations extends vsanhealthService.vim.HostProfilesEntityCustomizations {
            entity: vsanhealthService.vim.ManagedObjectReference;
            customizations?: vsanhealthService.vim.AnswerFile;
         }
         interface ArrayOfStructuredCustomizations {
            StructuredCustomizations?: Array<vsanhealthService.vim.StructuredCustomizations>;
         }
         interface HostProfileManagerHostToConfigSpecMap extends vsanhealthService.vim.DynamicData {
            host: vsanhealthService.vim.ManagedObjectReference;
            configSpec: vsanhealthService.vim.AnswerFileCreateSpec;
         }
         interface ArrayOfHostProfileManagerHostToConfigSpecMap {
            HostProfileManagerHostToConfigSpecMap?: Array<vsanhealthService.vim.HostProfileManagerHostToConfigSpecMap>;
         }
         interface ApplyHostProfileConfigurationSpec extends vsanhealthService.vim.ProfileExecuteResult {
            host: vsanhealthService.vim.ManagedObjectReference;
            taskListRequirement?: Array<string>;
            taskDescription?: Array<vsanhealthService.vim.LocalizableMessage>;
            rebootStateless?: boolean;
            rebootHost?: boolean;
            faultData?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfApplyHostProfileConfigurationSpec {
            ApplyHostProfileConfigurationSpec?: Array<vsanhealthService.vim.ApplyHostProfileConfigurationSpec>;
         }
         interface HostProfileManagerCompositionValidationResultResultElement extends vsanhealthService.vim.DynamicData {
            target: vsanhealthService.vim.ManagedObjectReference;
            status: string;
            errors?: Array<vsanhealthService.vim.LocalizableMessage>;
            sourceDiffForToBeMerged?: vsanhealthService.vim.HostApplyProfile;
            targetDiffForToBeMerged?: vsanhealthService.vim.HostApplyProfile;
            toBeAdded?: vsanhealthService.vim.HostApplyProfile;
            toBeDeleted?: vsanhealthService.vim.HostApplyProfile;
            toBeDisabled?: vsanhealthService.vim.HostApplyProfile;
            toBeEnabled?: vsanhealthService.vim.HostApplyProfile;
            toBeReenableCC?: vsanhealthService.vim.HostApplyProfile;
         }
         interface ArrayOfHostProfileManagerCompositionValidationResultResultElement {
            HostProfileManagerCompositionValidationResultResultElement?: Array<vsanhealthService.vim.HostProfileManagerCompositionValidationResultResultElement>;
         }
         interface ScheduledTaskDetail extends vsanhealthService.vim.TypeDescription {
            frequency: string;
         }
         interface ArrayOfScheduledTaskDetail {
            ScheduledTaskDetail?: Array<vsanhealthService.vim.ScheduledTaskDetail>;
         }
         interface ScheduledTaskDescription extends vsanhealthService.vim.DynamicData {
            action: Array<vsanhealthService.vim.TypeDescription>;
            schedulerInfo: Array<vsanhealthService.vim.ScheduledTaskDetail>;
            state: Array<vsanhealthService.vim.ElementDescription>;
            dayOfWeek: Array<vsanhealthService.vim.ElementDescription>;
            weekOfMonth: Array<vsanhealthService.vim.ElementDescription>;
         }
         interface ScheduledTaskInfo extends vsanhealthService.vim.ScheduledTaskSpec {
            scheduledTask: vsanhealthService.vim.ManagedObjectReference;
            entity: vsanhealthService.vim.ManagedObjectReference;
            lastModifiedTime: Date;
            lastModifiedUser: string;
            nextRunTime?: Date;
            prevRunTime?: Date;
            state: vsanhealthService.vim.TaskInfoState;
            error?: vsanhealthService.vim.LocalizedMethodFault;
            result?: any;
            progress?: number;
            activeTask?: vsanhealthService.vim.ManagedObjectReference;
            taskObject?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface TaskScheduler extends vsanhealthService.vim.DynamicData {
            activeTime?: Date;
            expireTime?: Date;
         }
         interface AfterStartupTaskScheduler extends vsanhealthService.vim.TaskScheduler {
            minute: number;
         }
         interface OnceTaskScheduler extends vsanhealthService.vim.TaskScheduler {
            runAt?: Date;
         }
         interface RecurrentTaskScheduler extends vsanhealthService.vim.TaskScheduler {
            interval: number;
         }
         interface HourlyTaskScheduler extends vsanhealthService.vim.RecurrentTaskScheduler {
            minute: number;
         }
         interface DailyTaskScheduler extends vsanhealthService.vim.HourlyTaskScheduler {
            hour: number;
         }
         interface WeeklyTaskScheduler extends vsanhealthService.vim.DailyTaskScheduler {
            sunday: boolean;
            monday: boolean;
            tuesday: boolean;
            wednesday: boolean;
            thursday: boolean;
            friday: boolean;
            saturday: boolean;
         }
         interface MonthlyTaskScheduler extends vsanhealthService.vim.DailyTaskScheduler {
         }
         interface MonthlyByDayTaskScheduler extends vsanhealthService.vim.MonthlyTaskScheduler {
            day: number;
         }
         enum DayOfWeek {
            "sunday",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
         }
         enum WeekOfMonth {
            "first",
            "second",
            "third",
            "fourth",
            "last",
         }
         interface MonthlyByWeekdayTaskScheduler extends vsanhealthService.vim.MonthlyTaskScheduler {
            offset: vsanhealthService.vim.WeekOfMonth;
            weekday: vsanhealthService.vim.DayOfWeek;
         }
         interface ScheduledTaskSpec extends vsanhealthService.vim.DynamicData {
            name: string;
            description: string;
            enabled: boolean;
            scheduler: vsanhealthService.vim.TaskScheduler;
            action: vsanhealthService.vim.Action;
            notification?: string;
         }
         interface ApplyStorageRecommendationResult extends vsanhealthService.vim.DynamicData {
            vm?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface StorageDrsConfigInfo extends vsanhealthService.vim.DynamicData {
            podConfig: vsanhealthService.vim.StorageDrsPodConfigInfo;
            vmConfig?: Array<vsanhealthService.vim.StorageDrsVmConfigInfo>;
         }
         interface StorageDrsConfigSpec extends vsanhealthService.vim.DynamicData {
            podConfigSpec?: vsanhealthService.vim.StorageDrsPodConfigSpec;
            vmConfigSpec?: Array<vsanhealthService.vim.StorageDrsVmConfigSpec>;
         }
         interface StorageDrsVmConfigSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.StorageDrsVmConfigInfo;
         }
         interface ArrayOfStorageDrsVmConfigSpec {
            StorageDrsVmConfigSpec?: Array<vsanhealthService.vim.StorageDrsVmConfigSpec>;
         }
         interface HbrDiskMigrationAction extends vsanhealthService.vim.ClusterAction {
            collectionId: string;
            collectionName: string;
            diskIds: Array<string>;
            source: vsanhealthService.vim.ManagedObjectReference;
            destination: vsanhealthService.vim.ManagedObjectReference;
            sizeTransferred: number;
            spaceUtilSrcBefore?: number;
            spaceUtilDstBefore?: number;
            spaceUtilSrcAfter?: number;
            spaceUtilDstAfter?: number;
            ioLatencySrcBefore?: number;
            ioLatencyDstBefore?: number;
         }
         enum PlacementAffinityRuleRuleType {
            "affinity",
            "antiAffinity",
            "softAffinity",
            "softAntiAffinity",
         }
         enum PlacementAffinityRuleRuleScope {
            "cluster",
            "host",
            "storagePod",
            "datastore",
         }
         interface PlacementAffinityRule extends vsanhealthService.vim.DynamicData {
            ruleType: string;
            ruleScope: string;
            vms?: Array<vsanhealthService.vim.ManagedObjectReference>;
            keys?: Array<string>;
         }
         interface ArrayOfPlacementAffinityRule {
            PlacementAffinityRule?: Array<vsanhealthService.vim.PlacementAffinityRule>;
         }
         interface PlacementRankResult extends vsanhealthService.vim.DynamicData {
            key: string;
            candidate: vsanhealthService.vim.ManagedObjectReference;
            reservedSpaceMB: number;
            usedSpaceMB: number;
            totalSpaceMB: number;
            utilization: number;
            faults?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface PlacementRankSpec extends vsanhealthService.vim.DynamicData {
            specs: Array<vsanhealthService.vim.PlacementSpec>;
            clusters: Array<vsanhealthService.vim.ManagedObjectReference>;
            rules?: Array<vsanhealthService.vim.PlacementAffinityRule>;
            placementRankByVm?: Array<vsanhealthService.vim.StorageDrsPlacementRankVmSpec>;
         }
         interface StorageDrsPlacementRankVmSpec extends vsanhealthService.vim.DynamicData {
            vmPlacementSpec: vsanhealthService.vim.PlacementSpec;
            vmClusters: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ArrayOfStorageDrsPlacementRankVmSpec {
            StorageDrsPlacementRankVmSpec?: Array<vsanhealthService.vim.StorageDrsPlacementRankVmSpec>;
         }
         enum StorageDrsPodConfigInfoBehavior {
            "manual",
            "automated",
         }
         interface StorageDrsPodConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled: boolean;
            ioLoadBalanceEnabled: boolean;
            defaultVmBehavior: string;
            loadBalanceInterval?: number;
            defaultIntraVmAffinity?: boolean;
            spaceLoadBalanceConfig?: vsanhealthService.vim.StorageDrsSpaceLoadBalanceConfig;
            ioLoadBalanceConfig?: vsanhealthService.vim.StorageDrsIoLoadBalanceConfig;
            automationOverrides?: vsanhealthService.vim.StorageDrsAutomationConfig;
            rule?: Array<vsanhealthService.vim.ClusterRuleInfo>;
            option?: Array<vsanhealthService.vim.OptionValue>;
         }
         enum StorageDrsSpaceLoadBalanceConfigSpaceThresholdMode {
            "utilization",
            "freeSpace",
         }
         interface StorageDrsSpaceLoadBalanceConfig extends vsanhealthService.vim.DynamicData {
            spaceThresholdMode?: string;
            spaceUtilizationThreshold?: number;
            freeSpaceThresholdGB?: number;
            minSpaceUtilizationDifference?: number;
         }
         interface StorageDrsIoLoadBalanceConfig extends vsanhealthService.vim.DynamicData {
            reservablePercentThreshold?: number;
            reservableIopsThreshold?: number;
            reservableThresholdMode?: string;
            ioLatencyThreshold?: number;
            ioLoadImbalanceThreshold?: number;
         }
         interface StorageDrsAutomationConfig extends vsanhealthService.vim.DynamicData {
            spaceLoadBalanceAutomationMode?: string;
            ioLoadBalanceAutomationMode?: string;
            ruleEnforcementAutomationMode?: string;
            policyEnforcementAutomationMode?: string;
            vmEvacuationAutomationMode?: string;
         }
         interface StorageDrsPodConfigSpec extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            ioLoadBalanceEnabled?: boolean;
            defaultVmBehavior?: string;
            loadBalanceInterval?: number;
            defaultIntraVmAffinity?: boolean;
            spaceLoadBalanceConfig?: vsanhealthService.vim.StorageDrsSpaceLoadBalanceConfig;
            ioLoadBalanceConfig?: vsanhealthService.vim.StorageDrsIoLoadBalanceConfig;
            automationOverrides?: vsanhealthService.vim.StorageDrsAutomationConfig;
            rule?: Array<vsanhealthService.vim.ClusterRuleSpec>;
            option?: Array<vsanhealthService.vim.StorageDrsOptionSpec>;
         }
         interface StorageDrsOptionSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            option?: vsanhealthService.vim.OptionValue;
         }
         interface ArrayOfStorageDrsOptionSpec {
            StorageDrsOptionSpec?: Array<vsanhealthService.vim.StorageDrsOptionSpec>;
         }
         interface VmPodConfigForPlacement extends vsanhealthService.vim.DynamicData {
            storagePod: vsanhealthService.vim.ManagedObjectReference;
            disk?: Array<vsanhealthService.vim.PodDiskLocator>;
            vmConfig?: vsanhealthService.vim.StorageDrsVmConfigInfo;
            interVmRule?: Array<vsanhealthService.vim.ClusterRuleInfo>;
         }
         interface ArrayOfVmPodConfigForPlacement {
            VmPodConfigForPlacement?: Array<vsanhealthService.vim.VmPodConfigForPlacement>;
         }
         interface PodDiskLocator extends vsanhealthService.vim.DynamicData {
            diskId: number;
            diskMoveType?: string;
            diskBackingInfo?: vsanhealthService.vim.VirtualDeviceBackingInfo;
            profile?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
         }
         interface ArrayOfPodDiskLocator {
            PodDiskLocator?: Array<vsanhealthService.vim.PodDiskLocator>;
         }
         interface StorageDrsPodSelectionSpec extends vsanhealthService.vim.DynamicData {
            initialVmConfig?: Array<vsanhealthService.vim.VmPodConfigForPlacement>;
            storagePod?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface StorageMigrationAction extends vsanhealthService.vim.ClusterAction {
            vm: vsanhealthService.vim.ManagedObjectReference;
            relocateSpec: vsanhealthService.vim.VirtualMachineRelocateSpec;
            source: vsanhealthService.vim.ManagedObjectReference;
            destination: vsanhealthService.vim.ManagedObjectReference;
            sizeTransferred: number;
            spaceUtilSrcBefore?: number;
            spaceUtilDstBefore?: number;
            spaceUtilSrcAfter?: number;
            spaceUtilDstAfter?: number;
            ioLatencySrcBefore?: number;
            ioLatencyDstBefore?: number;
         }
         interface StoragePlacementAction extends vsanhealthService.vim.ClusterAction {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            relocateSpec: vsanhealthService.vim.VirtualMachineRelocateSpec;
            destination: vsanhealthService.vim.ManagedObjectReference;
            spaceUtilBefore?: number;
            spaceDemandBefore?: number;
            spaceUtilAfter?: number;
            spaceDemandAfter?: number;
            ioLatencyBefore?: number;
         }
         interface StoragePlacementResult extends vsanhealthService.vim.DynamicData {
            recommendations?: Array<vsanhealthService.vim.ClusterRecommendation>;
            drsFault?: vsanhealthService.vim.ClusterDrsFaults;
            task?: vsanhealthService.vim.ManagedObjectReference;
         }
         enum StoragePlacementSpecPlacementType {
            "create",
            "reconfigure",
            "relocate",
            "clone",
         }
         interface StoragePlacementSpec extends vsanhealthService.vim.DynamicData {
            type: string;
            priority?: vsanhealthService.vim.VirtualMachineMovePriority;
            vm?: vsanhealthService.vim.ManagedObjectReference;
            podSelectionSpec: vsanhealthService.vim.StorageDrsPodSelectionSpec;
            cloneSpec?: vsanhealthService.vim.VirtualMachineCloneSpec;
            cloneName?: string;
            configSpec?: vsanhealthService.vim.VirtualMachineConfigSpec;
            relocateSpec?: vsanhealthService.vim.VirtualMachineRelocateSpec;
            resourcePool?: vsanhealthService.vim.ManagedObjectReference;
            host?: vsanhealthService.vim.ManagedObjectReference;
            folder?: vsanhealthService.vim.ManagedObjectReference;
            disallowPrerequisiteMoves?: boolean;
            resourceLeaseDurationSec?: number;
         }
         interface VirtualDiskAntiAffinityRuleSpec extends vsanhealthService.vim.ClusterRuleInfo {
            diskId: Array<number>;
         }
         interface StorageDrsVmConfigInfo extends vsanhealthService.vim.DynamicData {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            enabled?: boolean;
            behavior?: string;
            intraVmAffinity?: boolean;
            intraVmAntiAffinity?: vsanhealthService.vim.VirtualDiskAntiAffinityRuleSpec;
         }
         interface ArrayOfStorageDrsVmConfigInfo {
            StorageDrsVmConfigInfo?: Array<vsanhealthService.vim.StorageDrsVmConfigInfo>;
         }
         interface VAppCloneSpecNetworkMappingPair extends vsanhealthService.vim.DynamicData {
            source: vsanhealthService.vim.ManagedObjectReference;
            destination: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfVAppCloneSpecNetworkMappingPair {
            VAppCloneSpecNetworkMappingPair?: Array<vsanhealthService.vim.VAppCloneSpecNetworkMappingPair>;
         }
         interface VAppCloneSpecResourceMap extends vsanhealthService.vim.DynamicData {
            source: vsanhealthService.vim.ManagedObjectReference;
            parent?: vsanhealthService.vim.ManagedObjectReference;
            resourceSpec?: vsanhealthService.vim.ResourceConfigSpec;
            location?: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfVAppCloneSpecResourceMap {
            VAppCloneSpecResourceMap?: Array<vsanhealthService.vim.VAppCloneSpecResourceMap>;
         }
         enum VAppCloneSpecProvisioningType {
            "sameAsSource",
            "thin",
            "thick",
         }
         interface VAppCloneSpec extends vsanhealthService.vim.DynamicData {
            location: vsanhealthService.vim.ManagedObjectReference;
            host?: vsanhealthService.vim.ManagedObjectReference;
            resourceSpec?: vsanhealthService.vim.ResourceConfigSpec;
            vmFolder?: vsanhealthService.vim.ManagedObjectReference;
            networkMapping?: Array<vsanhealthService.vim.VAppCloneSpecNetworkMappingPair>;
            property?: Array<vsanhealthService.vim.KeyValue>;
            resourceMapping?: Array<vsanhealthService.vim.VAppCloneSpecResourceMap>;
            provisioning?: string;
         }
         enum VAppAutoStartAction {
            "none",
            "powerOn",
            "powerOff",
            "guestShutdown",
            "suspend",
         }
         interface VAppEntityConfigInfo extends vsanhealthService.vim.DynamicData {
            key?: vsanhealthService.vim.ManagedObjectReference;
            tag?: string;
            startOrder?: number;
            startDelay?: number;
            waitingForGuest?: boolean;
            startAction?: string;
            stopDelay?: number;
            stopAction?: string;
            destroyWithParent?: boolean;
         }
         interface ArrayOfVAppEntityConfigInfo {
            VAppEntityConfigInfo?: Array<vsanhealthService.vim.VAppEntityConfigInfo>;
         }
         enum VAppIPAssignmentInfoIpAllocationPolicy {
            "dhcpPolicy",
            "transientPolicy",
            "fixedPolicy",
            "fixedAllocatedPolicy",
         }
         enum VAppIPAssignmentInfoAllocationSchemes {
            "dhcp",
            "ovfenv",
         }
         enum VAppIPAssignmentInfoProtocols {
            "IPv4",
            "IPv6",
         }
         interface VAppIPAssignmentInfo extends vsanhealthService.vim.DynamicData {
            supportedAllocationScheme?: Array<string>;
            ipAllocationPolicy?: string;
            supportedIpProtocol?: Array<string>;
            ipProtocol?: string;
         }
         interface IpPoolIpPoolConfigInfo extends vsanhealthService.vim.DynamicData {
            subnetAddress?: string;
            netmask?: string;
            gateway?: string;
            range?: string;
            dns?: Array<string>;
            dhcpServerAvailable?: boolean;
            ipPoolEnabled?: boolean;
         }
         interface IpPoolAssociation extends vsanhealthService.vim.DynamicData {
            network?: vsanhealthService.vim.ManagedObjectReference;
            networkName: string;
         }
         interface ArrayOfIpPoolAssociation {
            IpPoolAssociation?: Array<vsanhealthService.vim.IpPoolAssociation>;
         }
         interface IpPool extends vsanhealthService.vim.DynamicData {
            id?: number;
            name?: string;
            ipv4Config?: vsanhealthService.vim.IpPoolIpPoolConfigInfo;
            ipv6Config?: vsanhealthService.vim.IpPoolIpPoolConfigInfo;
            dnsDomain?: string;
            dnsSearchPath?: string;
            hostPrefix?: string;
            httpProxy?: string;
            networkAssociation?: Array<vsanhealthService.vim.IpPoolAssociation>;
            availableIpv4Addresses?: number;
            availableIpv6Addresses?: number;
            allocatedIpv4Addresses?: number;
            allocatedIpv6Addresses?: number;
         }
         interface ArrayOfIpPool {
            IpPool?: Array<vsanhealthService.vim.IpPool>;
         }
         interface VAppOvfSectionInfo extends vsanhealthService.vim.DynamicData {
            key?: number;
            namespace?: string;
            type?: string;
            atEnvelopeLevel?: boolean;
            contents?: string;
         }
         interface ArrayOfVAppOvfSectionInfo {
            VAppOvfSectionInfo?: Array<vsanhealthService.vim.VAppOvfSectionInfo>;
         }
         interface VAppProductInfo extends vsanhealthService.vim.DynamicData {
            key: number;
            classId?: string;
            instanceId?: string;
            name?: string;
            vendor?: string;
            version?: string;
            fullVersion?: string;
            vendorUrl?: string;
            productUrl?: string;
            appUrl?: string;
         }
         interface ArrayOfVAppProductInfo {
            VAppProductInfo?: Array<vsanhealthService.vim.VAppProductInfo>;
         }
         interface VAppPropertyInfo extends vsanhealthService.vim.DynamicData {
            key: number;
            classId?: string;
            instanceId?: string;
            id?: string;
            category?: string;
            label?: string;
            type?: string;
            typeReference?: string;
            userConfigurable?: boolean;
            defaultValue?: string;
            value?: string;
            description?: string;
         }
         interface ArrayOfVAppPropertyInfo {
            VAppPropertyInfo?: Array<vsanhealthService.vim.VAppPropertyInfo>;
         }
         interface VAppConfigInfo extends vsanhealthService.vim.VmConfigInfo {
            entityConfig?: Array<vsanhealthService.vim.VAppEntityConfigInfo>;
            annotation: string;
            instanceUuid?: string;
            managedBy?: vsanhealthService.vim.ManagedByInfo;
         }
         interface VAppConfigSpec extends vsanhealthService.vim.VmConfigSpec {
            entityConfig?: Array<vsanhealthService.vim.VAppEntityConfigInfo>;
            annotation?: string;
            instanceUuid?: string;
            managedBy?: vsanhealthService.vim.ManagedByInfo;
         }
         interface VirtualAppImportSpec extends vsanhealthService.vim.ImportSpec {
            name: string;
            vAppConfigSpec: vsanhealthService.vim.VAppConfigSpec;
            resourcePoolSpec: vsanhealthService.vim.ResourceConfigSpec;
            child?: Array<vsanhealthService.vim.ImportSpec>;
         }
         interface VmConfigInfo extends vsanhealthService.vim.DynamicData {
            product?: Array<vsanhealthService.vim.VAppProductInfo>;
            property?: Array<vsanhealthService.vim.VAppPropertyInfo>;
            ipAssignment: vsanhealthService.vim.VAppIPAssignmentInfo;
            eula?: Array<string>;
            ovfSection?: Array<vsanhealthService.vim.VAppOvfSectionInfo>;
            ovfEnvironmentTransport?: Array<string>;
            installBootRequired: boolean;
            installBootStopDelay: number;
         }
         interface VmConfigSpec extends vsanhealthService.vim.DynamicData {
            product?: Array<vsanhealthService.vim.VAppProductSpec>;
            property?: Array<vsanhealthService.vim.VAppPropertySpec>;
            ipAssignment?: vsanhealthService.vim.VAppIPAssignmentInfo;
            eula?: Array<string>;
            ovfSection?: Array<vsanhealthService.vim.VAppOvfSectionSpec>;
            ovfEnvironmentTransport?: Array<string>;
            installBootRequired?: boolean;
            installBootStopDelay?: number;
         }
         interface VAppProductSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.VAppProductInfo;
         }
         interface ArrayOfVAppProductSpec {
            VAppProductSpec?: Array<vsanhealthService.vim.VAppProductSpec>;
         }
         interface VAppPropertySpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.VAppPropertyInfo;
         }
         interface ArrayOfVAppPropertySpec {
            VAppPropertySpec?: Array<vsanhealthService.vim.VAppPropertySpec>;
         }
         interface VAppOvfSectionSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.VAppOvfSectionInfo;
         }
         interface ArrayOfVAppOvfSectionSpec {
            VAppOvfSectionSpec?: Array<vsanhealthService.vim.VAppOvfSectionSpec>;
         }
         interface ClusterNetworkConfigSpec extends vsanhealthService.vim.DynamicData {
            networkPortGroup: vsanhealthService.vim.ManagedObjectReference;
            ipSettings: vsanhealthService.vim.CustomizationIPSettings;
         }
         interface SourceNodeSpec extends vsanhealthService.vim.DynamicData {
            managementVc: vsanhealthService.vim.ServiceLocator;
            activeVc: vsanhealthService.vim.ManagedObjectReference;
         }
         interface NodeNetworkSpec extends vsanhealthService.vim.DynamicData {
            ipSettings: vsanhealthService.vim.CustomizationIPSettings;
         }
         interface PassiveNodeNetworkSpec extends vsanhealthService.vim.NodeNetworkSpec {
            failoverIpSettings?: vsanhealthService.vim.CustomizationIPSettings;
         }
         interface VchaClusterNetworkSpec extends vsanhealthService.vim.DynamicData {
            witnessNetworkSpec: vsanhealthService.vim.NodeNetworkSpec;
            passiveNetworkSpec: vsanhealthService.vim.PassiveNodeNetworkSpec;
         }
         interface NodeDeploymentSpec extends vsanhealthService.vim.DynamicData {
            esxHost?: vsanhealthService.vim.ManagedObjectReference;
            datastore?: vsanhealthService.vim.ManagedObjectReference;
            publicNetworkPortGroup?: vsanhealthService.vim.ManagedObjectReference;
            clusterNetworkPortGroup?: vsanhealthService.vim.ManagedObjectReference;
            folder: vsanhealthService.vim.ManagedObjectReference;
            resourcePool?: vsanhealthService.vim.ManagedObjectReference;
            managementVc?: vsanhealthService.vim.ServiceLocator;
            nodeName: string;
            ipSettings: vsanhealthService.vim.CustomizationIPSettings;
         }
         interface PassiveNodeDeploymentSpec extends vsanhealthService.vim.NodeDeploymentSpec {
            failoverIpSettings?: vsanhealthService.vim.CustomizationIPSettings;
         }
         interface VchaClusterConfigSpec extends vsanhealthService.vim.DynamicData {
            passiveIp: string;
            witnessIp: string;
         }
         interface VchaClusterDeploymentSpec extends vsanhealthService.vim.DynamicData {
            passiveDeploymentSpec: vsanhealthService.vim.PassiveNodeDeploymentSpec;
            witnessDeploymentSpec: vsanhealthService.vim.NodeDeploymentSpec;
            activeVcSpec: vsanhealthService.vim.SourceNodeSpec;
            activeVcNetworkConfig?: vsanhealthService.vim.ClusterNetworkConfigSpec;
         }
         interface FailoverNodeInfo extends vsanhealthService.vim.DynamicData {
            clusterIpSettings: vsanhealthService.vim.CustomizationIPSettings;
            failoverIp?: vsanhealthService.vim.CustomizationIPSettings;
            biosUuid?: string;
         }
         interface WitnessNodeInfo extends vsanhealthService.vim.DynamicData {
            ipSettings: vsanhealthService.vim.CustomizationIPSettings;
            biosUuid?: string;
         }
         enum VchaState {
            "configured",
            "notConfigured",
            "invalid",
            "prepared",
         }
         interface VchaClusterConfigInfo extends vsanhealthService.vim.DynamicData {
            failoverNodeInfo1?: vsanhealthService.vim.FailoverNodeInfo;
            failoverNodeInfo2?: vsanhealthService.vim.FailoverNodeInfo;
            witnessNodeInfo?: vsanhealthService.vim.WitnessNodeInfo;
            state: string;
         }
         enum VchaNodeRole {
            "active",
            "passive",
            "witness",
         }
         enum VchaClusterMode {
            "enabled",
            "disabled",
            "maintenance",
         }
         enum VchaClusterState {
            "healthy",
            "degraded",
            "isolated",
         }
         enum VchaNodeState {
            "up",
            "down",
         }
         interface VchaNodeRuntimeInfo extends vsanhealthService.vim.DynamicData {
            nodeState: string;
            nodeRole: string;
            nodeIp: string;
         }
         interface ArrayOfVchaNodeRuntimeInfo {
            VchaNodeRuntimeInfo?: Array<vsanhealthService.vim.VchaNodeRuntimeInfo>;
         }
         interface VchaClusterRuntimeInfo extends vsanhealthService.vim.DynamicData {
            clusterState: string;
            nodeInfo?: Array<vsanhealthService.vim.VchaNodeRuntimeInfo>;
            clusterMode: string;
         }
         interface VchaClusterHealth extends vsanhealthService.vim.DynamicData {
            runtimeInfo: vsanhealthService.vim.VchaClusterRuntimeInfo;
            healthMessages?: Array<vsanhealthService.vim.LocalizableMessage>;
            additionalInformation?: Array<vsanhealthService.vim.LocalizableMessage>;
         }
         interface VirtualMachineAffinityInfo extends vsanhealthService.vim.DynamicData {
            affinitySet?: Array<number>;
         }
         enum VirtualMachineBootOptionsNetworkBootProtocolType {
            "ipv4",
            "ipv6",
         }
         interface VirtualMachineBootOptionsBootableDevice extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfVirtualMachineBootOptionsBootableDevice {
            VirtualMachineBootOptionsBootableDevice?: Array<vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice>;
         }
         interface VirtualMachineBootOptionsBootableDiskDevice extends vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice {
            deviceKey: number;
         }
         interface VirtualMachineBootOptionsBootableEthernetDevice extends vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice {
            deviceKey: number;
         }
         interface VirtualMachineBootOptionsBootableFloppyDevice extends vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice {
         }
         interface VirtualMachineBootOptionsBootableCdromDevice extends vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice {
         }
         interface VirtualMachineBootOptions extends vsanhealthService.vim.DynamicData {
            bootDelay?: number;
            enterBIOSSetup?: boolean;
            efiSecureBootEnabled?: boolean;
            bootRetryEnabled?: boolean;
            bootRetryDelay?: number;
            bootOrder?: Array<vsanhealthService.vim.VirtualMachineBootOptionsBootableDevice>;
            networkBootProtocol?: string;
         }
         interface VirtualMachineCapability extends vsanhealthService.vim.DynamicData {
            snapshotOperationsSupported: boolean;
            multipleSnapshotsSupported: boolean;
            snapshotConfigSupported: boolean;
            poweredOffSnapshotsSupported: boolean;
            memorySnapshotsSupported: boolean;
            revertToSnapshotSupported: boolean;
            quiescedSnapshotsSupported: boolean;
            disableSnapshotsSupported?: boolean;
            lockSnapshotsSupported?: boolean;
            consolePreferencesSupported: boolean;
            cpuFeatureMaskSupported: boolean;
            s1AcpiManagementSupported: boolean;
            settingScreenResolutionSupported: boolean;
            toolsAutoUpdateSupported: boolean;
            vmNpivWwnSupported?: boolean;
            npivWwnOnNonRdmVmSupported?: boolean;
            vmNpivWwnDisableSupported?: boolean;
            vmNpivWwnUpdateSupported?: boolean;
            swapPlacementSupported?: boolean;
            toolsSyncTimeSupported?: boolean;
            virtualMmuUsageSupported?: boolean;
            diskSharesSupported?: boolean;
            bootOptionsSupported?: boolean;
            bootRetryOptionsSupported?: boolean;
            settingVideoRamSizeSupported?: boolean;
            settingDisplayTopologySupported?: boolean;
            recordReplaySupported?: boolean;
            changeTrackingSupported?: boolean;
            multipleCoresPerSocketSupported?: boolean;
            hostBasedReplicationSupported?: boolean;
            guestAutoLockSupported?: boolean;
            memoryReservationLockSupported?: boolean;
            featureRequirementSupported?: boolean;
            poweredOnMonitorTypeChangeSupported?: boolean;
            seSparseDiskSupported?: boolean;
            nestedHVSupported?: boolean;
            vPMCSupported?: boolean;
            secureBootSupported?: boolean;
         }
         interface VirtualMachineCdromInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            description?: string;
         }
         interface ArrayOfVirtualMachineCdromInfo {
            VirtualMachineCdromInfo?: Array<vsanhealthService.vim.VirtualMachineCdromInfo>;
         }
         interface VirtualMachineCloneSpec extends vsanhealthService.vim.DynamicData {
            location: vsanhealthService.vim.VirtualMachineRelocateSpec;
            template: boolean;
            config?: vsanhealthService.vim.VirtualMachineConfigSpec;
            customization?: vsanhealthService.vim.CustomizationSpec;
            powerOn: boolean;
            snapshot?: vsanhealthService.vim.ManagedObjectReference;
            memory?: boolean;
         }
         enum VirtualMachineConfigInfoNpivWwnType {
            "vc",
            "host",
            "external",
         }
         enum VirtualMachineConfigInfoSwapPlacementType {
            "inherit",
            "vmDirectory",
            "hostLocal",
         }
         interface VirtualMachineConfigInfoDatastoreUrlPair extends vsanhealthService.vim.DynamicData {
            name: string;
            url: string;
         }
         interface ArrayOfVirtualMachineConfigInfoDatastoreUrlPair {
            VirtualMachineConfigInfoDatastoreUrlPair?: Array<vsanhealthService.vim.VirtualMachineConfigInfoDatastoreUrlPair>;
         }
         interface VirtualMachineConfigInfoOverheadInfo extends vsanhealthService.vim.DynamicData {
            initialMemoryReservation?: number;
            initialSwapReservation?: number;
         }
         interface VirtualMachineConfigInfo extends vsanhealthService.vim.DynamicData {
            changeVersion: string;
            modified: Date;
            name: string;
            guestFullName: string;
            version: string;
            uuid: string;
            instanceUuid?: string;
            npivNodeWorldWideName?: Array<number>;
            npivPortWorldWideName?: Array<number>;
            npivWorldWideNameType?: string;
            npivDesiredNodeWwns?: number;
            npivDesiredPortWwns?: number;
            npivTemporaryDisabled?: boolean;
            npivOnNonRdmDisks?: boolean;
            locationId?: string;
            template: boolean;
            guestId: string;
            alternateGuestName?: string;
            annotation?: string;
            files: vsanhealthService.vim.VirtualMachineFileInfo;
            tools?: vsanhealthService.vim.ToolsConfigInfo;
            flags: vsanhealthService.vim.VirtualMachineFlagInfo;
            consolePreferences?: vsanhealthService.vim.VirtualMachineConsolePreferences;
            defaultPowerOps: vsanhealthService.vim.VirtualMachineDefaultPowerOpInfo;
            hardware: vsanhealthService.vim.VirtualHardware;
            cpuAllocation?: vsanhealthService.vim.ResourceAllocationInfo;
            memoryAllocation?: vsanhealthService.vim.ResourceAllocationInfo;
            latencySensitivity?: vsanhealthService.vim.LatencySensitivity;
            memoryHotAddEnabled?: boolean;
            cpuHotAddEnabled?: boolean;
            cpuHotRemoveEnabled?: boolean;
            hotPlugMemoryLimit?: number;
            hotPlugMemoryIncrementSize?: number;
            cpuAffinity?: vsanhealthService.vim.VirtualMachineAffinityInfo;
            memoryAffinity?: vsanhealthService.vim.VirtualMachineAffinityInfo;
            networkShaper?: vsanhealthService.vim.VirtualMachineNetworkShaperInfo;
            extraConfig?: Array<vsanhealthService.vim.OptionValue>;
            cpuFeatureMask?: Array<vsanhealthService.vim.HostCpuIdInfo>;
            datastoreUrl?: Array<vsanhealthService.vim.VirtualMachineConfigInfoDatastoreUrlPair>;
            swapPlacement?: string;
            bootOptions?: vsanhealthService.vim.VirtualMachineBootOptions;
            ftInfo?: vsanhealthService.vim.FaultToleranceConfigInfo;
            repConfig?: vsanhealthService.vim.ReplicationConfigSpec;
            vAppConfig?: vsanhealthService.vim.VmConfigInfo;
            vAssertsEnabled?: boolean;
            changeTrackingEnabled?: boolean;
            firmware?: string;
            maxMksConnections?: number;
            guestAutoLockEnabled?: boolean;
            managedBy?: vsanhealthService.vim.ManagedByInfo;
            memoryReservationLockedToMax?: boolean;
            initialOverhead?: vsanhealthService.vim.VirtualMachineConfigInfoOverheadInfo;
            nestedHVEnabled?: boolean;
            vPMCEnabled?: boolean;
            scheduledHardwareUpgradeInfo?: vsanhealthService.vim.ScheduledHardwareUpgradeInfo;
            forkConfigInfo?: vsanhealthService.vim.VirtualMachineForkConfigInfo;
            vFlashCacheReservation?: number;
            vmxConfigChecksum?: string;
            messageBusTunnelEnabled?: boolean;
            vmStorageObjectId?: string;
            swapStorageObjectId?: string;
            keyId?: vsanhealthService.vim.CryptoKeyId;
            guestIntegrityInfo?: vsanhealthService.vim.VirtualMachineGuestIntegrityInfo;
            migrateEncryption?: string;
         }
         interface VirtualMachineConfigOption extends vsanhealthService.vim.DynamicData {
            version: string;
            description: string;
            guestOSDescriptor: Array<vsanhealthService.vim.GuestOsDescriptor>;
            guestOSDefaultIndex: number;
            hardwareOptions: vsanhealthService.vim.VirtualHardwareOption;
            capabilities: vsanhealthService.vim.VirtualMachineCapability;
            datastore: vsanhealthService.vim.DatastoreOption;
            defaultDevice?: Array<vsanhealthService.vim.VirtualDevice>;
            supportedMonitorType?: Array<string>;
            supportedOvfEnvironmentTransport?: Array<string>;
            supportedOvfInstallTransport?: Array<string>;
         }
         interface VirtualMachineConfigOptionDescriptor extends vsanhealthService.vim.DynamicData {
            key: string;
            description?: string;
            host?: Array<vsanhealthService.vim.ManagedObjectReference>;
            createSupported?: boolean;
            defaultConfigOption?: boolean;
            runSupported?: boolean;
            upgradeSupported?: boolean;
         }
         interface ArrayOfVirtualMachineConfigOptionDescriptor {
            VirtualMachineConfigOptionDescriptor?: Array<vsanhealthService.vim.VirtualMachineConfigOptionDescriptor>;
         }
         enum VirtualMachineConfigSpecNpivWwnOp {
            "generate",
            "set",
            "remove",
            "extend",
         }
         enum VirtualMachineConfigSpecEncryptedVMotionModes {
            "disabled",
            "opportunistic",
            "required",
         }
         interface VirtualMachineCpuIdInfoSpec extends vsanhealthService.vim.ArrayUpdateSpec {
            info?: vsanhealthService.vim.HostCpuIdInfo;
         }
         interface ArrayOfVirtualMachineCpuIdInfoSpec {
            VirtualMachineCpuIdInfoSpec?: Array<vsanhealthService.vim.VirtualMachineCpuIdInfoSpec>;
         }
         interface VirtualMachineConfigSpec extends vsanhealthService.vim.DynamicData {
            changeVersion?: string;
            name?: string;
            version?: string;
            uuid?: string;
            instanceUuid?: string;
            npivNodeWorldWideName?: Array<number>;
            npivPortWorldWideName?: Array<number>;
            npivWorldWideNameType?: string;
            npivDesiredNodeWwns?: number;
            npivDesiredPortWwns?: number;
            npivTemporaryDisabled?: boolean;
            npivOnNonRdmDisks?: boolean;
            npivWorldWideNameOp?: string;
            locationId?: string;
            guestId?: string;
            alternateGuestName?: string;
            annotation?: string;
            files?: vsanhealthService.vim.VirtualMachineFileInfo;
            tools?: vsanhealthService.vim.ToolsConfigInfo;
            flags?: vsanhealthService.vim.VirtualMachineFlagInfo;
            consolePreferences?: vsanhealthService.vim.VirtualMachineConsolePreferences;
            powerOpInfo?: vsanhealthService.vim.VirtualMachineDefaultPowerOpInfo;
            numCPUs?: number;
            numCoresPerSocket?: number;
            memoryMB?: number;
            memoryHotAddEnabled?: boolean;
            cpuHotAddEnabled?: boolean;
            cpuHotRemoveEnabled?: boolean;
            virtualICH7MPresent?: boolean;
            virtualSMCPresent?: boolean;
            deviceChange?: Array<vsanhealthService.vim.VirtualDeviceConfigSpec>;
            cpuAllocation?: vsanhealthService.vim.ResourceAllocationInfo;
            memoryAllocation?: vsanhealthService.vim.ResourceAllocationInfo;
            latencySensitivity?: vsanhealthService.vim.LatencySensitivity;
            cpuAffinity?: vsanhealthService.vim.VirtualMachineAffinityInfo;
            memoryAffinity?: vsanhealthService.vim.VirtualMachineAffinityInfo;
            networkShaper?: vsanhealthService.vim.VirtualMachineNetworkShaperInfo;
            cpuFeatureMask?: Array<vsanhealthService.vim.VirtualMachineCpuIdInfoSpec>;
            extraConfig?: Array<vsanhealthService.vim.OptionValue>;
            swapPlacement?: string;
            bootOptions?: vsanhealthService.vim.VirtualMachineBootOptions;
            vAppConfig?: vsanhealthService.vim.VmConfigSpec;
            ftInfo?: vsanhealthService.vim.FaultToleranceConfigInfo;
            repConfig?: vsanhealthService.vim.ReplicationConfigSpec;
            vAppConfigRemoved?: boolean;
            vAssertsEnabled?: boolean;
            changeTrackingEnabled?: boolean;
            firmware?: string;
            maxMksConnections?: number;
            guestAutoLockEnabled?: boolean;
            managedBy?: vsanhealthService.vim.ManagedByInfo;
            memoryReservationLockedToMax?: boolean;
            nestedHVEnabled?: boolean;
            vPMCEnabled?: boolean;
            scheduledHardwareUpgradeInfo?: vsanhealthService.vim.ScheduledHardwareUpgradeInfo;
            vmProfile?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
            messageBusTunnelEnabled?: boolean;
            crypto?: vsanhealthService.vim.CryptoSpec;
            migrateEncryption?: string;
         }
         interface ConfigTarget extends vsanhealthService.vim.DynamicData {
            numCpus: number;
            numCpuCores: number;
            numNumaNodes: number;
            smcPresent?: boolean;
            datastore?: Array<vsanhealthService.vim.VirtualMachineDatastoreInfo>;
            network?: Array<vsanhealthService.vim.VirtualMachineNetworkInfo>;
            opaqueNetwork?: Array<vsanhealthService.vim.OpaqueNetworkTargetInfo>;
            distributedVirtualPortgroup?: Array<vsanhealthService.vim.DistributedVirtualPortgroupInfo>;
            distributedVirtualSwitch?: Array<vsanhealthService.vim.DistributedVirtualSwitchInfo>;
            cdRom?: Array<vsanhealthService.vim.VirtualMachineCdromInfo>;
            serial?: Array<vsanhealthService.vim.VirtualMachineSerialInfo>;
            parallel?: Array<vsanhealthService.vim.VirtualMachineParallelInfo>;
            sound?: Array<vsanhealthService.vim.VirtualMachineSoundInfo>;
            usb?: Array<vsanhealthService.vim.VirtualMachineUsbInfo>;
            floppy?: Array<vsanhealthService.vim.VirtualMachineFloppyInfo>;
            legacyNetworkInfo?: Array<vsanhealthService.vim.VirtualMachineLegacyNetworkSwitchInfo>;
            scsiPassthrough?: Array<vsanhealthService.vim.VirtualMachineScsiPassthroughInfo>;
            scsiDisk?: Array<vsanhealthService.vim.VirtualMachineScsiDiskDeviceInfo>;
            ideDisk?: Array<vsanhealthService.vim.VirtualMachineIdeDiskDeviceInfo>;
            maxMemMBOptimalPerf: number;
            resourcePool?: vsanhealthService.vim.ResourcePoolRuntimeInfo;
            autoVmotion?: boolean;
            pciPassthrough?: Array<vsanhealthService.vim.VirtualMachinePciPassthroughInfo>;
            sriov?: Array<vsanhealthService.vim.VirtualMachineSriovInfo>;
            vFlashModule?: Array<vsanhealthService.vim.VirtualMachineVFlashModuleInfo>;
            sharedGpuPassthroughTypes?: Array<vsanhealthService.vim.VirtualMachinePciSharedGpuPassthroughInfo>;
         }
         interface VirtualMachineConsolePreferences extends vsanhealthService.vim.DynamicData {
            powerOnWhenOpened?: boolean;
            enterFullScreenOnPowerOn?: boolean;
            closeOnPowerOffOrSuspend?: boolean;
         }
         interface VirtualMachineDatastoreInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            datastore: vsanhealthService.vim.DatastoreSummary;
            capability: vsanhealthService.vim.DatastoreCapability;
            maxFileSize: number;
            maxVirtualDiskCapacity?: number;
            maxPhysicalRDMFileSize?: number;
            maxVirtualRDMFileSize?: number;
            mode: string;
            vStorageSupport?: string;
         }
         interface ArrayOfVirtualMachineDatastoreInfo {
            VirtualMachineDatastoreInfo?: Array<vsanhealthService.vim.VirtualMachineDatastoreInfo>;
         }
         interface VirtualMachineDatastoreVolumeOption extends vsanhealthService.vim.DynamicData {
            fileSystemType: string;
            majorVersion?: number;
         }
         interface ArrayOfVirtualMachineDatastoreVolumeOption {
            VirtualMachineDatastoreVolumeOption?: Array<vsanhealthService.vim.VirtualMachineDatastoreVolumeOption>;
         }
         interface DatastoreOption extends vsanhealthService.vim.DynamicData {
            unsupportedVolumes?: Array<vsanhealthService.vim.VirtualMachineDatastoreVolumeOption>;
         }
         enum VirtualMachinePowerOpType {
            "soft",
            "hard",
            "preset",
         }
         enum VirtualMachineStandbyActionType {
            "checkpoint",
            "powerOnSuspend",
         }
         interface VirtualMachineDefaultPowerOpInfo extends vsanhealthService.vim.DynamicData {
            powerOffType?: string;
            suspendType?: string;
            resetType?: string;
            defaultPowerOffType?: string;
            defaultSuspendType?: string;
            defaultResetType?: string;
            standbyAction?: string;
         }
         interface VirtualMachineDefaultProfileSpec extends vsanhealthService.vim.VirtualMachineProfileSpec {
         }
         interface VirtualMachineDefinedProfileSpec extends vsanhealthService.vim.VirtualMachineProfileSpec {
            profileId: string;
            replicationSpec?: vsanhealthService.vim.ReplicationSpec;
            profileData?: vsanhealthService.vim.VirtualMachineProfileRawData;
         }
         interface VirtualMachineDeviceRuntimeInfoDeviceRuntimeState extends vsanhealthService.vim.DynamicData {
         }
         enum VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm {
            "vmNptIncompatibleGuest",
            "vmNptIncompatibleGuestDriver",
            "vmNptIncompatibleAdapterType",
            "vmNptDisabledOrDisconnectedAdapter",
            "vmNptIncompatibleAdapterFeatures",
            "vmNptIncompatibleBackingType",
            "vmNptInsufficientMemoryReservation",
            "vmNptFaultToleranceOrRecordReplayConfigured",
            "vmNptConflictingIOChainConfigured",
            "vmNptMonitorBlocks",
            "vmNptConflictingOperationInProgress",
            "vmNptRuntimeError",
            "vmNptOutOfIntrVector",
            "vmNptVMCIActive",
         }
         enum VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther {
            "vmNptIncompatibleHost",
            "vmNptIncompatibleNetwork",
         }
         interface VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState extends vsanhealthService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState {
            vmDirectPathGen2Active: boolean;
            vmDirectPathGen2InactiveReasonVm?: Array<string>;
            vmDirectPathGen2InactiveReasonOther?: Array<string>;
            vmDirectPathGen2InactiveReasonExtended?: string;
            reservationStatus?: string;
         }
         interface VirtualMachineDeviceRuntimeInfo extends vsanhealthService.vim.DynamicData {
            runtimeState: vsanhealthService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState;
            key: number;
         }
         interface ArrayOfVirtualMachineDeviceRuntimeInfo {
            VirtualMachineDeviceRuntimeInfo?: Array<vsanhealthService.vim.VirtualMachineDeviceRuntimeInfo>;
         }
         interface VirtualMachineDiskDeviceInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            capacity?: number;
            vm?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface VirtualMachineEmptyProfileSpec extends vsanhealthService.vim.VirtualMachineProfileSpec {
         }
         interface FaultToleranceConfigInfo extends vsanhealthService.vim.DynamicData {
            role: number;
            instanceUuids: Array<string>;
            configPaths: Array<string>;
            orphaned?: boolean;
         }
         interface FaultTolerancePrimaryConfigInfo extends vsanhealthService.vim.FaultToleranceConfigInfo {
            secondaries: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface FaultToleranceSecondaryConfigInfo extends vsanhealthService.vim.FaultToleranceConfigInfo {
            primaryVM: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FaultToleranceConfigSpec extends vsanhealthService.vim.DynamicData {
            metaDataPath?: vsanhealthService.vim.FaultToleranceMetaSpec;
            secondaryVmSpec?: vsanhealthService.vim.FaultToleranceVMConfigSpec;
         }
         interface FaultToleranceMetaSpec extends vsanhealthService.vim.DynamicData {
            metaDataDatastore: vsanhealthService.vim.ManagedObjectReference;
         }
         interface FaultToleranceSecondaryOpResult extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            powerOnAttempted: boolean;
            powerOnResult?: vsanhealthService.vim.ClusterPowerOnVmResult;
         }
         interface FaultToleranceDiskSpec extends vsanhealthService.vim.DynamicData {
            disk: vsanhealthService.vim.VirtualDevice;
            datastore: vsanhealthService.vim.ManagedObjectReference;
         }
         interface ArrayOfFaultToleranceDiskSpec {
            FaultToleranceDiskSpec?: Array<vsanhealthService.vim.FaultToleranceDiskSpec>;
         }
         interface FaultToleranceVMConfigSpec extends vsanhealthService.vim.DynamicData {
            vmConfig?: vsanhealthService.vim.ManagedObjectReference;
            disks?: Array<vsanhealthService.vim.FaultToleranceDiskSpec>;
         }
         interface VirtualMachineFeatureRequirement extends vsanhealthService.vim.DynamicData {
            key: string;
            featureName: string;
            value: string;
         }
         interface ArrayOfVirtualMachineFeatureRequirement {
            VirtualMachineFeatureRequirement?: Array<vsanhealthService.vim.VirtualMachineFeatureRequirement>;
         }
         interface VirtualMachineFileInfo extends vsanhealthService.vim.DynamicData {
            vmPathName?: string;
            snapshotDirectory?: string;
            suspendDirectory?: string;
            logDirectory?: string;
            ftMetadataDirectory?: string;
         }
         interface VirtualMachineFileLayoutDiskLayout extends vsanhealthService.vim.DynamicData {
            key: number;
            diskFile: Array<string>;
         }
         interface ArrayOfVirtualMachineFileLayoutDiskLayout {
            VirtualMachineFileLayoutDiskLayout?: Array<vsanhealthService.vim.VirtualMachineFileLayoutDiskLayout>;
         }
         interface VirtualMachineFileLayoutSnapshotLayout extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            snapshotFile: Array<string>;
         }
         interface ArrayOfVirtualMachineFileLayoutSnapshotLayout {
            VirtualMachineFileLayoutSnapshotLayout?: Array<vsanhealthService.vim.VirtualMachineFileLayoutSnapshotLayout>;
         }
         interface VirtualMachineFileLayout extends vsanhealthService.vim.DynamicData {
            configFile?: Array<string>;
            logFile?: Array<string>;
            disk?: Array<vsanhealthService.vim.VirtualMachineFileLayoutDiskLayout>;
            snapshot?: Array<vsanhealthService.vim.VirtualMachineFileLayoutSnapshotLayout>;
            swapFile?: string;
         }
         enum VirtualMachineFileLayoutExFileType {
            "config",
            "extendedConfig",
            "diskDescriptor",
            "diskExtent",
            "digestDescriptor",
            "digestExtent",
            "diskReplicationState",
            "log",
            "stat",
            "namespaceData",
            "nvram",
            "snapshotData",
            "snapshotMemory",
            "snapshotList",
            "snapshotManifestList",
            "suspend",
            "suspendMemory",
            "swap",
            "uwswap",
            "core",
            "screenshot",
            "ftMetadata",
            "guestCustomization",
         }
         interface VirtualMachineFileLayoutExFileInfo extends vsanhealthService.vim.DynamicData {
            key: number;
            name: string;
            type: string;
            size: number;
            uniqueSize?: number;
            backingObjectId?: string;
            accessible?: boolean;
         }
         interface ArrayOfVirtualMachineFileLayoutExFileInfo {
            VirtualMachineFileLayoutExFileInfo?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExFileInfo>;
         }
         interface VirtualMachineFileLayoutExDiskUnit extends vsanhealthService.vim.DynamicData {
            fileKey: Array<number>;
         }
         interface ArrayOfVirtualMachineFileLayoutExDiskUnit {
            VirtualMachineFileLayoutExDiskUnit?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExDiskUnit>;
         }
         interface VirtualMachineFileLayoutExDiskLayout extends vsanhealthService.vim.DynamicData {
            key: number;
            chain?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExDiskUnit>;
         }
         interface ArrayOfVirtualMachineFileLayoutExDiskLayout {
            VirtualMachineFileLayoutExDiskLayout?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExDiskLayout>;
         }
         interface VirtualMachineFileLayoutExSnapshotLayout extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.ManagedObjectReference;
            dataKey: number;
            memoryKey?: number;
            disk?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExDiskLayout>;
         }
         interface ArrayOfVirtualMachineFileLayoutExSnapshotLayout {
            VirtualMachineFileLayoutExSnapshotLayout?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExSnapshotLayout>;
         }
         interface VirtualMachineFileLayoutEx extends vsanhealthService.vim.DynamicData {
            file?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExFileInfo>;
            disk?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExDiskLayout>;
            snapshot?: Array<vsanhealthService.vim.VirtualMachineFileLayoutExSnapshotLayout>;
            timestamp: Date;
         }
         enum VirtualMachineHtSharing {
            "any",
            "none",
            "internal",
         }
         enum VirtualMachinePowerOffBehavior {
            "powerOff",
            "revert",
            "prompt",
            "take",
         }
         enum VirtualMachineFlagInfoMonitorType {
            "release",
            "debug",
            "stats",
         }
         enum VirtualMachineFlagInfoVirtualMmuUsage {
            "automatic",
            "on",
            "off",
         }
         enum VirtualMachineFlagInfoVirtualExecUsage {
            "hvAuto",
            "hvOn",
            "hvOff",
         }
         interface VirtualMachineFlagInfo extends vsanhealthService.vim.DynamicData {
            disableAcceleration?: boolean;
            enableLogging?: boolean;
            useToe?: boolean;
            runWithDebugInfo?: boolean;
            monitorType?: string;
            htSharing?: string;
            snapshotDisabled?: boolean;
            snapshotLocked?: boolean;
            diskUuidEnabled?: boolean;
            virtualMmuUsage?: string;
            virtualExecUsage?: string;
            snapshotPowerOffBehavior?: string;
            recordReplayEnabled?: boolean;
            faultToleranceType?: string;
            cbrcCacheEnabled?: boolean;
         }
         interface VirtualMachineFloppyInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineFloppyInfo {
            VirtualMachineFloppyInfo?: Array<vsanhealthService.vim.VirtualMachineFloppyInfo>;
         }
         enum VirtualMachineForkConfigInfoChildType {
            "none",
            "persistent",
            "nonpersistent",
         }
         interface VirtualMachineForkConfigInfo extends vsanhealthService.vim.DynamicData {
            parentEnabled?: boolean;
            childForkGroupId?: string;
            parentForkGroupId?: string;
            childType?: string;
         }
         enum VirtualMachineToolsStatus {
            "toolsNotInstalled",
            "toolsNotRunning",
            "toolsOld",
            "toolsOk",
         }
         enum VirtualMachineToolsVersionStatus {
            "guestToolsNotInstalled",
            "guestToolsNeedUpgrade",
            "guestToolsCurrent",
            "guestToolsUnmanaged",
            "guestToolsTooOld",
            "guestToolsSupportedOld",
            "guestToolsSupportedNew",
            "guestToolsTooNew",
            "guestToolsBlacklisted",
         }
         enum VirtualMachineToolsRunningStatus {
            "guestToolsNotRunning",
            "guestToolsRunning",
            "guestToolsExecutingScripts",
         }
         enum VirtualMachineToolsInstallType {
            "guestToolsTypeUnknown",
            "guestToolsTypeMSI",
            "guestToolsTypeTar",
            "guestToolsTypeOSP",
            "guestToolsTypeOpenVMTools",
         }
         interface GuestDiskInfo extends vsanhealthService.vim.DynamicData {
            diskPath?: string;
            capacity?: number;
            freeSpace?: number;
         }
         interface ArrayOfGuestDiskInfo {
            GuestDiskInfo?: Array<vsanhealthService.vim.GuestDiskInfo>;
         }
         interface GuestNicInfo extends vsanhealthService.vim.DynamicData {
            network?: string;
            ipAddress?: Array<string>;
            macAddress?: string;
            connected: boolean;
            deviceConfigId: number;
            dnsConfig?: vsanhealthService.vim.NetDnsConfigInfo;
            ipConfig?: vsanhealthService.vim.NetIpConfigInfo;
            netBIOSConfig?: vsanhealthService.vim.NetBIOSConfigInfo;
         }
         interface ArrayOfGuestNicInfo {
            GuestNicInfo?: Array<vsanhealthService.vim.GuestNicInfo>;
         }
         interface GuestStackInfo extends vsanhealthService.vim.DynamicData {
            dnsConfig?: vsanhealthService.vim.NetDnsConfigInfo;
            ipRouteConfig?: vsanhealthService.vim.NetIpRouteConfigInfo;
            ipStackConfig?: Array<vsanhealthService.vim.KeyValue>;
            dhcpConfig?: vsanhealthService.vim.NetDhcpConfigInfo;
         }
         interface ArrayOfGuestStackInfo {
            GuestStackInfo?: Array<vsanhealthService.vim.GuestStackInfo>;
         }
         interface GuestScreenInfo extends vsanhealthService.vim.DynamicData {
            width: number;
            height: number;
         }
         enum VirtualMachineGuestState {
            "running",
            "shuttingDown",
            "resetting",
            "standby",
            "notRunning",
            "unknown",
         }
         enum GuestInfoAppStateType {
            "none",
            "appStateOk",
            "appStateNeedReset",
         }
         interface GuestInfoNamespaceGenerationInfo extends vsanhealthService.vim.DynamicData {
            key: string;
            generationNo: number;
         }
         interface ArrayOfGuestInfoNamespaceGenerationInfo {
            GuestInfoNamespaceGenerationInfo?: Array<vsanhealthService.vim.GuestInfoNamespaceGenerationInfo>;
         }
         interface GuestInfo extends vsanhealthService.vim.DynamicData {
            toolsStatus?: vsanhealthService.vim.VirtualMachineToolsStatus;
            toolsVersionStatus?: string;
            toolsVersionStatus2?: string;
            toolsRunningStatus?: string;
            toolsVersion?: string;
            toolsInstallType?: string;
            guestId?: string;
            guestFamily?: string;
            guestFullName?: string;
            hostName?: string;
            ipAddress?: string;
            net?: Array<vsanhealthService.vim.GuestNicInfo>;
            ipStack?: Array<vsanhealthService.vim.GuestStackInfo>;
            disk?: Array<vsanhealthService.vim.GuestDiskInfo>;
            screen?: vsanhealthService.vim.GuestScreenInfo;
            guestState: string;
            appHeartbeatStatus?: string;
            guestKernelCrashed?: boolean;
            appState?: string;
            guestOperationsReady?: boolean;
            interactiveGuestOperationsReady?: boolean;
            guestStateChangeSupported?: boolean;
            generationInfo?: Array<vsanhealthService.vim.GuestInfoNamespaceGenerationInfo>;
         }
         interface VirtualMachineGuestIntegrityInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
         }
         enum VirtualMachineGuestOsFamily {
            "windowsGuest",
            "linuxGuest",
            "netwareGuest",
            "solarisGuest",
            "darwinGuestFamily",
            "otherGuestFamily",
         }
         enum VirtualMachineGuestOsIdentifier {
            "dosGuest",
            "win31Guest",
            "win95Guest",
            "win98Guest",
            "winMeGuest",
            "winNTGuest",
            "win2000ProGuest",
            "win2000ServGuest",
            "win2000AdvServGuest",
            "winXPHomeGuest",
            "winXPProGuest",
            "winXPPro64Guest",
            "winNetWebGuest",
            "winNetStandardGuest",
            "winNetEnterpriseGuest",
            "winNetDatacenterGuest",
            "winNetBusinessGuest",
            "winNetStandard64Guest",
            "winNetEnterprise64Guest",
            "winLonghornGuest",
            "winLonghorn64Guest",
            "winNetDatacenter64Guest",
            "winVistaGuest",
            "winVista64Guest",
            "windows7Guest",
            "windows7_64Guest",
            "windows7Server64Guest",
            "windows8Guest",
            "windows8_64Guest",
            "windows8Server64Guest",
            "windows9Guest",
            "windows9_64Guest",
            "windows9Server64Guest",
            "windowsHyperVGuest",
            "freebsdGuest",
            "freebsd64Guest",
            "redhatGuest",
            "rhel2Guest",
            "rhel3Guest",
            "rhel3_64Guest",
            "rhel4Guest",
            "rhel4_64Guest",
            "rhel5Guest",
            "rhel5_64Guest",
            "rhel6Guest",
            "rhel6_64Guest",
            "rhel7Guest",
            "rhel7_64Guest",
            "centosGuest",
            "centos64Guest",
            "centos6Guest",
            "centos6_64Guest",
            "centos7Guest",
            "centos7_64Guest",
            "oracleLinuxGuest",
            "oracleLinux64Guest",
            "oracleLinux6Guest",
            "oracleLinux6_64Guest",
            "oracleLinux7Guest",
            "oracleLinux7_64Guest",
            "suseGuest",
            "suse64Guest",
            "slesGuest",
            "sles64Guest",
            "sles10Guest",
            "sles10_64Guest",
            "sles11Guest",
            "sles11_64Guest",
            "sles12Guest",
            "sles12_64Guest",
            "nld9Guest",
            "oesGuest",
            "sjdsGuest",
            "mandrakeGuest",
            "mandrivaGuest",
            "mandriva64Guest",
            "turboLinuxGuest",
            "turboLinux64Guest",
            "ubuntuGuest",
            "ubuntu64Guest",
            "debian4Guest",
            "debian4_64Guest",
            "debian5Guest",
            "debian5_64Guest",
            "debian6Guest",
            "debian6_64Guest",
            "debian7Guest",
            "debian7_64Guest",
            "debian8Guest",
            "debian8_64Guest",
            "debian9Guest",
            "debian9_64Guest",
            "debian10Guest",
            "debian10_64Guest",
            "asianux3Guest",
            "asianux3_64Guest",
            "asianux4Guest",
            "asianux4_64Guest",
            "asianux5_64Guest",
            "asianux7_64Guest",
            "opensuseGuest",
            "opensuse64Guest",
            "fedoraGuest",
            "fedora64Guest",
            "coreos64Guest",
            "vmwarePhoton64Guest",
            "other24xLinuxGuest",
            "other26xLinuxGuest",
            "otherLinuxGuest",
            "other3xLinuxGuest",
            "genericLinuxGuest",
            "other24xLinux64Guest",
            "other26xLinux64Guest",
            "other3xLinux64Guest",
            "otherLinux64Guest",
            "solaris6Guest",
            "solaris7Guest",
            "solaris8Guest",
            "solaris9Guest",
            "solaris10Guest",
            "solaris10_64Guest",
            "solaris11_64Guest",
            "os2Guest",
            "eComStationGuest",
            "eComStation2Guest",
            "netware4Guest",
            "netware5Guest",
            "netware6Guest",
            "openServer5Guest",
            "openServer6Guest",
            "unixWare7Guest",
            "darwinGuest",
            "darwin64Guest",
            "darwin10Guest",
            "darwin10_64Guest",
            "darwin11Guest",
            "darwin11_64Guest",
            "darwin12_64Guest",
            "darwin13_64Guest",
            "darwin14_64Guest",
            "darwin15_64Guest",
            "darwin16_64Guest",
            "vmkernelGuest",
            "vmkernel5Guest",
            "vmkernel6Guest",
            "vmkernel65Guest",
            "otherGuest",
            "otherGuest64",
         }
         enum GuestOsDescriptorFirmwareType {
            "bios",
            "efi",
         }
         enum GuestOsDescriptorSupportLevel {
            "experimental",
            "legacy",
            "terminated",
            "supported",
            "unsupported",
            "deprecated",
            "techPreview",
         }
         interface GuestOsDescriptor extends vsanhealthService.vim.DynamicData {
            id: string;
            family: string;
            fullName: string;
            supportedMaxCPUs: number;
            numSupportedPhysicalSockets?: number;
            numSupportedCoresPerSocket?: number;
            supportedMinMemMB: number;
            supportedMaxMemMB: number;
            recommendedMemMB: number;
            recommendedColorDepth: number;
            supportedDiskControllerList: Array<string>;
            recommendedSCSIController?: string;
            recommendedDiskController: string;
            supportedNumDisks: number;
            recommendedDiskSizeMB: number;
            recommendedCdromController?: string;
            supportedEthernetCard: Array<string>;
            recommendedEthernetCard?: string;
            supportsSlaveDisk?: boolean;
            cpuFeatureMask?: Array<vsanhealthService.vim.HostCpuIdInfo>;
            smcRequired?: boolean;
            supportsWakeOnLan: boolean;
            supportsVMI?: boolean;
            supportsMemoryHotAdd?: boolean;
            supportsCpuHotAdd?: boolean;
            supportsCpuHotRemove?: boolean;
            supportedFirmware?: Array<string>;
            recommendedFirmware?: string;
            supportedUSBControllerList?: Array<string>;
            recommendedUSBController?: string;
            supports3D?: boolean;
            recommended3D?: boolean;
            smcRecommended?: boolean;
            ich7mRecommended?: boolean;
            usbRecommended?: boolean;
            supportLevel?: string;
            supportedForCreate?: boolean;
            vRAMSizeInKB?: vsanhealthService.vim.IntOption;
            numSupportedFloppyDevices?: number;
            wakeOnLanEthernetCard?: Array<string>;
            supportsPvscsiControllerForBoot?: boolean;
            diskUuidEnabled?: boolean;
            supportsHotPlugPCI?: boolean;
            supportsSecureBoot?: boolean;
            defaultSecureBoot?: boolean;
         }
         interface ArrayOfGuestOsDescriptor {
            GuestOsDescriptor?: Array<vsanhealthService.vim.GuestOsDescriptor>;
         }
         interface VirtualMachineGuestQuiesceSpec extends vsanhealthService.vim.DynamicData {
            timeout?: number;
         }
         interface VirtualMachineIdeDiskDevicePartitionInfo extends vsanhealthService.vim.DynamicData {
            id: number;
            capacity: number;
         }
         interface ArrayOfVirtualMachineIdeDiskDevicePartitionInfo {
            VirtualMachineIdeDiskDevicePartitionInfo?: Array<vsanhealthService.vim.VirtualMachineIdeDiskDevicePartitionInfo>;
         }
         interface VirtualMachineIdeDiskDeviceInfo extends vsanhealthService.vim.VirtualMachineDiskDeviceInfo {
            partitionTable?: Array<vsanhealthService.vim.VirtualMachineIdeDiskDevicePartitionInfo>;
         }
         interface ArrayOfVirtualMachineIdeDiskDeviceInfo {
            VirtualMachineIdeDiskDeviceInfo?: Array<vsanhealthService.vim.VirtualMachineIdeDiskDeviceInfo>;
         }
         interface VirtualMachineLegacyNetworkSwitchInfo extends vsanhealthService.vim.DynamicData {
            name: string;
         }
         interface ArrayOfVirtualMachineLegacyNetworkSwitchInfo {
            VirtualMachineLegacyNetworkSwitchInfo?: Array<vsanhealthService.vim.VirtualMachineLegacyNetworkSwitchInfo>;
         }
         interface VirtualMachineMessage extends vsanhealthService.vim.DynamicData {
            id: string;
            argument?: Array<any>;
            text?: string;
         }
         interface ArrayOfVirtualMachineMessage {
            VirtualMachineMessage?: Array<vsanhealthService.vim.VirtualMachineMessage>;
         }
         enum VirtualMachineMetadataManagerVmMetadataOwnerOwner {
            "ComVmwareVsphereHA",
         }
         interface VirtualMachineMetadataManagerVmMetadataOwner extends vsanhealthService.vim.DynamicData {
            name: string;
         }
         enum VirtualMachineMetadataManagerVmMetadataOp {
            "Update",
            "Remove",
         }
         interface VirtualMachineMetadataManagerVmMetadata extends vsanhealthService.vim.DynamicData {
            vmId: string;
            metadata?: string;
         }
         interface VirtualMachineMetadataManagerVmMetadataInput extends vsanhealthService.vim.DynamicData {
            operation: string;
            vmMetadata: vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadata;
         }
         interface ArrayOfVirtualMachineMetadataManagerVmMetadataInput {
            VirtualMachineMetadataManagerVmMetadataInput?: Array<vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataInput>;
         }
         interface VirtualMachineMetadataManagerVmMetadataResult extends vsanhealthService.vim.DynamicData {
            vmMetadata: vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadata;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVirtualMachineMetadataManagerVmMetadataResult {
            VirtualMachineMetadataManagerVmMetadataResult?: Array<vsanhealthService.vim.VirtualMachineMetadataManagerVmMetadataResult>;
         }
         interface VirtualMachineNetworkInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            network: vsanhealthService.vim.NetworkSummary;
            vswitch?: string;
         }
         interface ArrayOfVirtualMachineNetworkInfo {
            VirtualMachineNetworkInfo?: Array<vsanhealthService.vim.VirtualMachineNetworkInfo>;
         }
         interface VirtualMachineNetworkShaperInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            peakBps?: number;
            averageBps?: number;
            burstSize?: number;
         }
         interface OpaqueNetworkTargetInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            network: vsanhealthService.vim.OpaqueNetworkSummary;
            networkReservationSupported?: boolean;
         }
         interface ArrayOfOpaqueNetworkTargetInfo {
            OpaqueNetworkTargetInfo?: Array<vsanhealthService.vim.OpaqueNetworkTargetInfo>;
         }
         interface VirtualMachineParallelInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineParallelInfo {
            VirtualMachineParallelInfo?: Array<vsanhealthService.vim.VirtualMachineParallelInfo>;
         }
         interface VirtualMachinePciPassthroughInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            pciDevice: vsanhealthService.vim.HostPciDevice;
            systemId: string;
         }
         interface ArrayOfVirtualMachinePciPassthroughInfo {
            VirtualMachinePciPassthroughInfo?: Array<vsanhealthService.vim.VirtualMachinePciPassthroughInfo>;
         }
         interface VirtualMachinePciSharedGpuPassthroughInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            vgpu: string;
         }
         interface ArrayOfVirtualMachinePciSharedGpuPassthroughInfo {
            VirtualMachinePciSharedGpuPassthroughInfo?: Array<vsanhealthService.vim.VirtualMachinePciSharedGpuPassthroughInfo>;
         }
         interface VirtualMachineProfileRawData extends vsanhealthService.vim.DynamicData {
            extensionKey: string;
            objectData?: string;
         }
         interface VirtualMachineProfileSpec extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfVirtualMachineProfileSpec {
            VirtualMachineProfileSpec?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
         }
         interface VirtualMachineQuestionInfo extends vsanhealthService.vim.DynamicData {
            id: string;
            text: string;
            choice: vsanhealthService.vim.ChoiceOption;
            message?: Array<vsanhealthService.vim.VirtualMachineMessage>;
         }
         enum VirtualMachineRelocateTransformation {
            "flat",
            "sparse",
         }
         interface VirtualMachineRelocateSpecDiskLocator extends vsanhealthService.vim.DynamicData {
            diskId: number;
            datastore: vsanhealthService.vim.ManagedObjectReference;
            diskMoveType?: string;
            diskBackingInfo?: vsanhealthService.vim.VirtualDeviceBackingInfo;
            profile?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
         }
         interface ArrayOfVirtualMachineRelocateSpecDiskLocator {
            VirtualMachineRelocateSpecDiskLocator?: Array<vsanhealthService.vim.VirtualMachineRelocateSpecDiskLocator>;
         }
         enum VirtualMachineRelocateDiskMoveOptions {
            "moveAllDiskBackingsAndAllowSharing",
            "moveAllDiskBackingsAndDisallowSharing",
            "moveChildMostDiskBacking",
            "createNewChildDiskBacking",
            "moveAllDiskBackingsAndConsolidate",
         }
         interface VirtualMachineRelocateSpec extends vsanhealthService.vim.DynamicData {
            service?: vsanhealthService.vim.ServiceLocator;
            folder?: vsanhealthService.vim.ManagedObjectReference;
            datastore?: vsanhealthService.vim.ManagedObjectReference;
            diskMoveType?: string;
            pool?: vsanhealthService.vim.ManagedObjectReference;
            host?: vsanhealthService.vim.ManagedObjectReference;
            disk?: Array<vsanhealthService.vim.VirtualMachineRelocateSpecDiskLocator>;
            transform?: vsanhealthService.vim.VirtualMachineRelocateTransformation;
            deviceChange?: Array<vsanhealthService.vim.VirtualDeviceConfigSpec>;
            profile?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
         }
         interface ReplicationInfoDiskSettings extends vsanhealthService.vim.DynamicData {
            key: number;
            diskReplicationId: string;
         }
         interface ArrayOfReplicationInfoDiskSettings {
            ReplicationInfoDiskSettings?: Array<vsanhealthService.vim.ReplicationInfoDiskSettings>;
         }
         interface ReplicationConfigSpec extends vsanhealthService.vim.DynamicData {
            generation: number;
            vmReplicationId: string;
            destination: string;
            port: number;
            rpo: number;
            quiesceGuestEnabled: boolean;
            paused: boolean;
            oppUpdatesEnabled: boolean;
            netCompressionEnabled?: boolean;
            disk?: Array<vsanhealthService.vim.ReplicationInfoDiskSettings>;
         }
         interface VirtualMachineRuntimeInfoDasProtectionState extends vsanhealthService.vim.DynamicData {
            dasProtected: boolean;
         }
         interface VirtualMachineRuntimeInfo extends vsanhealthService.vim.DynamicData {
            device?: Array<vsanhealthService.vim.VirtualMachineDeviceRuntimeInfo>;
            host?: vsanhealthService.vim.ManagedObjectReference;
            connectionState: vsanhealthService.vim.VirtualMachineConnectionState;
            powerState: vsanhealthService.vim.VirtualMachinePowerState;
            faultToleranceState?: vsanhealthService.vim.VirtualMachineFaultToleranceState;
            dasVmProtection?: vsanhealthService.vim.VirtualMachineRuntimeInfoDasProtectionState;
            toolsInstallerMounted: boolean;
            suspendTime?: Date;
            bootTime?: Date;
            suspendInterval?: number;
            question?: vsanhealthService.vim.VirtualMachineQuestionInfo;
            memoryOverhead?: number;
            maxCpuUsage?: number;
            maxMemoryUsage?: number;
            numMksConnections: number;
            recordReplayState?: vsanhealthService.vim.VirtualMachineRecordReplayState;
            cleanPowerOff?: boolean;
            needSecondaryReason?: string;
            onlineStandby?: boolean;
            minRequiredEVCModeKey?: string;
            consolidationNeeded?: boolean;
            offlineFeatureRequirement?: Array<vsanhealthService.vim.VirtualMachineFeatureRequirement>;
            featureRequirement?: Array<vsanhealthService.vim.VirtualMachineFeatureRequirement>;
            featureMask?: Array<vsanhealthService.vim.HostFeatureMask>;
            vFlashCacheAllocation?: number;
            paused?: boolean;
            snapshotInBackground?: boolean;
            quiescedForkParent?: boolean;
         }
         enum ScheduledHardwareUpgradeInfoHardwareUpgradePolicy {
            "never",
            "onSoftPowerOff",
            "always",
         }
         enum ScheduledHardwareUpgradeInfoHardwareUpgradeStatus {
            "none",
            "pending",
            "success",
            "failed",
         }
         interface ScheduledHardwareUpgradeInfo extends vsanhealthService.vim.DynamicData {
            upgradePolicy?: string;
            versionKey?: string;
            scheduledHardwareUpgradeStatus?: string;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface VirtualMachineScsiDiskDeviceInfo extends vsanhealthService.vim.VirtualMachineDiskDeviceInfo {
            disk?: vsanhealthService.vim.HostScsiDisk;
            transportHint?: string;
            lunNumber?: number;
         }
         interface ArrayOfVirtualMachineScsiDiskDeviceInfo {
            VirtualMachineScsiDiskDeviceInfo?: Array<vsanhealthService.vim.VirtualMachineScsiDiskDeviceInfo>;
         }
         enum VirtualMachineScsiPassthroughType {
            "disk",
            "tape",
            "printer",
            "processor",
            "worm",
            "cdrom",
            "scanner",
            "optical",
            "media",
            "com",
            "raid",
            "unknown",
         }
         interface VirtualMachineScsiPassthroughInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            scsiClass: string;
            vendor: string;
            physicalUnitNumber: number;
         }
         interface ArrayOfVirtualMachineScsiPassthroughInfo {
            VirtualMachineScsiPassthroughInfo?: Array<vsanhealthService.vim.VirtualMachineScsiPassthroughInfo>;
         }
         interface VirtualMachineSerialInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineSerialInfo {
            VirtualMachineSerialInfo?: Array<vsanhealthService.vim.VirtualMachineSerialInfo>;
         }
         interface VirtualMachineSnapshotInfo extends vsanhealthService.vim.DynamicData {
            currentSnapshot?: vsanhealthService.vim.ManagedObjectReference;
            rootSnapshotList: Array<vsanhealthService.vim.VirtualMachineSnapshotTree>;
         }
         interface VirtualMachineSnapshotTree extends vsanhealthService.vim.DynamicData {
            snapshot: vsanhealthService.vim.ManagedObjectReference;
            vm: vsanhealthService.vim.ManagedObjectReference;
            name: string;
            description: string;
            id?: number;
            createTime: Date;
            state: vsanhealthService.vim.VirtualMachinePowerState;
            quiesced: boolean;
            backupManifest?: string;
            childSnapshotList?: Array<vsanhealthService.vim.VirtualMachineSnapshotTree>;
            replaySupported?: boolean;
         }
         interface ArrayOfVirtualMachineSnapshotTree {
            VirtualMachineSnapshotTree?: Array<vsanhealthService.vim.VirtualMachineSnapshotTree>;
         }
         interface VirtualMachineSoundInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineSoundInfo {
            VirtualMachineSoundInfo?: Array<vsanhealthService.vim.VirtualMachineSoundInfo>;
         }
         interface VirtualMachineSriovDevicePoolInfo extends vsanhealthService.vim.DynamicData {
            key: string;
         }
         interface VirtualMachineSriovInfo extends vsanhealthService.vim.VirtualMachinePciPassthroughInfo {
            virtualFunction: boolean;
            pnic?: string;
            devicePool?: vsanhealthService.vim.VirtualMachineSriovDevicePoolInfo;
         }
         interface ArrayOfVirtualMachineSriovInfo {
            VirtualMachineSriovInfo?: Array<vsanhealthService.vim.VirtualMachineSriovInfo>;
         }
         interface VirtualMachineSriovNetworkDevicePoolInfo extends vsanhealthService.vim.VirtualMachineSriovDevicePoolInfo {
            switchKey?: string;
            switchUuid?: string;
         }
         interface VirtualMachineUsageOnDatastore extends vsanhealthService.vim.DynamicData {
            datastore: vsanhealthService.vim.ManagedObjectReference;
            committed: number;
            uncommitted: number;
            unshared: number;
         }
         interface ArrayOfVirtualMachineUsageOnDatastore {
            VirtualMachineUsageOnDatastore?: Array<vsanhealthService.vim.VirtualMachineUsageOnDatastore>;
         }
         interface VirtualMachineStorageInfo extends vsanhealthService.vim.DynamicData {
            perDatastoreUsage?: Array<vsanhealthService.vim.VirtualMachineUsageOnDatastore>;
            timestamp: Date;
         }
         interface VirtualMachineConfigSummary extends vsanhealthService.vim.DynamicData {
            name: string;
            template: boolean;
            vmPathName: string;
            memorySizeMB?: number;
            cpuReservation?: number;
            memoryReservation?: number;
            numCpu?: number;
            numEthernetCards?: number;
            numVirtualDisks?: number;
            uuid?: string;
            instanceUuid?: string;
            guestId?: string;
            guestFullName?: string;
            annotation?: string;
            product?: vsanhealthService.vim.VAppProductInfo;
            installBootRequired?: boolean;
            ftInfo?: vsanhealthService.vim.FaultToleranceConfigInfo;
            managedBy?: vsanhealthService.vim.ManagedByInfo;
         }
         interface VirtualMachineQuickStats extends vsanhealthService.vim.DynamicData {
            overallCpuUsage?: number;
            overallCpuDemand?: number;
            guestMemoryUsage?: number;
            hostMemoryUsage?: number;
            guestHeartbeatStatus: vsanhealthService.vim.ManagedEntityStatus;
            distributedCpuEntitlement?: number;
            distributedMemoryEntitlement?: number;
            staticCpuEntitlement?: number;
            staticMemoryEntitlement?: number;
            privateMemory?: number;
            sharedMemory?: number;
            swappedMemory?: number;
            balloonedMemory?: number;
            consumedOverheadMemory?: number;
            ftLogBandwidth?: number;
            ftSecondaryLatency?: number;
            ftLatencyStatus?: vsanhealthService.vim.ManagedEntityStatus;
            compressedMemory?: number;
            uptimeSeconds?: number;
            ssdSwappedMemory?: number;
         }
         interface VirtualMachineGuestSummary extends vsanhealthService.vim.DynamicData {
            guestId?: string;
            guestFullName?: string;
            toolsStatus?: vsanhealthService.vim.VirtualMachineToolsStatus;
            toolsVersionStatus?: string;
            toolsVersionStatus2?: string;
            toolsRunningStatus?: string;
            hostName?: string;
            ipAddress?: string;
         }
         interface VirtualMachineStorageSummary extends vsanhealthService.vim.DynamicData {
            committed: number;
            uncommitted: number;
            unshared: number;
            timestamp: Date;
         }
         interface VirtualMachineSummary extends vsanhealthService.vim.DynamicData {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            runtime: vsanhealthService.vim.VirtualMachineRuntimeInfo;
            guest?: vsanhealthService.vim.VirtualMachineGuestSummary;
            config: vsanhealthService.vim.VirtualMachineConfigSummary;
            storage?: vsanhealthService.vim.VirtualMachineStorageSummary;
            quickStats: vsanhealthService.vim.VirtualMachineQuickStats;
            overallStatus: vsanhealthService.vim.ManagedEntityStatus;
            customValue?: Array<vsanhealthService.vim.CustomFieldValue>;
         }
         interface ArrayOfVirtualMachineSummary {
            VirtualMachineSummary?: Array<vsanhealthService.vim.VirtualMachineSummary>;
         }
         enum VirtualMachineTargetInfoConfigurationTag {
            "compliant",
            "clusterWide",
         }
         interface VirtualMachineTargetInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            configurationTag?: Array<string>;
         }
         enum UpgradePolicy {
            "manual",
            "upgradeAtPowerCycle",
         }
         interface ToolsConfigInfoToolsLastInstallInfo extends vsanhealthService.vim.DynamicData {
            counter: number;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ToolsConfigInfo extends vsanhealthService.vim.DynamicData {
            toolsVersion?: number;
            toolsInstallType?: string;
            afterPowerOn?: boolean;
            afterResume?: boolean;
            beforeGuestStandby?: boolean;
            beforeGuestShutdown?: boolean;
            beforeGuestReboot?: boolean;
            toolsUpgradePolicy?: string;
            pendingCustomization?: string;
            customizationKeyId?: vsanhealthService.vim.CryptoKeyId;
            syncTimeWithHost?: boolean;
            lastInstallInfo?: vsanhealthService.vim.ToolsConfigInfoToolsLastInstallInfo;
         }
         enum VirtualMachineUsbInfoSpeed {
            "low",
            "full",
            "high",
            "superSpeed",
            "unknownSpeed",
         }
         enum VirtualMachineUsbInfoFamily {
            "audio",
            "hid",
            "hid_bootable",
            "physical",
            "communication",
            "imaging",
            "printer",
            "storage",
            "hub",
            "smart_card",
            "security",
            "video",
            "wireless",
            "bluetooth",
            "wusb",
            "pda",
            "vendor_specific",
            "other",
            "unknownFamily",
         }
         interface VirtualMachineUsbInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            description: string;
            vendor: number;
            product: number;
            physicalPath: string;
            family?: Array<string>;
            speed?: Array<string>;
            summary?: vsanhealthService.vim.VirtualMachineSummary;
         }
         interface ArrayOfVirtualMachineUsbInfo {
            VirtualMachineUsbInfo?: Array<vsanhealthService.vim.VirtualMachineUsbInfo>;
         }
         interface UsbScanCodeSpecModifierType extends vsanhealthService.vim.DynamicData {
            leftControl?: boolean;
            leftShift?: boolean;
            leftAlt?: boolean;
            leftGui?: boolean;
            rightControl?: boolean;
            rightShift?: boolean;
            rightAlt?: boolean;
            rightGui?: boolean;
         }
         interface UsbScanCodeSpecKeyEvent extends vsanhealthService.vim.DynamicData {
            usbHidCode: number;
            modifiers?: vsanhealthService.vim.UsbScanCodeSpecModifierType;
         }
         interface ArrayOfUsbScanCodeSpecKeyEvent {
            UsbScanCodeSpecKeyEvent?: Array<vsanhealthService.vim.UsbScanCodeSpecKeyEvent>;
         }
         interface UsbScanCodeSpec extends vsanhealthService.vim.DynamicData {
            keyEvents: Array<vsanhealthService.vim.UsbScanCodeSpecKeyEvent>;
         }
         interface VirtualMachineVFlashModuleInfo extends vsanhealthService.vim.VirtualMachineTargetInfo {
            vFlashModule: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
         }
         interface ArrayOfVirtualMachineVFlashModuleInfo {
            VirtualMachineVFlashModuleInfo?: Array<vsanhealthService.vim.VirtualMachineVFlashModuleInfo>;
         }
         interface VirtualHardware extends vsanhealthService.vim.DynamicData {
            numCPU: number;
            numCoresPerSocket?: number;
            memoryMB: number;
            virtualICH7MPresent?: boolean;
            virtualSMCPresent?: boolean;
            device?: Array<vsanhealthService.vim.VirtualDevice>;
         }
         interface VirtualHardwareOption extends vsanhealthService.vim.DynamicData {
            hwVersion: number;
            virtualDeviceOption: Array<vsanhealthService.vim.VirtualDeviceOption>;
            deviceListReadonly: boolean;
            numCPU: Array<number>;
            numCoresPerSocket?: vsanhealthService.vim.IntOption;
            numCpuReadonly: boolean;
            memoryMB: vsanhealthService.vim.LongOption;
            numPCIControllers: vsanhealthService.vim.IntOption;
            numIDEControllers: vsanhealthService.vim.IntOption;
            numUSBControllers: vsanhealthService.vim.IntOption;
            numUSBXHCIControllers?: vsanhealthService.vim.IntOption;
            numSIOControllers: vsanhealthService.vim.IntOption;
            numPS2Controllers: vsanhealthService.vim.IntOption;
            licensingLimit?: Array<string>;
            numSupportedWwnPorts?: vsanhealthService.vim.IntOption;
            numSupportedWwnNodes?: vsanhealthService.vim.IntOption;
            resourceConfigOption?: vsanhealthService.vim.ResourceConfigOption;
         }
         interface VirtualMachineImportSpec extends vsanhealthService.vim.ImportSpec {
            configSpec: vsanhealthService.vim.VirtualMachineConfigSpec;
            resPoolEntity?: vsanhealthService.vim.ManagedObjectReference;
         }
         enum VirtualMachineWindowsQuiesceSpecVssBackupContext {
            "ctx_auto",
            "ctx_backup",
            "ctx_file_share_backup",
         }
         interface VirtualMachineWindowsQuiesceSpec extends vsanhealthService.vim.VirtualMachineGuestQuiesceSpec {
            vssBackupType?: number;
            vssBootableSystemState?: boolean;
            vssPartialFileSupport?: boolean;
            vssBackupContext?: string;
         }
         interface CheckResult extends vsanhealthService.vim.DynamicData {
            vm?: vsanhealthService.vim.ManagedObjectReference;
            host?: vsanhealthService.vim.ManagedObjectReference;
            warning?: Array<vsanhealthService.vim.LocalizedMethodFault>;
            error?: Array<vsanhealthService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfCheckResult {
            CheckResult?: Array<vsanhealthService.vim.CheckResult>;
         }
         enum CheckTestType {
            "sourceTests",
            "hostTests",
            "resourcePoolTests",
            "datastoreTests",
            "networkTests",
         }
         interface CustomizationIPSettingsIpV6AddressSpec extends vsanhealthService.vim.DynamicData {
            ip: Array<vsanhealthService.vim.CustomizationIpV6Generator>;
            gateway?: Array<string>;
         }
         enum CustomizationNetBIOSMode {
            "enableNetBIOSViaDhcp",
            "enableNetBIOS",
            "disableNetBIOS",
         }
         interface CustomizationIPSettings extends vsanhealthService.vim.DynamicData {
            ip: vsanhealthService.vim.CustomizationIpGenerator;
            subnetMask?: string;
            gateway?: Array<string>;
            ipV6Spec?: vsanhealthService.vim.CustomizationIPSettingsIpV6AddressSpec;
            dnsServerList?: Array<string>;
            dnsDomain?: string;
            primaryWINS?: string;
            secondaryWINS?: string;
            netBIOS?: vsanhealthService.vim.CustomizationNetBIOSMode;
         }
         interface CustomizationSpec extends vsanhealthService.vim.DynamicData {
            options?: vsanhealthService.vim.CustomizationOptions;
            identity: vsanhealthService.vim.CustomizationIdentitySettings;
            globalIPSettings: vsanhealthService.vim.CustomizationGlobalIPSettings;
            nicSettingMap?: Array<vsanhealthService.vim.CustomizationAdapterMapping>;
            encryptionKey?: Array<number>;
         }
         interface CustomizationName extends vsanhealthService.vim.DynamicData {
         }
         interface CustomizationFixedName extends vsanhealthService.vim.CustomizationName {
            name: string;
         }
         interface CustomizationPrefixName extends vsanhealthService.vim.CustomizationName {
            base: string;
         }
         interface CustomizationVirtualMachineName extends vsanhealthService.vim.CustomizationName {
         }
         interface CustomizationUnknownName extends vsanhealthService.vim.CustomizationName {
         }
         interface CustomizationCustomName extends vsanhealthService.vim.CustomizationName {
            argument?: string;
         }
         interface CustomizationPassword extends vsanhealthService.vim.DynamicData {
            value: string;
            plainText: boolean;
         }
         interface CustomizationOptions extends vsanhealthService.vim.DynamicData {
         }
         enum CustomizationSysprepRebootOption {
            "reboot",
            "noreboot",
            "shutdown",
         }
         interface CustomizationWinOptions extends vsanhealthService.vim.CustomizationOptions {
            changeSID: boolean;
            deleteAccounts: boolean;
            reboot?: vsanhealthService.vim.CustomizationSysprepRebootOption;
         }
         interface CustomizationLinuxOptions extends vsanhealthService.vim.CustomizationOptions {
         }
         interface CustomizationGuiUnattended extends vsanhealthService.vim.DynamicData {
            password?: vsanhealthService.vim.CustomizationPassword;
            timeZone: number;
            autoLogon: boolean;
            autoLogonCount: number;
         }
         interface CustomizationUserData extends vsanhealthService.vim.DynamicData {
            fullName: string;
            orgName: string;
            computerName: vsanhealthService.vim.CustomizationName;
            productId: string;
         }
         interface CustomizationGuiRunOnce extends vsanhealthService.vim.DynamicData {
            commandList: Array<string>;
         }
         interface CustomizationIdentification extends vsanhealthService.vim.DynamicData {
            joinWorkgroup?: string;
            joinDomain?: string;
            domainAdmin?: string;
            domainAdminPassword?: vsanhealthService.vim.CustomizationPassword;
         }
         enum CustomizationLicenseDataMode {
            "perServer",
            "perSeat",
         }
         interface CustomizationLicenseFilePrintData extends vsanhealthService.vim.DynamicData {
            autoMode: vsanhealthService.vim.CustomizationLicenseDataMode;
            autoUsers?: number;
         }
         interface CustomizationIdentitySettings extends vsanhealthService.vim.DynamicData {
         }
         interface CustomizationSysprepText extends vsanhealthService.vim.CustomizationIdentitySettings {
            value: string;
         }
         interface CustomizationSysprep extends vsanhealthService.vim.CustomizationIdentitySettings {
            guiUnattended: vsanhealthService.vim.CustomizationGuiUnattended;
            userData: vsanhealthService.vim.CustomizationUserData;
            guiRunOnce?: vsanhealthService.vim.CustomizationGuiRunOnce;
            identification: vsanhealthService.vim.CustomizationIdentification;
            licenseFilePrintData?: vsanhealthService.vim.CustomizationLicenseFilePrintData;
         }
         interface CustomizationLinuxPrep extends vsanhealthService.vim.CustomizationIdentitySettings {
            hostName: vsanhealthService.vim.CustomizationName;
            domain: string;
            timeZone?: string;
            hwClockUTC?: boolean;
         }
         interface CustomizationGlobalIPSettings extends vsanhealthService.vim.DynamicData {
            dnsSuffixList?: Array<string>;
            dnsServerList?: Array<string>;
         }
         interface CustomizationIpGenerator extends vsanhealthService.vim.DynamicData {
         }
         interface CustomizationDhcpIpGenerator extends vsanhealthService.vim.CustomizationIpGenerator {
         }
         interface CustomizationFixedIp extends vsanhealthService.vim.CustomizationIpGenerator {
            ipAddress: string;
         }
         interface CustomizationUnknownIpGenerator extends vsanhealthService.vim.CustomizationIpGenerator {
         }
         interface CustomizationCustomIpGenerator extends vsanhealthService.vim.CustomizationIpGenerator {
            argument?: string;
         }
         interface CustomizationIpV6Generator extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfCustomizationIpV6Generator {
            CustomizationIpV6Generator?: Array<vsanhealthService.vim.CustomizationIpV6Generator>;
         }
         interface CustomizationDhcpIpV6Generator extends vsanhealthService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationStatelessIpV6Generator extends vsanhealthService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationFixedIpV6 extends vsanhealthService.vim.CustomizationIpV6Generator {
            ipAddress: string;
            subnetMask: number;
         }
         interface CustomizationAutoIpV6Generator extends vsanhealthService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationUnknownIpV6Generator extends vsanhealthService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationCustomIpV6Generator extends vsanhealthService.vim.CustomizationIpV6Generator {
            argument?: string;
         }
         interface CustomizationAdapterMapping extends vsanhealthService.vim.DynamicData {
            macAddress?: string;
            adapter: vsanhealthService.vim.CustomizationIPSettings;
         }
         interface ArrayOfCustomizationAdapterMapping {
            CustomizationAdapterMapping?: Array<vsanhealthService.vim.CustomizationAdapterMapping>;
         }
         interface HostDiskMappingPartitionInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            fileSystem: string;
            capacityInKb: number;
         }
         interface HostDiskMappingInfo extends vsanhealthService.vim.DynamicData {
            physicalPartition?: vsanhealthService.vim.HostDiskMappingPartitionInfo;
            name: string;
            exclusive?: boolean;
         }
         interface HostDiskMappingPartitionOption extends vsanhealthService.vim.DynamicData {
            name: string;
            fileSystem: string;
            capacityInKb: number;
         }
         interface ArrayOfHostDiskMappingPartitionOption {
            HostDiskMappingPartitionOption?: Array<vsanhealthService.vim.HostDiskMappingPartitionOption>;
         }
         interface HostDiskMappingOption extends vsanhealthService.vim.DynamicData {
            physicalPartition?: Array<vsanhealthService.vim.HostDiskMappingPartitionOption>;
            name: string;
         }
         interface ParaVirtualSCSIController extends vsanhealthService.vim.VirtualSCSIController {
         }
         interface ParaVirtualSCSIControllerOption extends vsanhealthService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualAHCIController extends vsanhealthService.vim.VirtualSATAController {
         }
         interface VirtualAHCIControllerOption extends vsanhealthService.vim.VirtualSATAControllerOption {
         }
         interface VirtualBusLogicController extends vsanhealthService.vim.VirtualSCSIController {
         }
         interface VirtualBusLogicControllerOption extends vsanhealthService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualCdromIsoBackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualCdromPassthroughBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
            exclusive: boolean;
         }
         interface VirtualCdromRemotePassthroughBackingInfo extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingInfo {
            exclusive: boolean;
         }
         interface VirtualCdromAtapiBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualCdromRemoteAtapiBackingInfo extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingInfo {
         }
         interface VirtualCdrom extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualCdromIsoBackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualCdromPassthroughBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
            exclusive: vsanhealthService.vim.BoolOption;
         }
         interface VirtualCdromRemotePassthroughBackingOption extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingOption {
            exclusive: vsanhealthService.vim.BoolOption;
         }
         interface VirtualCdromAtapiBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualCdromRemoteAtapiBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualCdromOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualController extends vsanhealthService.vim.VirtualDevice {
            busNumber: number;
            device?: Array<number>;
         }
         interface VirtualControllerOption extends vsanhealthService.vim.VirtualDeviceOption {
            devices: vsanhealthService.vim.IntOption;
            supportedDevice?: Array<string>;
         }
         interface VirtualDeviceBackingInfo extends vsanhealthService.vim.DynamicData {
         }
         interface VirtualDeviceFileBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            fileName: string;
            datastore?: vsanhealthService.vim.ManagedObjectReference;
            backingObjectId?: string;
         }
         interface VirtualDeviceDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            deviceName: string;
            useAutoDetect?: boolean;
         }
         interface VirtualDeviceRemoteDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            deviceName: string;
            useAutoDetect?: boolean;
         }
         interface VirtualDevicePipeBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            pipeName: string;
         }
         interface VirtualDeviceURIBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            serviceURI: string;
            direction: string;
            proxyURI?: string;
         }
         enum VirtualDeviceConnectInfoStatus {
            "ok",
            "recoverableError",
            "unrecoverableError",
            "untried",
         }
         interface VirtualDeviceConnectInfo extends vsanhealthService.vim.DynamicData {
            startConnected: boolean;
            allowGuestControl: boolean;
            connected: boolean;
            status?: string;
         }
         interface VirtualDeviceBusSlotInfo extends vsanhealthService.vim.DynamicData {
         }
         interface VirtualDevicePciBusSlotInfo extends vsanhealthService.vim.VirtualDeviceBusSlotInfo {
            pciSlotNumber: number;
         }
         interface VirtualDevice extends vsanhealthService.vim.DynamicData {
            key: number;
            deviceInfo?: vsanhealthService.vim.Description;
            backing?: vsanhealthService.vim.VirtualDeviceBackingInfo;
            connectable?: vsanhealthService.vim.VirtualDeviceConnectInfo;
            slotInfo?: vsanhealthService.vim.VirtualDeviceBusSlotInfo;
            controllerKey?: number;
            unitNumber?: number;
         }
         interface ArrayOfVirtualDevice {
            VirtualDevice?: Array<vsanhealthService.vim.VirtualDevice>;
         }
         interface VirtualDeviceBackingOption extends vsanhealthService.vim.DynamicData {
            type: string;
         }
         interface ArrayOfVirtualDeviceBackingOption {
            VirtualDeviceBackingOption?: Array<vsanhealthService.vim.VirtualDeviceBackingOption>;
         }
         enum VirtualDeviceFileExtension {
            "iso",
            "flp",
            "vmdk",
            "dsk",
            "rdm",
         }
         interface VirtualDeviceFileBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
            fileNameExtensions?: vsanhealthService.vim.ChoiceOption;
         }
         interface VirtualDeviceDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
            autoDetectAvailable?: vsanhealthService.vim.BoolOption;
         }
         interface VirtualDeviceRemoteDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
            autoDetectAvailable?: vsanhealthService.vim.BoolOption;
         }
         interface VirtualDevicePipeBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
         }
         enum VirtualDeviceURIBackingOptionDirection {
            "server",
            "client",
         }
         interface VirtualDeviceURIBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
            directions: vsanhealthService.vim.ChoiceOption;
         }
         interface VirtualDeviceConnectOption extends vsanhealthService.vim.DynamicData {
            startConnected: vsanhealthService.vim.BoolOption;
            allowGuestControl: vsanhealthService.vim.BoolOption;
         }
         interface VirtualDeviceBusSlotOption extends vsanhealthService.vim.DynamicData {
            type: string;
         }
         interface VirtualDeviceOption extends vsanhealthService.vim.DynamicData {
            type: string;
            connectOption?: vsanhealthService.vim.VirtualDeviceConnectOption;
            busSlotOption?: vsanhealthService.vim.VirtualDeviceBusSlotOption;
            controllerType?: string;
            autoAssignController?: vsanhealthService.vim.BoolOption;
            backingOption?: Array<vsanhealthService.vim.VirtualDeviceBackingOption>;
            defaultBackingOptionIndex?: number;
            licensingLimit?: Array<string>;
            deprecated: boolean;
            plugAndPlay: boolean;
            hotRemoveSupported?: boolean;
         }
         interface ArrayOfVirtualDeviceOption {
            VirtualDeviceOption?: Array<vsanhealthService.vim.VirtualDeviceOption>;
         }
         enum VirtualDeviceConfigSpecOperation {
            "add",
            "remove",
            "edit",
         }
         enum VirtualDeviceConfigSpecFileOperation {
            "create",
            "destroy",
            "replace",
         }
         interface VirtualDeviceConfigSpecBackingSpec extends vsanhealthService.vim.DynamicData {
            parent?: vsanhealthService.vim.VirtualDeviceConfigSpecBackingSpec;
            crypto?: vsanhealthService.vim.CryptoSpec;
         }
         interface VirtualDeviceConfigSpec extends vsanhealthService.vim.DynamicData {
            operation?: vsanhealthService.vim.VirtualDeviceConfigSpecOperation;
            fileOperation?: vsanhealthService.vim.VirtualDeviceConfigSpecFileOperation;
            device: vsanhealthService.vim.VirtualDevice;
            profile?: Array<vsanhealthService.vim.VirtualMachineProfileSpec>;
            backing?: vsanhealthService.vim.VirtualDeviceConfigSpecBackingSpec;
         }
         interface ArrayOfVirtualDeviceConfigSpec {
            VirtualDeviceConfigSpec?: Array<vsanhealthService.vim.VirtualDeviceConfigSpec>;
         }
         enum VirtualDiskDeltaDiskFormat {
            "redoLogFormat",
            "nativeFormat",
            "seSparseFormat",
         }
         enum VirtualDiskDeltaDiskFormatVariant {
            "vmfsSparseVariant",
            "vsanSparseVariant",
         }
         enum VirtualDiskSharing {
            "sharingNone",
            "sharingMultiWriter",
         }
         interface VirtualDiskSparseVer1BackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            spaceUsedInKB?: number;
            contentId?: string;
            parent?: vsanhealthService.vim.VirtualDiskSparseVer1BackingInfo;
         }
         interface VirtualDiskSparseVer2BackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            spaceUsedInKB?: number;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: vsanhealthService.vim.VirtualDiskSparseVer2BackingInfo;
            keyId?: vsanhealthService.vim.CryptoKeyId;
         }
         interface VirtualDiskFlatVer1BackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            contentId?: string;
            parent?: vsanhealthService.vim.VirtualDiskFlatVer1BackingInfo;
         }
         interface VirtualDiskFlatVer2BackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            thinProvisioned?: boolean;
            eagerlyScrub?: boolean;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: vsanhealthService.vim.VirtualDiskFlatVer2BackingInfo;
            deltaDiskFormat?: string;
            digestEnabled?: boolean;
            deltaGrainSize?: number;
            deltaDiskFormatVariant?: string;
            sharing?: string;
            keyId?: vsanhealthService.vim.CryptoKeyId;
         }
         interface VirtualDiskSeSparseBackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            writeThrough?: boolean;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: vsanhealthService.vim.VirtualDiskSeSparseBackingInfo;
            deltaDiskFormat?: string;
            digestEnabled?: boolean;
            grainSize?: number;
            keyId?: vsanhealthService.vim.CryptoKeyId;
         }
         interface VirtualDiskRawDiskVer2BackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
            descriptorFileName: string;
            uuid?: string;
            changeId?: string;
            sharing?: string;
         }
         interface VirtualDiskPartitionedRawDiskVer2BackingInfo extends vsanhealthService.vim.VirtualDiskRawDiskVer2BackingInfo {
            partition: Array<number>;
         }
         interface VirtualDiskRawDiskMappingVer1BackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
            lunUuid?: string;
            deviceName?: string;
            compatibilityMode?: string;
            diskMode?: string;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: vsanhealthService.vim.VirtualDiskRawDiskMappingVer1BackingInfo;
            sharing?: string;
         }
         enum VirtualDiskVFlashCacheConfigInfoCacheConsistencyType {
            "strong",
            "weak",
         }
         enum VirtualDiskVFlashCacheConfigInfoCacheMode {
            "write_thru",
            "write_back",
         }
         interface VirtualDiskVFlashCacheConfigInfo extends vsanhealthService.vim.DynamicData {
            vFlashModule?: string;
            reservationInMB?: number;
            cacheConsistencyType?: string;
            cacheMode?: string;
            blockSizeInKB?: number;
         }
         interface VirtualDisk extends vsanhealthService.vim.VirtualDevice {
            capacityInKB: number;
            capacityInBytes?: number;
            shares?: vsanhealthService.vim.SharesInfo;
            storageIOAllocation?: vsanhealthService.vim.StorageIOAllocationInfo;
            diskObjectId?: string;
            vFlashCacheConfigInfo?: vsanhealthService.vim.VirtualDiskVFlashCacheConfigInfo;
            iofilter?: Array<string>;
            vDiskId?: string;
         }
         interface ArrayOfVirtualDisk {
            VirtualDisk?: Array<vsanhealthService.vim.VirtualDisk>;
         }
         interface VirtualDiskId extends vsanhealthService.vim.DynamicData {
            vm: vsanhealthService.vim.ManagedObjectReference;
            diskId: number;
         }
         interface ArrayOfVirtualDiskId {
            VirtualDiskId?: Array<vsanhealthService.vim.VirtualDiskId>;
         }
         enum VirtualDiskMode {
            "persistent",
            "nonpersistent",
            "undoable",
            "independent_persistent",
            "independent_nonpersistent",
            "append",
         }
         enum VirtualDiskCompatibilityMode {
            "virtualMode",
            "physicalMode",
         }
         interface VirtualDiskSparseVer1BackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
            diskModes: vsanhealthService.vim.ChoiceOption;
            split: vsanhealthService.vim.BoolOption;
            writeThrough: vsanhealthService.vim.BoolOption;
            growable: boolean;
         }
         interface VirtualDiskSparseVer2BackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
            diskMode: vsanhealthService.vim.ChoiceOption;
            split: vsanhealthService.vim.BoolOption;
            writeThrough: vsanhealthService.vim.BoolOption;
            growable: boolean;
            hotGrowable?: boolean;
            uuid?: boolean;
         }
         interface VirtualDiskFlatVer1BackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
            diskMode: vsanhealthService.vim.ChoiceOption;
            split: vsanhealthService.vim.BoolOption;
            writeThrough: vsanhealthService.vim.BoolOption;
            growable: boolean;
         }
         interface VirtualDiskDeltaDiskFormatsSupported extends vsanhealthService.vim.DynamicData {
            datastoreType: string;
            deltaDiskFormat: vsanhealthService.vim.ChoiceOption;
         }
         interface ArrayOfVirtualDiskDeltaDiskFormatsSupported {
            VirtualDiskDeltaDiskFormatsSupported?: Array<vsanhealthService.vim.VirtualDiskDeltaDiskFormatsSupported>;
         }
         interface VirtualDiskFlatVer2BackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
            diskMode: vsanhealthService.vim.ChoiceOption;
            split: vsanhealthService.vim.BoolOption;
            writeThrough: vsanhealthService.vim.BoolOption;
            growable: boolean;
            hotGrowable?: boolean;
            uuid?: boolean;
            thinProvisioned?: vsanhealthService.vim.BoolOption;
            eagerlyScrub?: vsanhealthService.vim.BoolOption;
            deltaDiskFormat?: vsanhealthService.vim.ChoiceOption;
            deltaDiskFormatsSupported?: Array<vsanhealthService.vim.VirtualDiskDeltaDiskFormatsSupported>;
         }
         interface VirtualDiskSeSparseBackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
            diskMode: vsanhealthService.vim.ChoiceOption;
            writeThrough: vsanhealthService.vim.BoolOption;
            growable: boolean;
            hotGrowable: boolean;
            uuid: boolean;
            deltaDiskFormatsSupported: Array<vsanhealthService.vim.VirtualDiskDeltaDiskFormatsSupported>;
         }
         interface VirtualDiskRawDiskVer2BackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
            descriptorFileNameExtensions: vsanhealthService.vim.ChoiceOption;
            uuid?: boolean;
         }
         interface VirtualDiskPartitionedRawDiskVer2BackingOption extends vsanhealthService.vim.VirtualDiskRawDiskVer2BackingOption {
         }
         interface VirtualDiskRawDiskMappingVer1BackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
            descriptorFileNameExtensions?: vsanhealthService.vim.ChoiceOption;
            compatibilityMode: vsanhealthService.vim.ChoiceOption;
            diskMode: vsanhealthService.vim.ChoiceOption;
            uuid?: boolean;
         }
         interface VirtualDiskOptionVFlashCacheConfigOption extends vsanhealthService.vim.DynamicData {
            cacheConsistencyType: vsanhealthService.vim.ChoiceOption;
            cacheMode: vsanhealthService.vim.ChoiceOption;
            reservationInMB: vsanhealthService.vim.LongOption;
            blockSizeInKB: vsanhealthService.vim.LongOption;
         }
         interface VirtualDiskOption extends vsanhealthService.vim.VirtualDeviceOption {
            capacityInKB: vsanhealthService.vim.LongOption;
            ioAllocationOption?: vsanhealthService.vim.StorageIOAllocationOption;
            vFlashCacheConfigOption?: vsanhealthService.vim.VirtualDiskOptionVFlashCacheConfigOption;
         }
         interface VirtualDiskConfigSpec extends vsanhealthService.vim.VirtualDeviceConfigSpec {
            diskMoveType?: string;
            migrateCache?: boolean;
         }
         interface VirtualE1000 extends vsanhealthService.vim.VirtualEthernetCard {
         }
         interface VirtualE1000Option extends vsanhealthService.vim.VirtualEthernetCardOption {
         }
         interface VirtualE1000e extends vsanhealthService.vim.VirtualEthernetCard {
         }
         interface VirtualE1000eOption extends vsanhealthService.vim.VirtualEthernetCardOption {
         }
         interface VirtualEnsoniq1371 extends vsanhealthService.vim.VirtualSoundCard {
         }
         interface VirtualEnsoniq1371Option extends vsanhealthService.vim.VirtualSoundCardOption {
         }
         interface VirtualEthernetCardNetworkBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
            network?: vsanhealthService.vim.ManagedObjectReference;
            inPassthroughMode?: boolean;
         }
         interface VirtualEthernetCardLegacyNetworkBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualEthernetCardDistributedVirtualPortBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            port: vsanhealthService.vim.DistributedVirtualSwitchPortConnection;
         }
         interface VirtualEthernetCardOpaqueNetworkBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            opaqueNetworkId: string;
            opaqueNetworkType: string;
         }
         interface VirtualEthernetCardResourceAllocation extends vsanhealthService.vim.DynamicData {
            reservation?: number;
            share: vsanhealthService.vim.SharesInfo;
            limit?: number;
         }
         interface VirtualEthernetCard extends vsanhealthService.vim.VirtualDevice {
            addressType?: string;
            macAddress?: string;
            wakeOnLanEnabled?: boolean;
            resourceAllocation?: vsanhealthService.vim.VirtualEthernetCardResourceAllocation;
            externalId?: string;
            uptCompatibilityEnabled?: boolean;
         }
         interface VirtualEthernetCardNetworkBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualEthernetCardOpaqueNetworkBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
         }
         enum VirtualEthernetCardLegacyNetworkDeviceName {
            "bridged",
            "nat",
            "hostonly",
         }
         interface VirtualEthernetCardLegacyNetworkBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualEthernetCardDVPortBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
         }
         enum VirtualEthernetCardMacType {
            "manual",
            "generated",
            "assigned",
         }
         interface VirtualEthernetCardOption extends vsanhealthService.vim.VirtualDeviceOption {
            supportedOUI: vsanhealthService.vim.ChoiceOption;
            macType: vsanhealthService.vim.ChoiceOption;
            wakeOnLanEnabled: vsanhealthService.vim.BoolOption;
            vmDirectPathGen2Supported?: boolean;
            uptCompatibilityEnabled?: vsanhealthService.vim.BoolOption;
         }
         interface VirtualFloppyImageBackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualFloppyDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualFloppyRemoteDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingInfo {
         }
         interface VirtualFloppy extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualFloppyImageBackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualFloppyDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualFloppyRemoteDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingOption {
         }
         interface VirtualFloppyOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualHdAudioCard extends vsanhealthService.vim.VirtualSoundCard {
         }
         interface VirtualHdAudioCardOption extends vsanhealthService.vim.VirtualSoundCardOption {
         }
         interface VirtualIDEController extends vsanhealthService.vim.VirtualController {
         }
         interface VirtualIDEControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numIDEDisks: vsanhealthService.vim.IntOption;
            numIDECdroms: vsanhealthService.vim.IntOption;
         }
         interface VirtualKeyboard extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualKeyboardOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualLsiLogicController extends vsanhealthService.vim.VirtualSCSIController {
         }
         interface VirtualLsiLogicControllerOption extends vsanhealthService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualLsiLogicSASController extends vsanhealthService.vim.VirtualSCSIController {
         }
         interface VirtualLsiLogicSASControllerOption extends vsanhealthService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualNVMEController extends vsanhealthService.vim.VirtualController {
         }
         interface VirtualNVMEControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numNVMEDisks: vsanhealthService.vim.IntOption;
         }
         interface VirtualPCIController extends vsanhealthService.vim.VirtualController {
         }
         interface VirtualPCIControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numSCSIControllers: vsanhealthService.vim.IntOption;
            numEthernetCards: vsanhealthService.vim.IntOption;
            numVideoCards: vsanhealthService.vim.IntOption;
            numSoundCards: vsanhealthService.vim.IntOption;
            numVmiRoms?: vsanhealthService.vim.IntOption;
            numVmciDevices?: vsanhealthService.vim.IntOption;
            numPCIPassthroughDevices?: vsanhealthService.vim.IntOption;
            numSasSCSIControllers?: vsanhealthService.vim.IntOption;
            numVmxnet3EthernetCards?: vsanhealthService.vim.IntOption;
            numParaVirtualSCSIControllers?: vsanhealthService.vim.IntOption;
            numSATAControllers?: vsanhealthService.vim.IntOption;
            numNVMEControllers?: vsanhealthService.vim.IntOption;
         }
         interface VirtualPCIPassthroughDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
            id: string;
            deviceId: string;
            systemId: string;
            vendorId: number;
         }
         interface VirtualPCIPassthroughPluginBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
         }
         interface VirtualPCIPassthroughVmiopBackingInfo extends vsanhealthService.vim.VirtualPCIPassthroughPluginBackingInfo {
            vgpu?: string;
         }
         interface VirtualPCIPassthrough extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualPCIPassthroughDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualPCIPassthroughPluginBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
         }
         interface VirtualPCIPassthroughVmiopBackingOption extends vsanhealthService.vim.VirtualPCIPassthroughPluginBackingOption {
            vgpu: vsanhealthService.vim.StringOption;
            maxInstances: number;
         }
         interface VirtualPCIPassthroughOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualPCNet32 extends vsanhealthService.vim.VirtualEthernetCard {
         }
         interface VirtualPCNet32Option extends vsanhealthService.vim.VirtualEthernetCardOption {
            supportsMorphing: boolean;
         }
         interface VirtualPS2Controller extends vsanhealthService.vim.VirtualController {
         }
         interface VirtualPS2ControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numKeyboards: vsanhealthService.vim.IntOption;
            numPointingDevices: vsanhealthService.vim.IntOption;
         }
         interface VirtualParallelPortFileBackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualParallelPortDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualParallelPort extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualParallelPortFileBackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualParallelPortDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualParallelPortOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualPointingDeviceDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
            hostPointingDevice: string;
         }
         interface VirtualPointingDevice extends vsanhealthService.vim.VirtualDevice {
         }
         enum VirtualPointingDeviceHostChoice {
            "autodetect",
            "intellimouseExplorer",
            "intellimousePs2",
            "logitechMouseman",
            "microsoft_serial",
            "mouseSystems",
            "mousemanSerial",
            "ps2",
         }
         interface VirtualPointingDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
            hostPointingDevice: vsanhealthService.vim.ChoiceOption;
         }
         interface VirtualPointingDeviceOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualSATAController extends vsanhealthService.vim.VirtualController {
         }
         interface VirtualSATAControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numSATADisks: vsanhealthService.vim.IntOption;
            numSATACdroms: vsanhealthService.vim.IntOption;
         }
         enum VirtualSCSISharing {
            "noSharing",
            "virtualSharing",
            "physicalSharing",
         }
         interface ArrayOfVirtualSCSISharing {
            VirtualSCSISharing?: Array<vsanhealthService.vim.VirtualSCSISharing>;
         }
         interface VirtualSCSIController extends vsanhealthService.vim.VirtualController {
            hotAddRemove?: boolean;
            sharedBus: vsanhealthService.vim.VirtualSCSISharing;
            scsiCtlrUnitNumber?: number;
         }
         interface VirtualSCSIControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numSCSIDisks: vsanhealthService.vim.IntOption;
            numSCSICdroms: vsanhealthService.vim.IntOption;
            numSCSIPassthrough: vsanhealthService.vim.IntOption;
            sharing: Array<vsanhealthService.vim.VirtualSCSISharing>;
            defaultSharedIndex: number;
            hotAddRemove: vsanhealthService.vim.BoolOption;
            scsiCtlrUnitNumber: number;
         }
         interface VirtualSCSIPassthroughDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualSCSIPassthrough extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualSCSIPassthroughDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualSCSIPassthroughOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualSIOController extends vsanhealthService.vim.VirtualController {
         }
         interface VirtualSIOControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            numFloppyDrives: vsanhealthService.vim.IntOption;
            numSerialPorts: vsanhealthService.vim.IntOption;
            numParallelPorts: vsanhealthService.vim.IntOption;
         }
         interface VirtualSerialPortFileBackingInfo extends vsanhealthService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualSerialPortDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualSerialPortPipeBackingInfo extends vsanhealthService.vim.VirtualDevicePipeBackingInfo {
            endpoint: string;
            noRxLoss?: boolean;
         }
         interface VirtualSerialPortURIBackingInfo extends vsanhealthService.vim.VirtualDeviceURIBackingInfo {
         }
         interface VirtualSerialPortThinPrintBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
         }
         interface VirtualSerialPort extends vsanhealthService.vim.VirtualDevice {
            yieldOnPoll: boolean;
         }
         enum VirtualSerialPortEndPoint {
            "client",
            "server",
         }
         interface VirtualSerialPortFileBackingOption extends vsanhealthService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualSerialPortDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualSerialPortPipeBackingOption extends vsanhealthService.vim.VirtualDevicePipeBackingOption {
            endpoint: vsanhealthService.vim.ChoiceOption;
            noRxLoss: vsanhealthService.vim.BoolOption;
         }
         interface VirtualSerialPortURIBackingOption extends vsanhealthService.vim.VirtualDeviceURIBackingOption {
         }
         interface VirtualSerialPortThinPrintBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
         }
         interface VirtualSerialPortOption extends vsanhealthService.vim.VirtualDeviceOption {
            yieldOnPoll: vsanhealthService.vim.BoolOption;
         }
         interface VirtualSoundBlaster16 extends vsanhealthService.vim.VirtualSoundCard {
         }
         interface VirtualSoundBlaster16Option extends vsanhealthService.vim.VirtualSoundCardOption {
         }
         interface VirtualSoundCardDeviceBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualSoundCard extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualSoundCardDeviceBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualSoundCardOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualSriovEthernetCardSriovBackingInfo extends vsanhealthService.vim.VirtualDeviceBackingInfo {
            physicalFunctionBacking?: vsanhealthService.vim.VirtualPCIPassthroughDeviceBackingInfo;
            virtualFunctionBacking?: vsanhealthService.vim.VirtualPCIPassthroughDeviceBackingInfo;
            virtualFunctionIndex?: number;
         }
         interface VirtualSriovEthernetCard extends vsanhealthService.vim.VirtualEthernetCard {
            allowGuestOSMtuChange?: boolean;
            sriovBacking?: vsanhealthService.vim.VirtualSriovEthernetCardSriovBackingInfo;
         }
         interface VirtualSriovEthernetCardSriovBackingOption extends vsanhealthService.vim.VirtualDeviceBackingOption {
         }
         interface VirtualSriovEthernetCardOption extends vsanhealthService.vim.VirtualEthernetCardOption {
         }
         interface VirtualUSBUSBBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualUSBRemoteHostBackingInfo extends vsanhealthService.vim.VirtualDeviceDeviceBackingInfo {
            hostname: string;
         }
         interface VirtualUSBRemoteClientBackingInfo extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingInfo {
            hostname: string;
         }
         interface VirtualUSB extends vsanhealthService.vim.VirtualDevice {
            connected?: boolean;
            vendor?: number;
            product?: number;
            family?: Array<string>;
            speed?: Array<string>;
         }
         interface VirtualUSBControllerPciBusSlotInfo extends vsanhealthService.vim.VirtualDevicePciBusSlotInfo {
            ehciPciSlotNumber?: number;
         }
         interface VirtualUSBController extends vsanhealthService.vim.VirtualController {
            autoConnectDevices?: boolean;
            ehciEnabled?: boolean;
         }
         interface VirtualUSBControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            autoConnectDevices: vsanhealthService.vim.BoolOption;
            ehciSupported?: vsanhealthService.vim.BoolOption;
            supportedSpeeds?: Array<string>;
         }
         interface VirtualUSBUSBBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualUSBRemoteHostBackingOption extends vsanhealthService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualUSBRemoteClientBackingOption extends vsanhealthService.vim.VirtualDeviceRemoteDeviceBackingOption {
         }
         interface VirtualUSBOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         interface VirtualUSBXHCIController extends vsanhealthService.vim.VirtualController {
            autoConnectDevices?: boolean;
         }
         interface VirtualUSBXHCIControllerOption extends vsanhealthService.vim.VirtualControllerOption {
            autoConnectDevices: vsanhealthService.vim.BoolOption;
            supportedSpeeds: Array<string>;
         }
         enum VirtualMachineVMCIDeviceAction {
            "allow",
            "deny",
         }
         enum VirtualMachineVMCIDeviceProtocol {
            "hypervisor",
            "doorbell",
            "queuepair",
            "datagram",
            "stream",
            "anyProtocol",
         }
         enum VirtualMachineVMCIDeviceDirection {
            "guest",
            "host",
            "anyDirection",
         }
         interface VirtualMachineVMCIDeviceFilterSpec extends vsanhealthService.vim.DynamicData {
            rank: number;
            action: string;
            protocol: string;
            direction: string;
            lowerDstPortBoundary?: number;
            upperDstPortBoundary?: number;
         }
         interface ArrayOfVirtualMachineVMCIDeviceFilterSpec {
            VirtualMachineVMCIDeviceFilterSpec?: Array<vsanhealthService.vim.VirtualMachineVMCIDeviceFilterSpec>;
         }
         interface VirtualMachineVMCIDeviceFilterInfo extends vsanhealthService.vim.DynamicData {
            filters?: Array<vsanhealthService.vim.VirtualMachineVMCIDeviceFilterSpec>;
         }
         interface VirtualMachineVMCIDevice extends vsanhealthService.vim.VirtualDevice {
            id?: number;
            allowUnrestrictedCommunication?: boolean;
            filterEnable?: boolean;
            filterInfo?: vsanhealthService.vim.VirtualMachineVMCIDeviceFilterInfo;
         }
         interface VirtualMachineVMCIDeviceOptionFilterSpecOption extends vsanhealthService.vim.DynamicData {
            action: vsanhealthService.vim.ChoiceOption;
            protocol: vsanhealthService.vim.ChoiceOption;
            direction: vsanhealthService.vim.ChoiceOption;
            lowerDstPortBoundary: vsanhealthService.vim.LongOption;
            upperDstPortBoundary: vsanhealthService.vim.LongOption;
         }
         interface VirtualMachineVMCIDeviceOption extends vsanhealthService.vim.VirtualDeviceOption {
            allowUnrestrictedCommunication: vsanhealthService.vim.BoolOption;
            filterSpecOption?: vsanhealthService.vim.VirtualMachineVMCIDeviceOptionFilterSpecOption;
            filterSupported?: vsanhealthService.vim.BoolOption;
         }
         interface VirtualMachineVMIROM extends vsanhealthService.vim.VirtualDevice {
         }
         interface VirtualVMIROMOption extends vsanhealthService.vim.VirtualDeviceOption {
         }
         enum VirtualMachineVideoCardUse3dRenderer {
            "automatic",
            "software",
            "hardware",
         }
         interface VirtualMachineVideoCard extends vsanhealthService.vim.VirtualDevice {
            videoRamSizeInKB?: number;
            numDisplays?: number;
            useAutoDetect?: boolean;
            enable3DSupport?: boolean;
            use3dRenderer?: string;
            graphicsMemorySizeInKB?: number;
         }
         interface VirtualVideoCardOption extends vsanhealthService.vim.VirtualDeviceOption {
            videoRamSizeInKB?: vsanhealthService.vim.LongOption;
            numDisplays?: vsanhealthService.vim.IntOption;
            useAutoDetect?: vsanhealthService.vim.BoolOption;
            support3D?: vsanhealthService.vim.BoolOption;
            use3dRendererSupported?: vsanhealthService.vim.BoolOption;
            graphicsMemorySizeInKB?: vsanhealthService.vim.LongOption;
            graphicsMemorySizeSupported?: vsanhealthService.vim.BoolOption;
         }
         interface VirtualVmxnet extends vsanhealthService.vim.VirtualEthernetCard {
         }
         interface VirtualVmxnet2 extends vsanhealthService.vim.VirtualVmxnet {
         }
         interface VirtualVmxnet2Option extends vsanhealthService.vim.VirtualVmxnetOption {
         }
         interface VirtualVmxnet3 extends vsanhealthService.vim.VirtualVmxnet {
         }
         interface VirtualVmxnet3Option extends vsanhealthService.vim.VirtualVmxnetOption {
         }
         interface VirtualVmxnet3Vrdma extends vsanhealthService.vim.VirtualVmxnet3 {
         }
         interface VirtualVmxnet3VrdmaOption extends vsanhealthService.vim.VirtualVmxnet3Option {
         }
         interface VirtualVmxnetOption extends vsanhealthService.vim.VirtualEthernetCardOption {
         }
         interface GuestAuthSubject extends vsanhealthService.vim.DynamicData {
         }
         interface ArrayOfGuestAuthSubject {
            GuestAuthSubject?: Array<vsanhealthService.vim.GuestAuthSubject>;
         }
         interface GuestAuthAnySubject extends vsanhealthService.vim.GuestAuthSubject {
         }
         interface GuestAuthNamedSubject extends vsanhealthService.vim.GuestAuthSubject {
            name: string;
         }
         interface GuestAuthAliasInfo extends vsanhealthService.vim.DynamicData {
            subject: vsanhealthService.vim.GuestAuthSubject;
            comment: string;
         }
         interface ArrayOfGuestAuthAliasInfo {
            GuestAuthAliasInfo?: Array<vsanhealthService.vim.GuestAuthAliasInfo>;
         }
         interface GuestAliases extends vsanhealthService.vim.DynamicData {
            base64Cert: string;
            aliases: Array<vsanhealthService.vim.GuestAuthAliasInfo>;
         }
         interface ArrayOfGuestAliases {
            GuestAliases?: Array<vsanhealthService.vim.GuestAliases>;
         }
         interface GuestMappedAliases extends vsanhealthService.vim.DynamicData {
            base64Cert: string;
            username: string;
            subjects: Array<vsanhealthService.vim.GuestAuthSubject>;
         }
         interface ArrayOfGuestMappedAliases {
            GuestMappedAliases?: Array<vsanhealthService.vim.GuestMappedAliases>;
         }
         interface GuestFileAttributes extends vsanhealthService.vim.DynamicData {
            modificationTime?: Date;
            accessTime?: Date;
            symlinkTarget?: string;
         }
         interface GuestPosixFileAttributes extends vsanhealthService.vim.GuestFileAttributes {
            ownerId?: number;
            groupId?: number;
            permissions?: number;
         }
         interface GuestWindowsFileAttributes extends vsanhealthService.vim.GuestFileAttributes {
            hidden?: boolean;
            readOnly?: boolean;
            createTime?: Date;
         }
         enum GuestFileType {
            "file",
            "directory",
            "symlink",
         }
         interface GuestFileInfo extends vsanhealthService.vim.DynamicData {
            path: string;
            type: string;
            size: number;
            attributes: vsanhealthService.vim.GuestFileAttributes;
         }
         interface ArrayOfGuestFileInfo {
            GuestFileInfo?: Array<vsanhealthService.vim.GuestFileInfo>;
         }
         interface GuestListFileInfo extends vsanhealthService.vim.DynamicData {
            files?: Array<vsanhealthService.vim.GuestFileInfo>;
            remaining: number;
         }
         interface FileTransferInformation extends vsanhealthService.vim.DynamicData {
            attributes: vsanhealthService.vim.GuestFileAttributes;
            size: number;
            url: string;
         }
         interface GuestAuthentication extends vsanhealthService.vim.DynamicData {
            interactiveSession: boolean;
         }
         interface NamePasswordAuthentication extends vsanhealthService.vim.GuestAuthentication {
            username: string;
            password: string;
         }
         interface GuestProgramSpec extends vsanhealthService.vim.DynamicData {
            programPath: string;
            arguments: string;
            workingDirectory?: string;
            envVariables?: Array<string>;
         }
         interface GuestWindowsProgramSpec extends vsanhealthService.vim.GuestProgramSpec {
            startMinimized: boolean;
         }
         interface GuestProcessInfo extends vsanhealthService.vim.DynamicData {
            name: string;
            pid: number;
            owner: string;
            cmdLine: string;
            startTime: Date;
            endTime?: Date;
            exitCode?: number;
         }
         interface ArrayOfGuestProcessInfo {
            GuestProcessInfo?: Array<vsanhealthService.vim.GuestProcessInfo>;
         }
         interface SAMLTokenAuthentication extends vsanhealthService.vim.GuestAuthentication {
            token: string;
            username?: string;
         }
         interface SSPIAuthentication extends vsanhealthService.vim.GuestAuthentication {
            sspiToken: string;
         }
         interface TicketedSessionAuthentication extends vsanhealthService.vim.GuestAuthentication {
            ticket: string;
         }
         enum GuestRegKeyWowSpec {
            "WOWNative",
            "WOW32",
            "WOW64",
         }
         interface GuestRegKeyNameSpec extends vsanhealthService.vim.DynamicData {
            registryPath: string;
            wowBitness: string;
         }
         interface GuestRegKeySpec extends vsanhealthService.vim.DynamicData {
            keyName: vsanhealthService.vim.GuestRegKeyNameSpec;
            classType: string;
            lastWritten: Date;
         }
         interface GuestRegKeyRecordSpec extends vsanhealthService.vim.DynamicData {
            key: vsanhealthService.vim.GuestRegKeySpec;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfGuestRegKeyRecordSpec {
            GuestRegKeyRecordSpec?: Array<vsanhealthService.vim.GuestRegKeyRecordSpec>;
         }
         interface GuestRegValueNameSpec extends vsanhealthService.vim.DynamicData {
            keyName: vsanhealthService.vim.GuestRegKeyNameSpec;
            name: string;
         }
         interface GuestRegValueDataSpec extends vsanhealthService.vim.DynamicData {
         }
         interface GuestRegValueDwordSpec extends vsanhealthService.vim.GuestRegValueDataSpec {
            value: number;
         }
         interface GuestRegValueQwordSpec extends vsanhealthService.vim.GuestRegValueDataSpec {
            value: number;
         }
         interface GuestRegValueStringSpec extends vsanhealthService.vim.GuestRegValueDataSpec {
            value?: string;
         }
         interface GuestRegValueExpandStringSpec extends vsanhealthService.vim.GuestRegValueDataSpec {
            value?: string;
         }
         interface GuestRegValueMultiStringSpec extends vsanhealthService.vim.GuestRegValueDataSpec {
            value?: Array<string>;
         }
         interface GuestRegValueBinarySpec extends vsanhealthService.vim.GuestRegValueDataSpec {
            value?: string;
         }
         interface GuestRegValueSpec extends vsanhealthService.vim.DynamicData {
            name: vsanhealthService.vim.GuestRegValueNameSpec;
            data: vsanhealthService.vim.GuestRegValueDataSpec;
         }
         interface ArrayOfGuestRegValueSpec {
            GuestRegValueSpec?: Array<vsanhealthService.vim.GuestRegValueSpec>;
         }
         interface DeviceGroupId extends vsanhealthService.vim.DynamicData {
            id: string;
         }
         interface FaultDomainId extends vsanhealthService.vim.DynamicData {
            id: string;
         }
         interface ReplicationGroupId extends vsanhealthService.vim.DynamicData {
            faultDomainId: vsanhealthService.vim.FaultDomainId;
            deviceGroupId: vsanhealthService.vim.DeviceGroupId;
         }
         interface ReplicationSpec extends vsanhealthService.vim.DynamicData {
            replicationGroupId: vsanhealthService.vim.ReplicationGroupId;
         }
         interface VsanClusterConfigInfoHostDefaultInfo extends vsanhealthService.vim.DynamicData {
            uuid?: string;
            autoClaimStorage?: boolean;
            checksumEnabled?: boolean;
         }
         interface VsanClusterConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            defaultConfig?: vsanhealthService.vim.VsanClusterConfigInfoHostDefaultInfo;
         }
         interface VsanHostClusterStatusStateCompletionEstimate extends vsanhealthService.vim.DynamicData {
            completeTime?: Date;
            percentComplete?: number;
         }
         interface VsanHostClusterStatusState extends vsanhealthService.vim.DynamicData {
            state: string;
            completion?: vsanhealthService.vim.VsanHostClusterStatusStateCompletionEstimate;
         }
         interface VsanHostClusterStatus extends vsanhealthService.vim.DynamicData {
            uuid?: string;
            nodeUuid?: string;
            health: string;
            nodeState: vsanhealthService.vim.VsanHostClusterStatusState;
            memberUuid?: Array<string>;
         }
         interface VsanHostConfigInfoStorageInfo extends vsanhealthService.vim.DynamicData {
            autoClaimStorage?: boolean;
            diskMapping?: Array<vsanhealthService.vim.VsanHostDiskMapping>;
            diskMapInfo?: Array<vsanhealthService.vim.VsanHostDiskMapInfo>;
            checksumEnabled?: boolean;
         }
         interface VsanHostConfigInfoClusterInfo extends vsanhealthService.vim.DynamicData {
            uuid?: string;
            nodeUuid?: string;
         }
         interface VsanHostConfigInfoNetworkInfoPortConfig extends vsanhealthService.vim.DynamicData {
            ipConfig?: vsanhealthService.vim.VsanHostIpConfig;
            device: string;
         }
         interface ArrayOfVsanHostConfigInfoNetworkInfoPortConfig {
            VsanHostConfigInfoNetworkInfoPortConfig?: Array<vsanhealthService.vim.VsanHostConfigInfoNetworkInfoPortConfig>;
         }
         interface VsanHostConfigInfoNetworkInfo extends vsanhealthService.vim.DynamicData {
            port?: Array<vsanhealthService.vim.VsanHostConfigInfoNetworkInfoPortConfig>;
         }
         interface VsanHostFaultDomainInfo extends vsanhealthService.vim.DynamicData {
            name: string;
         }
         interface VsanHostConfigInfo extends vsanhealthService.vim.DynamicData {
            enabled?: boolean;
            hostSystem?: vsanhealthService.vim.ManagedObjectReference;
            clusterInfo?: vsanhealthService.vim.VsanHostConfigInfoClusterInfo;
            storageInfo?: vsanhealthService.vim.VsanHostConfigInfoStorageInfo;
            networkInfo?: vsanhealthService.vim.VsanHostConfigInfoNetworkInfo;
            faultDomainInfo?: vsanhealthService.vim.VsanHostFaultDomainInfo;
         }
         interface ArrayOfVsanHostConfigInfo {
            VsanHostConfigInfo?: Array<vsanhealthService.vim.VsanHostConfigInfo>;
         }
         enum VsanHostDecommissionModeObjectAction {
            "noAction",
            "ensureObjectAccessibility",
            "evacuateAllData",
         }
         interface VsanHostDecommissionMode extends vsanhealthService.vim.DynamicData {
            objectAction: string;
         }
         interface VsanHostDiskMapInfo extends vsanhealthService.vim.DynamicData {
            mapping: vsanhealthService.vim.VsanHostDiskMapping;
            mounted: boolean;
         }
         interface ArrayOfVsanHostDiskMapInfo {
            VsanHostDiskMapInfo?: Array<vsanhealthService.vim.VsanHostDiskMapInfo>;
         }
         interface VsanHostDiskMapResult extends vsanhealthService.vim.DynamicData {
            mapping: vsanhealthService.vim.VsanHostDiskMapping;
            diskResult?: Array<vsanhealthService.vim.VsanHostDiskResult>;
            error?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanHostDiskMapResult {
            VsanHostDiskMapResult?: Array<vsanhealthService.vim.VsanHostDiskMapResult>;
         }
         interface VsanHostDiskMapping extends vsanhealthService.vim.DynamicData {
            ssd: vsanhealthService.vim.HostScsiDisk;
            nonSsd: Array<vsanhealthService.vim.HostScsiDisk>;
         }
         interface ArrayOfVsanHostDiskMapping {
            VsanHostDiskMapping?: Array<vsanhealthService.vim.VsanHostDiskMapping>;
         }
         enum VsanHostDiskResultState {
            "inUse",
            "eligible",
            "ineligible",
         }
         interface VsanHostDiskResult extends vsanhealthService.vim.DynamicData {
            disk: vsanhealthService.vim.HostScsiDisk;
            state: string;
            vsanUuid?: string;
            error?: vsanhealthService.vim.LocalizedMethodFault;
            degraded?: boolean;
         }
         interface ArrayOfVsanHostDiskResult {
            VsanHostDiskResult?: Array<vsanhealthService.vim.VsanHostDiskResult>;
         }
         enum VsanHostHealthState {
            "unknown",
            "healthy",
            "unhealthy",
         }
         interface VsanHostIpConfig extends vsanhealthService.vim.DynamicData {
            upstreamIpAddress: string;
            downstreamIpAddress: string;
         }
         interface VsanHostMembershipInfo extends vsanhealthService.vim.DynamicData {
            nodeUuid: string;
            hostname: string;
         }
         interface ArrayOfVsanHostMembershipInfo {
            VsanHostMembershipInfo?: Array<vsanhealthService.vim.VsanHostMembershipInfo>;
         }
         enum VsanHostNodeState {
            "error",
            "disabled",
            "agent",
            "master",
            "backup",
            "starting",
            "stopping",
            "enteringMaintenanceMode",
            "exitingMaintenanceMode",
            "decommissioning",
         }
         interface VsanHostVsanDiskInfo extends vsanhealthService.vim.DynamicData {
            vsanUuid: string;
            formatVersion: number;
         }
         enum VsanDiskIssueType {
            "nonExist",
            "stampMismatch",
            "unknown",
         }
         interface VsanHostRuntimeInfoDiskIssue extends vsanhealthService.vim.DynamicData {
            diskId: string;
            issue: string;
         }
         interface ArrayOfVsanHostRuntimeInfoDiskIssue {
            VsanHostRuntimeInfoDiskIssue?: Array<vsanhealthService.vim.VsanHostRuntimeInfoDiskIssue>;
         }
         interface VsanHostRuntimeInfo extends vsanhealthService.vim.DynamicData {
            membershipList?: Array<vsanhealthService.vim.VsanHostMembershipInfo>;
            diskIssues?: Array<vsanhealthService.vim.VsanHostRuntimeInfoDiskIssue>;
            accessGenNo?: number;
         }
         interface BaseConfigInfoBackingInfo extends vsanhealthService.vim.DynamicData {
            datastore: vsanhealthService.vim.ManagedObjectReference;
         }
         interface BaseConfigInfoFileBackingInfo extends vsanhealthService.vim.BaseConfigInfoBackingInfo {
            filePath: string;
            backingObjectId?: string;
            parent?: vsanhealthService.vim.BaseConfigInfoFileBackingInfo;
            deltaSizeInMB?: number;
         }
         enum BaseConfigInfoDiskFileBackingInfoProvisioningType {
            "thin",
            "eagerZeroedThick",
            "lazyZeroedThick",
         }
         interface BaseConfigInfoDiskFileBackingInfo extends vsanhealthService.vim.BaseConfigInfoFileBackingInfo {
            provisioningType: string;
         }
         interface BaseConfigInfoRawDiskMappingBackingInfo extends vsanhealthService.vim.BaseConfigInfoFileBackingInfo {
            lunUuid: string;
            compatibilityMode: string;
         }
         interface BaseConfigInfo extends vsanhealthService.vim.DynamicData {
            id: string;
            name: string;
            createTime: Date;
            backing: vsanhealthService.vim.BaseConfigInfoBackingInfo;
         }
         interface VslmCloneSpec extends vsanhealthService.vim.VslmMigrateSpec {
            name: string;
         }
         interface VslmCreateSpecBackingSpec extends vsanhealthService.vim.DynamicData {
            datastore: vsanhealthService.vim.ManagedObjectReference;
         }
         interface VslmCreateSpecDiskFileBackingSpec extends vsanhealthService.vim.VslmCreateSpecBackingSpec {
            provisioningType?: string;
         }
         interface VslmCreateSpecRawDiskMappingBackingSpec extends vsanhealthService.vim.VslmCreateSpecBackingSpec {
            lunUuid: string;
            compatibilityMode: string;
         }
         interface VslmCreateSpec extends vsanhealthService.vim.DynamicData {
            name: string;
            backingSpec: vsanhealthService.vim.VslmCreateSpecBackingSpec;
            capacityInMB: number;
         }
         interface ID extends vsanhealthService.vim.DynamicData {
            id: string;
         }
         interface ArrayOfID {
            ID?: Array<string>;
         }
         interface VslmMigrateSpec extends vsanhealthService.vim.DynamicData {
            backingSpec: vsanhealthService.vim.VslmCreateSpecBackingSpec;
            consolidate?: boolean;
         }
         interface VslmRelocateSpec extends vsanhealthService.vim.VslmMigrateSpec {
         }
         interface VStorageObjectStateInfo extends vsanhealthService.vim.DynamicData {
            tentative?: boolean;
         }
         interface VslmTagEntry extends vsanhealthService.vim.DynamicData {
            tagName: string;
            parentCategoryName: string;
         }
         interface ArrayOfVslmTagEntry {
            VslmTagEntry?: Array<vsanhealthService.vim.VslmTagEntry>;
         }
         enum VStorageObjectConsumptionType {
            "disk",
         }
         interface VStorageObjectConfigInfo extends vsanhealthService.vim.BaseConfigInfo {
            capacityInMB: number;
            consumptionType?: Array<string>;
            consumerId?: Array<string>;
         }
         interface VStorageObject extends vsanhealthService.vim.DynamicData {
            config: vsanhealthService.vim.VStorageObjectConfigInfo;
         }
         interface DynamicArray {
            val: Array<any>;
         }
         interface DynamicData {
         }
         interface ArrayOfDynamicData {
            DynamicData?: Array<vsanhealthService.vim.DynamicData>;
         }
         interface DynamicProperty {
            name: string;
            val: any;
         }
         interface ArrayOfDynamicProperty {
            DynamicProperty?: Array<vsanhealthService.vim.DynamicProperty>;
         }
         interface KeyAnyValue extends vsanhealthService.vim.DynamicData {
            key: string;
            value: any;
         }
         interface ArrayOfKeyAnyValue {
            KeyAnyValue?: Array<vsanhealthService.vim.KeyAnyValue>;
         }
         interface LocalizableMessage extends vsanhealthService.vim.DynamicData {
            key: string;
            arg?: Array<vsanhealthService.vim.KeyAnyValue>;
            message?: string;
         }
         interface ArrayOfLocalizableMessage {
            LocalizableMessage?: Array<vsanhealthService.vim.LocalizableMessage>;
         }
         interface LocalizedMethodFault extends vsanhealthService.vim.DynamicData {
            fault: vsanhealthService.vim.MethodFault;
            localizedMessage?: string;
         }
         interface MethodFault {
            faultCause?: vsanhealthService.vim.LocalizedMethodFault;
            faultMessage?: Array<vsanhealthService.vim.LocalizableMessage>;
         }
         interface ArrayOfMethodFault {
            MethodFault?: Array<vsanhealthService.vim.MethodFault>;
         }
         interface RuntimeFault extends vsanhealthService.vim.MethodFault {
         }
         interface HostCommunication extends vsanhealthService.vim.RuntimeFault {
         }
         interface HostNotConnected extends vsanhealthService.vim.HostCommunication {
         }
         interface HostNotReachable extends vsanhealthService.vim.HostCommunication {
         }
         interface InvalidArgument extends vsanhealthService.vim.RuntimeFault {
            invalidProperty?: string;
         }
         interface InvalidRequest extends vsanhealthService.vim.RuntimeFault {
         }
         interface InvalidType extends vsanhealthService.vim.InvalidRequest {
            argument?: string;
         }
         interface ManagedObjectNotFound extends vsanhealthService.vim.RuntimeFault {
            obj: vsanhealthService.vim.ManagedObjectReference;
         }
         interface MethodNotFound extends vsanhealthService.vim.InvalidRequest {
            receiver: vsanhealthService.vim.ManagedObjectReference;
            method: string;
         }
         interface NotEnoughLicenses extends vsanhealthService.vim.RuntimeFault {
         }
         interface NotImplemented extends vsanhealthService.vim.RuntimeFault {
         }
         interface NotSupported extends vsanhealthService.vim.RuntimeFault {
         }
         interface RequestCanceled extends vsanhealthService.vim.RuntimeFault {
         }
         interface SecurityError extends vsanhealthService.vim.RuntimeFault {
         }
         interface SystemError extends vsanhealthService.vim.RuntimeFault {
            reason: string;
         }
         interface UnexpectedFault extends vsanhealthService.vim.RuntimeFault {
            faultName: string;
            fault?: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface InvalidCollectorVersion extends vsanhealthService.vim.MethodFault {
         }
         interface InvalidProperty extends vsanhealthService.vim.MethodFault {
            name: string;
         }
         interface PropertyFilterSpec extends vsanhealthService.vim.DynamicData {
            propSet: Array<vsanhealthService.vim.PropertySpec>;
            objectSet: Array<vsanhealthService.vim.ObjectSpec>;
            reportMissingObjectsInResults?: boolean;
         }
         interface ArrayOfPropertyFilterSpec {
            PropertyFilterSpec?: Array<vsanhealthService.vim.PropertyFilterSpec>;
         }
         interface PropertySpec extends vsanhealthService.vim.DynamicData {
            type: string;
            all?: boolean;
            pathSet?: Array<string>;
         }
         interface ArrayOfPropertySpec {
            PropertySpec?: Array<vsanhealthService.vim.PropertySpec>;
         }
         interface ObjectSpec extends vsanhealthService.vim.DynamicData {
            obj: vsanhealthService.vim.ManagedObjectReference;
            skip?: boolean;
            selectSet?: Array<vsanhealthService.vim.SelectionSpec>;
         }
         interface ArrayOfObjectSpec {
            ObjectSpec?: Array<vsanhealthService.vim.ObjectSpec>;
         }
         interface SelectionSpec extends vsanhealthService.vim.DynamicData {
            name?: string;
         }
         interface ArrayOfSelectionSpec {
            SelectionSpec?: Array<vsanhealthService.vim.SelectionSpec>;
         }
         interface TraversalSpec extends vsanhealthService.vim.SelectionSpec {
            type: string;
            path: string;
            skip?: boolean;
            selectSet?: Array<vsanhealthService.vim.SelectionSpec>;
         }
         interface ObjectContent extends vsanhealthService.vim.DynamicData {
            obj: vsanhealthService.vim.ManagedObjectReference;
            propSet?: Array<vsanhealthService.vim.DynamicProperty>;
            missingSet?: Array<vsanhealthService.vim.MissingProperty>;
         }
         interface ArrayOfObjectContent {
            ObjectContent?: Array<vsanhealthService.vim.ObjectContent>;
         }
         interface UpdateSet extends vsanhealthService.vim.DynamicData {
            version: string;
            filterSet?: Array<vsanhealthService.vim.PropertyFilterUpdate>;
            truncated?: boolean;
         }
         interface PropertyFilterUpdate extends vsanhealthService.vim.DynamicData {
            filter: vsanhealthService.vim.ManagedObjectReference;
            objectSet?: Array<vsanhealthService.vim.ObjectUpdate>;
            missingSet?: Array<vsanhealthService.vim.MissingObject>;
         }
         interface ArrayOfPropertyFilterUpdate {
            PropertyFilterUpdate?: Array<vsanhealthService.vim.PropertyFilterUpdate>;
         }
         enum ObjectUpdateKind {
            "modify",
            "enter",
            "leave",
         }
         interface ObjectUpdate extends vsanhealthService.vim.DynamicData {
            kind: vsanhealthService.vim.ObjectUpdateKind;
            obj: vsanhealthService.vim.ManagedObjectReference;
            changeSet?: Array<vsanhealthService.vim.PropertyChange>;
            missingSet?: Array<vsanhealthService.vim.MissingProperty>;
         }
         interface ArrayOfObjectUpdate {
            ObjectUpdate?: Array<vsanhealthService.vim.ObjectUpdate>;
         }
         enum PropertyChangeOp {
            "add",
            "remove",
            "assign",
            "indirectRemove",
         }
         interface PropertyChange extends vsanhealthService.vim.DynamicData {
            name: string;
            op: vsanhealthService.vim.PropertyChangeOp;
            val?: any;
         }
         interface ArrayOfPropertyChange {
            PropertyChange?: Array<vsanhealthService.vim.PropertyChange>;
         }
         interface MissingProperty extends vsanhealthService.vim.DynamicData {
            path: string;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfMissingProperty {
            MissingProperty?: Array<vsanhealthService.vim.MissingProperty>;
         }
         interface MissingObject extends vsanhealthService.vim.DynamicData {
            obj: vsanhealthService.vim.ManagedObjectReference;
            fault: vsanhealthService.vim.LocalizedMethodFault;
         }
         interface ArrayOfMissingObject {
            MissingObject?: Array<vsanhealthService.vim.MissingObject>;
         }
         interface WaitOptions extends vsanhealthService.vim.DynamicData {
            maxWaitSeconds?: number;
            maxObjectUpdates?: number;
         }
         interface RetrieveOptions extends vsanhealthService.vim.DynamicData {
            maxObjects?: number;
         }
         interface RetrieveResult extends vsanhealthService.vim.DynamicData {
            token?: string;
            objects: Array<vsanhealthService.vim.ObjectContent>;
         }
         interface ManagedObjectReference extends vsanhealthService.xs.String {
            type: string;
            value: string;
         }
         interface ArrayOfString {
            string?: Array<string>;
         }
         interface ArrayOfAnyType {
            anyType?: Array<any>;
         }
         interface ArrayOfAnyURI {
            anyURI?: Array<string>;
         }
         interface ArrayOfManagedObjectReference {
            ManagedObjectReference?: Array<vsanhealthService.vim.ManagedObjectReference>;
         }
         interface ArrayOfBoolean {
            boolean?: Array<boolean>;
         }
         interface ArrayOfByte {
            byte?: Array<number>;
         }
         interface ArrayOfDouble {
            double?: Array<number>;
         }
         interface ArrayOfInt {
            int?: Array<number>;
         }
         interface ArrayOfLong {
            long?: Array<number>;
         }
         interface ArrayOfShort {
            short?: Array<number>;
         }
      }
      interface vsanhealthPort {
         performVsanUpgradeEx(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, performObjectUpgrade: boolean, downgradeFormat: boolean, allowReducedRedundancy: boolean, excludeHosts: Array<vsanhealthService.vim.ManagedObjectReference>, spec: vsanhealthService.vim.VsanDiskFormatConversionSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryUpgradeStatusEx(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanUpgradeStatusEx>;
         retrieveSupportedVsanFormatVersion(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         performVsanUpgradePreflightCheckEx(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, downgradeFormat: boolean, spec: vsanhealthService.vim.VsanDiskFormatConversionSpec): Promise<vsanhealthService.vim.VsanDiskFormatConversionCheckResult>;
         performVsanUpgradePreflightAsyncCheckTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, downgradeFormat: boolean, spec: vsanhealthService.vim.VsanDiskFormatConversionSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryClusterPhysicalDiskHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<Array<vsanhealthService.vim.VsanPhysicalDiskHealthSummary>>;
         vsanQueryClusterNetworkPerfTest(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, multicast: boolean): Promise<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>;
         vsanQueryClusterAdvCfgSync(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<Array<vsanhealthService.vim.VsanClusterAdvCfgSyncResult>>;
         vsanRepairClusterImmediateObjects(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, uuids: Array<string>): Promise<vsanhealthService.vim.VsanClusterHealthSystemObjectsRepairResult>;
         vsanQueryVerifyClusterNetworkSettings(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterNetworkHealthResult>;
         vsanQueryClusterCreateVmHealthTest(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, timeout: number): Promise<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>;
         vsanQueryClusterHealthSystemVersions(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterHealthSystemVersionResult>;
         vsanClusterGetHclInfo(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterHclInfo>;
         vsanQueryClusterCheckLimits(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterLimitHealthResult>;
         vsanQueryClusterCaptureVsanPcap(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string, duration: number, vmknic: Array<vsanhealthService.vim.VsanClusterHostVmknicMapping>, includeRawPcap: boolean, includeIgmp: boolean, cmmdsMsgTypeFilter: Array<string>, cmmdsPorts: Array<number>, clusterUuid: string): Promise<vsanhealthService.vim.VsanVsanClusterPcapResult>;
         vsanCheckClusterClomdLiveness(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<string>, esxRootPassword: string): Promise<vsanhealthService.vim.VsanClusterClomdLivenessResult>;
         vsanVitRemoveIscsiInitiatorsFromTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitRemoveIscsiInitiatorsFromGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitEditIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunSpec: vsanhealthService.vim.VsanIscsiLUNSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitGetIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunId: number): Promise<vsanhealthService.vim.VsanIscsiLUN>;
         vsanVitEditIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetSpec: vsanhealthService.vim.VsanIscsiTargetSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitAddIscsiInitiatorsToGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitAddIscsiInitiatorsToTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, initiatorNames: Array<string>): Promise<void>;
         vsanVitQueryIscsiTargetServiceVersion(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         vsanVitAddIscsiTargetToGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, targetAlias: string): Promise<void>;
         vsanVitRemoveIscsiTargetFromGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string, targetAlias: string): Promise<void>;
         vsanVitGetIscsiLUNs(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAliases: Array<string>): Promise<Array<vsanhealthService.vim.VsanIscsiLUN>>;
         vsanVitRemoveIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunId: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitGetIscsiInitiatorGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string): Promise<vsanhealthService.vim.VsanIscsiInitiatorGroup>;
         vsanVitRemoveIscsiInitiatorGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string): Promise<void>;
         vsanVitGetHomeObject(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanObjectInformation>;
         vsanVitGetIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string): Promise<vsanhealthService.vim.VsanIscsiTarget>;
         vsanVitRemoveIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitAddIscsiLUN(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetAlias: string, lunSpec: vsanhealthService.vim.VsanIscsiLUNSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitGetIscsiInitiatorGroups(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanIscsiInitiatorGroup>>;
         vsanVitGetIscsiTargets(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanIscsiTarget>>;
         vsanVitAddIscsiTarget(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetSpec: vsanhealthService.vim.VsanIscsiTargetSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVitAddIscsiInitiatorGroup(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, initiatorGroupName: string): Promise<void>;
         vosSetVsanObjectPolicy(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanObjectUuid: string, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<boolean>;
         vsanQueryObjectIdentities(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, objUuids: Array<string>, objTypes: Array<string>, includeHealth: boolean, includeObjIdentity: boolean, includeSpaceSummary: boolean): Promise<vsanhealthService.vim.VsanObjectIdentityAndHealth>;
         vosQueryVsanObjectInformation(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanObjectQuerySpecs: Array<vsanhealthService.vim.VsanObjectQuerySpec>): Promise<Array<vsanhealthService.vim.VsanObjectInformation>>;
         vsanPerfSetStatsObjectPolicy(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<boolean>;
         vsanPerfDeleteStatsObject(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         vsanPerfCreateStatsObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanPerfDeleteStatsObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanPerfQueryClusterHealth(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.DynamicData>>;
         vsanPerfQueryStatsObjectInformation(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanObjectInformation>;
         vsanPerfQueryNodeInformation(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanPerfNodeInformation>>;
         vsanPerfQueryPerf(_this: vsanhealthService.vim.ManagedObjectReference, querySpecs: Array<vsanhealthService.vim.VsanPerfQuerySpec>, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanPerfEntityMetricCSV>>;
         vsanPerfGetSupportedEntityTypes(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanPerfEntityType>>;
         vsanPerfCreateStatsObject(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.VirtualMachineProfileSpec): Promise<string>;
         vsanQuerySpaceUsage(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanSpaceUsage>;
         vsanClusterGetConfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanConfigInfoEx>;
         vsanClusterReconfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanReconfigSpec: vsanhealthService.vim.VimVsanReconfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryVcClusterCreateVmHealthHistoryTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number): Promise<Array<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>>;
         vsanHealthSetLogLevel(_this: vsanhealthService.vim.ManagedObjectReference, level: string): Promise<void>;
         vsanHealthTestVsanClusterTelemetryProxy(_this: vsanhealthService.vim.ManagedObjectReference, proxyConfig: vsanhealthService.vim.VsanClusterTelemetryProxyConfig): Promise<boolean>;
         vsanVcUploadHclDb(_this: vsanhealthService.vim.ManagedObjectReference, db: string): Promise<boolean>;
         vsanVcUpdateHclDbFromWeb(_this: vsanhealthService.vim.ManagedObjectReference, url: string): Promise<boolean>;
         vsanHealthRepairClusterObjectsImmediate(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryVcClusterNetworkPerfTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, multicast: boolean): Promise<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>;
         vsanQueryVcClusterVmdkLoadHistoryTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number, taskId: string): Promise<Array<vsanhealthService.vim.VsanClusterVmdkLoadTestResult>>;
         vsanHealthQueryVsanClusterHealthCheckInterval(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         vsanQueryVcClusterCreateVmHealthTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, timeout: number): Promise<vsanhealthService.vim.VsanClusterCreateVmHealthTestResult>;
         vsanVcClusterGetHclInfo(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, includeHostsResult: boolean): Promise<vsanhealthService.vim.VsanClusterHclInfo>;
         vsanQueryAttachToSrHistory(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number, taskId: string): Promise<Array<vsanhealthService.vim.VsanAttachToSrOperation>>;
         vsanRebalanceCluster(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanVcClusterRunVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, runname: string, durationSec: number, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>, action: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanHealthSendVsanTelemetry(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         vsanQueryVcClusterNetworkPerfHistoryTest(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, count: number): Promise<Array<vsanhealthService.vim.VsanClusterNetworkLoadTestResult>>;
         vsanQueryVcClusterHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vmCreateTimeout: number, objUuids: Array<string>, includeObjUuids: boolean, fields: Array<string>, fetchFromCache: boolean): Promise<vsanhealthService.vim.VsanClusterHealthSummary>;
         vsanStopRebalanceCluster(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanHealthQueryVsanClusterHealthConfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanClusterHealthConfigs>;
         vsanAttachVsanSupportBundleToSr(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, srNumber: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanQueryVcClusterVmdkWorkloadTypes(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VsanStorageWorkloadType>>;
         vsanVcClusterQueryVerifyHealthSystemVersions(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanClusterHealthSystemVersionResult>;
         vsanHealthSetVsanClusterTelemetryConfig(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanClusterHealthConfig: vsanhealthService.vim.VsanClusterHealthConfigs): Promise<void>;
         vsanHealthIsRebalanceRunning(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, targetHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<boolean>;
         vsanHealthSetVsanClusterHealthCheckInterval(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, vsanClusterHealthCheckInterval: number): Promise<void>;
         initializeDiskMappings(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VimVsanHostDiskMappingCreationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveAllFlashCapabilities(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VimVsanHostVsanHostCapability>>;
         queryDiskMappings(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VimVsanHostDiskMapInfoEx>>;
         vSANVcIsWitnessHost(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         vSANVcSetPreferredFaultDomain(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, preferredFd: string, witnessHost: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vSANVcGetPreferredFaultDomain(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VimClusterVSANPreferredFaultDomainInfo>;
         vSANIsWitnessVirtualAppliance(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.VsanHostVirtualApplianceInfo>>;
         vSANVcGetWitnessHosts(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VimClusterVSANWitnessHostInfo>>;
         vSANVcRetrieveStretchedClusterVcCapability(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, verifyAllConnected: boolean): Promise<Array<vsanhealthService.vim.VimClusterVSANStretchedClusterCapability>>;
         vSANVcConvertToStretchedCluster(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, faultDomainConfig: vsanhealthService.vim.VimClusterVSANStretchedClusterFaultDomainConfig, witnessHost: vsanhealthService.vim.ManagedObjectReference, preferredFd: string, diskMapping: vsanhealthService.vim.VsanHostDiskMapping): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vSANVcRemoveWitnessHost(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, witnessHost: vsanhealthService.vim.ManagedObjectReference, witnessAddress: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         vsanHostQueryAdvCfg(_this: vsanhealthService.vim.ManagedObjectReference, options: Array<string>): Promise<Array<vsanhealthService.vim.OptionValue>>;
         vsanHostQueryPhysicalDiskHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanPhysicalDiskHealthSummary>;
         vsanStartProactiveRebalance(_this: vsanhealthService.vim.ManagedObjectReference, timeSpan: number, varianceThreshold: number, timeThreshold: number, rateThreshold: number): Promise<boolean>;
         vsanHostQueryHostInfoByUuids(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<Array<vsanhealthService.vim.VsanQueryResultHostInfo>>;
         vsanHostQueryHealthSystemVersion(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         vsanHostQueryVerifyNetworkSettings(_this: vsanhealthService.vim.ManagedObjectReference, peers: Array<string>, ROBOStretchedClusterWitnesses: Array<string>): Promise<vsanhealthService.vim.VsanNetworkHealthResult>;
         vsanHostQueryRunIperfClient(_this: vsanhealthService.vim.ManagedObjectReference, multicast: boolean, serverIp: string): Promise<vsanhealthService.vim.VsanNetworkLoadTestResult>;
         vsanHostRunVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, runname: string, durationSec: number, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>): Promise<Array<vsanhealthService.vim.VsanVmdkLoadTestResult>>;
         vsanHostQueryObjectHealthSummary(_this: vsanhealthService.vim.ManagedObjectReference, objUuids: Array<string>, includeObjUuids: boolean, localHostOnly: boolean): Promise<vsanhealthService.vim.VsanObjectOverallHealth>;
         vsanGetHclInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanHostHclInfo>;
         vsanHostCleanupVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, runname: string, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>): Promise<string>;
         vsanWaitForVsanHealthGenerationIdChange(_this: vsanhealthService.vim.ManagedObjectReference, timeout: number): Promise<boolean>;
         vsanStopProactiveRebalance(_this: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         vsanHostRepairImmediateObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, repairType: string): Promise<vsanhealthService.vim.VsanRepairObjectsResult>;
         vsanHostPrepareVmdkLoadTest(_this: vsanhealthService.vim.ManagedObjectReference, runname: string, specs: Array<vsanhealthService.vim.VsanVmdkLoadTestSpec>): Promise<string>;
         vsanHostQueryRunIperfServer(_this: vsanhealthService.vim.ManagedObjectReference, multicast: boolean, serverIp: string): Promise<vsanhealthService.vim.VsanNetworkLoadTestResult>;
         vsanHostQueryCheckLimits(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanLimitHealthResult>;
         vsanGetProactiveRebalanceInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanProactiveRebalanceInfoEx>;
         vsanHostClomdLiveness(_this: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         addAuthorizationRole(_this: vsanhealthService.vim.ManagedObjectReference, name: string, privIds: Array<string>): Promise<number>;
         removeAuthorizationRole(_this: vsanhealthService.vim.ManagedObjectReference, roleId: number, failIfUsed: boolean): Promise<void>;
         updateAuthorizationRole(_this: vsanhealthService.vim.ManagedObjectReference, roleId: number, newName: string, privIds: Array<string>): Promise<void>;
         mergePermissions(_this: vsanhealthService.vim.ManagedObjectReference, srcRoleId: number, dstRoleId: number): Promise<void>;
         retrieveRolePermissions(_this: vsanhealthService.vim.ManagedObjectReference, roleId: number): Promise<Array<vsanhealthService.vim.Permission>>;
         retrieveEntityPermissions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, inherited: boolean): Promise<Array<vsanhealthService.vim.Permission>>;
         retrieveAllPermissions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.Permission>>;
         setEntityPermissions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, permission: Array<vsanhealthService.vim.Permission>): Promise<void>;
         resetEntityPermissions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, permission: Array<vsanhealthService.vim.Permission>): Promise<void>;
         removeEntityPermission(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, user: string, isGroup: boolean): Promise<void>;
         hasPrivilegeOnEntity(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, sessionId: string, privId: Array<string>): Promise<Array<boolean>>;
         hasPrivilegeOnEntities(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>, sessionId: string, privId: Array<string>): Promise<Array<vsanhealthService.vim.EntityPrivilege>>;
         hasUserPrivilegeOnEntities(_this: vsanhealthService.vim.ManagedObjectReference, entities: Array<vsanhealthService.vim.ManagedObjectReference>, userName: string, privId: Array<string>): Promise<Array<vsanhealthService.vim.EntityPrivilege>>;
         fetchUserPrivilegeOnEntities(_this: vsanhealthService.vim.ManagedObjectReference, entities: Array<vsanhealthService.vim.ManagedObjectReference>, userName: string): Promise<Array<vsanhealthService.vim.UserPrivilegeResult>>;
         certMgrRefreshCACertificatesAndCRLsTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         certMgrRefreshCertificatesTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         certMgrRevokeCertificatesTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         reconfigureClusterTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ClusterConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         applyRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<void>;
         cancelRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<void>;
         recommendHostsForVm(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ClusterHostRecommendation>>;
         addHostTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostConnectSpec, asConnected: boolean, resourcePool: vsanhealthService.vim.ManagedObjectReference, license: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveIntoTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveHostIntoTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, resourcePool: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshRecommendation(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         evcManager(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveDasAdvancedRuntimeInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ClusterDasAdvancedRuntimeInfo>;
         clusterEnterMaintenanceMode(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>, option: Array<vsanhealthService.vim.OptionValue>): Promise<vsanhealthService.vim.ClusterEnterMaintenanceResult>;
         placeVm(_this: vsanhealthService.vim.ManagedObjectReference, placementSpec: vsanhealthService.vim.PlacementSpec): Promise<vsanhealthService.vim.PlacementResult>;
         findRulesForVm(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ClusterRuleInfo>>;
         stampAllRulesWithUuidTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getResourceUsage(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ClusterResourceUsageSummary>;
         reconfigureComputeResourceTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ComputeResourceConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addCustomFieldDef(_this: vsanhealthService.vim.ManagedObjectReference, name: string, moType: string, fieldDefPolicy: vsanhealthService.vim.PrivilegePolicyDef, fieldPolicy: vsanhealthService.vim.PrivilegePolicyDef): Promise<vsanhealthService.vim.CustomFieldDef>;
         removeCustomFieldDef(_this: vsanhealthService.vim.ManagedObjectReference, key: number): Promise<void>;
         renameCustomFieldDef(_this: vsanhealthService.vim.ManagedObjectReference, key: number, name: string): Promise<void>;
         setField(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, key: number, value: string): Promise<void>;
         doesCustomizationSpecExist(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<boolean>;
         getCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.CustomizationSpecItem>;
         createCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, item: vsanhealthService.vim.CustomizationSpecItem): Promise<void>;
         overwriteCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, item: vsanhealthService.vim.CustomizationSpecItem): Promise<void>;
         deleteCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<void>;
         duplicateCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string, newName: string): Promise<void>;
         renameCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, name: string, newName: string): Promise<void>;
         customizationSpecItemToXml(_this: vsanhealthService.vim.ManagedObjectReference, item: vsanhealthService.vim.CustomizationSpecItem): Promise<string>;
         xmlToCustomizationSpecItem(_this: vsanhealthService.vim.ManagedObjectReference, specItemXml: string): Promise<vsanhealthService.vim.CustomizationSpecItem>;
         checkCustomizationResources(_this: vsanhealthService.vim.ManagedObjectReference, guestOs: string): Promise<void>;
         queryConnectionInfo(_this: vsanhealthService.vim.ManagedObjectReference, hostname: string, port: number, username: string, password: string, sslThumbprint: string): Promise<vsanhealthService.vim.HostConnectInfo>;
         queryConnectionInfoViaSpec(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostConnectSpec): Promise<vsanhealthService.vim.HostConnectInfo>;
         powerOnMultiVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: Array<vsanhealthService.vim.ManagedObjectReference>, option: Array<vsanhealthService.vim.OptionValue>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryDatacenterConfigOptionDescriptor(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VirtualMachineConfigOptionDescriptor>>;
         reconfigureDatacenterTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DatacenterConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshDatastore(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         refreshDatastoreStorageInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateVirtualMachineFilesTask(_this: vsanhealthService.vim.ManagedObjectReference, mountPathDatastoreMapping: Array<vsanhealthService.vim.DatastoreMountPathDatastorePair>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         renameDatastore(_this: vsanhealthService.vim.ManagedObjectReference, newName: string): Promise<void>;
         destroyDatastore(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         datastoreEnterMaintenanceMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.StoragePlacementResult>;
         datastoreExitMaintenanceModeTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateVVolVirtualMachineFilesTask(_this: vsanhealthService.vim.ManagedObjectReference, failoverPair: Array<vsanhealthService.vim.DatastoreVVolContainerFailoverPair>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDirectory(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, displayName: string, policy: string): Promise<string>;
         deleteDirectory(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, datastorePath: string): Promise<void>;
         convertNamespacePathToUuidPath(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, namespaceUrl: string): Promise<string>;
         queryDescriptions(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.DiagnosticManagerLogDescriptor>>;
         browseDiagnosticLog(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, key: string, start: number, lines: number): Promise<vsanhealthService.vim.DiagnosticManagerLogHeader>;
         generateLogBundlesTask(_this: vsanhealthService.vim.ManagedObjectReference, includeDefault: boolean, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         fetchDVPortKeys(_this: vsanhealthService.vim.ManagedObjectReference, criteria: vsanhealthService.vim.DistributedVirtualSwitchPortCriteria): Promise<Array<string>>;
         fetchDVPorts(_this: vsanhealthService.vim.ManagedObjectReference, criteria: vsanhealthService.vim.DistributedVirtualSwitchPortCriteria): Promise<Array<vsanhealthService.vim.DistributedVirtualPort>>;
         queryUsedVlanIdInDvs(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<number>>;
         reconfigureDvsTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVSConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         performDvsProductSpecOperationTask(_this: vsanhealthService.vim.ManagedObjectReference, operation: string, productSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         mergeDvsTask(_this: vsanhealthService.vim.ManagedObjectReference, dvs: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addDVPortgroupTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: Array<vsanhealthService.vim.DVPortgroupConfigSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveDVPortTask(_this: vsanhealthService.vim.ManagedObjectReference, portKey: Array<string>, destinationPortgroupKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDvsCapability(_this: vsanhealthService.vim.ManagedObjectReference, capability: vsanhealthService.vim.DVSCapability): Promise<void>;
         reconfigureDVPortTask(_this: vsanhealthService.vim.ManagedObjectReference, port: Array<vsanhealthService.vim.DVPortConfigSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshDVPortState(_this: vsanhealthService.vim.ManagedObjectReference, portKeys: Array<string>): Promise<void>;
         rectifyDvsHostTask(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateNetworkResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: Array<vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec>): Promise<void>;
         addNetworkResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: Array<vsanhealthService.vim.DVSNetworkResourcePoolConfigSpec>): Promise<void>;
         removeNetworkResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, key: Array<string>): Promise<void>;
         dvsReconfigureVmVnicNetworkResourcePoolTask(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: Array<vsanhealthService.vim.DvsVmVnicResourcePoolConfigSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enableNetworkResourceManagement(_this: vsanhealthService.vim.ManagedObjectReference, enable: boolean): Promise<void>;
         dVSRollbackTask(_this: vsanhealthService.vim.ManagedObjectReference, entityBackup: vsanhealthService.vim.EntityBackupConfig): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDVPortgroupTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVPortgroupConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDVSHealthCheckConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, healthCheckConfig: Array<vsanhealthService.vim.DVSHealthCheckConfig>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         lookupDvPortGroup(_this: vsanhealthService.vim.ManagedObjectReference, portgroupKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryConfigOptionDescriptor(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VirtualMachineConfigOptionDescriptor>>;
         queryConfigOption(_this: vsanhealthService.vim.ManagedObjectReference, key: string, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VirtualMachineConfigOption>;
         queryConfigOptionEx(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.EnvironmentBrowserConfigOptionQuerySpec): Promise<vsanhealthService.vim.VirtualMachineConfigOption>;
         queryConfigTarget(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ConfigTarget>;
         queryTargetCapabilities(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostCapability>;
         setCustomValue(_this: vsanhealthService.vim.ManagedObjectReference, key: string, value: string): Promise<void>;
         unregisterExtension(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string): Promise<void>;
         findExtension(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string): Promise<vsanhealthService.vim.Extension>;
         registerExtension(_this: vsanhealthService.vim.ManagedObjectReference, extension: vsanhealthService.vim.Extension): Promise<void>;
         updateExtension(_this: vsanhealthService.vim.ManagedObjectReference, extension: vsanhealthService.vim.Extension): Promise<void>;
         getPublicKey(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         setPublicKey(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, publicKey: string): Promise<void>;
         setExtensionCertificate(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, certificatePem: string): Promise<void>;
         queryManagedBy(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         queryExtensionIpAllocationUsage(_this: vsanhealthService.vim.ManagedObjectReference, extensionKeys: Array<string>): Promise<Array<vsanhealthService.vim.ExtensionManagerIpAllocationUsage>>;
         moveDatastoreFileTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destinationName: string, destinationDatacenter: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         copyDatastoreFileTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destinationName: string, destinationDatacenter: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteDatastoreFileTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         makeDirectory(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, createParentDirectories: boolean): Promise<void>;
         changeOwner(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, owner: string): Promise<void>;
         createFolder(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveIntoFolderTask(_this: vsanhealthService.vim.ManagedObjectReference, list: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createVMTask(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.VirtualMachineConfigSpec, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerVMTask(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string, asTemplate: boolean, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createCluster(_this: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.ClusterConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createClusterEx(_this: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.ClusterConfigSpecEx): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addStandaloneHostTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostConnectSpec, compResSpec: vsanhealthService.vim.ComputeResourceConfigSpec, addConnected: boolean, license: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDatacenter(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unregisterAndDestroyTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createDVSTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVSCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createStoragePod(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerHealthUpdateProvider(_this: vsanhealthService.vim.ManagedObjectReference, name: string, healthUpdateInfo: Array<vsanhealthService.vim.HealthUpdateInfo>): Promise<string>;
         unregisterHealthUpdateProvider(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<void>;
         queryProviderList(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         hasProvider(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<boolean>;
         queryProviderName(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<string>;
         queryHealthUpdateInfos(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<vsanhealthService.vim.HealthUpdateInfo>>;
         addMonitoredEntities(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         removeMonitoredEntities(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         queryMonitoredEntities(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         hasMonitoredEntity(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, entity: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         queryUnmonitoredHosts(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         postHealthUpdates(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, updates: Array<vsanhealthService.vim.HealthUpdate>): Promise<void>;
         queryHealthUpdates(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<vsanhealthService.vim.HealthUpdate>>;
         addFilter(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string, filterName: string, infoIds: Array<string>): Promise<string>;
         queryFilterList(_this: vsanhealthService.vim.ManagedObjectReference, providerId: string): Promise<Array<string>>;
         queryFilterName(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<string>;
         queryFilterInfoIds(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<Array<string>>;
         queryFilterEntities(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         addFilterEntities(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         removeFilterEntities(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, entities: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         removeFilter(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string): Promise<void>;
         setCollectorPageSize(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<void>;
         rewindCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         destroyCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryTpmAttestationReport(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostTpmAttestationReport>;
         queryHostConnectionInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostConnectInfo>;
         updateSystemResources(_this: vsanhealthService.vim.ManagedObjectReference, resourceInfo: vsanhealthService.vim.HostSystemResourceInfo): Promise<void>;
         updateSystemSwapConfiguration(_this: vsanhealthService.vim.ManagedObjectReference, sysSwapConfig: vsanhealthService.vim.HostSystemSwapConfiguration): Promise<void>;
         reconnectHostTask(_this: vsanhealthService.vim.ManagedObjectReference, cnxSpec: vsanhealthService.vim.HostConnectSpec, reconnectSpec: vsanhealthService.vim.HostSystemReconnectSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         disconnectHostTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enterMaintenanceModeTask(_this: vsanhealthService.vim.ManagedObjectReference, timeout: number, evacuatePoweredOffVms: boolean, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exitMaintenanceModeTask(_this: vsanhealthService.vim.ManagedObjectReference, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         rebootHostTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         shutdownHostTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerDownHostToStandByTask(_this: vsanhealthService.vim.ManagedObjectReference, timeoutSec: number, evacuatePoweredOffVms: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerUpHostFromStandByTask(_this: vsanhealthService.vim.ManagedObjectReference, timeoutSec: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryMemoryOverhead(_this: vsanhealthService.vim.ManagedObjectReference, memorySize: number, videoRamSize: number, numVcpus: number): Promise<number>;
         queryMemoryOverheadEx(_this: vsanhealthService.vim.ManagedObjectReference, vmConfigInfo: vsanhealthService.vim.VirtualMachineConfigInfo): Promise<number>;
         reconfigureHostForDASTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateFlags(_this: vsanhealthService.vim.ManagedObjectReference, flagInfo: vsanhealthService.vim.HostFlagInfo): Promise<void>;
         enterLockdownMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         exitLockdownMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         acquireCimServicesTicket(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostServiceTicket>;
         updateIpmi(_this: vsanhealthService.vim.ManagedObjectReference, ipmiInfo: vsanhealthService.vim.HostIpmiInfo): Promise<void>;
         retrieveHardwareUptime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         prepareCrypto(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         enableCrypto(_this: vsanhealthService.vim.ManagedObjectReference, keyPlain: vsanhealthService.vim.CryptoKeyPlain): Promise<void>;
         configureCryptoKey(_this: vsanhealthService.vim.ManagedObjectReference, keyId: vsanhealthService.vim.CryptoKeyId): Promise<void>;
         httpNfcLeaseGetManifest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HttpNfcLeaseManifestEntry>>;
         httpNfcLeaseComplete(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         httpNfcLeaseAbort(_this: vsanhealthService.vim.ManagedObjectReference, fault: vsanhealthService.vim.LocalizedMethodFault): Promise<void>;
         httpNfcLeaseProgress(_this: vsanhealthService.vim.ManagedObjectReference, percent: number): Promise<void>;
         installIoFilterTask(_this: vsanhealthService.vim.ManagedObjectReference, vibUrl: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         uninstallIoFilterTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         upgradeIoFilterTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference, vibUrl: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryIoFilterIssues(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.IoFilterQueryIssueResult>;
         queryIoFilterInfo(_this: vsanhealthService.vim.ManagedObjectReference, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ClusterIoFilterInfo>>;
         resolveInstallationErrorsOnHostTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         resolveInstallationErrorsOnClusterTask(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryDisksUsingFilter(_this: vsanhealthService.vim.ManagedObjectReference, filterId: string, compRes: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VirtualDiskId>>;
         queryIpPools(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.IpPool>>;
         createIpPool(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.IpPool): Promise<number>;
         updateIpPool(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.IpPool): Promise<void>;
         destroyIpPool(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, id: number, force: boolean): Promise<void>;
         allocateIpv4Address(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, allocationId: string): Promise<string>;
         allocateIpv6Address(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, allocationId: string): Promise<string>;
         releaseIpAllocation(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, allocationId: string): Promise<void>;
         queryIPAllocations(_this: vsanhealthService.vim.ManagedObjectReference, dc: vsanhealthService.vim.ManagedObjectReference, poolId: number, extensionKey: string): Promise<Array<vsanhealthService.vim.IpPoolManagerIpAllocation>>;
         updateAssignedLicense(_this: vsanhealthService.vim.ManagedObjectReference, entity: string, licenseKey: string, entityDisplayName: string): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         removeAssignedLicense(_this: vsanhealthService.vim.ManagedObjectReference, entityId: string): Promise<void>;
         queryAssignedLicenses(_this: vsanhealthService.vim.ManagedObjectReference, entityId: string): Promise<Array<vsanhealthService.vim.LicenseAssignmentManagerLicenseAssignment>>;
         querySupportedFeatures(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.LicenseFeatureInfo>>;
         queryLicenseSourceAvailability(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.LicenseAvailabilityInfo>>;
         queryLicenseUsage(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.LicenseUsageInfo>;
         setLicenseEdition(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<void>;
         checkLicenseFeature(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<boolean>;
         enableFeature(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<boolean>;
         disableFeature(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, featureKey: string): Promise<boolean>;
         configureLicenseSource(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, licenseSource: vsanhealthService.vim.LicenseSource): Promise<void>;
         updateLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labels: Array<vsanhealthService.vim.KeyValue>): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         addLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labels: Array<vsanhealthService.vim.KeyValue>): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         removeLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string): Promise<void>;
         decodeLicense(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string): Promise<vsanhealthService.vim.LicenseManagerLicenseInfo>;
         updateLicenseLabel(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labelKey: string, labelValue: string): Promise<void>;
         removeLicenseLabel(_this: vsanhealthService.vim.ManagedObjectReference, licenseKey: string, labelKey: string): Promise<void>;
         reload(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         renameTask(_this: vsanhealthService.vim.ManagedObjectReference, newName: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyNetwork(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         lookupVmOverheadMemory(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         validateHost(_this: vsanhealthService.vim.ManagedObjectReference, ovfDescriptor: string, host: vsanhealthService.vim.ManagedObjectReference, vhp: vsanhealthService.vim.OvfValidateHostParams): Promise<vsanhealthService.vim.OvfValidateHostResult>;
         parseDescriptor(_this: vsanhealthService.vim.ManagedObjectReference, ovfDescriptor: string, pdp: vsanhealthService.vim.OvfParseDescriptorParams): Promise<vsanhealthService.vim.OvfParseDescriptorResult>;
         createImportSpec(_this: vsanhealthService.vim.ManagedObjectReference, ovfDescriptor: string, resourcePool: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, cisp: vsanhealthService.vim.OvfCreateImportSpecParams): Promise<vsanhealthService.vim.OvfCreateImportSpecResult>;
         createDescriptor(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference, cdp: vsanhealthService.vim.OvfCreateDescriptorParams): Promise<vsanhealthService.vim.OvfCreateDescriptorResult>;
         queryPerfProviderSummary(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.PerfProviderSummary>;
         queryAvailablePerfMetric(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, beginTime: Date, endTime: Date, intervalId: number): Promise<Array<vsanhealthService.vim.PerfMetricId>>;
         queryPerfCounter(_this: vsanhealthService.vim.ManagedObjectReference, counterId: Array<number>): Promise<Array<vsanhealthService.vim.PerfCounterInfo>>;
         queryPerfCounterByLevel(_this: vsanhealthService.vim.ManagedObjectReference, level: number): Promise<Array<vsanhealthService.vim.PerfCounterInfo>>;
         queryPerf(_this: vsanhealthService.vim.ManagedObjectReference, querySpec: Array<vsanhealthService.vim.PerfQuerySpec>): Promise<Array<vsanhealthService.vim.PerfEntityMetricBase>>;
         queryPerfComposite(_this: vsanhealthService.vim.ManagedObjectReference, querySpec: vsanhealthService.vim.PerfQuerySpec): Promise<vsanhealthService.vim.PerfCompositeMetric>;
         createPerfInterval(_this: vsanhealthService.vim.ManagedObjectReference, intervalId: vsanhealthService.vim.PerfInterval): Promise<void>;
         removePerfInterval(_this: vsanhealthService.vim.ManagedObjectReference, samplePeriod: number): Promise<void>;
         updatePerfInterval(_this: vsanhealthService.vim.ManagedObjectReference, interval: vsanhealthService.vim.PerfInterval): Promise<void>;
         updateCounterLevelMapping(_this: vsanhealthService.vim.ManagedObjectReference, counterLevelMap: Array<vsanhealthService.vim.PerformanceManagerCounterLevelMapping>): Promise<void>;
         resetCounterLevelMapping(_this: vsanhealthService.vim.ManagedObjectReference, counters: Array<number>): Promise<void>;
         estimateDatabaseSize(_this: vsanhealthService.vim.ManagedObjectReference, dbSizeParam: vsanhealthService.vim.DatabaseSizeParam): Promise<vsanhealthService.vim.DatabaseSizeEstimate>;
         updateConfig(_this: vsanhealthService.vim.ManagedObjectReference, name: string, config: vsanhealthService.vim.ResourceConfigSpec): Promise<void>;
         moveIntoResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, list: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         updateChildResourceConfiguration(_this: vsanhealthService.vim.ManagedObjectReference, spec: Array<vsanhealthService.vim.ResourceConfigSpec>): Promise<void>;
         createResourcePool(_this: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.ResourceConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyChildren(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createVApp(_this: vsanhealthService.vim.ManagedObjectReference, name: string, resSpec: vsanhealthService.vim.ResourceConfigSpec, configSpec: vsanhealthService.vim.VAppConfigSpec, vmFolder: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createChildVMTask(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.VirtualMachineConfigSpec, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerChildVMTask(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         importVApp(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ImportSpec, folder: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryResourceConfigOption(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ResourceConfigOption>;
         refreshRuntime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         findByUuid(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, uuid: string, vmSearch: boolean, instanceUuid: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByDatastorePath(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, path: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByDnsName(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, dnsName: string, vmSearch: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByIp(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, ip: string, vmSearch: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findByInventoryPath(_this: vsanhealthService.vim.ManagedObjectReference, inventoryPath: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findChild(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         findAllByUuid(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, uuid: string, vmSearch: boolean, instanceUuid: boolean): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         findAllByDnsName(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, dnsName: string, vmSearch: boolean): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         findAllByIp(_this: vsanhealthService.vim.ManagedObjectReference, datacenter: vsanhealthService.vim.ManagedObjectReference, ip: string, vmSearch: boolean): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         currentTime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Date>;
         retrieveServiceContent(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ServiceContent>;
         validateMigration(_this: vsanhealthService.vim.ManagedObjectReference, vm: Array<vsanhealthService.vim.ManagedObjectReference>, state: vsanhealthService.vim.VirtualMachinePowerState, testType: Array<string>, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.Event>>;
         queryVMotionCompatibility(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>, compatibility: Array<string>): Promise<Array<vsanhealthService.vim.HostVMotionCompatibility>>;
         retrieveProductComponents(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProductComponentInfo>>;
         queryServiceList(_this: vsanhealthService.vim.ManagedObjectReference, serviceName: string, location: Array<string>): Promise<Array<vsanhealthService.vim.ServiceManagerServiceInfo>>;
         updateServiceMessage(_this: vsanhealthService.vim.ManagedObjectReference, message: string): Promise<void>;
         loginByToken(_this: vsanhealthService.vim.ManagedObjectReference, locale: string): Promise<vsanhealthService.vim.UserSession>;
         login(_this: vsanhealthService.vim.ManagedObjectReference, userName: string, password: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         loginBySSPI(_this: vsanhealthService.vim.ManagedObjectReference, base64Token: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         logout(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         acquireLocalTicket(_this: vsanhealthService.vim.ManagedObjectReference, userName: string): Promise<vsanhealthService.vim.SessionManagerLocalTicket>;
         acquireGenericServiceTicket(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.SessionManagerServiceRequestSpec): Promise<vsanhealthService.vim.SessionManagerGenericServiceTicket>;
         terminateSession(_this: vsanhealthService.vim.ManagedObjectReference, sessionId: Array<string>): Promise<void>;
         setLocale(_this: vsanhealthService.vim.ManagedObjectReference, locale: string): Promise<void>;
         loginExtensionBySubjectName(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         loginExtensionByCertificate(_this: vsanhealthService.vim.ManagedObjectReference, extensionKey: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         impersonateUser(_this: vsanhealthService.vim.ManagedObjectReference, userName: string, locale: string): Promise<vsanhealthService.vim.UserSession>;
         sessionIsActive(_this: vsanhealthService.vim.ManagedObjectReference, sessionID: string, userName: string): Promise<boolean>;
         acquireCloneTicket(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         cloneSession(_this: vsanhealthService.vim.ManagedObjectReference, cloneTicket: string): Promise<vsanhealthService.vim.UserSession>;
         executeSimpleCommand(_this: vsanhealthService.vim.ManagedObjectReference, argumentsb: Array<string>): Promise<string>;
         configureDatastoreIORMTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.StorageIORMConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryIORMConfigOption(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.StorageIORMConfigOption>;
         queryDatastorePerformanceSummary(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.StoragePerformanceSummary>>;
         applyStorageDrsRecommendationToPodTask(_this: vsanhealthService.vim.ManagedObjectReference, pod: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         applyStorageDrsRecommendationTask(_this: vsanhealthService.vim.ManagedObjectReference, key: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         cancelStorageDrsRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, key: Array<string>): Promise<void>;
         refreshStorageDrsRecommendation(_this: vsanhealthService.vim.ManagedObjectReference, pod: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         configureStorageDrsForPodTask(_this: vsanhealthService.vim.ManagedObjectReference, pod: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.StorageDrsConfigSpec, modify: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         recommendDatastores(_this: vsanhealthService.vim.ManagedObjectReference, storageSpec: vsanhealthService.vim.StoragePlacementSpec): Promise<vsanhealthService.vim.StoragePlacementResult>;
         cancelTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateProgress(_this: vsanhealthService.vim.ManagedObjectReference, percentDone: number): Promise<void>;
         setTaskState(_this: vsanhealthService.vim.ManagedObjectReference, state: vsanhealthService.vim.TaskInfoState, result: any, fault: vsanhealthService.vim.LocalizedMethodFault): Promise<void>;
         setTaskDescription(_this: vsanhealthService.vim.ManagedObjectReference, description: vsanhealthService.vim.LocalizableMessage): Promise<void>;
         readNextTasks(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.TaskInfo>>;
         readPreviousTasks(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.TaskInfo>>;
         createCollectorForTasks(_this: vsanhealthService.vim.ManagedObjectReference, filter: vsanhealthService.vim.TaskFilterSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createTask(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference, taskTypeId: string, initiatedBy: string, cancelable: boolean, parentTaskKey: string, activationId: string): Promise<vsanhealthService.vim.TaskInfo>;
         retrieveUserGroups(_this: vsanhealthService.vim.ManagedObjectReference, domain: string, searchStr: string, belongsToGroup: string, belongsToUser: string, exactMatch: boolean, findUsers: boolean, findGroups: boolean): Promise<Array<vsanhealthService.vim.UserSearchResult>>;
         updateVAppConfig(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VAppConfigSpec): Promise<void>;
         updateLinkedChildren(_this: vsanhealthService.vim.ManagedObjectReference, addChangeSet: Array<vsanhealthService.vim.VirtualAppLinkInfo>, removeSet: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         cloneVAppTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, target: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VAppCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exportVApp(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerOnVAppTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerOffVAppTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         suspendVAppTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unregisterVAppTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualDiskSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         moveVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destName: string, destDatacenter: vsanhealthService.vim.ManagedObjectReference, force: boolean, profile: Array<vsanhealthService.vim.VirtualMachineProfileSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         copyVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, sourceName: string, sourceDatacenter: vsanhealthService.vim.ManagedObjectReference, destName: string, destDatacenter: vsanhealthService.vim.ManagedObjectReference, destSpec: vsanhealthService.vim.VirtualDiskSpec, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         extendVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, newCapacityKb: number, eagerZero: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryVirtualDiskFragmentation(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<number>;
         defragmentVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         shrinkVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, copy: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         inflateVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         eagerZeroVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         zeroFillVirtualDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         setVirtualDiskUuid(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference, uuid: string): Promise<void>;
         queryVirtualDiskUuid(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         queryVirtualDiskGeometry(_this: vsanhealthService.vim.ManagedObjectReference, name: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostDiskDimensionsChs>;
         importUnmanagedSnapshot(_this: vsanhealthService.vim.ManagedObjectReference, vdisk: string, datacenter: vsanhealthService.vim.ManagedObjectReference, vvolId: string): Promise<void>;
         releaseManagedSnapshot(_this: vsanhealthService.vim.ManagedObjectReference, vdisk: string, datacenter: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         refreshStorageInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string, memory: boolean, quiesce: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createSnapshotExTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string, memory: boolean, quiesceSpec: vsanhealthService.vim.VirtualMachineGuestQuiesceSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         revertToCurrentSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, suppressPowerOn: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeAllSnapshotsTask(_this: vsanhealthService.vim.ManagedObjectReference, consolidate: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         consolidateVMDisksTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         estimateStorageForConsolidateSnapshotsTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         reconfigVMTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         upgradeVMTask(_this: vsanhealthService.vim.ManagedObjectReference, version: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         extractOvfEnvironment(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         powerOnVMTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         powerOffVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         suspendVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         resetVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         shutdownGuest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         rebootGuest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         standbyGuest(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         answerVM(_this: vsanhealthService.vim.ManagedObjectReference, questionId: string, answerChoice: string): Promise<void>;
         customizeVMTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.CustomizationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkCustomizationSpec(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.CustomizationSpec): Promise<void>;
         migrateVMTask(_this: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, priority: vsanhealthService.vim.VirtualMachineMovePriority, state: vsanhealthService.vim.VirtualMachinePowerState): Promise<vsanhealthService.vim.ManagedObjectReference>;
         relocateVMTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineRelocateSpec, priority: vsanhealthService.vim.VirtualMachineMovePriority): Promise<vsanhealthService.vim.ManagedObjectReference>;
         cloneVMTask(_this: vsanhealthService.vim.ManagedObjectReference, folder: vsanhealthService.vim.ManagedObjectReference, name: string, spec: vsanhealthService.vim.VirtualMachineCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exportVm(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsTemplate(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         markAsVirtualMachine(_this: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         unregisterVM(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetGuestInformation(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         mountToolsInstaller(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         unmountToolsInstaller(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         upgradeToolsTask(_this: vsanhealthService.vim.ManagedObjectReference, installerOptions: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         acquireMksTicket(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VirtualMachineMksTicket>;
         acquireTicket(_this: vsanhealthService.vim.ManagedObjectReference, ticketType: string): Promise<vsanhealthService.vim.VirtualMachineTicket>;
         setScreenResolution(_this: vsanhealthService.vim.ManagedObjectReference, width: number, height: number): Promise<void>;
         defragmentAllDisks(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createSecondaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createSecondaryVMExTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.FaultToleranceConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         turnOffFaultToleranceForVMTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         makePrimaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         terminateFaultTolerantVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         disableSecondaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enableSecondaryVMTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         setDisplayTopology(_this: vsanhealthService.vim.ManagedObjectReference, displays: Array<vsanhealthService.vim.VirtualMachineDisplayTopology>): Promise<void>;
         startRecordingTask(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         stopRecordingTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         startReplayingTask(_this: vsanhealthService.vim.ManagedObjectReference, replaySnapshot: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         stopReplayingTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         promoteDisksTask(_this: vsanhealthService.vim.ManagedObjectReference, unlink: boolean, disks: Array<vsanhealthService.vim.VirtualDisk>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createScreenshotTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         putUsbScanCodes(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.UsbScanCodeSpec): Promise<number>;
         queryChangedDiskAreas(_this: vsanhealthService.vim.ManagedObjectReference, snapshot: vsanhealthService.vim.ManagedObjectReference, deviceKey: number, startOffset: number, changeId: string): Promise<vsanhealthService.vim.DiskChangeInfo>;
         queryUnownedFiles(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         reloadVirtualMachineFromPathTask(_this: vsanhealthService.vim.ManagedObjectReference, configurationPath: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryFaultToleranceCompatibility(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.LocalizedMethodFault>>;
         queryFaultToleranceCompatibilityEx(_this: vsanhealthService.vim.ManagedObjectReference, forLegacyFt: boolean): Promise<Array<vsanhealthService.vim.LocalizedMethodFault>>;
         terminateVM(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         sendNMI(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         attachDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, diskId: string, datastore: vsanhealthService.vim.ManagedObjectReference, controllerKey: number, unitNumber: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         detachDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, diskId: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         performVsanUpgradePreflightCheck(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, downgradeFormat: boolean): Promise<vsanhealthService.vim.VsanUpgradeSystemPreflightCheckResult>;
         queryVsanUpgradeStatus(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanUpgradeSystemUpgradeStatus>;
         performVsanUpgradeTask(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.ManagedObjectReference, performObjectUpgrade: boolean, downgradeFormat: boolean, allowReducedRedundancy: boolean, excludeHosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeAlarm(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureAlarm(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.AlarmSpec): Promise<void>;
         createAlarm(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.AlarmSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getAlarm(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         areAlarmActionsEnabled(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         enableAlarmActions(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, enabled: boolean): Promise<void>;
         getAlarmState(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.AlarmState>>;
         acknowledgeAlarm(_this: vsanhealthService.vim.ManagedObjectReference, alarm: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         configureEvcModeTask(_this: vsanhealthService.vim.ManagedObjectReference, evcModeKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         disableEvcModeTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkConfigureEvcModeTask(_this: vsanhealthService.vim.ManagedObjectReference, evcModeKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkAddHostEvcTask(_this: vsanhealthService.vim.ManagedObjectReference, cnxSpec: vsanhealthService.vim.HostConnectSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         reconfigureDVPortgroupTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.DVPortgroupConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVPortgroupRollbackTask(_this: vsanhealthService.vim.ManagedObjectReference, entityBackup: vsanhealthService.vim.EntityBackupConfig): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryAvailableDvsSpec(_this: vsanhealthService.vim.ManagedObjectReference, recommended: boolean): Promise<Array<vsanhealthService.vim.DistributedVirtualSwitchProductSpec>>;
         queryCompatibleHostForNewDvs(_this: vsanhealthService.vim.ManagedObjectReference, container: vsanhealthService.vim.ManagedObjectReference, recursive: boolean, switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         queryCompatibleHostForExistingDvs(_this: vsanhealthService.vim.ManagedObjectReference, container: vsanhealthService.vim.ManagedObjectReference, recursive: boolean, dvs: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         queryDvsCompatibleHostSpec(_this: vsanhealthService.vim.ManagedObjectReference, switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<Array<vsanhealthService.vim.DistributedVirtualSwitchHostProductSpec>>;
         queryDvsFeatureCapability(_this: vsanhealthService.vim.ManagedObjectReference, switchProductSpec: vsanhealthService.vim.DistributedVirtualSwitchProductSpec): Promise<vsanhealthService.vim.DVSFeatureCapability>;
         queryDvsByUuid(_this: vsanhealthService.vim.ManagedObjectReference, uuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryDvsConfigTarget(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, dvs: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.DVSManagerDvsConfigTarget>;
         queryDvsCheckCompatibility(_this: vsanhealthService.vim.ManagedObjectReference, hostContainer: vsanhealthService.vim.DistributedVirtualSwitchManagerHostContainer, dvsProductSpec: vsanhealthService.vim.DistributedVirtualSwitchManagerDvsProductSpec, hostFilterSpec: Array<vsanhealthService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec>): Promise<Array<vsanhealthService.vim.DistributedVirtualSwitchManagerCompatibilityResult>>;
         rectifyDvsOnHostTask(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVSManagerExportEntityTask(_this: vsanhealthService.vim.ManagedObjectReference, selectionSet: Array<vsanhealthService.vim.SelectionSet>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVSManagerImportEntityTask(_this: vsanhealthService.vim.ManagedObjectReference, entityBackup: Array<vsanhealthService.vim.EntityBackupConfig>, importType: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         dVSManagerLookupDvPortGroup(_this: vsanhealthService.vim.ManagedObjectReference, switchUuid: string, portgroupKey: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDVSLacpGroupConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, lacpGroupSpec: Array<vsanhealthService.vim.VMwareDvsLacpGroupSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addKey(_this: vsanhealthService.vim.ManagedObjectReference, key: vsanhealthService.vim.CryptoKeyPlain): Promise<void>;
         addKeys(_this: vsanhealthService.vim.ManagedObjectReference, keys: Array<vsanhealthService.vim.CryptoKeyPlain>): Promise<Array<vsanhealthService.vim.CryptoKeyResult>>;
         removeKey(_this: vsanhealthService.vim.ManagedObjectReference, key: vsanhealthService.vim.CryptoKeyId, force: boolean): Promise<void>;
         removeKeys(_this: vsanhealthService.vim.ManagedObjectReference, keys: Array<vsanhealthService.vim.CryptoKeyId>, force: boolean): Promise<Array<vsanhealthService.vim.CryptoKeyResult>>;
         listKeys(_this: vsanhealthService.vim.ManagedObjectReference, limit: number): Promise<Array<vsanhealthService.vim.CryptoKeyId>>;
         registerKmipServer(_this: vsanhealthService.vim.ManagedObjectReference, server: vsanhealthService.vim.KmipServerSpec): Promise<void>;
         markDefault(_this: vsanhealthService.vim.ManagedObjectReference, clusterId: vsanhealthService.vim.KeyProviderId): Promise<void>;
         updateKmipServer(_this: vsanhealthService.vim.ManagedObjectReference, server: vsanhealthService.vim.KmipServerSpec): Promise<void>;
         removeKmipServer(_this: vsanhealthService.vim.ManagedObjectReference, clusterId: vsanhealthService.vim.KeyProviderId, serverName: string): Promise<void>;
         listKmipServers(_this: vsanhealthService.vim.ManagedObjectReference, limit: number): Promise<Array<vsanhealthService.vim.KmipClusterInfo>>;
         retrieveKmipServersStatusTask(_this: vsanhealthService.vim.ManagedObjectReference, clusters: Array<vsanhealthService.vim.KmipClusterInfo>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         generateKey(_this: vsanhealthService.vim.ManagedObjectReference, keyProvider: vsanhealthService.vim.KeyProviderId): Promise<vsanhealthService.vim.CryptoKeyResult>;
         retrieveKmipServerCert(_this: vsanhealthService.vim.ManagedObjectReference, keyProvider: vsanhealthService.vim.KeyProviderId, server: vsanhealthService.vim.KmipServerInfo): Promise<vsanhealthService.vim.CryptoManagerKmipServerCertInfo>;
         uploadKmipServerCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string): Promise<void>;
         generateSelfSignedClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         generateClientCsr(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         retrieveSelfSignedClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         retrieveClientCsr(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         retrieveClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId): Promise<string>;
         updateSelfSignedClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string): Promise<void>;
         updateKmsSignedCsrClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string): Promise<void>;
         uploadClientCert(_this: vsanhealthService.vim.ManagedObjectReference, cluster: vsanhealthService.vim.KeyProviderId, certificate: string, privateKey: string): Promise<void>;
         readNextEvents(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.Event>>;
         readPreviousEvents(_this: vsanhealthService.vim.ManagedObjectReference, maxCount: number): Promise<Array<vsanhealthService.vim.Event>>;
         retrieveArgumentDescription(_this: vsanhealthService.vim.ManagedObjectReference, eventTypeId: string): Promise<Array<vsanhealthService.vim.EventArgDesc>>;
         createCollectorForEvents(_this: vsanhealthService.vim.ManagedObjectReference, filter: vsanhealthService.vim.EventFilterSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         logUserEvent(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, msg: string): Promise<void>;
         queryEvents(_this: vsanhealthService.vim.ManagedObjectReference, filter: vsanhealthService.vim.EventFilterSpec): Promise<Array<vsanhealthService.vim.Event>>;
         postEvent(_this: vsanhealthService.vim.ManagedObjectReference, eventToPost: vsanhealthService.vim.Event, taskInfo: vsanhealthService.vim.TaskInfo): Promise<void>;
         joinDomainTask(_this: vsanhealthService.vim.ManagedObjectReference, domainName: string, userName: string, password: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         joinDomainWithCAMTask(_this: vsanhealthService.vim.ManagedObjectReference, domainName: string, camServer: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         importCertificateForCAMTask(_this: vsanhealthService.vim.ManagedObjectReference, certPath: string, camServer: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         leaveCurrentDomainTask(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         enableSmartCardAuthentication(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         installSmartCardTrustAnchor(_this: vsanhealthService.vim.ManagedObjectReference, cert: string): Promise<void>;
         replaceSmartCardTrustAnchors(_this: vsanhealthService.vim.ManagedObjectReference, certs: Array<string>): Promise<void>;
         removeSmartCardTrustAnchor(_this: vsanhealthService.vim.ManagedObjectReference, issuer: string, serial: string): Promise<void>;
         removeSmartCardTrustAnchorByFingerprint(_this: vsanhealthService.vim.ManagedObjectReference, fingerprint: string, digest: string): Promise<void>;
         listSmartCardTrustAnchors(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         disableSmartCardAuthentication(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureAutostart(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostAutoStartManagerConfig): Promise<void>;
         autoStartPowerOn(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         autoStartPowerOff(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryBootDevices(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostBootDeviceInfo>;
         updateBootDevice(_this: vsanhealthService.vim.ManagedObjectReference, key: string): Promise<void>;
         configureHostCacheTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostCacheConfigurationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         generateCertificateSigningRequest(_this: vsanhealthService.vim.ManagedObjectReference, useIpAddressAsCommonName: boolean): Promise<string>;
         generateCertificateSigningRequestByDn(_this: vsanhealthService.vim.ManagedObjectReference, distinguishedName: string): Promise<string>;
         installServerCertificate(_this: vsanhealthService.vim.ManagedObjectReference, cert: string): Promise<void>;
         replaceCACertificatesAndCRLs(_this: vsanhealthService.vim.ManagedObjectReference, caCert: Array<string>, caCrl: Array<string>): Promise<void>;
         listCACertificates(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         listCACertificateRevocationLists(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         enableHyperThreading(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         disableHyperThreading(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         searchDatastoreTask(_this: vsanhealthService.vim.ManagedObjectReference, datastorePath: string, searchSpec: vsanhealthService.vim.HostDatastoreBrowserSearchSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         searchDatastoreSubFoldersTask(_this: vsanhealthService.vim.ManagedObjectReference, datastorePath: string, searchSpec: vsanhealthService.vim.HostDatastoreBrowserSearchSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteFile(_this: vsanhealthService.vim.ManagedObjectReference, datastorePath: string): Promise<void>;
         updateLocalSwapDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryAvailableDisksForVmfs(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostScsiDisk>>;
         queryVmfsDatastoreCreateOptions(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: string, vmfsMajorVersion: number): Promise<Array<vsanhealthService.vim.VmfsDatastoreOption>>;
         createVmfsDatastore(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VmfsDatastoreCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryVmfsDatastoreExtendOptions(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, devicePath: string, suppressExpandCandidates: boolean): Promise<Array<vsanhealthService.vim.VmfsDatastoreOption>>;
         queryVmfsDatastoreExpandOptions(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VmfsDatastoreOption>>;
         extendVmfsDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VmfsDatastoreExtendSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         expandVmfsDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VmfsDatastoreExpandSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createNasDatastore(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostNasVolumeSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createLocalDatastore(_this: vsanhealthService.vim.ManagedObjectReference, name: string, path: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createVvolDatastore(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostDatastoreSystemVvolDatastoreSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeDatastore(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         removeDatastoreExTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         configureDatastorePrincipal(_this: vsanhealthService.vim.ManagedObjectReference, userName: string, password: string): Promise<void>;
         queryUnresolvedVmfsVolumes(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostUnresolvedVmfsVolume>>;
         resignatureUnresolvedVmfsVolumeTask(_this: vsanhealthService.vim.ManagedObjectReference, resolutionSpec: vsanhealthService.vim.HostUnresolvedVmfsResignatureSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateDateTimeConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostDateTimeConfig): Promise<void>;
         queryAvailableTimeZones(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostDateTimeSystemTimeZone>>;
         queryDateTime(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Date>;
         updateDateTime(_this: vsanhealthService.vim.ManagedObjectReference, dateTime: Date): Promise<void>;
         refreshDateTimeSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryAvailablePartition(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostDiagnosticPartition>>;
         selectActivePartition(_this: vsanhealthService.vim.ManagedObjectReference, partition: vsanhealthService.vim.HostScsiDiskPartition): Promise<void>;
         queryPartitionCreateOptions(_this: vsanhealthService.vim.ManagedObjectReference, storageType: string, diagnosticType: string): Promise<Array<vsanhealthService.vim.HostDiagnosticPartitionCreateOption>>;
         queryPartitionCreateDesc(_this: vsanhealthService.vim.ManagedObjectReference, diskUuid: string, diagnosticType: string): Promise<vsanhealthService.vim.HostDiagnosticPartitionCreateDescription>;
         createDiagnosticPartition(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostDiagnosticPartitionCreateSpec): Promise<void>;
         esxAgentHostManagerUpdateConfig(_this: vsanhealthService.vim.ManagedObjectReference, configInfo: vsanhealthService.vim.HostEsxAgentHostManagerConfigInfo): Promise<void>;
         updateDefaultPolicy(_this: vsanhealthService.vim.ManagedObjectReference, defaultPolicy: vsanhealthService.vim.HostFirewallDefaultPolicy): Promise<void>;
         enableRuleset(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         disableRuleset(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         updateRuleset(_this: vsanhealthService.vim.ManagedObjectReference, id: string, spec: vsanhealthService.vim.HostFirewallRulesetRulesetSpec): Promise<void>;
         refreshFirewall(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetFirmwareToFactoryDefaults(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         backupFirmwareConfiguration(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         queryFirmwareConfigUploadURL(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         restoreFirmwareConfiguration(_this: vsanhealthService.vim.ManagedObjectReference, force: boolean): Promise<void>;
         refreshGraphicsManager(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         isSharedGraphicsActive(_this: vsanhealthService.vim.ManagedObjectReference): Promise<boolean>;
         updateGraphicsConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostGraphicsConfig): Promise<void>;
         refreshHealthStatusSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         resetSystemHealthInfo(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         clearSystemEventLog(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         fetchSystemEventLog(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.SystemEventInfo>>;
         retrieveHostAccessControlEntries(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostAccessControlEntry>>;
         changeAccessMode(_this: vsanhealthService.vim.ManagedObjectReference, principal: string, isGroup: boolean, accessMode: vsanhealthService.vim.HostAccessMode): Promise<void>;
         querySystemUsers(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         updateSystemUsers(_this: vsanhealthService.vim.ManagedObjectReference, users: Array<string>): Promise<void>;
         queryLockdownExceptions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         updateLockdownExceptions(_this: vsanhealthService.vim.ManagedObjectReference, users: Array<string>): Promise<void>;
         changeLockdownMode(_this: vsanhealthService.vim.ManagedObjectReference, mode: vsanhealthService.vim.HostLockdownMode): Promise<void>;
         hostImageConfigGetAcceptance(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         hostImageConfigGetProfile(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostImageProfileSummary>;
         updateHostImageAcceptanceLevel(_this: vsanhealthService.vim.ManagedObjectReference, newAcceptanceLevel: string): Promise<void>;
         fetchSoftwarePackages(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.SoftwarePackage>>;
         installDate(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Date>;
         queryVnicStatus(_this: vsanhealthService.vim.ManagedObjectReference, vnicDevice: string): Promise<vsanhealthService.vim.IscsiStatus>;
         queryPnicStatus(_this: vsanhealthService.vim.ManagedObjectReference, pnicDevice: string): Promise<vsanhealthService.vim.IscsiStatus>;
         queryBoundVnics(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string): Promise<Array<vsanhealthService.vim.IscsiPortInfo>>;
         queryCandidateNics(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string): Promise<Array<vsanhealthService.vim.IscsiPortInfo>>;
         bindVnic(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string, vnicDevice: string): Promise<void>;
         unbindVnic(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaName: string, vnicDevice: string, force: boolean): Promise<void>;
         queryMigrationDependencies(_this: vsanhealthService.vim.ManagedObjectReference, pnicDevice: Array<string>): Promise<vsanhealthService.vim.IscsiMigrationDependency>;
         queryModules(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.KernelModuleInfo>>;
         updateModuleOptionString(_this: vsanhealthService.vim.ManagedObjectReference, name: string, options: string): Promise<void>;
         queryConfiguredModuleOptionString(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<string>;
         createUser(_this: vsanhealthService.vim.ManagedObjectReference, user: vsanhealthService.vim.HostAccountSpec): Promise<void>;
         updateUser(_this: vsanhealthService.vim.ManagedObjectReference, user: vsanhealthService.vim.HostAccountSpec): Promise<void>;
         createGroup(_this: vsanhealthService.vim.ManagedObjectReference, group: vsanhealthService.vim.HostAccountSpec): Promise<void>;
         removeUser(_this: vsanhealthService.vim.ManagedObjectReference, userName: string): Promise<void>;
         removeGroup(_this: vsanhealthService.vim.ManagedObjectReference, groupName: string): Promise<void>;
         assignUserToGroup(_this: vsanhealthService.vim.ManagedObjectReference, user: string, group: string): Promise<void>;
         unassignUserFromGroup(_this: vsanhealthService.vim.ManagedObjectReference, user: string, group: string): Promise<void>;
         reconfigureServiceConsoleReservation(_this: vsanhealthService.vim.ManagedObjectReference, cfgBytes: number): Promise<void>;
         reconfigureVirtualMachineReservation(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineMemoryReservationSpec): Promise<void>;
         updateNetworkConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostNetworkConfig, changeMode: string): Promise<vsanhealthService.vim.HostNetworkConfigResult>;
         updateDnsConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostDnsConfig): Promise<void>;
         updateIpRouteConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostIpRouteConfig): Promise<void>;
         updateConsoleIpRouteConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostIpRouteConfig): Promise<void>;
         updateIpRouteTableConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostIpRouteTableConfig): Promise<void>;
         addVirtualSwitch(_this: vsanhealthService.vim.ManagedObjectReference, vswitchName: string, spec: vsanhealthService.vim.HostVirtualSwitchSpec): Promise<void>;
         removeVirtualSwitch(_this: vsanhealthService.vim.ManagedObjectReference, vswitchName: string): Promise<void>;
         updateVirtualSwitch(_this: vsanhealthService.vim.ManagedObjectReference, vswitchName: string, spec: vsanhealthService.vim.HostVirtualSwitchSpec): Promise<void>;
         addPortGroup(_this: vsanhealthService.vim.ManagedObjectReference, portgrp: vsanhealthService.vim.HostPortGroupSpec): Promise<void>;
         removePortGroup(_this: vsanhealthService.vim.ManagedObjectReference, pgName: string): Promise<void>;
         updatePortGroup(_this: vsanhealthService.vim.ManagedObjectReference, pgName: string, portgrp: vsanhealthService.vim.HostPortGroupSpec): Promise<void>;
         updatePhysicalNicLinkSpeed(_this: vsanhealthService.vim.ManagedObjectReference, device: string, linkSpeed: vsanhealthService.vim.PhysicalNicLinkInfo): Promise<void>;
         queryNetworkHint(_this: vsanhealthService.vim.ManagedObjectReference, device: Array<string>): Promise<Array<vsanhealthService.vim.PhysicalNicHintInfo>>;
         addVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, portgroup: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<string>;
         removeVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         updateVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<void>;
         addServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, portgroup: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<string>;
         removeServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         updateServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string, nic: vsanhealthService.vim.HostVirtualNicSpec): Promise<void>;
         restartServiceConsoleVirtualNic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         refreshNetworkSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         checkHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         scanHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, repository: vsanhealthService.vim.HostPatchManagerLocator, updateID: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         scanHostPatchV2Task(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         stageHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, vibUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         installHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, repository: vsanhealthService.vim.HostPatchManagerLocator, updateID: string, force: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         installHostPatchV2Task(_this: vsanhealthService.vim.ManagedObjectReference, metaUrls: Array<string>, bundleUrls: Array<string>, vibUrls: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         uninstallHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, bulletinIds: Array<string>, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryHostPatchTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostPatchManagerPatchManagerOperationSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refresh(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updatePassthruConfig(_this: vsanhealthService.vim.ManagedObjectReference, config: Array<vsanhealthService.vim.HostPciPassthruConfig>): Promise<void>;
         configurePowerPolicy(_this: vsanhealthService.vim.ManagedObjectReference, key: number): Promise<void>;
         updateServicePolicy(_this: vsanhealthService.vim.ManagedObjectReference, id: string, policy: string): Promise<void>;
         startService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         stopService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         restartService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         uninstallService(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<void>;
         refreshServices(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureSnmpAgent(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostSnmpConfigSpec): Promise<void>;
         sendTestNotification(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         retrieveDiskPartitionInfo(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: Array<string>): Promise<Array<vsanhealthService.vim.HostDiskPartitionInfo>>;
         computeDiskPartitionInfo(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: string, layout: vsanhealthService.vim.HostDiskPartitionLayout, partitionFormat: string): Promise<vsanhealthService.vim.HostDiskPartitionInfo>;
         computeDiskPartitionInfoForResize(_this: vsanhealthService.vim.ManagedObjectReference, partition: vsanhealthService.vim.HostScsiDiskPartition, blockRange: vsanhealthService.vim.HostDiskPartitionBlockRange, partitionFormat: string): Promise<vsanhealthService.vim.HostDiskPartitionInfo>;
         updateDiskPartitions(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: string, spec: vsanhealthService.vim.HostDiskPartitionSpec): Promise<void>;
         formatVmfs(_this: vsanhealthService.vim.ManagedObjectReference, createSpec: vsanhealthService.vim.HostVmfsSpec): Promise<vsanhealthService.vim.HostVmfsVolume>;
         mountVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         unmountVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         unmountVmfsVolumeExTask(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         mountVmfsVolumeExTask(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unmapVmfsVolumeExTask(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteVmfsVolumeState(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         rescanVmfs(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         attachVmfsExtent(_this: vsanhealthService.vim.ManagedObjectReference, vmfsPath: string, extent: vsanhealthService.vim.HostScsiDiskPartition): Promise<void>;
         expandVmfsExtent(_this: vsanhealthService.vim.ManagedObjectReference, vmfsPath: string, extent: vsanhealthService.vim.HostScsiDiskPartition): Promise<void>;
         upgradeVmfs(_this: vsanhealthService.vim.ManagedObjectReference, vmfsPath: string): Promise<void>;
         upgradeVmLayout(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryUnresolvedVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostUnresolvedVmfsVolume>>;
         resolveMultipleUnresolvedVmfsVolumes(_this: vsanhealthService.vim.ManagedObjectReference, resolutionSpec: Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec>): Promise<Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionResult>>;
         resolveMultipleUnresolvedVmfsVolumesExTask(_this: vsanhealthService.vim.ManagedObjectReference, resolutionSpec: Array<vsanhealthService.vim.HostUnresolvedVmfsResolutionSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unmountForceMountedVmfsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string): Promise<void>;
         rescanHba(_this: vsanhealthService.vim.ManagedObjectReference, hbaDevice: string): Promise<void>;
         rescanAllHba(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateSoftwareInternetScsiEnabled(_this: vsanhealthService.vim.ManagedObjectReference, enabled: boolean): Promise<void>;
         updateInternetScsiDiscoveryProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, discoveryProperties: vsanhealthService.vim.HostInternetScsiHbaDiscoveryProperties): Promise<void>;
         updateInternetScsiAuthenticationProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, authenticationProperties: vsanhealthService.vim.HostInternetScsiHbaAuthenticationProperties, targetSet: vsanhealthService.vim.HostInternetScsiHbaTargetSet): Promise<void>;
         updateInternetScsiDigestProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targetSet: vsanhealthService.vim.HostInternetScsiHbaTargetSet, digestProperties: vsanhealthService.vim.HostInternetScsiHbaDigestProperties): Promise<void>;
         updateInternetScsiAdvancedOptions(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targetSet: vsanhealthService.vim.HostInternetScsiHbaTargetSet, options: Array<vsanhealthService.vim.HostInternetScsiHbaParamValue>): Promise<void>;
         updateInternetScsiIPProperties(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, ipProperties: vsanhealthService.vim.HostInternetScsiHbaIPProperties): Promise<void>;
         updateInternetScsiName(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, iScsiName: string): Promise<void>;
         updateInternetScsiAlias(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, iScsiAlias: string): Promise<void>;
         addInternetScsiSendTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>): Promise<void>;
         removeInternetScsiSendTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaSendTarget>): Promise<void>;
         addInternetScsiStaticTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>): Promise<void>;
         removeInternetScsiStaticTargets(_this: vsanhealthService.vim.ManagedObjectReference, iScsiHbaDevice: string, targets: Array<vsanhealthService.vim.HostInternetScsiHbaStaticTarget>): Promise<void>;
         enableMultipathPath(_this: vsanhealthService.vim.ManagedObjectReference, pathName: string): Promise<void>;
         disableMultipathPath(_this: vsanhealthService.vim.ManagedObjectReference, pathName: string): Promise<void>;
         setMultipathLunPolicy(_this: vsanhealthService.vim.ManagedObjectReference, lunId: string, policy: vsanhealthService.vim.HostMultipathInfoLogicalUnitPolicy): Promise<void>;
         queryPathSelectionPolicyOptions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostPathSelectionPolicyOption>>;
         queryStorageArrayTypePolicyOptions(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.HostStorageArrayTypePolicyOption>>;
         updateScsiLunDisplayName(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: string, displayName: string): Promise<void>;
         detachScsiLun(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: string): Promise<void>;
         detachScsiLunExTask(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deleteScsiLunState(_this: vsanhealthService.vim.ManagedObjectReference, lunCanonicalName: string): Promise<void>;
         attachScsiLun(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: string): Promise<void>;
         attachScsiLunExTask(_this: vsanhealthService.vim.ManagedObjectReference, lunUuid: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         refreshStorageSystem(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         discoverFcoeHbas(_this: vsanhealthService.vim.ManagedObjectReference, fcoeSpec: vsanhealthService.vim.FcoeConfigFcoeSpecification): Promise<void>;
         markForRemoval(_this: vsanhealthService.vim.ManagedObjectReference, hbaName: string, remove: boolean): Promise<void>;
         formatVffs(_this: vsanhealthService.vim.ManagedObjectReference, createSpec: vsanhealthService.vim.HostVffsSpec): Promise<vsanhealthService.vim.HostVffsVolume>;
         extendVffs(_this: vsanhealthService.vim.ManagedObjectReference, vffsPath: string, devicePath: string, spec: vsanhealthService.vim.HostDiskPartitionSpec): Promise<void>;
         destroyVffs(_this: vsanhealthService.vim.ManagedObjectReference, vffsPath: string): Promise<void>;
         mountVffsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vffsUuid: string): Promise<void>;
         unmountVffsVolume(_this: vsanhealthService.vim.ManagedObjectReference, vffsUuid: string): Promise<void>;
         deleteVffsVolumeState(_this: vsanhealthService.vim.ManagedObjectReference, vffsUuid: string): Promise<void>;
         rescanVffs(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryAvailableSsds(_this: vsanhealthService.vim.ManagedObjectReference, vffsPath: string): Promise<Array<vsanhealthService.vim.HostScsiDisk>>;
         setNFSUser(_this: vsanhealthService.vim.ManagedObjectReference, user: string, password: string): Promise<void>;
         changeNFSUserPassword(_this: vsanhealthService.vim.ManagedObjectReference, password: string): Promise<void>;
         queryNFSUser(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostNasVolumeUserInfo>;
         clearNFSUser(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         turnDiskLocatorLedOnTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuids: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         turnDiskLocatorLedOffTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuids: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsSsdTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsNonSsdTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsLocalTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         markAsNonLocalTask(_this: vsanhealthService.vim.ManagedObjectReference, scsiDiskUuid: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateVmfsUnmapPriority(_this: vsanhealthService.vim.ManagedObjectReference, vmfsUuid: string, unmapPriority: string): Promise<void>;
         queryVmfsConfigOption(_this: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.VmfsConfigOption>>;
         configureVFlashResourceExTask(_this: vsanhealthService.vim.ManagedObjectReference, devicePath: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostConfigureVFlashResource(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostVFlashManagerVFlashResourceConfigSpec): Promise<void>;
         hostRemoveVFlashResource(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         hostConfigVFlashCache(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.HostVFlashManagerVFlashCacheConfigSpec): Promise<void>;
         hostGetVFlashModuleDefaultConfig(_this: vsanhealthService.vim.ManagedObjectReference, vFlashModule: string): Promise<vsanhealthService.vim.VirtualDiskVFlashCacheConfigInfo>;
         updateIpConfig(_this: vsanhealthService.vim.ManagedObjectReference, ipConfig: vsanhealthService.vim.HostIpConfig): Promise<void>;
         selectVnic(_this: vsanhealthService.vim.ManagedObjectReference, device: string): Promise<void>;
         deselectVnic(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         queryNetConfig(_this: vsanhealthService.vim.ManagedObjectReference, nicType: string): Promise<vsanhealthService.vim.VirtualNicManagerNetConfig>;
         selectVnicForNicType(_this: vsanhealthService.vim.ManagedObjectReference, nicType: string, device: string): Promise<void>;
         deselectVnicForNicType(_this: vsanhealthService.vim.ManagedObjectReference, nicType: string, device: string): Promise<void>;
         queryCmmds(_this: vsanhealthService.vim.ManagedObjectReference, queries: Array<vsanhealthService.vim.HostVsanInternalSystemCmmdsQuery>): Promise<string>;
         queryPhysicalVsanDisks(_this: vsanhealthService.vim.ManagedObjectReference, props: Array<string>): Promise<string>;
         queryVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<string>;
         queryObjectsOnPhysicalVsanDisk(_this: vsanhealthService.vim.ManagedObjectReference, disks: Array<string>): Promise<string>;
         abdicateDomOwnership(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<Array<string>>;
         queryVsanStatistics(_this: vsanhealthService.vim.ManagedObjectReference, labels: Array<string>): Promise<string>;
         reconfigureDomObject(_this: vsanhealthService.vim.ManagedObjectReference, uuid: string, policy: string): Promise<void>;
         querySyncingVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<string>;
         runVsanPhysicalDiskDiagnostics(_this: vsanhealthService.vim.ManagedObjectReference, disks: Array<string>): Promise<Array<vsanhealthService.vim.HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult>>;
         getVsanObjExtAttrs(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>): Promise<string>;
         reconfigurationSatisfiable(_this: vsanhealthService.vim.ManagedObjectReference, pcbs: Array<vsanhealthService.vim.VsanPolicyChangeBatch>, ignoreSatisfiability: boolean): Promise<Array<vsanhealthService.vim.VsanPolicySatisfiability>>;
         canProvisionObjects(_this: vsanhealthService.vim.ManagedObjectReference, npbs: Array<vsanhealthService.vim.VsanNewPolicyBatch>, ignoreSatisfiability: boolean): Promise<Array<vsanhealthService.vim.VsanPolicySatisfiability>>;
         deleteVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, force: boolean): Promise<Array<vsanhealthService.vim.HostVsanInternalSystemDeleteVsanObjectsResult>>;
         upgradeVsanObjects(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, newVersion: number): Promise<Array<vsanhealthService.vim.HostVsanInternalSystemVsanObjectOperationResult>>;
         queryVsanObjectUuidsByFilter(_this: vsanhealthService.vim.ManagedObjectReference, uuids: Array<string>, limit: number, version: number): Promise<Array<string>>;
         queryDisksForVsan(_this: vsanhealthService.vim.ManagedObjectReference, canonicalName: Array<string>): Promise<Array<vsanhealthService.vim.VsanHostDiskResult>>;
         addDisksTask(_this: vsanhealthService.vim.ManagedObjectReference, disk: Array<vsanhealthService.vim.HostScsiDisk>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         initializeDisksTask(_this: vsanhealthService.vim.ManagedObjectReference, mapping: Array<vsanhealthService.vim.VsanHostDiskMapping>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, disk: Array<vsanhealthService.vim.HostScsiDisk>, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeDiskMappingTask(_this: vsanhealthService.vim.ManagedObjectReference, mapping: Array<vsanhealthService.vim.VsanHostDiskMapping>, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         unmountDiskMappingTask(_this: vsanhealthService.vim.ManagedObjectReference, mapping: Array<vsanhealthService.vim.VsanHostDiskMapping>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         updateVsanTask(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.VsanHostConfigInfo): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryHostStatus(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VsanHostClusterStatus>;
         evacuateVsanNodeTask(_this: vsanhealthService.vim.ManagedObjectReference, maintenanceSpec: vsanhealthService.vim.HostMaintenanceSpec, timeout: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         recommissionVsanNodeTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryOptions(_this: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<Array<vsanhealthService.vim.OptionValue>>;
         updateOptions(_this: vsanhealthService.vim.ManagedObjectReference, changedValue: Array<vsanhealthService.vim.OptionValue>): Promise<void>;
         checkComplianceTask(_this: vsanhealthService.vim.ManagedObjectReference, profile: Array<vsanhealthService.vim.ManagedObjectReference>, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryComplianceStatus(_this: vsanhealthService.vim.ManagedObjectReference, profile: Array<vsanhealthService.vim.ManagedObjectReference>, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ComplianceResult>>;
         clearComplianceStatus(_this: vsanhealthService.vim.ManagedObjectReference, profile: Array<vsanhealthService.vim.ManagedObjectReference>, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         queryExpressionMetadata(_this: vsanhealthService.vim.ManagedObjectReference, expressionName: Array<string>, profile: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProfileExpressionMetadata>>;
         retrieveDescription(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ProfileDescription>;
         destroyProfile(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         associateProfile(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         dissociateProfile(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<void>;
         checkProfileComplianceTask(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         exportProfile(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         createProfile(_this: vsanhealthService.vim.ManagedObjectReference, createSpec: vsanhealthService.vim.ProfileCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryPolicyMetadata(_this: vsanhealthService.vim.ManagedObjectReference, policyName: Array<string>, profile: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProfilePolicyMetadata>>;
         findAssociatedProfile(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         updateClusterProfile(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.ClusterProfileConfigSpec): Promise<void>;
         updateReferenceHost(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         updateHostProfile(_this: vsanhealthService.vim.ManagedObjectReference, config: vsanhealthService.vim.HostProfileConfigSpec): Promise<void>;
         executeHostProfile(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, deferredParam: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>): Promise<vsanhealthService.vim.ProfileExecuteResult>;
         updateHostSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, hostSpec: vsanhealthService.vim.HostSpecification): Promise<void>;
         updateHostSubSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, hostSubSpec: vsanhealthService.vim.HostSubSpecification): Promise<void>;
         retrieveHostSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, fromHost: boolean): Promise<vsanhealthService.vim.HostSpecification>;
         deleteHostSubSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, subSpecName: string): Promise<void>;
         deleteHostSpecification(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         hostSpecGetUpdatedHosts(_this: vsanhealthService.vim.ManagedObjectReference, startChangeID: string, endChangeID: string): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         applyHostConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.HostConfigSpec, userInput: Array<vsanhealthService.vim.ProfileDeferredPolicyOptionParameter>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         generateConfigTaskList(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.HostConfigSpec, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.HostProfileManagerConfigTaskList>;
         generateHostProfileTaskListTask(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.HostConfigSpec, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryHostProfileMetadata(_this: vsanhealthService.vim.ManagedObjectReference, profileName: Array<string>, profile: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ProfileMetadata>>;
         queryProfileStructure(_this: vsanhealthService.vim.ManagedObjectReference, profile: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ProfileProfileStructure>;
         createDefaultProfile(_this: vsanhealthService.vim.ManagedObjectReference, profileType: string, profileTypeName: string, profile: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ApplyProfile>;
         updateAnswerFileTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.AnswerFileCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveAnswerFile(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.AnswerFile>;
         retrieveAnswerFileForProfile(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, applyProfile: vsanhealthService.vim.HostApplyProfile): Promise<vsanhealthService.vim.AnswerFile>;
         exportAnswerFileTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkAnswerFileStatusTask(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryAnswerFileStatus(_this: vsanhealthService.vim.ManagedObjectReference, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.AnswerFileStatusResult>>;
         updateHostCustomizationsTask(_this: vsanhealthService.vim.ManagedObjectReference, hostToConfigSpecMap: Array<vsanhealthService.vim.HostProfileManagerHostToConfigSpecMap>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveHostCustomizations(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.StructuredCustomizations>>;
         retrieveHostCustomizationsForProfile(_this: vsanhealthService.vim.ManagedObjectReference, hosts: Array<vsanhealthService.vim.ManagedObjectReference>, applyProfile: vsanhealthService.vim.HostApplyProfile): Promise<Array<vsanhealthService.vim.StructuredCustomizations>>;
         generateHostConfigTaskSpecTask(_this: vsanhealthService.vim.ManagedObjectReference, hostsInfo: Array<vsanhealthService.vim.StructuredCustomizations>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         applyEntitiesConfigTask(_this: vsanhealthService.vim.ManagedObjectReference, applyConfigSpecs: Array<vsanhealthService.vim.ApplyHostProfileConfigurationSpec>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         reconfigureScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ScheduledTaskSpec): Promise<void>;
         runScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ScheduledTaskSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveEntityScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, entity: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         createObjectScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.ScheduledTaskSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveObjectScheduledTask(_this: vsanhealthService.vim.ManagedObjectReference, obj: vsanhealthService.vim.ManagedObjectReference): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         prepareVchaTask(_this: vsanhealthService.vim.ManagedObjectReference, networkSpec: vsanhealthService.vim.VchaClusterNetworkSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         deployVchaTask(_this: vsanhealthService.vim.ManagedObjectReference, deploymentSpec: vsanhealthService.vim.VchaClusterDeploymentSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         configureVchaTask(_this: vsanhealthService.vim.ManagedObjectReference, configSpec: vsanhealthService.vim.VchaClusterConfigSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createPassiveNodeTask(_this: vsanhealthService.vim.ManagedObjectReference, passiveDeploymentSpec: vsanhealthService.vim.PassiveNodeDeploymentSpec, sourceVcSpec: vsanhealthService.vim.SourceNodeSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createWitnessNodeTask(_this: vsanhealthService.vim.ManagedObjectReference, witnessDeploymentSpec: vsanhealthService.vim.NodeDeploymentSpec, sourceVcSpec: vsanhealthService.vim.SourceNodeSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getVchaConfig(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VchaClusterConfigInfo>;
         destroyVchaTask(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         setClusterModeTask(_this: vsanhealthService.vim.ManagedObjectReference, mode: string): Promise<vsanhealthService.vim.ManagedObjectReference>;
         getClusterMode(_this: vsanhealthService.vim.ManagedObjectReference): Promise<string>;
         getVchaClusterHealth(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VchaClusterHealth>;
         initiateFailoverTask(_this: vsanhealthService.vim.ManagedObjectReference, planned: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         openInventoryViewFolder(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         closeInventoryViewFolder(_this: vsanhealthService.vim.ManagedObjectReference, entity: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         modifyListView(_this: vsanhealthService.vim.ManagedObjectReference, add: Array<vsanhealthService.vim.ManagedObjectReference>, remove: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         resetListView(_this: vsanhealthService.vim.ManagedObjectReference, obj: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<Array<vsanhealthService.vim.ManagedObjectReference>>;
         resetListViewFromView(_this: vsanhealthService.vim.ManagedObjectReference, view: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         destroyView(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createInventoryView(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createContainerView(_this: vsanhealthService.vim.ManagedObjectReference, container: vsanhealthService.vim.ManagedObjectReference, type: Array<string>, recursive: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createListView(_this: vsanhealthService.vim.ManagedObjectReference, obj: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         createListViewFromView(_this: vsanhealthService.vim.ManagedObjectReference, view: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         revertToSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, suppressPowerOn: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         removeSnapshotTask(_this: vsanhealthService.vim.ManagedObjectReference, removeChildren: boolean, consolidate: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         renameSnapshot(_this: vsanhealthService.vim.ManagedObjectReference, name: string, description: string): Promise<void>;
         exportSnapshot(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkCompatibilityTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, testType: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         queryVMotionCompatibilityExTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: Array<vsanhealthService.vim.ManagedObjectReference>, host: Array<vsanhealthService.vim.ManagedObjectReference>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkMigrateTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, host: vsanhealthService.vim.ManagedObjectReference, pool: vsanhealthService.vim.ManagedObjectReference, state: vsanhealthService.vim.VirtualMachinePowerState, testType: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         checkRelocateTask(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VirtualMachineRelocateSpec, testType: Array<string>): Promise<vsanhealthService.vim.ManagedObjectReference>;
         addGuestAlias(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string, mapCert: boolean, base64Cert: string, aliasInfo: vsanhealthService.vim.GuestAuthAliasInfo): Promise<void>;
         removeGuestAlias(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string, base64Cert: string, subject: vsanhealthService.vim.GuestAuthSubject): Promise<void>;
         removeGuestAliasByCert(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string, base64Cert: string): Promise<void>;
         listGuestAliases(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, username: string): Promise<Array<vsanhealthService.vim.GuestAliases>>;
         listGuestMappedAliases(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication): Promise<Array<vsanhealthService.vim.GuestMappedAliases>>;
         validateCredentialsInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication): Promise<void>;
         acquireCredentialsInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, requestedAuth: vsanhealthService.vim.GuestAuthentication, sessionID: number): Promise<vsanhealthService.vim.GuestAuthentication>;
         releaseCredentialsInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication): Promise<void>;
         makeDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, directoryPath: string, createParentDirectories: boolean): Promise<void>;
         deleteFileInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, filePath: string): Promise<void>;
         deleteDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, directoryPath: string, recursive: boolean): Promise<void>;
         moveDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, srcDirectoryPath: string, dstDirectoryPath: string): Promise<void>;
         moveFileInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, srcFilePath: string, dstFilePath: string, overwrite: boolean): Promise<void>;
         createTemporaryFileInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, prefix: string, suffix: string, directoryPath: string): Promise<string>;
         createTemporaryDirectoryInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, prefix: string, suffix: string, directoryPath: string): Promise<string>;
         listFilesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, filePath: string, index: number, maxResults: number, matchPattern: string): Promise<vsanhealthService.vim.GuestListFileInfo>;
         changeFileAttributesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, guestFilePath: string, fileAttributes: vsanhealthService.vim.GuestFileAttributes): Promise<void>;
         initiateFileTransferFromGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, guestFilePath: string): Promise<vsanhealthService.vim.FileTransferInformation>;
         initiateFileTransferToGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, guestFilePath: string, fileAttributes: vsanhealthService.vim.GuestFileAttributes, fileSize: number, overwrite: boolean): Promise<string>;
         startProgramInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, spec: vsanhealthService.vim.GuestProgramSpec): Promise<number>;
         listProcessesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, pids: Array<number>): Promise<Array<vsanhealthService.vim.GuestProcessInfo>>;
         terminateProcessInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, pid: number): Promise<void>;
         readEnvironmentVariableInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, names: Array<string>): Promise<Array<string>>;
         createRegistryKeyInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, isVolatile: boolean, classType: string): Promise<void>;
         listRegistryKeysInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, recursive: boolean, matchPattern: string): Promise<Array<vsanhealthService.vim.GuestRegKeyRecordSpec>>;
         deleteRegistryKeyInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, recursive: boolean): Promise<void>;
         setRegistryValueInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, value: vsanhealthService.vim.GuestRegValueSpec): Promise<void>;
         listRegistryValuesInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, keyName: vsanhealthService.vim.GuestRegKeyNameSpec, expandStrings: boolean, matchPattern: string): Promise<Array<vsanhealthService.vim.GuestRegValueSpec>>;
         deleteRegistryValueInGuest(_this: vsanhealthService.vim.ManagedObjectReference, vm: vsanhealthService.vim.ManagedObjectReference, auth: vsanhealthService.vim.GuestAuthentication, valueName: vsanhealthService.vim.GuestRegValueNameSpec): Promise<void>;
         hostCreateDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRegisterDisk(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string): Promise<vsanhealthService.vim.VStorageObject>;
         hostExtendDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, newCapacityInMB: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostInflateDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRenameVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<void>;
         hostDeleteVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRetrieveVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObject>;
         hostRetrieveVStorageObjectState(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObjectStateInfo>;
         hostListVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         hostCloneVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostRelocateVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmRelocateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostReconcileDatastoreInventoryTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         hostScheduleReconcileDatastoreInventory(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCreateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         registerDisk(_this: vsanhealthService.vim.ManagedObjectReference, path: string, name: string): Promise<vsanhealthService.vim.VStorageObject>;
         extendDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, newCapacityInMB: number): Promise<vsanhealthService.vim.ManagedObjectReference>;
         inflateDiskTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         renameVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, name: string): Promise<void>;
         deleteVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObject>;
         retrieveVStorageObjectState(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.VStorageObjectStateInfo>;
         listVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<Array<string>>;
         cloneVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmCloneSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         relocateVStorageObjectTask(_this: vsanhealthService.vim.ManagedObjectReference, id: string, datastore: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.VslmRelocateSpec): Promise<vsanhealthService.vim.ManagedObjectReference>;
         attachTagToVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, category: string, tag: string): Promise<void>;
         detachTagFromVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string, category: string, tag: string): Promise<void>;
         listVStorageObjectsAttachedToTag(_this: vsanhealthService.vim.ManagedObjectReference, category: string, tag: string): Promise<Array<string>>;
         listTagsAttachedToVStorageObject(_this: vsanhealthService.vim.ManagedObjectReference, id: string): Promise<Array<vsanhealthService.vim.VslmTagEntry>>;
         reconcileDatastoreInventoryTask(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         scheduleReconcileDatastoreInventory(_this: vsanhealthService.vim.ManagedObjectReference, datastore: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         destroyPropertyFilter(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         createFilter(_this: vsanhealthService.vim.ManagedObjectReference, spec: vsanhealthService.vim.PropertyFilterSpec, partialUpdates: boolean): Promise<vsanhealthService.vim.ManagedObjectReference>;
         retrieveProperties(_this: vsanhealthService.vim.ManagedObjectReference, specSet: Array<vsanhealthService.vim.PropertyFilterSpec>): Promise<Array<vsanhealthService.vim.ObjectContent>>;
         checkForUpdates(_this: vsanhealthService.vim.ManagedObjectReference, version: string): Promise<vsanhealthService.vim.UpdateSet>;
         waitForUpdates(_this: vsanhealthService.vim.ManagedObjectReference, version: string): Promise<vsanhealthService.vim.UpdateSet>;
         cancelWaitForUpdates(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
         waitForUpdatesEx(_this: vsanhealthService.vim.ManagedObjectReference, version: string, options: vsanhealthService.vim.WaitOptions): Promise<vsanhealthService.vim.UpdateSet>;
         retrievePropertiesEx(_this: vsanhealthService.vim.ManagedObjectReference, specSet: Array<vsanhealthService.vim.PropertyFilterSpec>, options: vsanhealthService.vim.RetrieveOptions): Promise<vsanhealthService.vim.RetrieveResult>;
         continueRetrievePropertiesEx(_this: vsanhealthService.vim.ManagedObjectReference, token: string): Promise<vsanhealthService.vim.RetrieveResult>;
         cancelRetrievePropertiesEx(_this: vsanhealthService.vim.ManagedObjectReference, token: string): Promise<void>;
         createPropertyCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<vsanhealthService.vim.ManagedObjectReference>;
         destroyPropertyCollector(_this: vsanhealthService.vim.ManagedObjectReference): Promise<void>;
      }
      namespace vsanhealthPort {
      }
   }
}
export = vspherevsan
