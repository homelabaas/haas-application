declare module vsphereintegrity {
   interface integrityService {
      addHandler(handler: Function): void;
      removeHandler(handler: Function): void;
      serializeObject(obj: Object, name: string): Node;
      deserializeObject(obj: Node): Object;
      serviceInstance: integrityService.vim.ManagedObjectReference;
      serviceContent: integrityService.integrity.VcIntegrityContent;
      xs: {
         AnyType: {
            (options?: integrityService.xs.AnyType): integrityService.xs.AnyType;
         };
         AnyURI: {
            (options?: integrityService.xs.AnyURI): integrityService.xs.AnyURI;
         };
         Base64Binary: {
            (options?: integrityService.xs.Base64Binary): integrityService.xs.Base64Binary;
         };
         Boolean: {
            (options?: integrityService.xs.Boolean): integrityService.xs.Boolean;
         };
         Byte: {
            (options?: integrityService.xs.Byte): integrityService.xs.Byte;
         };
         DateTime: {
            (options?: integrityService.xs.DateTime): integrityService.xs.DateTime;
         };
         Double: {
            (options?: integrityService.xs.Double): integrityService.xs.Double;
         };
         Float: {
            (options?: integrityService.xs.Float): integrityService.xs.Float;
         };
         ID: {
            (options?: integrityService.xs.ID): integrityService.xs.ID;
         };
         Int: {
            (options?: integrityService.xs.Int): integrityService.xs.Int;
         };
         Integer: {
            (options?: integrityService.xs.Integer): integrityService.xs.Integer;
         };
         Long: {
            (options?: integrityService.xs.Long): integrityService.xs.Long;
         };
         NCName: {
            (options?: integrityService.xs.NCName): integrityService.xs.NCName;
         };
         NegativeInteger: {
            (options?: integrityService.xs.NegativeInteger): integrityService.xs.NegativeInteger;
         };
         NonNegativeInteger: {
            (options?: integrityService.xs.NonNegativeInteger): integrityService.xs.NonNegativeInteger;
         };
         NonPositiveInteger: {
            (options?: integrityService.xs.NonPositiveInteger): integrityService.xs.NonPositiveInteger;
         };
         PositiveInteger: {
            (options?: integrityService.xs.PositiveInteger): integrityService.xs.PositiveInteger;
         };
         QName: {
            (options?: integrityService.xs.QName): integrityService.xs.QName;
         };
         Short: {
            (options?: integrityService.xs.Short): integrityService.xs.Short;
         };
         String: {
            (options?: integrityService.xs.String): integrityService.xs.String;
         };
         UnsignedLong: {
            (options?: integrityService.xs.UnsignedLong): integrityService.xs.UnsignedLong;
         };
      }
      integrity: {
         BaselineAttributeBaselineType: {
            "Patch": string;
            "Upgrade": string;
            "Configuration": string;
            "Extension": string;
         };
         BaselineAttributeAttribute: {
            "Singleton": string;
            "LeafOnly": string;
            "NonRemediable": string;
         };
         BaselineAttribute: {
            (options?: integrityService.integrity.BaselineAttribute): integrityService.integrity.BaselineAttribute;
         };
         BaselineGroupManagerBaselineGroupSpec: {
            (options?: integrityService.integrity.BaselineGroupManagerBaselineGroupSpec): integrityService.integrity.BaselineGroupManagerBaselineGroupSpec;
         };
         BaselineGroupManagerBaselineGroupInfo: {
            (options?: integrityService.integrity.BaselineGroupManagerBaselineGroupInfo): integrityService.integrity.BaselineGroupManagerBaselineGroupInfo;
         };
         ArrayOfBaselineGroupManagerBaselineGroupInfo: {
            (options?: integrityService.integrity.ArrayOfBaselineGroupManagerBaselineGroupInfo): integrityService.integrity.ArrayOfBaselineGroupManagerBaselineGroupInfo;
         };
         BaselineGroupManagerTargetBaselineGroup: {
            (options?: integrityService.integrity.BaselineGroupManagerTargetBaselineGroup): integrityService.integrity.BaselineGroupManagerTargetBaselineGroup;
         };
         ArrayOfBaselineGroupManagerTargetBaselineGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineGroupManagerTargetBaselineGroup): integrityService.integrity.ArrayOfBaselineGroupManagerTargetBaselineGroup;
         };
         BaselineGroupManagerAssignedEntityGroup: {
            (options?: integrityService.integrity.BaselineGroupManagerAssignedEntityGroup): integrityService.integrity.BaselineGroupManagerAssignedEntityGroup;
         };
         ArrayOfBaselineGroupManagerAssignedEntityGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineGroupManagerAssignedEntityGroup): integrityService.integrity.ArrayOfBaselineGroupManagerAssignedEntityGroup;
         };
         BaselineInfoContentType: {
            "DYNAMIC": string;
            "STATIC": string;
            "BOTH": string;
            "INVALID": string;
         };
         BaselineInfo: {
            (options?: integrityService.integrity.BaselineInfo): integrityService.integrity.BaselineInfo;
         };
         ArrayOfBaselineInfo: {
            (options?: integrityService.integrity.ArrayOfBaselineInfo): integrityService.integrity.ArrayOfBaselineInfo;
         };
         BaselineManagerBaselinesSearchSpec: {
            (options?: integrityService.integrity.BaselineManagerBaselinesSearchSpec): integrityService.integrity.BaselineManagerBaselinesSearchSpec;
         };
         BaselineManagerTargetBaselineGroup: {
            (options?: integrityService.integrity.BaselineManagerTargetBaselineGroup): integrityService.integrity.BaselineManagerTargetBaselineGroup;
         };
         ArrayOfBaselineManagerTargetBaselineGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerTargetBaselineGroup): integrityService.integrity.ArrayOfBaselineManagerTargetBaselineGroup;
         };
         BaselineManagerAssignedEntityGroup: {
            (options?: integrityService.integrity.BaselineManagerAssignedEntityGroup): integrityService.integrity.BaselineManagerAssignedEntityGroup;
         };
         ArrayOfBaselineManagerAssignedEntityGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerAssignedEntityGroup): integrityService.integrity.ArrayOfBaselineManagerAssignedEntityGroup;
         };
         BaselineManagerTargetMissingPatchGroup: {
            (options?: integrityService.integrity.BaselineManagerTargetMissingPatchGroup): integrityService.integrity.BaselineManagerTargetMissingPatchGroup;
         };
         ArrayOfBaselineManagerTargetMissingPatchGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerTargetMissingPatchGroup): integrityService.integrity.ArrayOfBaselineManagerTargetMissingPatchGroup;
         };
         BaselineManagerUpdateBaselinesGroup: {
            (options?: integrityService.integrity.BaselineManagerUpdateBaselinesGroup): integrityService.integrity.BaselineManagerUpdateBaselinesGroup;
         };
         ArrayOfBaselineManagerUpdateBaselinesGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerUpdateBaselinesGroup): integrityService.integrity.ArrayOfBaselineManagerUpdateBaselinesGroup;
         };
         BaselineManagerUpdateGroup: {
            (options?: integrityService.integrity.BaselineManagerUpdateGroup): integrityService.integrity.BaselineManagerUpdateGroup;
         };
         ArrayOfBaselineManagerUpdateGroup: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerUpdateGroup): integrityService.integrity.ArrayOfBaselineManagerUpdateGroup;
         };
         BaselineManagerVmHWScanResult: {
            (options?: integrityService.integrity.BaselineManagerVmHWScanResult): integrityService.integrity.BaselineManagerVmHWScanResult;
         };
         ArrayOfBaselineManagerVmHWScanResult: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerVmHWScanResult): integrityService.integrity.ArrayOfBaselineManagerVmHWScanResult;
         };
         BaselineManagerVmToolsStatus: {
            (options?: integrityService.integrity.BaselineManagerVmToolsStatus): integrityService.integrity.BaselineManagerVmToolsStatus;
         };
         ArrayOfBaselineManagerVmToolsStatus: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerVmToolsStatus): integrityService.integrity.ArrayOfBaselineManagerVmToolsStatus;
         };
         BaselineManagerBaselineEntityUpdateInfo: {
            (options?: integrityService.integrity.BaselineManagerBaselineEntityUpdateInfo): integrityService.integrity.BaselineManagerBaselineEntityUpdateInfo;
         };
         ArrayOfBaselineManagerBaselineEntityUpdateInfo: {
            (options?: integrityService.integrity.ArrayOfBaselineManagerBaselineEntityUpdateInfo): integrityService.integrity.ArrayOfBaselineManagerBaselineEntityUpdateInfo;
         };
         BaselineSpec: {
            (options?: integrityService.integrity.BaselineSpec): integrityService.integrity.BaselineSpec;
         };
         BaselineComplianceStatusStatus: {
            "Compliant": string;
            "NotCompliant": string;
            "Unknown": string;
            "Incompatible": string;
         };
         BaselineComplianceStatus: {
            (options?: integrityService.integrity.BaselineComplianceStatus): integrityService.integrity.BaselineComplianceStatus;
         };
         ArrayOfBaselineComplianceStatus: {
            (options?: integrityService.integrity.ArrayOfBaselineComplianceStatus): integrityService.integrity.ArrayOfBaselineComplianceStatus;
         };
         BaselineGroupComplianceStatus: {
            (options?: integrityService.integrity.BaselineGroupComplianceStatus): integrityService.integrity.BaselineGroupComplianceStatus;
         };
         ArrayOfBaselineGroupComplianceStatus: {
            (options?: integrityService.integrity.ArrayOfBaselineGroupComplianceStatus): integrityService.integrity.ArrayOfBaselineGroupComplianceStatus;
         };
         ComplianceStatusManagerDetailedComplianceStatusSpec: {
            (options?: integrityService.integrity.ComplianceStatusManagerDetailedComplianceStatusSpec): integrityService.integrity.ComplianceStatusManagerDetailedComplianceStatusSpec;
         };
         ComplianceStatusManagerEntityBaselinesCompliance: {
            (options?: integrityService.integrity.ComplianceStatusManagerEntityBaselinesCompliance): integrityService.integrity.ComplianceStatusManagerEntityBaselinesCompliance;
         };
         ArrayOfComplianceStatusManagerEntityBaselinesCompliance: {
            (options?: integrityService.integrity.ArrayOfComplianceStatusManagerEntityBaselinesCompliance): integrityService.integrity.ArrayOfComplianceStatusManagerEntityBaselinesCompliance;
         };
         ComplianceStatusManagerEntityComplianceCountsSummary: {
            (options?: integrityService.integrity.ComplianceStatusManagerEntityComplianceCountsSummary): integrityService.integrity.ComplianceStatusManagerEntityComplianceCountsSummary;
         };
         ComplianceStatusManagerEntityBaselinesComplianceSummary: {
            (options?: integrityService.integrity.ComplianceStatusManagerEntityBaselinesComplianceSummary): integrityService.integrity.ComplianceStatusManagerEntityBaselinesComplianceSummary;
         };
         ComplianceStatusManagerUpdateStatus: {
            "Missing": string;
            "Installed": string;
            "NotApplicable": string;
            "Unknown": string;
            "Staged": string;
            "Conflict": string;
            "ObsoletedByHost": string;
            "MissingPackage": string;
            "NotInstallable": string;
            "NewModule": string;
            "UnsupportedUpgrade": string;
            "IncompatibleHardware": string;
            "ConflictingNewModule": string;
            "InstalledRecalled": string;
            "NotApplicableRecalled": string;
            "PrerequisiteRecalled": string;
            "MissingRecalled": string;
            "NewModuleRecalled": string;
            "PrerequisiteRecalledInstalled": string;
            "IncompatibleSoftwareConfig": string;
         };
         ComplianceStatusManagerUpdateCompliantStatus: {
            (options?: integrityService.integrity.ComplianceStatusManagerUpdateCompliantStatus): integrityService.integrity.ComplianceStatusManagerUpdateCompliantStatus;
         };
         ArrayOfComplianceStatusManagerUpdateCompliantStatus: {
            (options?: integrityService.integrity.ArrayOfComplianceStatusManagerUpdateCompliantStatus): integrityService.integrity.ArrayOfComplianceStatusManagerUpdateCompliantStatus;
         };
         ComplianceStatusManagerBaselineUpdateStatus: {
            (options?: integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus): integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus;
         };
         ArrayOfComplianceStatusManagerBaselineUpdateStatus: {
            (options?: integrityService.integrity.ArrayOfComplianceStatusManagerBaselineUpdateStatus): integrityService.integrity.ArrayOfComplianceStatusManagerBaselineUpdateStatus;
         };
         ComplianceStatusManagerUpdateStatusSummary: {
            (options?: integrityService.integrity.ComplianceStatusManagerUpdateStatusSummary): integrityService.integrity.ComplianceStatusManagerUpdateStatusSummary;
         };
         ArrayOfComplianceStatusManagerUpdateStatusSummary: {
            (options?: integrityService.integrity.ArrayOfComplianceStatusManagerUpdateStatusSummary): integrityService.integrity.ArrayOfComplianceStatusManagerUpdateStatusSummary;
         };
         ComplianceStatusManagerEntityComplianceStatus: {
            (options?: integrityService.integrity.ComplianceStatusManagerEntityComplianceStatus): integrityService.integrity.ComplianceStatusManagerEntityComplianceStatus;
         };
         ArrayOfComplianceStatusManagerEntityComplianceStatus: {
            (options?: integrityService.integrity.ArrayOfComplianceStatusManagerEntityComplianceStatus): integrityService.integrity.ArrayOfComplianceStatusManagerEntityComplianceStatus;
         };
         ComplianceStatusManagerEntityStatusSummary: {
            (options?: integrityService.integrity.ComplianceStatusManagerEntityStatusSummary): integrityService.integrity.ComplianceStatusManagerEntityStatusSummary;
         };
         GuestRemediationRollbackOption: {
            (options?: integrityService.integrity.GuestRemediationRollbackOption): integrityService.integrity.GuestRemediationRollbackOption;
         };
         GuestRemediationScheduleOptionActionTime: {
            "Immediate": string;
            "Later": string;
            "Notification": string;
         };
         GuestRemediationScheduleOption: {
            (options?: integrityService.integrity.GuestRemediationScheduleOption): integrityService.integrity.GuestRemediationScheduleOption;
         };
         HostRemediationScheduleOptionFailureAction: {
            "FailTask": string;
            "Retry": string;
         };
         HostRemediationScheduleOptionPreRemediationPowerAction: {
            "PowerOffVMs": string;
            "SuspendVMs": string;
            "DoNotChangeVMsPowerState": string;
         };
         HostRemediationScheduleOption: {
            (options?: integrityService.integrity.HostRemediationScheduleOption): integrityService.integrity.HostRemediationScheduleOption;
         };
         ConfigSpec: {
            (options?: integrityService.integrity.ConfigSpec): integrityService.integrity.ConfigSpec;
         };
         VciDVSOption: {
            (options?: integrityService.integrity.VciDVSOption): integrityService.integrity.VciDVSOption;
         };
         VciDVSScanOption: {
            (options?: integrityService.integrity.VciDVSScanOption): integrityService.integrity.VciDVSScanOption;
         };
         VciDVSScanSpec: {
            (options?: integrityService.integrity.VciDVSScanSpec): integrityService.integrity.VciDVSScanSpec;
         };
         VciDVSStagingOption: {
            (options?: integrityService.integrity.VciDVSStagingOption): integrityService.integrity.VciDVSStagingOption;
         };
         VciDVSStagingSpec: {
            (options?: integrityService.integrity.VciDVSStagingSpec): integrityService.integrity.VciDVSStagingSpec;
         };
         VciDVSRemediationOption: {
            (options?: integrityService.integrity.VciDVSRemediationOption): integrityService.integrity.VciDVSRemediationOption;
         };
         VciDVSRemediationSpec: {
            (options?: integrityService.integrity.VciDVSRemediationSpec): integrityService.integrity.VciDVSRemediationSpec;
         };
         VciDVSUpdateStatus: {
            "Missing": string;
            "Installed": string;
            "NotApplicable": string;
            "Unknown": string;
            "Staged": string;
            "Conflict": string;
            "ObsoletedByHost": string;
         };
         VciDVSResult: {
            "Success": string;
            "Fail": string;
         };
         VciDVSUpdateComplianceStatus: {
            (options?: integrityService.integrity.VciDVSUpdateComplianceStatus): integrityService.integrity.VciDVSUpdateComplianceStatus;
         };
         ArrayOfVciDVSUpdateComplianceStatus: {
            (options?: integrityService.integrity.ArrayOfVciDVSUpdateComplianceStatus): integrityService.integrity.ArrayOfVciDVSUpdateComplianceStatus;
         };
         VciDVSUpdateComplianceStatusGroup: {
            (options?: integrityService.integrity.VciDVSUpdateComplianceStatusGroup): integrityService.integrity.VciDVSUpdateComplianceStatusGroup;
         };
         ArrayOfVciDVSUpdateComplianceStatusGroup: {
            (options?: integrityService.integrity.ArrayOfVciDVSUpdateComplianceStatusGroup): integrityService.integrity.ArrayOfVciDVSUpdateComplianceStatusGroup;
         };
         VciDVSUpdateComplianceStatusSpec: {
            (options?: integrityService.integrity.VciDVSUpdateComplianceStatusSpec): integrityService.integrity.VciDVSUpdateComplianceStatusSpec;
         };
         BasicComplianceStatus: {
            (options?: integrityService.integrity.BasicComplianceStatus): integrityService.integrity.BasicComplianceStatus;
         };
         EulaManagerEulaStatus: {
            "EULA_NOTAPPLICABLE": string;
            "EULA_ACCEPTED": string;
            "EULA_NOTACCEPTED": string;
         };
         FileUploadManagerFileFunctionalType: {
            "Upgrade": string;
            "Patch": string;
            "StateElement": string;
         };
         FileUploadManagerOperationType: {
            "Upload": string;
            "Confirm": string;
            "UploadAndConfirm": string;
            "Cancel": string;
         };
         FileUploadManagerFileUploadSpec: {
            (options?: integrityService.integrity.FileUploadManagerFileUploadSpec): integrityService.integrity.FileUploadManagerFileUploadSpec;
         };
         FileUploadManagerFileUploadResponse: {
            (options?: integrityService.integrity.FileUploadManagerFileUploadResponse): integrityService.integrity.FileUploadManagerFileUploadResponse;
         };
         PatchBundleDetail: {
            (options?: integrityService.integrity.PatchBundleDetail): integrityService.integrity.PatchBundleDetail;
         };
         UpgradePackageDetail: {
            (options?: integrityService.integrity.UpgradePackageDetail): integrityService.integrity.UpgradePackageDetail;
         };
         HostUpgradeBaselineSpec: {
            (options?: integrityService.integrity.HostUpgradeBaselineSpec): integrityService.integrity.HostUpgradeBaselineSpec;
         };
         HostUpgradeBaselineInfo: {
            (options?: integrityService.integrity.HostUpgradeBaselineInfo): integrityService.integrity.HostUpgradeBaselineInfo;
         };
         HostUpgradeOptionManagerOptions: {
            (options?: integrityService.integrity.HostUpgradeOptionManagerOptions): integrityService.integrity.HostUpgradeOptionManagerOptions;
         };
         ArrayOfHostUpgradeOptionManagerOptions: {
            (options?: integrityService.integrity.ArrayOfHostUpgradeOptionManagerOptions): integrityService.integrity.ArrayOfHostUpgradeOptionManagerOptions;
         };
         IntegrityDescription: {
            (options?: integrityService.integrity.IntegrityDescription): integrityService.integrity.IntegrityDescription;
         };
         MissingUpdateReasonCode: {
            "fileOutOfDate": string;
            "regOutOfDate": string;
         };
         MissingUpdate: {
            (options?: integrityService.integrity.MissingUpdate): integrityService.integrity.MissingUpdate;
         };
         NewUpdateConfigSpec: {
            (options?: integrityService.integrity.NewUpdateConfigSpec): integrityService.integrity.NewUpdateConfigSpec;
         };
         PlatformInfoOsFamily: {
            "NO_OS": string;
            "WINDOWS": string;
            "LINUX": string;
            "ESX": string;
            "EESX": string;
            "OTHER": string;
         };
         PlatformInfo: {
            (options?: integrityService.integrity.PlatformInfo): integrityService.integrity.PlatformInfo;
         };
         ArrayOfPlatformInfo: {
            (options?: integrityService.integrity.ArrayOfPlatformInfo): integrityService.integrity.ArrayOfPlatformInfo;
         };
         Scheduler: {
            (options?: integrityService.integrity.Scheduler): integrityService.integrity.Scheduler;
         };
         AfterStartupScheduler: {
            (options?: integrityService.integrity.AfterStartupScheduler): integrityService.integrity.AfterStartupScheduler;
         };
         OnceScheduler: {
            (options?: integrityService.integrity.OnceScheduler): integrityService.integrity.OnceScheduler;
         };
         RecurrentScheduler: {
            (options?: integrityService.integrity.RecurrentScheduler): integrityService.integrity.RecurrentScheduler;
         };
         HourlyScheduler: {
            (options?: integrityService.integrity.HourlyScheduler): integrityService.integrity.HourlyScheduler;
         };
         DailyScheduler: {
            (options?: integrityService.integrity.DailyScheduler): integrityService.integrity.DailyScheduler;
         };
         WeeklyScheduler: {
            (options?: integrityService.integrity.WeeklyScheduler): integrityService.integrity.WeeklyScheduler;
         };
         MonthlyScheduler: {
            (options?: integrityService.integrity.MonthlyScheduler): integrityService.integrity.MonthlyScheduler;
         };
         MonthlyByDayScheduler: {
            (options?: integrityService.integrity.MonthlyByDayScheduler): integrityService.integrity.MonthlyByDayScheduler;
         };
         MonthlyByWeekdaySchedulerDayOfWeek: {
            "sunday": string;
            "monday": string;
            "tuesday": string;
            "wednesday": string;
            "thursday": string;
            "friday": string;
            "saturday": string;
         };
         MonthlyByWeekdaySchedulerWeekOfMonth: {
            "first": string;
            "second": string;
            "third": string;
            "fourth": string;
            "last": string;
         };
         MonthlyByWeekdayScheduler: {
            (options?: integrityService.integrity.MonthlyByWeekdayScheduler): integrityService.integrity.MonthlyByWeekdayScheduler;
         };
         IntegrityUserSession: {
            (options?: integrityService.integrity.IntegrityUserSession): integrityService.integrity.IntegrityUserSession;
         };
         SoftwareUpdateDetail: {
            (options?: integrityService.integrity.SoftwareUpdateDetail): integrityService.integrity.SoftwareUpdateDetail;
         };
         ServicePackDetail: {
            (options?: integrityService.integrity.ServicePackDetail): integrityService.integrity.ServicePackDetail;
         };
         SoftwareUpdateInfoUpdateType: {
            "Other": string;
            "OperatingSystem": string;
            "Security": string;
         };
         SoftwareUpdateInfoImpactLevel: {
            "Low": string;
            "Moderate": string;
            "Important": string;
            "Critical": string;
         };
         SoftwareUpdateInfoTargetType: {
            "VM": string;
            "HOST": string;
            "VA": string;
         };
         SoftwareUpdateInfoTargetComponent: {
            "HOST_GENERAL": string;
            "HOST_THIRDPARTY": string;
            "VM_GENERAL": string;
            "VM_TOOLS": string;
            "VM_HARDWAREVERSION": string;
            "VA_GENERAL": string;
         };
         SoftwareUpdateInfoHostUpdateCategory: {
            "SecurityFix": string;
            "BugFix": string;
            "Enhancement": string;
            "Recall": string;
            "RecallFix": string;
            "Info": string;
            "Misc": string;
         };
         SoftwareUpdateInfo: {
            (options?: integrityService.integrity.SoftwareUpdateInfo): integrityService.integrity.SoftwareUpdateInfo;
         };
         ArrayOfSoftwareUpdateInfo: {
            (options?: integrityService.integrity.ArrayOfSoftwareUpdateInfo): integrityService.integrity.ArrayOfSoftwareUpdateInfo;
         };
         NotificationInfo: {
            (options?: integrityService.integrity.NotificationInfo): integrityService.integrity.NotificationInfo;
         };
         ArrayOfNotificationInfo: {
            (options?: integrityService.integrity.ArrayOfNotificationInfo): integrityService.integrity.ArrayOfNotificationInfo;
         };
         SoftwareUpdate: {
            (options?: integrityService.integrity.SoftwareUpdate): integrityService.integrity.SoftwareUpdate;
         };
         ArrayOfSoftwareUpdate: {
            (options?: integrityService.integrity.ArrayOfSoftwareUpdate): integrityService.integrity.ArrayOfSoftwareUpdate;
         };
         SoftwareUpdateURLURLType: {
            "VMWindowsPatches": string;
            "VMUnixPatches": string;
            "ESX3xHostPatches": string;
            "ESX4xHostPatches": string;
            "ThirdPartyHostPatches": string;
            "VAUpgrades": string;
            "ThirdPartyVAUpgrades": string;
            "IntranetPatchSource": string;
            "Unknown": string;
         };
         SoftwareUpdateURL: {
            (options?: integrityService.integrity.SoftwareUpdateURL): integrityService.integrity.SoftwareUpdateURL;
         };
         ArrayOfSoftwareUpdateURL: {
            (options?: integrityService.integrity.ArrayOfSoftwareUpdateURL): integrityService.integrity.ArrayOfSoftwareUpdateURL;
         };
         URLTestResult: {
            (options?: integrityService.integrity.URLTestResult): integrityService.integrity.URLTestResult;
         };
         BaselineSoftwareUpdates: {
            (options?: integrityService.integrity.BaselineSoftwareUpdates): integrityService.integrity.BaselineSoftwareUpdates;
         };
         UpdateBaselineSpec: {
            (options?: integrityService.integrity.UpdateBaselineSpec): integrityService.integrity.UpdateBaselineSpec;
         };
         UpdateBaselineInfo: {
            (options?: integrityService.integrity.UpdateBaselineInfo): integrityService.integrity.UpdateBaselineInfo;
         };
         UpdateComplianceStatus: {
            (options?: integrityService.integrity.UpdateComplianceStatus): integrityService.integrity.UpdateComplianceStatus;
         };
         ArrayOfUpdateComplianceStatus: {
            (options?: integrityService.integrity.ArrayOfUpdateComplianceStatus): integrityService.integrity.ArrayOfUpdateComplianceStatus;
         };
         UpdateComplianceStatusReport: {
            (options?: integrityService.integrity.UpdateComplianceStatusReport): integrityService.integrity.UpdateComplianceStatusReport;
         };
         VcIntegrityOption: {
            (options?: integrityService.integrity.VcIntegrityOption): integrityService.integrity.VcIntegrityOption;
         };
         VcIntegrityScanOption: {
            (options?: integrityService.integrity.VcIntegrityScanOption): integrityService.integrity.VcIntegrityScanOption;
         };
         VcIntegrityStageOption: {
            (options?: integrityService.integrity.VcIntegrityStageOption): integrityService.integrity.VcIntegrityStageOption;
         };
         VcIntegrityRemediateOption: {
            (options?: integrityService.integrity.VcIntegrityRemediateOption): integrityService.integrity.VcIntegrityRemediateOption;
         };
         RecallFixDetail: {
            (options?: integrityService.integrity.RecallFixDetail): integrityService.integrity.RecallFixDetail;
         };
         ArrayOfRecallFixDetail: {
            (options?: integrityService.integrity.ArrayOfRecallFixDetail): integrityService.integrity.ArrayOfRecallFixDetail;
         };
         PatchRecallDetailInfo: {
            (options?: integrityService.integrity.PatchRecallDetailInfo): integrityService.integrity.PatchRecallDetailInfo;
         };
         EntityToolsUpgradeOption: {
            (options?: integrityService.integrity.EntityToolsUpgradeOption): integrityService.integrity.EntityToolsUpgradeOption;
         };
         ArrayOfEntityToolsUpgradeOption: {
            (options?: integrityService.integrity.ArrayOfEntityToolsUpgradeOption): integrityService.integrity.ArrayOfEntityToolsUpgradeOption;
         };
         UpdateManagerSearchSpec: {
            (options?: integrityService.integrity.UpdateManagerSearchSpec): integrityService.integrity.UpdateManagerSearchSpec;
         };
         UpdateManagerScanType: {
            (options?: integrityService.integrity.UpdateManagerScanType): integrityService.integrity.UpdateManagerScanType;
         };
         ArrayOfUpdateManagerScanType: {
            (options?: integrityService.integrity.ArrayOfUpdateManagerScanType): integrityService.integrity.ArrayOfUpdateManagerScanType;
         };
         UpdateManagerScanSpec: {
            (options?: integrityService.integrity.UpdateManagerScanSpec): integrityService.integrity.UpdateManagerScanSpec;
         };
         UpdateManagerStageSpec: {
            (options?: integrityService.integrity.UpdateManagerStageSpec): integrityService.integrity.UpdateManagerStageSpec;
         };
         UpdateManagerBaselineGroupUnit: {
            (options?: integrityService.integrity.UpdateManagerBaselineGroupUnit): integrityService.integrity.UpdateManagerBaselineGroupUnit;
         };
         UpdateManagerRemediationSpec: {
            (options?: integrityService.integrity.UpdateManagerRemediationSpec): integrityService.integrity.UpdateManagerRemediationSpec;
         };
         UpdateManagerPrecheckResult: {
            (options?: integrityService.integrity.UpdateManagerPrecheckResult): integrityService.integrity.UpdateManagerPrecheckResult;
         };
         ArrayOfUpdateManagerPrecheckResult: {
            (options?: integrityService.integrity.ArrayOfUpdateManagerPrecheckResult): integrityService.integrity.ArrayOfUpdateManagerPrecheckResult;
         };
         UpdateManagerPrecheckResults: {
            (options?: integrityService.integrity.UpdateManagerPrecheckResults): integrityService.integrity.UpdateManagerPrecheckResults;
         };
         UpdateManagerUpdateManagerProductDescription: {
            (options?: integrityService.integrity.UpdateManagerUpdateManagerProductDescription): integrityService.integrity.UpdateManagerUpdateManagerProductDescription;
         };
         ArrayOfUpdateManagerUpdateManagerProductDescription: {
            (options?: integrityService.integrity.ArrayOfUpdateManagerUpdateManagerProductDescription): integrityService.integrity.ArrayOfUpdateManagerUpdateManagerProductDescription;
         };
         UpgradeBaselineSpec: {
            (options?: integrityService.integrity.UpgradeBaselineSpec): integrityService.integrity.UpgradeBaselineSpec;
         };
         UpgradeBaselineInfo: {
            (options?: integrityService.integrity.UpgradeBaselineInfo): integrityService.integrity.UpgradeBaselineInfo;
         };
         UpgradeComplianceStatus: {
            (options?: integrityService.integrity.UpgradeComplianceStatus): integrityService.integrity.UpgradeComplianceStatus;
         };
         ArrayOfUpgradeComplianceStatus: {
            (options?: integrityService.integrity.ArrayOfUpgradeComplianceStatus): integrityService.integrity.ArrayOfUpgradeComplianceStatus;
         };
         UpgradeComplianceStatusReport: {
            (options?: integrityService.integrity.UpgradeComplianceStatusReport): integrityService.integrity.UpgradeComplianceStatusReport;
         };
         UpgradeProductManagerUpgradeProductType: {
            "Host": string;
            "VirtualAppliance": string;
            "VirtualMachineHardware": string;
            "VirtualMachineTools": string;
         };
         UpgradeProductManagerAcceptanceLevel: {
            "Certified": string;
            "Accepted": string;
            "Partner": string;
            "Community": string;
         };
         UpgradeProductManagerSoftwarePackage: {
            (options?: integrityService.integrity.UpgradeProductManagerSoftwarePackage): integrityService.integrity.UpgradeProductManagerSoftwarePackage;
         };
         ArrayOfUpgradeProductManagerSoftwarePackage: {
            (options?: integrityService.integrity.ArrayOfUpgradeProductManagerSoftwarePackage): integrityService.integrity.ArrayOfUpgradeProductManagerSoftwarePackage;
         };
         UpgradeProductManagerUpgradeProduct: {
            (options?: integrityService.integrity.UpgradeProductManagerUpgradeProduct): integrityService.integrity.UpgradeProductManagerUpgradeProduct;
         };
         ArrayOfUpgradeProductManagerUpgradeProduct: {
            (options?: integrityService.integrity.ArrayOfUpgradeProductManagerUpgradeProduct): integrityService.integrity.ArrayOfUpgradeProductManagerUpgradeProduct;
         };
         UpgradeReleaseManagerUpgradeRelease: {
            (options?: integrityService.integrity.UpgradeReleaseManagerUpgradeRelease): integrityService.integrity.UpgradeReleaseManagerUpgradeRelease;
         };
         ArrayOfUpgradeReleaseManagerUpgradeRelease: {
            (options?: integrityService.integrity.ArrayOfUpgradeReleaseManagerUpgradeRelease): integrityService.integrity.ArrayOfUpgradeReleaseManagerUpgradeRelease;
         };
         VUMTaskManagerVUMTaskInfo: {
            (options?: integrityService.integrity.VUMTaskManagerVUMTaskInfo): integrityService.integrity.VUMTaskManagerVUMTaskInfo;
         };
         VcIntegrityInternetConnectionResult: {
            (options?: integrityService.integrity.VcIntegrityInternetConnectionResult): integrityService.integrity.VcIntegrityInternetConnectionResult;
         };
         ArrayOfVcIntegrityInternetConnectionResult: {
            (options?: integrityService.integrity.ArrayOfVcIntegrityInternetConnectionResult): integrityService.integrity.ArrayOfVcIntegrityInternetConnectionResult;
         };
         VcIntegrityContent: {
            (options?: integrityService.integrity.VcIntegrityContent): integrityService.integrity.VcIntegrityContent;
         };
         VirtApplianceInfo: {
            (options?: integrityService.integrity.VirtApplianceInfo): integrityService.integrity.VirtApplianceInfo;
         };
         ArrayOfVirtApplianceInfo: {
            (options?: integrityService.integrity.ArrayOfVirtApplianceInfo): integrityService.integrity.ArrayOfVirtApplianceInfo;
         };
         Vulnerability: {
            (options?: integrityService.integrity.Vulnerability): integrityService.integrity.Vulnerability;
         };
         VumElementDescription: {
            (options?: integrityService.integrity.VumElementDescription): integrityService.integrity.VumElementDescription;
         };
         ArrayOfVumElementDescription: {
            (options?: integrityService.integrity.ArrayOfVumElementDescription): integrityService.integrity.ArrayOfVumElementDescription;
         };
         BaselinesAttachedToRelease: {
            (options?: integrityService.integrity.BaselinesAttachedToRelease): integrityService.integrity.BaselinesAttachedToRelease;
         };
         CheckPXEHostFault: {
            (options?: integrityService.integrity.CheckPXEHostFault): integrityService.integrity.CheckPXEHostFault;
         };
         ClusterConfigRestoreFailure: {
            (options?: integrityService.integrity.ClusterConfigRestoreFailure): integrityService.integrity.ClusterConfigRestoreFailure;
         };
         ClusterRemediationPrecheckFailure: {
            (options?: integrityService.integrity.ClusterRemediationPrecheckFailure): integrityService.integrity.ClusterRemediationPrecheckFailure;
         };
         ConfigInfoFault: {
            (options?: integrityService.integrity.ConfigInfoFault): integrityService.integrity.ConfigInfoFault;
         };
         ConflictedBaselines: {
            (options?: integrityService.integrity.ConflictedBaselines): integrityService.integrity.ConflictedBaselines;
         };
         DVSRemediateFailure: {
            (options?: integrityService.integrity.DVSRemediateFailure): integrityService.integrity.DVSRemediateFailure;
         };
         DVSScanFailure: {
            (options?: integrityService.integrity.DVSScanFailure): integrityService.integrity.DVSScanFailure;
         };
         DVSStageFailure: {
            (options?: integrityService.integrity.DVSStageFailure): integrityService.integrity.DVSStageFailure;
         };
         DVSUpdateDownloadFailure: {
            (options?: integrityService.integrity.DVSUpdateDownloadFailure): integrityService.integrity.DVSUpdateDownloadFailure;
         };
         EnterMaintenanceModeFailure: {
            (options?: integrityService.integrity.EnterMaintenanceModeFailure): integrityService.integrity.EnterMaintenanceModeFailure;
         };
         EsxupdateErrorBundleDownloadFault: {
            (options?: integrityService.integrity.EsxupdateErrorBundleDownloadFault): integrityService.integrity.EsxupdateErrorBundleDownloadFault;
         };
         EsxupdateErrorBundleFormatFault: {
            (options?: integrityService.integrity.EsxupdateErrorBundleFormatFault): integrityService.integrity.EsxupdateErrorBundleFormatFault;
         };
         EsxupdateErrorConfigFault: {
            (options?: integrityService.integrity.EsxupdateErrorConfigFault): integrityService.integrity.EsxupdateErrorConfigFault;
         };
         EsxupdateErrorDatabaseFormatFault: {
            (options?: integrityService.integrity.EsxupdateErrorDatabaseFormatFault): integrityService.integrity.EsxupdateErrorDatabaseFormatFault;
         };
         EsxupdateErrorDatabaseIOFault: {
            (options?: integrityService.integrity.EsxupdateErrorDatabaseIOFault): integrityService.integrity.EsxupdateErrorDatabaseIOFault;
         };
         EsxupdateErrorDependencyFault: {
            (options?: integrityService.integrity.EsxupdateErrorDependencyFault): integrityService.integrity.EsxupdateErrorDependencyFault;
         };
         EsxupdateErrorFileIOFault: {
            (options?: integrityService.integrity.EsxupdateErrorFileIOFault): integrityService.integrity.EsxupdateErrorFileIOFault;
         };
         EsxupdateErrorInvalidOptionFault: {
            (options?: integrityService.integrity.EsxupdateErrorInvalidOptionFault): integrityService.integrity.EsxupdateErrorInvalidOptionFault;
         };
         EsxupdateErrorLockingFault: {
            (options?: integrityService.integrity.EsxupdateErrorLockingFault): integrityService.integrity.EsxupdateErrorLockingFault;
         };
         EsxupdateErrorMaintenanceModeFault: {
            (options?: integrityService.integrity.EsxupdateErrorMaintenanceModeFault): integrityService.integrity.EsxupdateErrorMaintenanceModeFault;
         };
         EsxupdateErrorMetadataDownloadFault: {
            (options?: integrityService.integrity.EsxupdateErrorMetadataDownloadFault): integrityService.integrity.EsxupdateErrorMetadataDownloadFault;
         };
         EsxupdateErrorMetadataFormatFault: {
            (options?: integrityService.integrity.EsxupdateErrorMetadataFormatFault): integrityService.integrity.EsxupdateErrorMetadataFormatFault;
         };
         EsxupdateErrorNoMatchFault: {
            (options?: integrityService.integrity.EsxupdateErrorNoMatchFault): integrityService.integrity.EsxupdateErrorNoMatchFault;
         };
         EsxupdateErrorNotRootErrorFault: {
            (options?: integrityService.integrity.EsxupdateErrorNotRootErrorFault): integrityService.integrity.EsxupdateErrorNotRootErrorFault;
         };
         EsxupdateErrorPackageManagerFault: {
            (options?: integrityService.integrity.EsxupdateErrorPackageManagerFault): integrityService.integrity.EsxupdateErrorPackageManagerFault;
         };
         EsxupdateErrorPostScriptFault: {
            (options?: integrityService.integrity.EsxupdateErrorPostScriptFault): integrityService.integrity.EsxupdateErrorPostScriptFault;
         };
         EsxupdateErrorUnhandledExceptionFault: {
            (options?: integrityService.integrity.EsxupdateErrorUnhandledExceptionFault): integrityService.integrity.EsxupdateErrorUnhandledExceptionFault;
         };
         EsxupdateErrorUnsatisfiedDependenciesFault: {
            (options?: integrityService.integrity.EsxupdateErrorUnsatisfiedDependenciesFault): integrityService.integrity.EsxupdateErrorUnsatisfiedDependenciesFault;
         };
         EsxupdateErrorUnsupportedCommandFault: {
            (options?: integrityService.integrity.EsxupdateErrorUnsupportedCommandFault): integrityService.integrity.EsxupdateErrorUnsupportedCommandFault;
         };
         EsxupdateErrorVibDownloadFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibDownloadFault): integrityService.integrity.EsxupdateErrorVibDownloadFault;
         };
         EsxupdateErrorVibFormatFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibFormatFault): integrityService.integrity.EsxupdateErrorVibFormatFault;
         };
         EsxupdateErrorVibIOFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibIOFault): integrityService.integrity.EsxupdateErrorVibIOFault;
         };
         EsxupdateErrorVibSigDigestFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibSigDigestFault): integrityService.integrity.EsxupdateErrorVibSigDigestFault;
         };
         EsxupdateErrorVibSigFormatFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibSigFormatFault): integrityService.integrity.EsxupdateErrorVibSigFormatFault;
         };
         EsxupdateErrorVibSigInvalidFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibSigInvalidFault): integrityService.integrity.EsxupdateErrorVibSigInvalidFault;
         };
         EsxupdateErrorVibSigMissingFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibSigMissingFault): integrityService.integrity.EsxupdateErrorVibSigMissingFault;
         };
         EsxupdateErrorVibSigVersionFault: {
            (options?: integrityService.integrity.EsxupdateErrorVibSigVersionFault): integrityService.integrity.EsxupdateErrorVibSigVersionFault;
         };
         EsxupdateErrorVisorSetupFault: {
            (options?: integrityService.integrity.EsxupdateErrorVisorSetupFault): integrityService.integrity.EsxupdateErrorVisorSetupFault;
         };
         FileDownloadFailure: {
            (options?: integrityService.integrity.FileDownloadFailure): integrityService.integrity.FileDownloadFailure;
         };
         FileUploadInvalidPackage: {
            (options?: integrityService.integrity.FileUploadInvalidPackage): integrityService.integrity.FileUploadInvalidPackage;
         };
         FileUploadNoSessionMatch: {
            (options?: integrityService.integrity.FileUploadNoSessionMatch): integrityService.integrity.FileUploadNoSessionMatch;
         };
         FileUploadNotEnoughSpace: {
            (options?: integrityService.integrity.FileUploadNotEnoughSpace): integrityService.integrity.FileUploadNotEnoughSpace;
         };
         FileUploadUnsupportedFileLocation: {
            (options?: integrityService.integrity.FileUploadUnsupportedFileLocation): integrityService.integrity.FileUploadUnsupportedFileLocation;
         };
         FileUploadUnsupportedFileType: {
            (options?: integrityService.integrity.FileUploadUnsupportedFileType): integrityService.integrity.FileUploadUnsupportedFileType;
         };
         GAInstallFailure: {
            (options?: integrityService.integrity.GAInstallFailure): integrityService.integrity.GAInstallFailure;
         };
         GuestInfoFault: {
            (options?: integrityService.integrity.GuestInfoFault): integrityService.integrity.GuestInfoFault;
         };
         HostCommunicationFault: {
            (options?: integrityService.integrity.HostCommunicationFault): integrityService.integrity.HostCommunicationFault;
         };
         HostGetInfoFailure: {
            (options?: integrityService.integrity.HostGetInfoFailure): integrityService.integrity.HostGetInfoFailure;
         };
         HostInMModeFault: {
            (options?: integrityService.integrity.HostInMModeFault): integrityService.integrity.HostInMModeFault;
         };
         HostPatchConflictDependenciesFailure: {
            (options?: integrityService.integrity.HostPatchConflictDependenciesFailure): integrityService.integrity.HostPatchConflictDependenciesFailure;
         };
         HostPatchConflictPackagesFailure: {
            (options?: integrityService.integrity.HostPatchConflictPackagesFailure): integrityService.integrity.HostPatchConflictPackagesFailure;
         };
         HostPatchConflictPatchesFailure: {
            (options?: integrityService.integrity.HostPatchConflictPatchesFailure): integrityService.integrity.HostPatchConflictPatchesFailure;
         };
         HostPatchConflictVibsFailure: {
            (options?: integrityService.integrity.HostPatchConflictVibsFailure): integrityService.integrity.HostPatchConflictVibsFailure;
         };
         HostPatchCycleDetectedFailure: {
            (options?: integrityService.integrity.HostPatchCycleDetectedFailure): integrityService.integrity.HostPatchCycleDetectedFailure;
         };
         HostPatchDnsResolveFailure: {
            (options?: integrityService.integrity.HostPatchDnsResolveFailure): integrityService.integrity.HostPatchDnsResolveFailure;
         };
         HostPatchESXUpdateFailure: {
            (options?: integrityService.integrity.HostPatchESXUpdateFailure): integrityService.integrity.HostPatchESXUpdateFailure;
         };
         HostPatchEnterMmodeFailure: {
            (options?: integrityService.integrity.HostPatchEnterMmodeFailure): integrityService.integrity.HostPatchEnterMmodeFailure;
         };
         HostPatchEsxFileDownloadFailure: {
            (options?: integrityService.integrity.HostPatchEsxFileDownloadFailure): integrityService.integrity.HostPatchEsxFileDownloadFailure;
         };
         HostPatchExitMmodeFailure: {
            (options?: integrityService.integrity.HostPatchExitMmodeFailure): integrityService.integrity.HostPatchExitMmodeFailure;
         };
         HostPatchInputRecalledFailure: {
            (options?: integrityService.integrity.HostPatchInputRecalledFailure): integrityService.integrity.HostPatchInputRecalledFailure;
         };
         HostPatchInvalidBundle: {
            (options?: integrityService.integrity.HostPatchInvalidBundle): integrityService.integrity.HostPatchInvalidBundle;
         };
         HostPatchInvalidVendorCode: {
            (options?: integrityService.integrity.HostPatchInvalidVendorCode): integrityService.integrity.HostPatchInvalidVendorCode;
         };
         HostPatchMetadataCorruptFailure: {
            (options?: integrityService.integrity.HostPatchMetadataCorruptFailure): integrityService.integrity.HostPatchMetadataCorruptFailure;
         };
         HostPatchMetadataNotFoundFailure: {
            (options?: integrityService.integrity.HostPatchMetadataNotFoundFailure): integrityService.integrity.HostPatchMetadataNotFoundFailure;
         };
         HostPatchNoBootTime: {
            (options?: integrityService.integrity.HostPatchNoBootTime): integrityService.integrity.HostPatchNoBootTime;
         };
         HostPatchNotConnectedFailure: {
            (options?: integrityService.integrity.HostPatchNotConnectedFailure): integrityService.integrity.HostPatchNotConnectedFailure;
         };
         HostPatchNotHostEntityFailure: {
            (options?: integrityService.integrity.HostPatchNotHostEntityFailure): integrityService.integrity.HostPatchNotHostEntityFailure;
         };
         HostPatchNotInstallableFailure: {
            (options?: integrityService.integrity.HostPatchNotInstallableFailure): integrityService.integrity.HostPatchNotInstallableFailure;
         };
         HostPatchNotSupportedHostVersionFailure: {
            (options?: integrityService.integrity.HostPatchNotSupportedHostVersionFailure): integrityService.integrity.HostPatchNotSupportedHostVersionFailure;
         };
         HostPatchNullRefFailure: {
            (options?: integrityService.integrity.HostPatchNullRefFailure): integrityService.integrity.HostPatchNullRefFailure;
         };
         HostPatchOutdatedMetadataImport: {
            (options?: integrityService.integrity.HostPatchOutdatedMetadataImport): integrityService.integrity.HostPatchOutdatedMetadataImport;
         };
         HostPatchPowerStateFailure: {
            (options?: integrityService.integrity.HostPatchPowerStateFailure): integrityService.integrity.HostPatchPowerStateFailure;
         };
         HostPatchPrerequisiteRecalledFailure: {
            (options?: integrityService.integrity.HostPatchPrerequisiteRecalledFailure): integrityService.integrity.HostPatchPrerequisiteRecalledFailure;
         };
         HostPatchPxeRebootSkipFailure: {
            (options?: integrityService.integrity.HostPatchPxeRebootSkipFailure): integrityService.integrity.HostPatchPxeRebootSkipFailure;
         };
         HostPatchRebootFailure: {
            (options?: integrityService.integrity.HostPatchRebootFailure): integrityService.integrity.HostPatchRebootFailure;
         };
         HostPatchRebootReconnectFailure: {
            (options?: integrityService.integrity.HostPatchRebootReconnectFailure): integrityService.integrity.HostPatchRebootReconnectFailure;
         };
         HostPatchReconnectFailure: {
            (options?: integrityService.integrity.HostPatchReconnectFailure): integrityService.integrity.HostPatchReconnectFailure;
         };
         HostPatchRestoreVmFailure: {
            (options?: integrityService.integrity.HostPatchRestoreVmFailure): integrityService.integrity.HostPatchRestoreVmFailure;
         };
         HostPatchTaskTimedOutFailure: {
            (options?: integrityService.integrity.HostPatchTaskTimedOutFailure): integrityService.integrity.HostPatchTaskTimedOutFailure;
         };
         HostPatchUpgradeTaskTimedOutFailure: {
            (options?: integrityService.integrity.HostPatchUpgradeTaskTimedOutFailure): integrityService.integrity.HostPatchUpgradeTaskTimedOutFailure;
         };
         HostPatchVibDownloadFailure: {
            (options?: integrityService.integrity.HostPatchVibDownloadFailure): integrityService.integrity.HostPatchVibDownloadFailure;
         };
         HostUpgradeBootTimeUnsetFailure: {
            (options?: integrityService.integrity.HostUpgradeBootTimeUnsetFailure): integrityService.integrity.HostUpgradeBootTimeUnsetFailure;
         };
         HostUpgradeChecksumFailure: {
            (options?: integrityService.integrity.HostUpgradeChecksumFailure): integrityService.integrity.HostUpgradeChecksumFailure;
         };
         HostUpgradeComponentFailure: {
            (options?: integrityService.integrity.HostUpgradeComponentFailure): integrityService.integrity.HostUpgradeComponentFailure;
         };
         HostUpgradeConflict: {
            (options?: integrityService.integrity.HostUpgradeConflict): integrityService.integrity.HostUpgradeConflict;
         };
         HostUpgradeConflictPackagesFailure: {
            (options?: integrityService.integrity.HostUpgradeConflictPackagesFailure): integrityService.integrity.HostUpgradeConflictPackagesFailure;
         };
         HostUpgradeConflictVibsFailure: {
            (options?: integrityService.integrity.HostUpgradeConflictVibsFailure): integrityService.integrity.HostUpgradeConflictVibsFailure;
         };
         HostUpgradeCorruptPackage: {
            (options?: integrityService.integrity.HostUpgradeCorruptPackage): integrityService.integrity.HostUpgradeCorruptPackage;
         };
         HostUpgradeDeployAgentFailure: {
            (options?: integrityService.integrity.HostUpgradeDeployAgentFailure): integrityService.integrity.HostUpgradeDeployAgentFailure;
         };
         HostUpgradeDuplicatePackage: {
            (options?: integrityService.integrity.HostUpgradeDuplicatePackage): integrityService.integrity.HostUpgradeDuplicatePackage;
         };
         HostUpgradeGrubUpdateFailure: {
            (options?: integrityService.integrity.HostUpgradeGrubUpdateFailure): integrityService.integrity.HostUpgradeGrubUpdateFailure;
         };
         HostUpgradeInaccessibleDatastore: {
            (options?: integrityService.integrity.HostUpgradeInaccessibleDatastore): integrityService.integrity.HostUpgradeInaccessibleDatastore;
         };
         HostUpgradeIncompatibleHardware: {
            (options?: integrityService.integrity.HostUpgradeIncompatibleHardware): integrityService.integrity.HostUpgradeIncompatibleHardware;
         };
         HostUpgradeIncompatibleSoftwareConfig: {
            (options?: integrityService.integrity.HostUpgradeIncompatibleSoftwareConfig): integrityService.integrity.HostUpgradeIncompatibleSoftwareConfig;
         };
         HostUpgradeIncorrectPackage: {
            (options?: integrityService.integrity.HostUpgradeIncorrectPackage): integrityService.integrity.HostUpgradeIncorrectPackage;
         };
         HostUpgradeInvalidPackage: {
            (options?: integrityService.integrity.HostUpgradeInvalidPackage): integrityService.integrity.HostUpgradeInvalidPackage;
         };
         HostUpgradeLicenseFault: {
            (options?: integrityService.integrity.HostUpgradeLicenseFault): integrityService.integrity.HostUpgradeLicenseFault;
         };
         HostUpgradeMissingPackage: {
            (options?: integrityService.integrity.HostUpgradeMissingPackage): integrityService.integrity.HostUpgradeMissingPackage;
         };
         HostUpgradeNfcCopyFailure: {
            (options?: integrityService.integrity.HostUpgradeNfcCopyFailure): integrityService.integrity.HostUpgradeNfcCopyFailure;
         };
         HostUpgradeNoRolledBack: {
            (options?: integrityService.integrity.HostUpgradeNoRolledBack): integrityService.integrity.HostUpgradeNoRolledBack;
         };
         HostUpgradeNoSpaceOnDatastore: {
            (options?: integrityService.integrity.HostUpgradeNoSpaceOnDatastore): integrityService.integrity.HostUpgradeNoSpaceOnDatastore;
         };
         HostUpgradeNotEnoughSpace: {
            (options?: integrityService.integrity.HostUpgradeNotEnoughSpace): integrityService.integrity.HostUpgradeNotEnoughSpace;
         };
         HostUpgradeRebootFailure: {
            (options?: integrityService.integrity.HostUpgradeRebootFailure): integrityService.integrity.HostUpgradeRebootFailure;
         };
         HostUpgradeRolledBack: {
            (options?: integrityService.integrity.HostUpgradeRolledBack): integrityService.integrity.HostUpgradeRolledBack;
         };
         HostUpgradeRunScriptFailure: {
            (options?: integrityService.integrity.HostUpgradeRunScriptFailure): integrityService.integrity.HostUpgradeRunScriptFailure;
         };
         HostUpgradeStageFailure: {
            (options?: integrityService.integrity.HostUpgradeStageFailure): integrityService.integrity.HostUpgradeStageFailure;
         };
         HostUpgradeTimeout: {
            (options?: integrityService.integrity.HostUpgradeTimeout): integrityService.integrity.HostUpgradeTimeout;
         };
         HostUpgradeUnableToPersistPackage: {
            (options?: integrityService.integrity.HostUpgradeUnableToPersistPackage): integrityService.integrity.HostUpgradeUnableToPersistPackage;
         };
         HostUpgradeUnexpectedHostVersion: {
            (options?: integrityService.integrity.HostUpgradeUnexpectedHostVersion): integrityService.integrity.HostUpgradeUnexpectedHostVersion;
         };
         HostUpgradeUnsuitableDatastores: {
            (options?: integrityService.integrity.HostUpgradeUnsuitableDatastores): integrityService.integrity.HostUpgradeUnsuitableDatastores;
         };
         HostUpgradeUnsupported: {
            (options?: integrityService.integrity.HostUpgradeUnsupported): integrityService.integrity.HostUpgradeUnsupported;
         };
         HostUpgradeUnsupportedDatastore: {
            (options?: integrityService.integrity.HostUpgradeUnsupportedDatastore): integrityService.integrity.HostUpgradeUnsupportedDatastore;
         };
         HostUpgradeUnsupportedRelease: {
            (options?: integrityService.integrity.HostUpgradeUnsupportedRelease): integrityService.integrity.HostUpgradeUnsupportedRelease;
         };
         IgnoreErrorInChainFault: {
            (options?: integrityService.integrity.IgnoreErrorInChainFault): integrityService.integrity.IgnoreErrorInChainFault;
         };
         IncompatibleBaselineFault: {
            (options?: integrityService.integrity.IncompatibleBaselineFault): integrityService.integrity.IncompatibleBaselineFault;
         };
         IncompatibleTools: {
            (options?: integrityService.integrity.IncompatibleTools): integrityService.integrity.IncompatibleTools;
         };
         IncompatibleUMDSFault: {
            (options?: integrityService.integrity.IncompatibleUMDSFault): integrityService.integrity.IncompatibleUMDSFault;
         };
         IncompatibleVc: {
            (options?: integrityService.integrity.IncompatibleVc): integrityService.integrity.IncompatibleVc;
         };
         InvalidHostUpdateLevel: {
            (options?: integrityService.integrity.InvalidHostUpdateLevel): integrityService.integrity.InvalidHostUpdateLevel;
         };
         InvalidObjectName: {
            (options?: integrityService.integrity.InvalidObjectName): integrityService.integrity.InvalidObjectName;
         };
         VciLicenseExpired: {
            (options?: integrityService.integrity.VciLicenseExpired): integrityService.integrity.VciLicenseExpired;
         };
         LockFailure: {
            (options?: integrityService.integrity.LockFailure): integrityService.integrity.LockFailure;
         };
         MetadataDownloadFailure: {
            (options?: integrityService.integrity.MetadataDownloadFailure): integrityService.integrity.MetadataDownloadFailure;
         };
         MmodeDisallowedFault: {
            (options?: integrityService.integrity.MmodeDisallowedFault): integrityService.integrity.MmodeDisallowedFault;
         };
         MultipleBaselinesAttached: {
            (options?: integrityService.integrity.MultipleBaselinesAttached): integrityService.integrity.MultipleBaselinesAttached;
         };
         NoEntities: {
            (options?: integrityService.integrity.NoEntities): integrityService.integrity.NoEntities;
         };
         NoLicense: {
            (options?: integrityService.integrity.NoLicense): integrityService.integrity.NoLicense;
         };
         NoSignatureSiteConnection: {
            (options?: integrityService.integrity.NoSignatureSiteConnection): integrityService.integrity.NoSignatureSiteConnection;
         };
         NoVcConnection: {
            (options?: integrityService.integrity.NoVcConnection): integrityService.integrity.NoVcConnection;
         };
         NotApplicableEulaState: {
            (options?: integrityService.integrity.NotApplicableEulaState): integrityService.integrity.NotApplicableEulaState;
         };
         OperationNotAllowed: {
            (options?: integrityService.integrity.OperationNotAllowed): integrityService.integrity.OperationNotAllowed;
         };
         PowerStateRestoreFault: {
            (options?: integrityService.integrity.PowerStateRestoreFault): integrityService.integrity.PowerStateRestoreFault;
         };
         ReadOnlyObject: {
            (options?: integrityService.integrity.ReadOnlyObject): integrityService.integrity.ReadOnlyObject;
         };
         RemediateFailure: {
            (options?: integrityService.integrity.RemediateFailure): integrityService.integrity.RemediateFailure;
         };
         RemovableDevicesAttachedFailure: {
            (options?: integrityService.integrity.RemovableDevicesAttachedFailure): integrityService.integrity.RemovableDevicesAttachedFailure;
         };
         ScanFailure: {
            (options?: integrityService.integrity.ScanFailure): integrityService.integrity.ScanFailure;
         };
         SigUpdateNoDiskSpace: {
            (options?: integrityService.integrity.SigUpdateNoDiskSpace): integrityService.integrity.SigUpdateNoDiskSpace;
         };
         SpecialVmOnHost: {
            (options?: integrityService.integrity.SpecialVmOnHost): integrityService.integrity.SpecialVmOnHost;
         };
         StageFailure: {
            (options?: integrityService.integrity.StageFailure): integrityService.integrity.StageFailure;
         };
         StaleScheduledTaskFault: {
            (options?: integrityService.integrity.StaleScheduledTaskFault): integrityService.integrity.StaleScheduledTaskFault;
         };
         SysprepAccessFailure: {
            (options?: integrityService.integrity.SysprepAccessFailure): integrityService.integrity.SysprepAccessFailure;
         };
         TooManyBaselinegroups: {
            (options?: integrityService.integrity.TooManyBaselinegroups): integrityService.integrity.TooManyBaselinegroups;
         };
         TooManyBaselines: {
            (options?: integrityService.integrity.TooManyBaselines): integrityService.integrity.TooManyBaselines;
         };
         TooManyUpdatesFault: {
            (options?: integrityService.integrity.TooManyUpdatesFault): integrityService.integrity.TooManyUpdatesFault;
         };
         ToolsAutoUpgradeUnsupported: {
            (options?: integrityService.integrity.ToolsAutoUpgradeUnsupported): integrityService.integrity.ToolsAutoUpgradeUnsupported;
         };
         ToolsNotRunning: {
            (options?: integrityService.integrity.ToolsNotRunning): integrityService.integrity.ToolsNotRunning;
         };
         UnsupportedHostRemediateSpecialVM: {
            (options?: integrityService.integrity.UnsupportedHostRemediateSpecialVM): integrityService.integrity.UnsupportedHostRemediateSpecialVM;
         };
         UnsupportedPXEHost: {
            (options?: integrityService.integrity.UnsupportedPXEHost): integrityService.integrity.UnsupportedPXEHost;
         };
         UnsupportedSpecialVM: {
            (options?: integrityService.integrity.UnsupportedSpecialVM): integrityService.integrity.UnsupportedSpecialVM;
         };
         VAAutoUpdateTimedoutFailure: {
            (options?: integrityService.integrity.VAAutoUpdateTimedoutFailure): integrityService.integrity.VAAutoUpdateTimedoutFailure;
         };
         VAPostInstallScriptError: {
            (options?: integrityService.integrity.VAPostInstallScriptError): integrityService.integrity.VAPostInstallScriptError;
         };
         VAPostInstallScriptTimedoutError: {
            (options?: integrityService.integrity.VAPostInstallScriptTimedoutError): integrityService.integrity.VAPostInstallScriptTimedoutError;
         };
         VAPostInstallVixError: {
            (options?: integrityService.integrity.VAPostInstallVixError): integrityService.integrity.VAPostInstallVixError;
         };
         VAPreInstallScriptError: {
            (options?: integrityService.integrity.VAPreInstallScriptError): integrityService.integrity.VAPreInstallScriptError;
         };
         VAPreInstallScriptTimedoutError: {
            (options?: integrityService.integrity.VAPreInstallScriptTimedoutError): integrityService.integrity.VAPreInstallScriptTimedoutError;
         };
         VAPreInstallVixError: {
            (options?: integrityService.integrity.VAPreInstallVixError): integrityService.integrity.VAPreInstallVixError;
         };
         VARemediateEulaNotAcceptedFault: {
            (options?: integrityService.integrity.VARemediateEulaNotAcceptedFault): integrityService.integrity.VARemediateEulaNotAcceptedFault;
         };
         VARemediateSnapshotError: {
            (options?: integrityService.integrity.VARemediateSnapshotError): integrityService.integrity.VARemediateSnapshotError;
         };
         VARemediateUnsupportedUpgrade: {
            (options?: integrityService.integrity.VARemediateUnsupportedUpgrade): integrityService.integrity.VARemediateUnsupportedUpgrade;
         };
         VCVARemediationFault: {
            (options?: integrityService.integrity.VCVARemediationFault): integrityService.integrity.VCVARemediationFault;
         };
         VMHWUpgradeToolsNotInstalled: {
            (options?: integrityService.integrity.VMHWUpgradeToolsNotInstalled): integrityService.integrity.VMHWUpgradeToolsNotInstalled;
         };
         VMHWUpgradeToolsNotLatest: {
            (options?: integrityService.integrity.VMHWUpgradeToolsNotLatest): integrityService.integrity.VMHWUpgradeToolsNotLatest;
         };
         VMHWUpgradeToolsUnknown: {
            (options?: integrityService.integrity.VMHWUpgradeToolsUnknown): integrityService.integrity.VMHWUpgradeToolsUnknown;
         };
         VMHWUpgradeToolsUnmanaged: {
            (options?: integrityService.integrity.VMHWUpgradeToolsUnmanaged): integrityService.integrity.VMHWUpgradeToolsUnmanaged;
         };
         VMHardwareRemediationFault: {
            (options?: integrityService.integrity.VMHardwareRemediationFault): integrityService.integrity.VMHardwareRemediationFault;
         };
         VMHardwareScanFault: {
            (options?: integrityService.integrity.VMHardwareScanFault): integrityService.integrity.VMHardwareScanFault;
         };
         VMToolsNotInstalledOrUnmanagedFault: {
            (options?: integrityService.integrity.VMToolsNotInstalledOrUnmanagedFault): integrityService.integrity.VMToolsNotInstalledOrUnmanagedFault;
         };
         VMToolsRemediationFault: {
            (options?: integrityService.integrity.VMToolsRemediationFault): integrityService.integrity.VMToolsRemediationFault;
         };
         VMToolsRemediationSetPolicyFault: {
            (options?: integrityService.integrity.VMToolsRemediationSetPolicyFault): integrityService.integrity.VMToolsRemediationSetPolicyFault;
         };
         VMToolsScanFault: {
            (options?: integrityService.integrity.VMToolsScanFault): integrityService.integrity.VMToolsScanFault;
         };
         VMToolsUpgradedButRebootNotInitiated: {
            (options?: integrityService.integrity.VMToolsUpgradedButRebootNotInitiated): integrityService.integrity.VMToolsUpgradedButRebootNotInitiated;
         };
         VcIntegrityFault: {
            (options?: integrityService.integrity.VcIntegrityFault): integrityService.integrity.VcIntegrityFault;
         };
         VciDVSFault: {
            (options?: integrityService.integrity.VciDVSFault): integrityService.integrity.VciDVSFault;
         };
         VmFtDisabledFault: {
            (options?: integrityService.integrity.VmFtDisabledFault): integrityService.integrity.VmFtDisabledFault;
         };
         VmFtEnabledFault: {
            (options?: integrityService.integrity.VmFtEnabledFault): integrityService.integrity.VmFtEnabledFault;
         };
         VmMigrationFault: {
            (options?: integrityService.integrity.VmMigrationFault): integrityService.integrity.VmMigrationFault;
         };
         VmPowerOrDevicesRestoreFailure: {
            (options?: integrityService.integrity.VmPowerOrDevicesRestoreFailure): integrityService.integrity.VmPowerOrDevicesRestoreFailure;
         };
         VmotionCompatibilityQueryFault: {
            (options?: integrityService.integrity.VmotionCompatibilityQueryFault): integrityService.integrity.VmotionCompatibilityQueryFault;
         };
         IntegrityArrayUpdateOperation: {
            "add": string;
            "remove": string;
            "edit": string;
         };
         IntegrityArrayUpdateSpec: {
            (options?: integrityService.integrity.IntegrityArrayUpdateSpec): integrityService.integrity.IntegrityArrayUpdateSpec;
         };
         IntegrityBoolOption: {
            (options?: integrityService.integrity.IntegrityBoolOption): integrityService.integrity.IntegrityBoolOption;
         };
         IntegrityChoiceOption: {
            (options?: integrityService.integrity.IntegrityChoiceOption): integrityService.integrity.IntegrityChoiceOption;
         };
         IntegrityFloatOption: {
            (options?: integrityService.integrity.IntegrityFloatOption): integrityService.integrity.IntegrityFloatOption;
         };
         IntegrityIntOption: {
            (options?: integrityService.integrity.IntegrityIntOption): integrityService.integrity.IntegrityIntOption;
         };
         IntegrityLongOption: {
            (options?: integrityService.integrity.IntegrityLongOption): integrityService.integrity.IntegrityLongOption;
         };
         IntegrityOptionDef: {
            (options?: integrityService.integrity.IntegrityOptionDef): integrityService.integrity.IntegrityOptionDef;
         };
         ArrayOfIntegrityOptionDef: {
            (options?: integrityService.integrity.ArrayOfIntegrityOptionDef): integrityService.integrity.ArrayOfIntegrityOptionDef;
         };
         IntegrityOptionType: {
            (options?: integrityService.integrity.IntegrityOptionType): integrityService.integrity.IntegrityOptionType;
         };
         IntegrityOptionValue: {
            (options?: integrityService.integrity.IntegrityOptionValue): integrityService.integrity.IntegrityOptionValue;
         };
         ArrayOfIntegrityOptionValue: {
            (options?: integrityService.integrity.ArrayOfIntegrityOptionValue): integrityService.integrity.ArrayOfIntegrityOptionValue;
         };
         IntegrityStringOption: {
            (options?: integrityService.integrity.IntegrityStringOption): integrityService.integrity.IntegrityStringOption;
         };
         VaProductId: {
            (options?: integrityService.integrity.VaProductId): integrityService.integrity.VaProductId;
         };
         VaUpgradeBaselineSelectorUpgradeAction: {
            "DontUpgrade": string;
            "Latest": string;
            "LatestModerate": string;
            "LatestImportant": string;
            "LatestCritical": string;
            "SpecificVersion": string;
         };
         VaUpgradeBaselineSelector: {
            (options?: integrityService.integrity.VaUpgradeBaselineSelector): integrityService.integrity.VaUpgradeBaselineSelector;
         };
         ArrayOfVaUpgradeBaselineSelector: {
            (options?: integrityService.integrity.ArrayOfVaUpgradeBaselineSelector): integrityService.integrity.ArrayOfVaUpgradeBaselineSelector;
         };
         VaUpgradeBaselineSpec: {
            (options?: integrityService.integrity.VaUpgradeBaselineSpec): integrityService.integrity.VaUpgradeBaselineSpec;
         };
         VaUpgradeBaselineInfo: {
            (options?: integrityService.integrity.VaUpgradeBaselineInfo): integrityService.integrity.VaUpgradeBaselineInfo;
         };
         VaUpgradeProduct: {
            (options?: integrityService.integrity.VaUpgradeProduct): integrityService.integrity.VaUpgradeProduct;
         };
         VaVAChangelogCategoryType: {
            "Feature": string;
            "Security": string;
            "Fix": string;
         };
         VaVAChangelogSeverityType: {
            "Low": string;
            "Moderate": string;
            "Important": string;
            "Critical": string;
         };
         VaVAChangelog: {
            (options?: integrityService.integrity.VaVAChangelog): integrityService.integrity.VaVAChangelog;
         };
         ArrayOfVaVAChangelog: {
            (options?: integrityService.integrity.ArrayOfVaVAChangelog): integrityService.integrity.ArrayOfVaVAChangelog;
         };
         VaVAUpgradeInfo: {
            (options?: integrityService.integrity.VaVAUpgradeInfo): integrityService.integrity.VaVAUpgradeInfo;
         };
         ArrayOfVaVAUpgradeInfo: {
            (options?: integrityService.integrity.ArrayOfVaVAUpgradeInfo): integrityService.integrity.ArrayOfVaVAUpgradeInfo;
         };
         DestroyPropertyFilterResponse: {
            (options?: integrityService.integrity.DestroyPropertyFilterResponse): integrityService.integrity.DestroyPropertyFilterResponse;
         };
         CreateFilterResponse: {
            (options?: integrityService.integrity.CreateFilterResponse): integrityService.integrity.CreateFilterResponse;
         };
         RetrievePropertiesResponse: {
            (options?: integrityService.integrity.RetrievePropertiesResponse): integrityService.integrity.RetrievePropertiesResponse;
         };
         CheckForUpdatesResponse: {
            (options?: integrityService.integrity.CheckForUpdatesResponse): integrityService.integrity.CheckForUpdatesResponse;
         };
         WaitForUpdatesResponse: {
            (options?: integrityService.integrity.WaitForUpdatesResponse): integrityService.integrity.WaitForUpdatesResponse;
         };
         CancelWaitForUpdatesResponse: {
            (options?: integrityService.integrity.CancelWaitForUpdatesResponse): integrityService.integrity.CancelWaitForUpdatesResponse;
         };
         WaitForUpdatesExResponse: {
            (options?: integrityService.integrity.WaitForUpdatesExResponse): integrityService.integrity.WaitForUpdatesExResponse;
         };
         RetrievePropertiesExResponse: {
            (options?: integrityService.integrity.RetrievePropertiesExResponse): integrityService.integrity.RetrievePropertiesExResponse;
         };
         ContinueRetrievePropertiesExResponse: {
            (options?: integrityService.integrity.ContinueRetrievePropertiesExResponse): integrityService.integrity.ContinueRetrievePropertiesExResponse;
         };
         CancelRetrievePropertiesExResponse: {
            (options?: integrityService.integrity.CancelRetrievePropertiesExResponse): integrityService.integrity.CancelRetrievePropertiesExResponse;
         };
         CreatePropertyCollectorResponse: {
            (options?: integrityService.integrity.CreatePropertyCollectorResponse): integrityService.integrity.CreatePropertyCollectorResponse;
         };
         DestroyPropertyCollectorResponse: {
            (options?: integrityService.integrity.DestroyPropertyCollectorResponse): integrityService.integrity.DestroyPropertyCollectorResponse;
         };
      }
      integrityPort: {
         destroyPropertyFilter(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         createFilter(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.vim.PropertyFilterSpec, partialUpdates: boolean): Promise<integrityService.vim.ManagedObjectReference>;
         retrieveProperties(_this: integrityService.vim.ManagedObjectReference, specSet: Array<integrityService.vim.PropertyFilterSpec>): Promise<Array<integrityService.vim.ObjectContent>>;
         checkForUpdates(_this: integrityService.vim.ManagedObjectReference, version: string): Promise<integrityService.vim.UpdateSet>;
         waitForUpdates(_this: integrityService.vim.ManagedObjectReference, version: string): Promise<integrityService.vim.UpdateSet>;
         cancelWaitForUpdates(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         waitForUpdatesEx(_this: integrityService.vim.ManagedObjectReference, version: string, options: integrityService.vim.WaitOptions): Promise<integrityService.vim.UpdateSet>;
         retrievePropertiesEx(_this: integrityService.vim.ManagedObjectReference, specSet: Array<integrityService.vim.PropertyFilterSpec>, options: integrityService.vim.RetrieveOptions): Promise<integrityService.vim.RetrieveResult>;
         continueRetrievePropertiesEx(_this: integrityService.vim.ManagedObjectReference, token: string): Promise<integrityService.vim.RetrieveResult>;
         cancelRetrievePropertiesEx(_this: integrityService.vim.ManagedObjectReference, token: string): Promise<void>;
         createPropertyCollector(_this: integrityService.vim.ManagedObjectReference): Promise<integrityService.vim.ManagedObjectReference>;
         destroyPropertyCollector(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         createBaselineGroup(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.BaselineGroupManagerBaselineGroupSpec): Promise<number>;
         getBaselineGroupInfo(_this: integrityService.vim.ManagedObjectReference, id: Array<number>): Promise<Array<integrityService.integrity.BaselineGroupManagerBaselineGroupInfo>>;
         setBaselineGroupInfo(_this: integrityService.vim.ManagedObjectReference, info: integrityService.integrity.BaselineGroupManagerBaselineGroupInfo): Promise<void>;
         deleteBaselineGroup(_this: integrityService.vim.ManagedObjectReference, id: number): Promise<void>;
         assignBaselineGroupToEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, group: Array<number>): Promise<void>;
         removeBaselineGroupFromEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, group: Array<number>): Promise<void>;
         queryBaselineGroupForEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, inheritFromParent: boolean, assignedToChild: boolean): Promise<Array<integrityService.integrity.BaselineGroupManagerTargetBaselineGroup>>;
         queryAssignedEntityForBaselineGroup(_this: integrityService.vim.ManagedObjectReference, group: Array<number>): Promise<Array<integrityService.integrity.BaselineGroupManagerAssignedEntityGroup>>;
         createBaseline(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.BaselineSpec): Promise<number>;
         getBaselineInfo(_this: integrityService.vim.ManagedObjectReference, id: Array<number>): Promise<Array<integrityService.integrity.BaselineInfo>>;
         setBaselineInfo(_this: integrityService.vim.ManagedObjectReference, baseline: integrityService.integrity.BaselineInfo): Promise<void>;
         deleteBaseline(_this: integrityService.vim.ManagedObjectReference, id: number): Promise<void>;
         assignBaselinesToEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<void>;
         removeBaselinesFromEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<void>;
         queryBaselinesForEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, searchCriteria: integrityService.integrity.BaselineManagerBaselinesSearchSpec): Promise<Array<integrityService.integrity.BaselineManagerTargetBaselineGroup>>;
         queryAssignedEntityForBaseline(_this: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<Array<integrityService.integrity.BaselineManagerAssignedEntityGroup>>;
         queryMissingPatchInformation(_this: integrityService.vim.ManagedObjectReference): Promise<Array<integrityService.integrity.BaselineManagerTargetMissingPatchGroup>>;
         queryBaselinesForUpdate(_this: integrityService.vim.ManagedObjectReference, update: Array<number>): Promise<Array<integrityService.integrity.BaselineManagerUpdateBaselinesGroup>>;
         queryUpdates(_this: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<Array<integrityService.integrity.BaselineManagerUpdateGroup>>;
         queryVMHWScanResult(_this: integrityService.vim.ManagedObjectReference, entities: Array<integrityService.vim.ManagedObjectReference>, baseline: number): Promise<Array<integrityService.integrity.BaselineManagerVmHWScanResult>>;
         queryVMToolsStatus(_this: integrityService.vim.ManagedObjectReference, entities: Array<integrityService.vim.ManagedObjectReference>): Promise<Array<integrityService.integrity.BaselineManagerVmToolsStatus>>;
         queryBaselinesForUpgradeRelease(_this: integrityService.vim.ManagedObjectReference, releaseKey: string): Promise<Array<integrityService.integrity.BaselineInfo>>;
         queryUpdatesForEntityBaseline(_this: integrityService.vim.ManagedObjectReference, entities: Array<integrityService.vim.ManagedObjectReference>, baseline: number): Promise<Array<integrityService.integrity.BaselineManagerBaselineEntityUpdateInfo>>;
         getComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference): Promise<integrityService.vim.ManagedObjectReference>;
         getUpdateComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.ComplianceStatusManagerDetailedComplianceStatusSpec): Promise<integrityService.vim.ManagedObjectReference>;
         queryEntityComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baselineIds: Array<number>): Promise<integrityService.integrity.ComplianceStatusManagerEntityBaselinesComplianceSummary>;
         queryUpdateStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<Array<integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus>>;
         queryBaselineStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, selectedStatus: Array<string>, baseline: Array<number>): Promise<integrityService.integrity.ComplianceStatusManagerEntityStatusSummary>;
         queryUpdateStatusForBaselineGroup(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baselinegroup: number): Promise<Array<integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus>>;
         queryBaselineComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference): Promise<Array<integrityService.integrity.BaselineComplianceStatus>>;
         queryBaselineGroupComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference): Promise<Array<integrityService.integrity.BaselineGroupComplianceStatus>>;
         integrityDispose(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         integrityMakeSticky(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         retrieveEulaDetails(_this: integrityService.vim.ManagedObjectReference, updateId: number): Promise<Array<string>>;
         setEulaState(_this: integrityService.vim.ManagedObjectReference, updateId: number, accepted: boolean): Promise<void>;
         getEulaState(_this: integrityService.vim.ManagedObjectReference, updateId: number): Promise<integrityService.integrity.EulaManagerEulaStatus>;
         importFileTask(_this: integrityService.vim.ManagedObjectReference, fileSpec: integrityService.integrity.FileUploadManagerFileUploadSpec): Promise<integrityService.vim.ManagedObjectReference>;
         createScheduledIntegrityTask(_this: integrityService.vim.ManagedObjectReference, target: integrityService.vim.ManagedObjectReference, spec: integrityService.vim.ScheduledTaskSpec): Promise<integrityService.vim.ManagedObjectReference>;
         getScheduledIntegrityTask(_this: integrityService.vim.ManagedObjectReference, task: integrityService.vim.ManagedObjectReference): Promise<integrityService.vim.ScheduledTaskInfo>;
         reconfigureScheduledIntegrityTask(_this: integrityService.vim.ManagedObjectReference, task: integrityService.vim.ManagedObjectReference, spec: integrityService.vim.ScheduledTaskSpec): Promise<void>;
         vciLogin(_this: integrityService.vim.ManagedObjectReference, userName: string, sessionId: string, locale: string): Promise<integrityService.integrity.IntegrityUserSession>;
         vciLogout(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         vciCheckSessionActive(_this: integrityService.vim.ManagedObjectReference, sessionID: string): Promise<boolean>;
         removeStatusCollector(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         downloadUpdateSignaturesTask(_this: integrityService.vim.ManagedObjectReference, language: Array<string>): Promise<integrityService.vim.ManagedObjectReference>;
         retrieveVAFile(_this: integrityService.vim.ManagedObjectReference, relativePath: string): Promise<string>;
         checkNotificationsTask(_this: integrityService.vim.ManagedObjectReference, language: Array<string>): Promise<integrityService.vim.ManagedObjectReference>;
         getPatchRecallDetailInfo(_this: integrityService.vim.ManagedObjectReference, recallID: number): Promise<integrityService.integrity.PatchRecallDetailInfo>;
         allowLiveVibInstall(_this: integrityService.vim.ManagedObjectReference, hostMoId: integrityService.vim.ManagedObjectReference): Promise<boolean>;
         searchUpdate(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.UpdateManagerSearchSpec): Promise<Array<number>>;
         getSoftwareUpdate(_this: integrityService.vim.ManagedObjectReference, updateId: Array<number>): Promise<Array<integrityService.integrity.SoftwareUpdate>>;
         deleteUpdatePackage(_this: integrityService.vim.ManagedObjectReference, updateId: number): Promise<void>;
         scanTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerScanSpec): Promise<integrityService.vim.ManagedObjectReference>;
         stageTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, leafEntity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerStageSpec): Promise<integrityService.vim.ManagedObjectReference>;
         remediateTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, leafEntity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerRemediationSpec): Promise<integrityService.vim.ManagedObjectReference>;
         configureToolsUpgradeTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, leafEntity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerRemediationSpec): Promise<integrityService.vim.ManagedObjectReference>;
         configureToolsUpgradeOptionTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerRemediationSpec): Promise<integrityService.vim.ManagedObjectReference>;
         remediatePrecheckTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>): Promise<integrityService.vim.ManagedObjectReference>;
         queryAvailableProducts(_this: integrityService.vim.ManagedObjectReference, productType: string): Promise<Array<integrityService.integrity.UpgradeProductManagerUpgradeProduct>>;
         deleteUpgradeProduct(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<void>;
         upgradeProductsForRelease(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<Array<integrityService.integrity.UpgradeProductManagerUpgradeProduct>>;
         getUpgradeRelease(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<integrityService.integrity.UpgradeReleaseManagerUpgradeRelease>;
         checkAndGet(_this: integrityService.vim.ManagedObjectReference, productKeys: Array<string>): Promise<integrityService.integrity.UpgradeReleaseManagerUpgradeRelease>;
         deleteRelease(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<void>;
         getVUMTaskInfo(_this: integrityService.vim.ManagedObjectReference, taskMO: integrityService.vim.ManagedObjectReference): Promise<integrityService.integrity.VUMTaskManagerVUMTaskInfo>;
         setConfig(_this: integrityService.vim.ManagedObjectReference, config: integrityService.integrity.ConfigSpec): Promise<void>;
         setNewUpdateConfig(_this: integrityService.vim.ManagedObjectReference, config: integrityService.integrity.NewUpdateConfigSpec): Promise<void>;
         setNewNotificationConfig(_this: integrityService.vim.ManagedObjectReference, config: integrityService.integrity.NewUpdateConfigSpec): Promise<void>;
         retrieveVcIntegrityContent(_this: integrityService.vim.ManagedObjectReference): Promise<integrityService.integrity.VcIntegrityContent>;
         vcIntegrityCurrentTime(_this: integrityService.vim.ManagedObjectReference): Promise<Date>;
         retrieveScoreBoardData(_this: integrityService.vim.ManagedObjectReference): Promise<string>;
         testInternetConnection(_this: integrityService.vim.ManagedObjectReference, proxyinfo: string, urls: Array<string>): Promise<Array<integrityService.integrity.VcIntegrityInternetConnectionResult>>;
         retrieveHostIPAddresses(_this: integrityService.vim.ManagedObjectReference): Promise<Array<string>>;
         queryIntegrityOptions(_this: integrityService.vim.ManagedObjectReference, name: Array<string>): Promise<Array<integrityService.integrity.IntegrityOptionValue>>;
         updateIntegrityOptions(_this: integrityService.vim.ManagedObjectReference, changedValue: Array<integrityService.integrity.IntegrityOptionValue>): Promise<void>;
         removeIntegrityOptions(_this: integrityService.vim.ManagedObjectReference, valueToRemove: Array<integrityService.integrity.IntegrityOptionValue>): Promise<void>;
         setUpdateURLs(_this: integrityService.vim.ManagedObjectReference, urlObj: Array<integrityService.integrity.SoftwareUpdateURL>): Promise<void>;
         deleteUpdateURLs(_this: integrityService.vim.ManagedObjectReference, url: Array<string>): Promise<void>;
         testUpdateURL(_this: integrityService.vim.ManagedObjectReference, url: string, urlType: string): Promise<integrityService.integrity.URLTestResult>;
         testUpdateDepotURL(_this: integrityService.vim.ManagedObjectReference, url: string): Promise<integrityService.integrity.URLTestResult>;
         setURLEnabledByType(_this: integrityService.vim.ManagedObjectReference, urlType: string, value: boolean): Promise<void>;
         setURLEnabledByName(_this: integrityService.vim.ManagedObjectReference, url: string, value: boolean): Promise<void>;
      }
      vim: {
         DynamicArray: {
            (options?: integrityService.vim.DynamicArray): integrityService.vim.DynamicArray;
         };
         DynamicData: {
            (options?: integrityService.vim.DynamicData): integrityService.vim.DynamicData;
         };
         DynamicProperty: {
            (options?: integrityService.vim.DynamicProperty): integrityService.vim.DynamicProperty;
         };
         ArrayOfDynamicProperty: {
            (options?: integrityService.vim.ArrayOfDynamicProperty): integrityService.vim.ArrayOfDynamicProperty;
         };
         KeyAnyValue: {
            (options?: integrityService.vim.KeyAnyValue): integrityService.vim.KeyAnyValue;
         };
         ArrayOfKeyAnyValue: {
            (options?: integrityService.vim.ArrayOfKeyAnyValue): integrityService.vim.ArrayOfKeyAnyValue;
         };
         LocalizableMessage: {
            (options?: integrityService.vim.LocalizableMessage): integrityService.vim.LocalizableMessage;
         };
         ArrayOfLocalizableMessage: {
            (options?: integrityService.vim.ArrayOfLocalizableMessage): integrityService.vim.ArrayOfLocalizableMessage;
         };
         LocalizedMethodFault: {
            (options?: integrityService.vim.LocalizedMethodFault): integrityService.vim.LocalizedMethodFault;
         };
         MethodFault: {
            (options?: integrityService.vim.MethodFault): integrityService.vim.MethodFault;
         };
         ArrayOfMethodFault: {
            (options?: integrityService.vim.ArrayOfMethodFault): integrityService.vim.ArrayOfMethodFault;
         };
         RuntimeFault: {
            (options?: integrityService.vim.RuntimeFault): integrityService.vim.RuntimeFault;
         };
         HostCommunication: {
            (options?: integrityService.vim.HostCommunication): integrityService.vim.HostCommunication;
         };
         HostNotConnected: {
            (options?: integrityService.vim.HostNotConnected): integrityService.vim.HostNotConnected;
         };
         HostNotReachable: {
            (options?: integrityService.vim.HostNotReachable): integrityService.vim.HostNotReachable;
         };
         InvalidArgument: {
            (options?: integrityService.vim.InvalidArgument): integrityService.vim.InvalidArgument;
         };
         InvalidRequest: {
            (options?: integrityService.vim.InvalidRequest): integrityService.vim.InvalidRequest;
         };
         InvalidType: {
            (options?: integrityService.vim.InvalidType): integrityService.vim.InvalidType;
         };
         ManagedObjectNotFound: {
            (options?: integrityService.vim.ManagedObjectNotFound): integrityService.vim.ManagedObjectNotFound;
         };
         MethodNotFound: {
            (options?: integrityService.vim.MethodNotFound): integrityService.vim.MethodNotFound;
         };
         NotEnoughLicenses: {
            (options?: integrityService.vim.NotEnoughLicenses): integrityService.vim.NotEnoughLicenses;
         };
         NotImplemented: {
            (options?: integrityService.vim.NotImplemented): integrityService.vim.NotImplemented;
         };
         NotSupported: {
            (options?: integrityService.vim.NotSupported): integrityService.vim.NotSupported;
         };
         RequestCanceled: {
            (options?: integrityService.vim.RequestCanceled): integrityService.vim.RequestCanceled;
         };
         SecurityError: {
            (options?: integrityService.vim.SecurityError): integrityService.vim.SecurityError;
         };
         SystemError: {
            (options?: integrityService.vim.SystemError): integrityService.vim.SystemError;
         };
         UnexpectedFault: {
            (options?: integrityService.vim.UnexpectedFault): integrityService.vim.UnexpectedFault;
         };
         ManagedObjectReference: {
            (options?: integrityService.vim.ManagedObjectReference): integrityService.vim.ManagedObjectReference;
         };
         ArrayOfString: {
            (options?: integrityService.vim.ArrayOfString): integrityService.vim.ArrayOfString;
         };
         ArrayOfAnyType: {
            (options?: integrityService.vim.ArrayOfAnyType): integrityService.vim.ArrayOfAnyType;
         };
         ArrayOfManagedObjectReference: {
            (options?: integrityService.vim.ArrayOfManagedObjectReference): integrityService.vim.ArrayOfManagedObjectReference;
         };
         ArrayOfBoolean: {
            (options?: integrityService.vim.ArrayOfBoolean): integrityService.vim.ArrayOfBoolean;
         };
         ArrayOfByte: {
            (options?: integrityService.vim.ArrayOfByte): integrityService.vim.ArrayOfByte;
         };
         ArrayOfDouble: {
            (options?: integrityService.vim.ArrayOfDouble): integrityService.vim.ArrayOfDouble;
         };
         ArrayOfInt: {
            (options?: integrityService.vim.ArrayOfInt): integrityService.vim.ArrayOfInt;
         };
         ArrayOfLong: {
            (options?: integrityService.vim.ArrayOfLong): integrityService.vim.ArrayOfLong;
         };
         ArrayOfShort: {
            (options?: integrityService.vim.ArrayOfShort): integrityService.vim.ArrayOfShort;
         };
         InvalidCollectorVersion: {
            (options?: integrityService.vim.InvalidCollectorVersion): integrityService.vim.InvalidCollectorVersion;
         };
         InvalidProperty: {
            (options?: integrityService.vim.InvalidProperty): integrityService.vim.InvalidProperty;
         };
         PropertyFilterSpec: {
            (options?: integrityService.vim.PropertyFilterSpec): integrityService.vim.PropertyFilterSpec;
         };
         ArrayOfPropertyFilterSpec: {
            (options?: integrityService.vim.ArrayOfPropertyFilterSpec): integrityService.vim.ArrayOfPropertyFilterSpec;
         };
         PropertySpec: {
            (options?: integrityService.vim.PropertySpec): integrityService.vim.PropertySpec;
         };
         ArrayOfPropertySpec: {
            (options?: integrityService.vim.ArrayOfPropertySpec): integrityService.vim.ArrayOfPropertySpec;
         };
         ObjectSpec: {
            (options?: integrityService.vim.ObjectSpec): integrityService.vim.ObjectSpec;
         };
         ArrayOfObjectSpec: {
            (options?: integrityService.vim.ArrayOfObjectSpec): integrityService.vim.ArrayOfObjectSpec;
         };
         SelectionSpec: {
            (options?: integrityService.vim.SelectionSpec): integrityService.vim.SelectionSpec;
         };
         ArrayOfSelectionSpec: {
            (options?: integrityService.vim.ArrayOfSelectionSpec): integrityService.vim.ArrayOfSelectionSpec;
         };
         TraversalSpec: {
            (options?: integrityService.vim.TraversalSpec): integrityService.vim.TraversalSpec;
         };
         ObjectContent: {
            (options?: integrityService.vim.ObjectContent): integrityService.vim.ObjectContent;
         };
         ArrayOfObjectContent: {
            (options?: integrityService.vim.ArrayOfObjectContent): integrityService.vim.ArrayOfObjectContent;
         };
         UpdateSet: {
            (options?: integrityService.vim.UpdateSet): integrityService.vim.UpdateSet;
         };
         PropertyFilterUpdate: {
            (options?: integrityService.vim.PropertyFilterUpdate): integrityService.vim.PropertyFilterUpdate;
         };
         ArrayOfPropertyFilterUpdate: {
            (options?: integrityService.vim.ArrayOfPropertyFilterUpdate): integrityService.vim.ArrayOfPropertyFilterUpdate;
         };
         ObjectUpdateKind: {
            "modify": string;
            "enter": string;
            "leave": string;
         };
         ObjectUpdate: {
            (options?: integrityService.vim.ObjectUpdate): integrityService.vim.ObjectUpdate;
         };
         ArrayOfObjectUpdate: {
            (options?: integrityService.vim.ArrayOfObjectUpdate): integrityService.vim.ArrayOfObjectUpdate;
         };
         PropertyChangeOp: {
            "add": string;
            "remove": string;
            "assign": string;
            "indirectRemove": string;
         };
         PropertyChange: {
            (options?: integrityService.vim.PropertyChange): integrityService.vim.PropertyChange;
         };
         ArrayOfPropertyChange: {
            (options?: integrityService.vim.ArrayOfPropertyChange): integrityService.vim.ArrayOfPropertyChange;
         };
         MissingProperty: {
            (options?: integrityService.vim.MissingProperty): integrityService.vim.MissingProperty;
         };
         ArrayOfMissingProperty: {
            (options?: integrityService.vim.ArrayOfMissingProperty): integrityService.vim.ArrayOfMissingProperty;
         };
         MissingObject: {
            (options?: integrityService.vim.MissingObject): integrityService.vim.MissingObject;
         };
         ArrayOfMissingObject: {
            (options?: integrityService.vim.ArrayOfMissingObject): integrityService.vim.ArrayOfMissingObject;
         };
         WaitOptions: {
            (options?: integrityService.vim.WaitOptions): integrityService.vim.WaitOptions;
         };
         RetrieveOptions: {
            (options?: integrityService.vim.RetrieveOptions): integrityService.vim.RetrieveOptions;
         };
         RetrieveResult: {
            (options?: integrityService.vim.RetrieveResult): integrityService.vim.RetrieveResult;
         };
         DestroyPropertyFilterRequestType: {
            (options?: integrityService.vim.DestroyPropertyFilterRequestType): integrityService.vim.DestroyPropertyFilterRequestType;
         };
         CreateFilterRequestType: {
            (options?: integrityService.vim.CreateFilterRequestType): integrityService.vim.CreateFilterRequestType;
         };
         RetrievePropertiesRequestType: {
            (options?: integrityService.vim.RetrievePropertiesRequestType): integrityService.vim.RetrievePropertiesRequestType;
         };
         CheckForUpdatesRequestType: {
            (options?: integrityService.vim.CheckForUpdatesRequestType): integrityService.vim.CheckForUpdatesRequestType;
         };
         WaitForUpdatesRequestType: {
            (options?: integrityService.vim.WaitForUpdatesRequestType): integrityService.vim.WaitForUpdatesRequestType;
         };
         CancelWaitForUpdatesRequestType: {
            (options?: integrityService.vim.CancelWaitForUpdatesRequestType): integrityService.vim.CancelWaitForUpdatesRequestType;
         };
         WaitForUpdatesExRequestType: {
            (options?: integrityService.vim.WaitForUpdatesExRequestType): integrityService.vim.WaitForUpdatesExRequestType;
         };
         RetrievePropertiesExRequestType: {
            (options?: integrityService.vim.RetrievePropertiesExRequestType): integrityService.vim.RetrievePropertiesExRequestType;
         };
         ContinueRetrievePropertiesExRequestType: {
            (options?: integrityService.vim.ContinueRetrievePropertiesExRequestType): integrityService.vim.ContinueRetrievePropertiesExRequestType;
         };
         CancelRetrievePropertiesExRequestType: {
            (options?: integrityService.vim.CancelRetrievePropertiesExRequestType): integrityService.vim.CancelRetrievePropertiesExRequestType;
         };
         CreatePropertyCollectorRequestType: {
            (options?: integrityService.vim.CreatePropertyCollectorRequestType): integrityService.vim.CreatePropertyCollectorRequestType;
         };
         DestroyPropertyCollectorRequestType: {
            (options?: integrityService.vim.DestroyPropertyCollectorRequestType): integrityService.vim.DestroyPropertyCollectorRequestType;
         };
         AboutInfo: {
            (options?: integrityService.vim.AboutInfo): integrityService.vim.AboutInfo;
         };
         AuthorizationDescription: {
            (options?: integrityService.vim.AuthorizationDescription): integrityService.vim.AuthorizationDescription;
         };
         Permission: {
            (options?: integrityService.vim.Permission): integrityService.vim.Permission;
         };
         ArrayOfPermission: {
            (options?: integrityService.vim.ArrayOfPermission): integrityService.vim.ArrayOfPermission;
         };
         AuthorizationRole: {
            (options?: integrityService.vim.AuthorizationRole): integrityService.vim.AuthorizationRole;
         };
         ArrayOfAuthorizationRole: {
            (options?: integrityService.vim.ArrayOfAuthorizationRole): integrityService.vim.ArrayOfAuthorizationRole;
         };
         AuthorizationPrivilege: {
            (options?: integrityService.vim.AuthorizationPrivilege): integrityService.vim.AuthorizationPrivilege;
         };
         ArrayOfAuthorizationPrivilege: {
            (options?: integrityService.vim.ArrayOfAuthorizationPrivilege): integrityService.vim.ArrayOfAuthorizationPrivilege;
         };
         PrivilegeAvailability: {
            (options?: integrityService.vim.PrivilegeAvailability): integrityService.vim.PrivilegeAvailability;
         };
         ArrayOfPrivilegeAvailability: {
            (options?: integrityService.vim.ArrayOfPrivilegeAvailability): integrityService.vim.ArrayOfPrivilegeAvailability;
         };
         EntityPrivilege: {
            (options?: integrityService.vim.EntityPrivilege): integrityService.vim.EntityPrivilege;
         };
         ArrayOfEntityPrivilege: {
            (options?: integrityService.vim.ArrayOfEntityPrivilege): integrityService.vim.ArrayOfEntityPrivilege;
         };
         BoolPolicy: {
            (options?: integrityService.vim.BoolPolicy): integrityService.vim.BoolPolicy;
         };
         Capability: {
            (options?: integrityService.vim.Capability): integrityService.vim.Capability;
         };
         ClusterComputeResourceSummary: {
            (options?: integrityService.vim.ClusterComputeResourceSummary): integrityService.vim.ClusterComputeResourceSummary;
         };
         ComputeResourceSummary: {
            (options?: integrityService.vim.ComputeResourceSummary): integrityService.vim.ComputeResourceSummary;
         };
         ComputeResourceConfigInfo: {
            (options?: integrityService.vim.ComputeResourceConfigInfo): integrityService.vim.ComputeResourceConfigInfo;
         };
         ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState: {
            "licensed": string;
            "unlicensed": string;
            "unknown": string;
         };
         ComputeResourceHostSPBMLicenseInfo: {
            (options?: integrityService.vim.ComputeResourceHostSPBMLicenseInfo): integrityService.vim.ComputeResourceHostSPBMLicenseInfo;
         };
         ArrayOfComputeResourceHostSPBMLicenseInfo: {
            (options?: integrityService.vim.ArrayOfComputeResourceHostSPBMLicenseInfo): integrityService.vim.ArrayOfComputeResourceHostSPBMLicenseInfo;
         };
         ComputeResourceConfigSpec: {
            (options?: integrityService.vim.ComputeResourceConfigSpec): integrityService.vim.ComputeResourceConfigSpec;
         };
         ConfigSpecOperation: {
            "add": string;
            "edit": string;
            "remove": string;
         };
         CustomFieldDef: {
            (options?: integrityService.vim.CustomFieldDef): integrityService.vim.CustomFieldDef;
         };
         ArrayOfCustomFieldDef: {
            (options?: integrityService.vim.ArrayOfCustomFieldDef): integrityService.vim.ArrayOfCustomFieldDef;
         };
         CustomFieldValue: {
            (options?: integrityService.vim.CustomFieldValue): integrityService.vim.CustomFieldValue;
         };
         ArrayOfCustomFieldValue: {
            (options?: integrityService.vim.ArrayOfCustomFieldValue): integrityService.vim.ArrayOfCustomFieldValue;
         };
         CustomFieldStringValue: {
            (options?: integrityService.vim.CustomFieldStringValue): integrityService.vim.CustomFieldStringValue;
         };
         CustomizationSpecInfo: {
            (options?: integrityService.vim.CustomizationSpecInfo): integrityService.vim.CustomizationSpecInfo;
         };
         ArrayOfCustomizationSpecInfo: {
            (options?: integrityService.vim.ArrayOfCustomizationSpecInfo): integrityService.vim.ArrayOfCustomizationSpecInfo;
         };
         CustomizationSpecItem: {
            (options?: integrityService.vim.CustomizationSpecItem): integrityService.vim.CustomizationSpecItem;
         };
         DatacenterConfigInfo: {
            (options?: integrityService.vim.DatacenterConfigInfo): integrityService.vim.DatacenterConfigInfo;
         };
         DatacenterConfigSpec: {
            (options?: integrityService.vim.DatacenterConfigSpec): integrityService.vim.DatacenterConfigSpec;
         };
         DatastoreAccessible: {
            "True": string;
            "False": string;
         };
         DatastoreSummaryMaintenanceModeState: {
            "normal": string;
            "enteringMaintenance": string;
            "inMaintenance": string;
         };
         DatastoreSummary: {
            (options?: integrityService.vim.DatastoreSummary): integrityService.vim.DatastoreSummary;
         };
         DatastoreInfo: {
            (options?: integrityService.vim.DatastoreInfo): integrityService.vim.DatastoreInfo;
         };
         DatastoreCapability: {
            (options?: integrityService.vim.DatastoreCapability): integrityService.vim.DatastoreCapability;
         };
         DatastoreHostMount: {
            (options?: integrityService.vim.DatastoreHostMount): integrityService.vim.DatastoreHostMount;
         };
         ArrayOfDatastoreHostMount: {
            (options?: integrityService.vim.ArrayOfDatastoreHostMount): integrityService.vim.ArrayOfDatastoreHostMount;
         };
         DatastoreMountPathDatastorePair: {
            (options?: integrityService.vim.DatastoreMountPathDatastorePair): integrityService.vim.DatastoreMountPathDatastorePair;
         };
         ArrayOfDatastoreMountPathDatastorePair: {
            (options?: integrityService.vim.ArrayOfDatastoreMountPathDatastorePair): integrityService.vim.ArrayOfDatastoreMountPathDatastorePair;
         };
         Description: {
            (options?: integrityService.vim.Description): integrityService.vim.Description;
         };
         DiagnosticManagerLogCreator: {
            "vpxd": string;
            "vpxa": string;
            "hostd": string;
            "serverd": string;
            "install": string;
            "vpxClient": string;
            "recordLog": string;
         };
         DiagnosticManagerLogFormat: {
            "plain": string;
         };
         DiagnosticManagerLogDescriptor: {
            (options?: integrityService.vim.DiagnosticManagerLogDescriptor): integrityService.vim.DiagnosticManagerLogDescriptor;
         };
         ArrayOfDiagnosticManagerLogDescriptor: {
            (options?: integrityService.vim.ArrayOfDiagnosticManagerLogDescriptor): integrityService.vim.ArrayOfDiagnosticManagerLogDescriptor;
         };
         DiagnosticManagerLogHeader: {
            (options?: integrityService.vim.DiagnosticManagerLogHeader): integrityService.vim.DiagnosticManagerLogHeader;
         };
         DiagnosticManagerBundleInfo: {
            (options?: integrityService.vim.DiagnosticManagerBundleInfo): integrityService.vim.DiagnosticManagerBundleInfo;
         };
         ArrayOfDiagnosticManagerBundleInfo: {
            (options?: integrityService.vim.ArrayOfDiagnosticManagerBundleInfo): integrityService.vim.ArrayOfDiagnosticManagerBundleInfo;
         };
         DistributedVirtualSwitchProductSpecOperationType: {
            "preInstall": string;
            "upgrade": string;
            "notifyAvailableUpgrade": string;
            "proceedWithUpgrade": string;
            "updateBundleInfo": string;
         };
         DVSContactInfo: {
            (options?: integrityService.vim.DVSContactInfo): integrityService.vim.DVSContactInfo;
         };
         DistributedVirtualSwitchNicTeamingPolicyMode: {
            "loadbalance_ip": string;
            "loadbalance_srcmac": string;
            "loadbalance_srcid": string;
            "failover_explicit": string;
            "loadbalance_loadbased": string;
         };
         DVSNetworkResourceManagementCapability: {
            (options?: integrityService.vim.DVSNetworkResourceManagementCapability): integrityService.vim.DVSNetworkResourceManagementCapability;
         };
         DVSRollbackCapability: {
            (options?: integrityService.vim.DVSRollbackCapability): integrityService.vim.DVSRollbackCapability;
         };
         DVSBackupRestoreCapability: {
            (options?: integrityService.vim.DVSBackupRestoreCapability): integrityService.vim.DVSBackupRestoreCapability;
         };
         DVSFeatureCapability: {
            (options?: integrityService.vim.DVSFeatureCapability): integrityService.vim.DVSFeatureCapability;
         };
         DVSHealthCheckCapability: {
            (options?: integrityService.vim.DVSHealthCheckCapability): integrityService.vim.DVSHealthCheckCapability;
         };
         DVSCapability: {
            (options?: integrityService.vim.DVSCapability): integrityService.vim.DVSCapability;
         };
         DVSSummary: {
            (options?: integrityService.vim.DVSSummary): integrityService.vim.DVSSummary;
         };
         DVSPolicy: {
            (options?: integrityService.vim.DVSPolicy): integrityService.vim.DVSPolicy;
         };
         DVSUplinkPortPolicy: {
            (options?: integrityService.vim.DVSUplinkPortPolicy): integrityService.vim.DVSUplinkPortPolicy;
         };
         DVSNameArrayUplinkPortPolicy: {
            (options?: integrityService.vim.DVSNameArrayUplinkPortPolicy): integrityService.vim.DVSNameArrayUplinkPortPolicy;
         };
         DVSConfigSpec: {
            (options?: integrityService.vim.DVSConfigSpec): integrityService.vim.DVSConfigSpec;
         };
         DVSCreateSpec: {
            (options?: integrityService.vim.DVSCreateSpec): integrityService.vim.DVSCreateSpec;
         };
         DVSConfigInfo: {
            (options?: integrityService.vim.DVSConfigInfo): integrityService.vim.DVSConfigInfo;
         };
         DistributedVirtualSwitchHostInfrastructureTrafficClass: {
            "management": string;
            "faultTolerance": string;
            "vmotion": string;
            "virtualMachine": string;
            "iSCSI": string;
            "nfs": string;
            "hbr": string;
            "vsan": string;
         };
         DVSHealthCheckConfig: {
            (options?: integrityService.vim.DVSHealthCheckConfig): integrityService.vim.DVSHealthCheckConfig;
         };
         ArrayOfDVSHealthCheckConfig: {
            (options?: integrityService.vim.ArrayOfDVSHealthCheckConfig): integrityService.vim.ArrayOfDVSHealthCheckConfig;
         };
         DVSRuntimeInfo: {
            (options?: integrityService.vim.DVSRuntimeInfo): integrityService.vim.DVSRuntimeInfo;
         };
         DrsInjectorWorkloadCorrelationState: {
            "Correlated": string;
            "Uncorrelated": string;
         };
         EVCMode: {
            (options?: integrityService.vim.EVCMode): integrityService.vim.EVCMode;
         };
         ArrayOfEVCMode: {
            (options?: integrityService.vim.ArrayOfEVCMode): integrityService.vim.ArrayOfEVCMode;
         };
         ElementDescription: {
            (options?: integrityService.vim.ElementDescription): integrityService.vim.ElementDescription;
         };
         ArrayOfElementDescription: {
            (options?: integrityService.vim.ArrayOfElementDescription): integrityService.vim.ArrayOfElementDescription;
         };
         EnumDescription: {
            (options?: integrityService.vim.EnumDescription): integrityService.vim.EnumDescription;
         };
         ArrayOfEnumDescription: {
            (options?: integrityService.vim.ArrayOfEnumDescription): integrityService.vim.ArrayOfEnumDescription;
         };
         ExtendedDescription: {
            (options?: integrityService.vim.ExtendedDescription): integrityService.vim.ExtendedDescription;
         };
         ExtendedElementDescription: {
            (options?: integrityService.vim.ExtendedElementDescription): integrityService.vim.ExtendedElementDescription;
         };
         ExtensionServerInfo: {
            (options?: integrityService.vim.ExtensionServerInfo): integrityService.vim.ExtensionServerInfo;
         };
         ArrayOfExtensionServerInfo: {
            (options?: integrityService.vim.ArrayOfExtensionServerInfo): integrityService.vim.ArrayOfExtensionServerInfo;
         };
         ExtensionClientInfo: {
            (options?: integrityService.vim.ExtensionClientInfo): integrityService.vim.ExtensionClientInfo;
         };
         ArrayOfExtensionClientInfo: {
            (options?: integrityService.vim.ArrayOfExtensionClientInfo): integrityService.vim.ArrayOfExtensionClientInfo;
         };
         ExtensionTaskTypeInfo: {
            (options?: integrityService.vim.ExtensionTaskTypeInfo): integrityService.vim.ExtensionTaskTypeInfo;
         };
         ArrayOfExtensionTaskTypeInfo: {
            (options?: integrityService.vim.ArrayOfExtensionTaskTypeInfo): integrityService.vim.ArrayOfExtensionTaskTypeInfo;
         };
         ExtensionEventTypeInfo: {
            (options?: integrityService.vim.ExtensionEventTypeInfo): integrityService.vim.ExtensionEventTypeInfo;
         };
         ArrayOfExtensionEventTypeInfo: {
            (options?: integrityService.vim.ArrayOfExtensionEventTypeInfo): integrityService.vim.ArrayOfExtensionEventTypeInfo;
         };
         ExtensionFaultTypeInfo: {
            (options?: integrityService.vim.ExtensionFaultTypeInfo): integrityService.vim.ExtensionFaultTypeInfo;
         };
         ArrayOfExtensionFaultTypeInfo: {
            (options?: integrityService.vim.ArrayOfExtensionFaultTypeInfo): integrityService.vim.ArrayOfExtensionFaultTypeInfo;
         };
         ExtensionPrivilegeInfo: {
            (options?: integrityService.vim.ExtensionPrivilegeInfo): integrityService.vim.ExtensionPrivilegeInfo;
         };
         ArrayOfExtensionPrivilegeInfo: {
            (options?: integrityService.vim.ArrayOfExtensionPrivilegeInfo): integrityService.vim.ArrayOfExtensionPrivilegeInfo;
         };
         ExtensionResourceInfo: {
            (options?: integrityService.vim.ExtensionResourceInfo): integrityService.vim.ExtensionResourceInfo;
         };
         ArrayOfExtensionResourceInfo: {
            (options?: integrityService.vim.ArrayOfExtensionResourceInfo): integrityService.vim.ArrayOfExtensionResourceInfo;
         };
         ExtensionHealthInfo: {
            (options?: integrityService.vim.ExtensionHealthInfo): integrityService.vim.ExtensionHealthInfo;
         };
         ExtensionOvfConsumerInfo: {
            (options?: integrityService.vim.ExtensionOvfConsumerInfo): integrityService.vim.ExtensionOvfConsumerInfo;
         };
         Extension: {
            (options?: integrityService.vim.Extension): integrityService.vim.Extension;
         };
         ArrayOfExtension: {
            (options?: integrityService.vim.ArrayOfExtension): integrityService.vim.ArrayOfExtension;
         };
         ExtensionManagerIpAllocationUsage: {
            (options?: integrityService.vim.ExtensionManagerIpAllocationUsage): integrityService.vim.ExtensionManagerIpAllocationUsage;
         };
         ArrayOfExtensionManagerIpAllocationUsage: {
            (options?: integrityService.vim.ArrayOfExtensionManagerIpAllocationUsage): integrityService.vim.ArrayOfExtensionManagerIpAllocationUsage;
         };
         ReplicationVmState: {
            "none": string;
            "paused": string;
            "syncing": string;
            "idle": string;
            "active": string;
            "error": string;
         };
         ReplicationVmProgressInfo: {
            (options?: integrityService.vim.ReplicationVmProgressInfo): integrityService.vim.ReplicationVmProgressInfo;
         };
         HbrManagerReplicationVmInfo: {
            (options?: integrityService.vim.HbrManagerReplicationVmInfo): integrityService.vim.HbrManagerReplicationVmInfo;
         };
         HostServiceTicket: {
            (options?: integrityService.vim.HostServiceTicket): integrityService.vim.HostServiceTicket;
         };
         HostSystemConnectionState: {
            "connected": string;
            "notResponding": string;
            "disconnected": string;
         };
         HostSystemPowerState: {
            "poweredOn": string;
            "poweredOff": string;
            "standBy": string;
            "unknown": string;
         };
         HostStandbyMode: {
            "entering": string;
            "exiting": string;
            "in": string;
            "none": string;
         };
         HostSystemReconnectSpec: {
            (options?: integrityService.vim.HostSystemReconnectSpec): integrityService.vim.HostSystemReconnectSpec;
         };
         HttpNfcLeaseState: {
            "initializing": string;
            "ready": string;
            "done": string;
            "error": string;
         };
         HttpNfcLeaseDatastoreLeaseInfo: {
            (options?: integrityService.vim.HttpNfcLeaseDatastoreLeaseInfo): integrityService.vim.HttpNfcLeaseDatastoreLeaseInfo;
         };
         ArrayOfHttpNfcLeaseDatastoreLeaseInfo: {
            (options?: integrityService.vim.ArrayOfHttpNfcLeaseDatastoreLeaseInfo): integrityService.vim.ArrayOfHttpNfcLeaseDatastoreLeaseInfo;
         };
         HttpNfcLeaseHostInfo: {
            (options?: integrityService.vim.HttpNfcLeaseHostInfo): integrityService.vim.HttpNfcLeaseHostInfo;
         };
         ArrayOfHttpNfcLeaseHostInfo: {
            (options?: integrityService.vim.ArrayOfHttpNfcLeaseHostInfo): integrityService.vim.ArrayOfHttpNfcLeaseHostInfo;
         };
         HttpNfcLeaseInfo: {
            (options?: integrityService.vim.HttpNfcLeaseInfo): integrityService.vim.HttpNfcLeaseInfo;
         };
         HttpNfcLeaseDeviceUrl: {
            (options?: integrityService.vim.HttpNfcLeaseDeviceUrl): integrityService.vim.HttpNfcLeaseDeviceUrl;
         };
         ArrayOfHttpNfcLeaseDeviceUrl: {
            (options?: integrityService.vim.ArrayOfHttpNfcLeaseDeviceUrl): integrityService.vim.ArrayOfHttpNfcLeaseDeviceUrl;
         };
         HttpNfcLeaseManifestEntry: {
            (options?: integrityService.vim.HttpNfcLeaseManifestEntry): integrityService.vim.HttpNfcLeaseManifestEntry;
         };
         ArrayOfHttpNfcLeaseManifestEntry: {
            (options?: integrityService.vim.ArrayOfHttpNfcLeaseManifestEntry): integrityService.vim.ArrayOfHttpNfcLeaseManifestEntry;
         };
         ImportSpec: {
            (options?: integrityService.vim.ImportSpec): integrityService.vim.ImportSpec;
         };
         ArrayOfImportSpec: {
            (options?: integrityService.vim.ArrayOfImportSpec): integrityService.vim.ArrayOfImportSpec;
         };
         InheritablePolicy: {
            (options?: integrityService.vim.InheritablePolicy): integrityService.vim.InheritablePolicy;
         };
         IntExpression: {
            (options?: integrityService.vim.IntExpression): integrityService.vim.IntExpression;
         };
         IntPolicy: {
            (options?: integrityService.vim.IntPolicy): integrityService.vim.IntPolicy;
         };
         IpAddress: {
            (options?: integrityService.vim.IpAddress): integrityService.vim.IpAddress;
         };
         IpPoolManagerIpAllocation: {
            (options?: integrityService.vim.IpPoolManagerIpAllocation): integrityService.vim.IpPoolManagerIpAllocation;
         };
         ArrayOfIpPoolManagerIpAllocation: {
            (options?: integrityService.vim.ArrayOfIpPoolManagerIpAllocation): integrityService.vim.ArrayOfIpPoolManagerIpAllocation;
         };
         IpRange: {
            (options?: integrityService.vim.IpRange): integrityService.vim.IpRange;
         };
         KeyValue: {
            (options?: integrityService.vim.KeyValue): integrityService.vim.KeyValue;
         };
         ArrayOfKeyValue: {
            (options?: integrityService.vim.ArrayOfKeyValue): integrityService.vim.ArrayOfKeyValue;
         };
         LatencySensitivitySensitivityLevel: {
            "low": string;
            "normal": string;
            "medium": string;
            "high": string;
            "custom": string;
         };
         LatencySensitivity: {
            (options?: integrityService.vim.LatencySensitivity): integrityService.vim.LatencySensitivity;
         };
         LicenseAssignmentManagerLicenseAssignment: {
            (options?: integrityService.vim.LicenseAssignmentManagerLicenseAssignment): integrityService.vim.LicenseAssignmentManagerLicenseAssignment;
         };
         ArrayOfLicenseAssignmentManagerLicenseAssignment: {
            (options?: integrityService.vim.ArrayOfLicenseAssignmentManagerLicenseAssignment): integrityService.vim.ArrayOfLicenseAssignmentManagerLicenseAssignment;
         };
         LicenseManagerState: {
            "initializing": string;
            "normal": string;
            "marginal": string;
            "fault": string;
         };
         LicenseManagerLicenseKey: {
            "esxFull": string;
            "esxVmtn": string;
            "esxExpress": string;
            "san": string;
            "iscsi": string;
            "nas": string;
            "vsmp": string;
            "backup": string;
            "vc": string;
            "vcExpress": string;
            "esxHost": string;
            "gsxHost": string;
            "serverHost": string;
            "drsPower": string;
            "vmotion": string;
            "drs": string;
            "das": string;
         };
         LicenseSource: {
            (options?: integrityService.vim.LicenseSource): integrityService.vim.LicenseSource;
         };
         LicenseServerSource: {
            (options?: integrityService.vim.LicenseServerSource): integrityService.vim.LicenseServerSource;
         };
         LocalLicenseSource: {
            (options?: integrityService.vim.LocalLicenseSource): integrityService.vim.LocalLicenseSource;
         };
         EvaluationLicenseSource: {
            (options?: integrityService.vim.EvaluationLicenseSource): integrityService.vim.EvaluationLicenseSource;
         };
         LicenseFeatureInfoUnit: {
            "host": string;
            "cpuCore": string;
            "cpuPackage": string;
            "server": string;
            "vm": string;
         };
         LicenseFeatureInfoState: {
            "enabled": string;
            "disabled": string;
            "optional": string;
         };
         LicenseFeatureInfoSourceRestriction: {
            "unrestricted": string;
            "served": string;
            "file": string;
         };
         LicenseFeatureInfo: {
            (options?: integrityService.vim.LicenseFeatureInfo): integrityService.vim.LicenseFeatureInfo;
         };
         ArrayOfLicenseFeatureInfo: {
            (options?: integrityService.vim.ArrayOfLicenseFeatureInfo): integrityService.vim.ArrayOfLicenseFeatureInfo;
         };
         LicenseReservationInfoState: {
            "notUsed": string;
            "noLicense": string;
            "unlicensedUse": string;
            "licensed": string;
         };
         LicenseReservationInfo: {
            (options?: integrityService.vim.LicenseReservationInfo): integrityService.vim.LicenseReservationInfo;
         };
         ArrayOfLicenseReservationInfo: {
            (options?: integrityService.vim.ArrayOfLicenseReservationInfo): integrityService.vim.ArrayOfLicenseReservationInfo;
         };
         LicenseAvailabilityInfo: {
            (options?: integrityService.vim.LicenseAvailabilityInfo): integrityService.vim.LicenseAvailabilityInfo;
         };
         ArrayOfLicenseAvailabilityInfo: {
            (options?: integrityService.vim.ArrayOfLicenseAvailabilityInfo): integrityService.vim.ArrayOfLicenseAvailabilityInfo;
         };
         LicenseDiagnostics: {
            (options?: integrityService.vim.LicenseDiagnostics): integrityService.vim.LicenseDiagnostics;
         };
         LicenseUsageInfo: {
            (options?: integrityService.vim.LicenseUsageInfo): integrityService.vim.LicenseUsageInfo;
         };
         LicenseManagerEvaluationInfo: {
            (options?: integrityService.vim.LicenseManagerEvaluationInfo): integrityService.vim.LicenseManagerEvaluationInfo;
         };
         HostLicensableResourceKey: {
            "numCpuPackages": string;
            "numCpuCores": string;
            "memorySize": string;
            "memoryForVms": string;
            "numVmsStarted": string;
            "numVmsStarting": string;
         };
         HostLicensableResourceInfo: {
            (options?: integrityService.vim.HostLicensableResourceInfo): integrityService.vim.HostLicensableResourceInfo;
         };
         LicenseManagerLicenseInfo: {
            (options?: integrityService.vim.LicenseManagerLicenseInfo): integrityService.vim.LicenseManagerLicenseInfo;
         };
         ArrayOfLicenseManagerLicenseInfo: {
            (options?: integrityService.vim.ArrayOfLicenseManagerLicenseInfo): integrityService.vim.ArrayOfLicenseManagerLicenseInfo;
         };
         LocalizationManagerMessageCatalog: {
            (options?: integrityService.vim.LocalizationManagerMessageCatalog): integrityService.vim.LocalizationManagerMessageCatalog;
         };
         ArrayOfLocalizationManagerMessageCatalog: {
            (options?: integrityService.vim.ArrayOfLocalizationManagerMessageCatalog): integrityService.vim.ArrayOfLocalizationManagerMessageCatalog;
         };
         LongPolicy: {
            (options?: integrityService.vim.LongPolicy): integrityService.vim.LongPolicy;
         };
         MacAddress: {
            (options?: integrityService.vim.MacAddress): integrityService.vim.MacAddress;
         };
         MacRange: {
            (options?: integrityService.vim.MacRange): integrityService.vim.MacRange;
         };
         ManagedEntityStatus: {
            "gray": string;
            "green": string;
            "yellow": string;
            "red": string;
         };
         MethodDescription: {
            (options?: integrityService.vim.MethodDescription): integrityService.vim.MethodDescription;
         };
         NegatableExpression: {
            (options?: integrityService.vim.NegatableExpression): integrityService.vim.NegatableExpression;
         };
         NetworkSummary: {
            (options?: integrityService.vim.NetworkSummary): integrityService.vim.NetworkSummary;
         };
         NumericRange: {
            (options?: integrityService.vim.NumericRange): integrityService.vim.NumericRange;
         };
         ArrayOfNumericRange: {
            (options?: integrityService.vim.ArrayOfNumericRange): integrityService.vim.ArrayOfNumericRange;
         };
         OpaqueNetworkSummary: {
            (options?: integrityService.vim.OpaqueNetworkSummary): integrityService.vim.OpaqueNetworkSummary;
         };
         OvfConsumerOvfSection: {
            (options?: integrityService.vim.OvfConsumerOvfSection): integrityService.vim.OvfConsumerOvfSection;
         };
         ArrayOfOvfConsumerOvfSection: {
            (options?: integrityService.vim.ArrayOfOvfConsumerOvfSection): integrityService.vim.ArrayOfOvfConsumerOvfSection;
         };
         OvfConsumerOstNodeType: {
            "envelope": string;
            "virtualSystem": string;
            "virtualSystemCollection": string;
         };
         OvfConsumerOstNode: {
            (options?: integrityService.vim.OvfConsumerOstNode): integrityService.vim.OvfConsumerOstNode;
         };
         ArrayOfOvfConsumerOstNode: {
            (options?: integrityService.vim.ArrayOfOvfConsumerOstNode): integrityService.vim.ArrayOfOvfConsumerOstNode;
         };
         OvfOptionInfo: {
            (options?: integrityService.vim.OvfOptionInfo): integrityService.vim.OvfOptionInfo;
         };
         ArrayOfOvfOptionInfo: {
            (options?: integrityService.vim.ArrayOfOvfOptionInfo): integrityService.vim.ArrayOfOvfOptionInfo;
         };
         OvfDeploymentOption: {
            (options?: integrityService.vim.OvfDeploymentOption): integrityService.vim.OvfDeploymentOption;
         };
         ArrayOfOvfDeploymentOption: {
            (options?: integrityService.vim.ArrayOfOvfDeploymentOption): integrityService.vim.ArrayOfOvfDeploymentOption;
         };
         OvfManagerCommonParams: {
            (options?: integrityService.vim.OvfManagerCommonParams): integrityService.vim.OvfManagerCommonParams;
         };
         OvfValidateHostParams: {
            (options?: integrityService.vim.OvfValidateHostParams): integrityService.vim.OvfValidateHostParams;
         };
         OvfValidateHostResult: {
            (options?: integrityService.vim.OvfValidateHostResult): integrityService.vim.OvfValidateHostResult;
         };
         OvfParseDescriptorParams: {
            (options?: integrityService.vim.OvfParseDescriptorParams): integrityService.vim.OvfParseDescriptorParams;
         };
         OvfParseDescriptorResult: {
            (options?: integrityService.vim.OvfParseDescriptorResult): integrityService.vim.OvfParseDescriptorResult;
         };
         OvfNetworkInfo: {
            (options?: integrityService.vim.OvfNetworkInfo): integrityService.vim.OvfNetworkInfo;
         };
         ArrayOfOvfNetworkInfo: {
            (options?: integrityService.vim.ArrayOfOvfNetworkInfo): integrityService.vim.ArrayOfOvfNetworkInfo;
         };
         OvfCreateImportSpecParamsDiskProvisioningType: {
            "monolithicSparse": string;
            "monolithicFlat": string;
            "twoGbMaxExtentSparse": string;
            "twoGbMaxExtentFlat": string;
            "thin": string;
            "thick": string;
            "seSparse": string;
            "eagerZeroedThick": string;
            "sparse": string;
            "flat": string;
         };
         OvfCreateImportSpecParams: {
            (options?: integrityService.vim.OvfCreateImportSpecParams): integrityService.vim.OvfCreateImportSpecParams;
         };
         OvfResourceMap: {
            (options?: integrityService.vim.OvfResourceMap): integrityService.vim.OvfResourceMap;
         };
         ArrayOfOvfResourceMap: {
            (options?: integrityService.vim.ArrayOfOvfResourceMap): integrityService.vim.ArrayOfOvfResourceMap;
         };
         OvfNetworkMapping: {
            (options?: integrityService.vim.OvfNetworkMapping): integrityService.vim.OvfNetworkMapping;
         };
         ArrayOfOvfNetworkMapping: {
            (options?: integrityService.vim.ArrayOfOvfNetworkMapping): integrityService.vim.ArrayOfOvfNetworkMapping;
         };
         OvfCreateImportSpecResult: {
            (options?: integrityService.vim.OvfCreateImportSpecResult): integrityService.vim.OvfCreateImportSpecResult;
         };
         OvfFileItem: {
            (options?: integrityService.vim.OvfFileItem): integrityService.vim.OvfFileItem;
         };
         ArrayOfOvfFileItem: {
            (options?: integrityService.vim.ArrayOfOvfFileItem): integrityService.vim.ArrayOfOvfFileItem;
         };
         OvfCreateDescriptorParams: {
            (options?: integrityService.vim.OvfCreateDescriptorParams): integrityService.vim.OvfCreateDescriptorParams;
         };
         OvfCreateDescriptorResult: {
            (options?: integrityService.vim.OvfCreateDescriptorResult): integrityService.vim.OvfCreateDescriptorResult;
         };
         OvfFile: {
            (options?: integrityService.vim.OvfFile): integrityService.vim.OvfFile;
         };
         ArrayOfOvfFile: {
            (options?: integrityService.vim.ArrayOfOvfFile): integrityService.vim.ArrayOfOvfFile;
         };
         PasswordField: {
            (options?: integrityService.vim.PasswordField): integrityService.vim.PasswordField;
         };
         PerformanceDescription: {
            (options?: integrityService.vim.PerformanceDescription): integrityService.vim.PerformanceDescription;
         };
         PerfFormat: {
            "normal": string;
            "csv": string;
         };
         PerfProviderSummary: {
            (options?: integrityService.vim.PerfProviderSummary): integrityService.vim.PerfProviderSummary;
         };
         PerfSummaryType: {
            "average": string;
            "maximum": string;
            "minimum": string;
            "latest": string;
            "summation": string;
            "none": string;
         };
         PerfStatsType: {
            "absolute": string;
            "delta": string;
            "rate": string;
         };
         PerformanceManagerUnit: {
            "percent": string;
            "kiloBytes": string;
            "megaBytes": string;
            "megaHertz": string;
            "number": string;
            "microsecond": string;
            "millisecond": string;
            "second": string;
            "kiloBytesPerSecond": string;
            "megaBytesPerSecond": string;
            "watt": string;
            "joule": string;
         };
         PerfCounterInfo: {
            (options?: integrityService.vim.PerfCounterInfo): integrityService.vim.PerfCounterInfo;
         };
         ArrayOfPerfCounterInfo: {
            (options?: integrityService.vim.ArrayOfPerfCounterInfo): integrityService.vim.ArrayOfPerfCounterInfo;
         };
         PerfMetricId: {
            (options?: integrityService.vim.PerfMetricId): integrityService.vim.PerfMetricId;
         };
         ArrayOfPerfMetricId: {
            (options?: integrityService.vim.ArrayOfPerfMetricId): integrityService.vim.ArrayOfPerfMetricId;
         };
         PerfQuerySpec: {
            (options?: integrityService.vim.PerfQuerySpec): integrityService.vim.PerfQuerySpec;
         };
         ArrayOfPerfQuerySpec: {
            (options?: integrityService.vim.ArrayOfPerfQuerySpec): integrityService.vim.ArrayOfPerfQuerySpec;
         };
         PerfSampleInfo: {
            (options?: integrityService.vim.PerfSampleInfo): integrityService.vim.PerfSampleInfo;
         };
         ArrayOfPerfSampleInfo: {
            (options?: integrityService.vim.ArrayOfPerfSampleInfo): integrityService.vim.ArrayOfPerfSampleInfo;
         };
         PerfMetricSeries: {
            (options?: integrityService.vim.PerfMetricSeries): integrityService.vim.PerfMetricSeries;
         };
         ArrayOfPerfMetricSeries: {
            (options?: integrityService.vim.ArrayOfPerfMetricSeries): integrityService.vim.ArrayOfPerfMetricSeries;
         };
         PerfMetricIntSeries: {
            (options?: integrityService.vim.PerfMetricIntSeries): integrityService.vim.PerfMetricIntSeries;
         };
         PerfMetricSeriesCSV: {
            (options?: integrityService.vim.PerfMetricSeriesCSV): integrityService.vim.PerfMetricSeriesCSV;
         };
         ArrayOfPerfMetricSeriesCSV: {
            (options?: integrityService.vim.ArrayOfPerfMetricSeriesCSV): integrityService.vim.ArrayOfPerfMetricSeriesCSV;
         };
         PerfEntityMetricBase: {
            (options?: integrityService.vim.PerfEntityMetricBase): integrityService.vim.PerfEntityMetricBase;
         };
         ArrayOfPerfEntityMetricBase: {
            (options?: integrityService.vim.ArrayOfPerfEntityMetricBase): integrityService.vim.ArrayOfPerfEntityMetricBase;
         };
         PerfEntityMetric: {
            (options?: integrityService.vim.PerfEntityMetric): integrityService.vim.PerfEntityMetric;
         };
         PerfEntityMetricCSV: {
            (options?: integrityService.vim.PerfEntityMetricCSV): integrityService.vim.PerfEntityMetricCSV;
         };
         PerfCompositeMetric: {
            (options?: integrityService.vim.PerfCompositeMetric): integrityService.vim.PerfCompositeMetric;
         };
         PerformanceManagerCounterLevelMapping: {
            (options?: integrityService.vim.PerformanceManagerCounterLevelMapping): integrityService.vim.PerformanceManagerCounterLevelMapping;
         };
         ArrayOfPerformanceManagerCounterLevelMapping: {
            (options?: integrityService.vim.ArrayOfPerformanceManagerCounterLevelMapping): integrityService.vim.ArrayOfPerformanceManagerCounterLevelMapping;
         };
         PerfInterval: {
            (options?: integrityService.vim.PerfInterval): integrityService.vim.PerfInterval;
         };
         ArrayOfPerfInterval: {
            (options?: integrityService.vim.ArrayOfPerfInterval): integrityService.vim.ArrayOfPerfInterval;
         };
         PosixUserSearchResult: {
            (options?: integrityService.vim.PosixUserSearchResult): integrityService.vim.PosixUserSearchResult;
         };
         PrivilegePolicyDef: {
            (options?: integrityService.vim.PrivilegePolicyDef): integrityService.vim.PrivilegePolicyDef;
         };
         ResourceAllocationInfo: {
            (options?: integrityService.vim.ResourceAllocationInfo): integrityService.vim.ResourceAllocationInfo;
         };
         ResourceAllocationOption: {
            (options?: integrityService.vim.ResourceAllocationOption): integrityService.vim.ResourceAllocationOption;
         };
         ResourceConfigOption: {
            (options?: integrityService.vim.ResourceConfigOption): integrityService.vim.ResourceConfigOption;
         };
         ResourceConfigSpec: {
            (options?: integrityService.vim.ResourceConfigSpec): integrityService.vim.ResourceConfigSpec;
         };
         ArrayOfResourceConfigSpec: {
            (options?: integrityService.vim.ArrayOfResourceConfigSpec): integrityService.vim.ArrayOfResourceConfigSpec;
         };
         DatabaseSizeParam: {
            (options?: integrityService.vim.DatabaseSizeParam): integrityService.vim.DatabaseSizeParam;
         };
         InventoryDescription: {
            (options?: integrityService.vim.InventoryDescription): integrityService.vim.InventoryDescription;
         };
         PerformanceStatisticsDescription: {
            (options?: integrityService.vim.PerformanceStatisticsDescription): integrityService.vim.PerformanceStatisticsDescription;
         };
         DatabaseSizeEstimate: {
            (options?: integrityService.vim.DatabaseSizeEstimate): integrityService.vim.DatabaseSizeEstimate;
         };
         ResourcePoolResourceUsage: {
            (options?: integrityService.vim.ResourcePoolResourceUsage): integrityService.vim.ResourcePoolResourceUsage;
         };
         ResourcePoolRuntimeInfo: {
            (options?: integrityService.vim.ResourcePoolRuntimeInfo): integrityService.vim.ResourcePoolRuntimeInfo;
         };
         ResourcePoolQuickStats: {
            (options?: integrityService.vim.ResourcePoolQuickStats): integrityService.vim.ResourcePoolQuickStats;
         };
         ResourcePoolSummary: {
            (options?: integrityService.vim.ResourcePoolSummary): integrityService.vim.ResourcePoolSummary;
         };
         SelectionSet: {
            (options?: integrityService.vim.SelectionSet): integrityService.vim.SelectionSet;
         };
         ArrayOfSelectionSet: {
            (options?: integrityService.vim.ArrayOfSelectionSet): integrityService.vim.ArrayOfSelectionSet;
         };
         ValidateMigrationTestType: {
            "sourceTests": string;
            "compatibilityTests": string;
            "diskAccessibilityTests": string;
            "resourceTests": string;
         };
         VMotionCompatibilityType: {
            "cpu": string;
            "software": string;
         };
         HostVMotionCompatibility: {
            (options?: integrityService.vim.HostVMotionCompatibility): integrityService.vim.HostVMotionCompatibility;
         };
         ArrayOfHostVMotionCompatibility: {
            (options?: integrityService.vim.ArrayOfHostVMotionCompatibility): integrityService.vim.ArrayOfHostVMotionCompatibility;
         };
         ProductComponentInfo: {
            (options?: integrityService.vim.ProductComponentInfo): integrityService.vim.ProductComponentInfo;
         };
         ArrayOfProductComponentInfo: {
            (options?: integrityService.vim.ArrayOfProductComponentInfo): integrityService.vim.ArrayOfProductComponentInfo;
         };
         ServiceContent: {
            (options?: integrityService.vim.ServiceContent): integrityService.vim.ServiceContent;
         };
         ServiceManagerServiceInfo: {
            (options?: integrityService.vim.ServiceManagerServiceInfo): integrityService.vim.ServiceManagerServiceInfo;
         };
         ArrayOfServiceManagerServiceInfo: {
            (options?: integrityService.vim.ArrayOfServiceManagerServiceInfo): integrityService.vim.ArrayOfServiceManagerServiceInfo;
         };
         SessionManagerLocalTicket: {
            (options?: integrityService.vim.SessionManagerLocalTicket): integrityService.vim.SessionManagerLocalTicket;
         };
         SessionManagerGenericServiceTicket: {
            (options?: integrityService.vim.SessionManagerGenericServiceTicket): integrityService.vim.SessionManagerGenericServiceTicket;
         };
         SessionManagerServiceRequestSpec: {
            (options?: integrityService.vim.SessionManagerServiceRequestSpec): integrityService.vim.SessionManagerServiceRequestSpec;
         };
         SessionManagerVmomiServiceRequestSpec: {
            (options?: integrityService.vim.SessionManagerVmomiServiceRequestSpec): integrityService.vim.SessionManagerVmomiServiceRequestSpec;
         };
         SessionManagerHttpServiceRequestSpecMethod: {
            "httpOptions": string;
            "httpGet": string;
            "httpHead": string;
            "httpPost": string;
            "httpPut": string;
            "httpDelete": string;
            "httpTrace": string;
            "httpConnect": string;
         };
         SessionManagerHttpServiceRequestSpec: {
            (options?: integrityService.vim.SessionManagerHttpServiceRequestSpec): integrityService.vim.SessionManagerHttpServiceRequestSpec;
         };
         SharesLevel: {
            "low": string;
            "normal": string;
            "high": string;
            "custom": string;
         };
         SharesInfo: {
            (options?: integrityService.vim.SharesInfo): integrityService.vim.SharesInfo;
         };
         SharesOption: {
            (options?: integrityService.vim.SharesOption): integrityService.vim.SharesOption;
         };
         SimpleCommandEncoding: {
            "CSV": string;
            "HEX": string;
            "STRING": string;
         };
         SingleIp: {
            (options?: integrityService.vim.SingleIp): integrityService.vim.SingleIp;
         };
         SingleMac: {
            (options?: integrityService.vim.SingleMac): integrityService.vim.SingleMac;
         };
         StoragePodSummary: {
            (options?: integrityService.vim.StoragePodSummary): integrityService.vim.StoragePodSummary;
         };
         StorageIOAllocationInfo: {
            (options?: integrityService.vim.StorageIOAllocationInfo): integrityService.vim.StorageIOAllocationInfo;
         };
         StorageIOAllocationOption: {
            (options?: integrityService.vim.StorageIOAllocationOption): integrityService.vim.StorageIOAllocationOption;
         };
         StorageIORMThresholdMode: {
            "automatic": string;
            "manual": string;
         };
         StorageIORMInfo: {
            (options?: integrityService.vim.StorageIORMInfo): integrityService.vim.StorageIORMInfo;
         };
         StorageIORMConfigSpec: {
            (options?: integrityService.vim.StorageIORMConfigSpec): integrityService.vim.StorageIORMConfigSpec;
         };
         StorageIORMConfigOption: {
            (options?: integrityService.vim.StorageIORMConfigOption): integrityService.vim.StorageIORMConfigOption;
         };
         StoragePerformanceSummary: {
            (options?: integrityService.vim.StoragePerformanceSummary): integrityService.vim.StoragePerformanceSummary;
         };
         ArrayOfStoragePerformanceSummary: {
            (options?: integrityService.vim.ArrayOfStoragePerformanceSummary): integrityService.vim.ArrayOfStoragePerformanceSummary;
         };
         PodStorageDrsEntry: {
            (options?: integrityService.vim.PodStorageDrsEntry): integrityService.vim.PodStorageDrsEntry;
         };
         StringExpression: {
            (options?: integrityService.vim.StringExpression): integrityService.vim.StringExpression;
         };
         StringPolicy: {
            (options?: integrityService.vim.StringPolicy): integrityService.vim.StringPolicy;
         };
         Tag: {
            (options?: integrityService.vim.Tag): integrityService.vim.Tag;
         };
         ArrayOfTag: {
            (options?: integrityService.vim.ArrayOfTag): integrityService.vim.ArrayOfTag;
         };
         TaskDescription: {
            (options?: integrityService.vim.TaskDescription): integrityService.vim.TaskDescription;
         };
         TaskFilterSpecRecursionOption: {
            "self": string;
            "children": string;
            "all": string;
         };
         TaskFilterSpecTimeOption: {
            "queuedTime": string;
            "startedTime": string;
            "completedTime": string;
         };
         TaskFilterSpecByEntity: {
            (options?: integrityService.vim.TaskFilterSpecByEntity): integrityService.vim.TaskFilterSpecByEntity;
         };
         TaskFilterSpecByTime: {
            (options?: integrityService.vim.TaskFilterSpecByTime): integrityService.vim.TaskFilterSpecByTime;
         };
         TaskFilterSpecByUsername: {
            (options?: integrityService.vim.TaskFilterSpecByUsername): integrityService.vim.TaskFilterSpecByUsername;
         };
         TaskFilterSpec: {
            (options?: integrityService.vim.TaskFilterSpec): integrityService.vim.TaskFilterSpec;
         };
         TaskInfoState: {
            "queued": string;
            "running": string;
            "success": string;
            "error": string;
         };
         ArrayOfTaskInfoState: {
            (options?: integrityService.vim.ArrayOfTaskInfoState): integrityService.vim.ArrayOfTaskInfoState;
         };
         TaskInfo: {
            (options?: integrityService.vim.TaskInfo): integrityService.vim.TaskInfo;
         };
         ArrayOfTaskInfo: {
            (options?: integrityService.vim.ArrayOfTaskInfo): integrityService.vim.ArrayOfTaskInfo;
         };
         TaskReason: {
            (options?: integrityService.vim.TaskReason): integrityService.vim.TaskReason;
         };
         TaskReasonSystem: {
            (options?: integrityService.vim.TaskReasonSystem): integrityService.vim.TaskReasonSystem;
         };
         TaskReasonUser: {
            (options?: integrityService.vim.TaskReasonUser): integrityService.vim.TaskReasonUser;
         };
         TaskReasonAlarm: {
            (options?: integrityService.vim.TaskReasonAlarm): integrityService.vim.TaskReasonAlarm;
         };
         TaskReasonSchedule: {
            (options?: integrityService.vim.TaskReasonSchedule): integrityService.vim.TaskReasonSchedule;
         };
         TypeDescription: {
            (options?: integrityService.vim.TypeDescription): integrityService.vim.TypeDescription;
         };
         ArrayOfTypeDescription: {
            (options?: integrityService.vim.ArrayOfTypeDescription): integrityService.vim.ArrayOfTypeDescription;
         };
         UpdateVirtualMachineFilesResultFailedVmFileInfo: {
            (options?: integrityService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo): integrityService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo;
         };
         ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo: {
            (options?: integrityService.vim.ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo): integrityService.vim.ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo;
         };
         UpdateVirtualMachineFilesResult: {
            (options?: integrityService.vim.UpdateVirtualMachineFilesResult): integrityService.vim.UpdateVirtualMachineFilesResult;
         };
         UserSearchResult: {
            (options?: integrityService.vim.UserSearchResult): integrityService.vim.UserSearchResult;
         };
         ArrayOfUserSearchResult: {
            (options?: integrityService.vim.ArrayOfUserSearchResult): integrityService.vim.ArrayOfUserSearchResult;
         };
         UserSession: {
            (options?: integrityService.vim.UserSession): integrityService.vim.UserSession;
         };
         ArrayOfUserSession: {
            (options?: integrityService.vim.ArrayOfUserSession): integrityService.vim.ArrayOfUserSession;
         };
         VirtualAppVAppState: {
            "started": string;
            "stopped": string;
            "starting": string;
            "stopping": string;
         };
         VirtualAppSummary: {
            (options?: integrityService.vim.VirtualAppSummary): integrityService.vim.VirtualAppSummary;
         };
         VirtualAppLinkInfo: {
            (options?: integrityService.vim.VirtualAppLinkInfo): integrityService.vim.VirtualAppLinkInfo;
         };
         ArrayOfVirtualAppLinkInfo: {
            (options?: integrityService.vim.ArrayOfVirtualAppLinkInfo): integrityService.vim.ArrayOfVirtualAppLinkInfo;
         };
         VirtualDiskType: {
            "preallocated": string;
            "thin": string;
            "seSparse": string;
            "rdm": string;
            "rdmp": string;
            "raw": string;
            "delta": string;
            "sparse2Gb": string;
            "thick2Gb": string;
            "eagerZeroedThick": string;
            "sparseMonolithic": string;
            "flatMonolithic": string;
            "thick": string;
         };
         VirtualDiskAdapterType: {
            "ide": string;
            "busLogic": string;
            "lsiLogic": string;
         };
         VirtualDiskSpec: {
            (options?: integrityService.vim.VirtualDiskSpec): integrityService.vim.VirtualDiskSpec;
         };
         FileBackedVirtualDiskSpec: {
            (options?: integrityService.vim.FileBackedVirtualDiskSpec): integrityService.vim.FileBackedVirtualDiskSpec;
         };
         SeSparseVirtualDiskSpec: {
            (options?: integrityService.vim.SeSparseVirtualDiskSpec): integrityService.vim.SeSparseVirtualDiskSpec;
         };
         DeviceBackedVirtualDiskSpec: {
            (options?: integrityService.vim.DeviceBackedVirtualDiskSpec): integrityService.vim.DeviceBackedVirtualDiskSpec;
         };
         StorageRequirement: {
            (options?: integrityService.vim.StorageRequirement): integrityService.vim.StorageRequirement;
         };
         ArrayOfStorageRequirement: {
            (options?: integrityService.vim.ArrayOfStorageRequirement): integrityService.vim.ArrayOfStorageRequirement;
         };
         VirtualMachinePowerState: {
            "poweredOff": string;
            "poweredOn": string;
            "suspended": string;
         };
         VirtualMachineAppHeartbeatStatusType: {
            "appStatusGray": string;
            "appStatusGreen": string;
            "appStatusRed": string;
         };
         VirtualMachineConnectionState: {
            "connected": string;
            "disconnected": string;
            "orphaned": string;
            "inaccessible": string;
            "invalid": string;
         };
         VirtualMachineMovePriority: {
            "lowPriority": string;
            "highPriority": string;
            "defaultPriority": string;
         };
         VirtualMachineTicket: {
            (options?: integrityService.vim.VirtualMachineTicket): integrityService.vim.VirtualMachineTicket;
         };
         VirtualMachineMksTicket: {
            (options?: integrityService.vim.VirtualMachineMksTicket): integrityService.vim.VirtualMachineMksTicket;
         };
         VirtualMachineFaultToleranceState: {
            "notConfigured": string;
            "disabled": string;
            "enabled": string;
            "needSecondary": string;
            "starting": string;
            "running": string;
         };
         VirtualMachineRecordReplayState: {
            "recording": string;
            "replaying": string;
            "inactive": string;
         };
         VirtualMachineNeedSecondaryReason: {
            "initializing": string;
            "divergence": string;
            "lostConnection": string;
            "partialHardwareFailure": string;
            "userAction": string;
            "other": string;
         };
         VirtualMachineTicketType: {
            "mks": string;
            "device": string;
            "guestControl": string;
         };
         VirtualMachineDisplayTopology: {
            (options?: integrityService.vim.VirtualMachineDisplayTopology): integrityService.vim.VirtualMachineDisplayTopology;
         };
         ArrayOfVirtualMachineDisplayTopology: {
            (options?: integrityService.vim.ArrayOfVirtualMachineDisplayTopology): integrityService.vim.ArrayOfVirtualMachineDisplayTopology;
         };
         DiskChangeExtent: {
            (options?: integrityService.vim.DiskChangeExtent): integrityService.vim.DiskChangeExtent;
         };
         ArrayOfDiskChangeExtent: {
            (options?: integrityService.vim.ArrayOfDiskChangeExtent): integrityService.vim.ArrayOfDiskChangeExtent;
         };
         DiskChangeInfo: {
            (options?: integrityService.vim.DiskChangeInfo): integrityService.vim.DiskChangeInfo;
         };
         VirtualMachineWipeResult: {
            (options?: integrityService.vim.VirtualMachineWipeResult): integrityService.vim.VirtualMachineWipeResult;
         };
         ActionParameter: {
            "targetName": string;
            "alarmName": string;
            "oldStatus": string;
            "newStatus": string;
            "triggeringSummary": string;
            "declaringSummary": string;
            "eventDescription": string;
            "target": string;
            "alarm": string;
         };
         Action: {
            (options?: integrityService.vim.Action): integrityService.vim.Action;
         };
         MethodActionArgument: {
            (options?: integrityService.vim.MethodActionArgument): integrityService.vim.MethodActionArgument;
         };
         ArrayOfMethodActionArgument: {
            (options?: integrityService.vim.ArrayOfMethodActionArgument): integrityService.vim.ArrayOfMethodActionArgument;
         };
         MethodAction: {
            (options?: integrityService.vim.MethodAction): integrityService.vim.MethodAction;
         };
         SendEmailAction: {
            (options?: integrityService.vim.SendEmailAction): integrityService.vim.SendEmailAction;
         };
         SendSNMPAction: {
            (options?: integrityService.vim.SendSNMPAction): integrityService.vim.SendSNMPAction;
         };
         RunScriptAction: {
            (options?: integrityService.vim.RunScriptAction): integrityService.vim.RunScriptAction;
         };
         CreateTaskAction: {
            (options?: integrityService.vim.CreateTaskAction): integrityService.vim.CreateTaskAction;
         };
         AlarmAction: {
            (options?: integrityService.vim.AlarmAction): integrityService.vim.AlarmAction;
         };
         ArrayOfAlarmAction: {
            (options?: integrityService.vim.ArrayOfAlarmAction): integrityService.vim.ArrayOfAlarmAction;
         };
         AlarmTriggeringActionTransitionSpec: {
            (options?: integrityService.vim.AlarmTriggeringActionTransitionSpec): integrityService.vim.AlarmTriggeringActionTransitionSpec;
         };
         ArrayOfAlarmTriggeringActionTransitionSpec: {
            (options?: integrityService.vim.ArrayOfAlarmTriggeringActionTransitionSpec): integrityService.vim.ArrayOfAlarmTriggeringActionTransitionSpec;
         };
         AlarmTriggeringAction: {
            (options?: integrityService.vim.AlarmTriggeringAction): integrityService.vim.AlarmTriggeringAction;
         };
         GroupAlarmAction: {
            (options?: integrityService.vim.GroupAlarmAction): integrityService.vim.GroupAlarmAction;
         };
         AlarmDescription: {
            (options?: integrityService.vim.AlarmDescription): integrityService.vim.AlarmDescription;
         };
         AlarmExpression: {
            (options?: integrityService.vim.AlarmExpression): integrityService.vim.AlarmExpression;
         };
         ArrayOfAlarmExpression: {
            (options?: integrityService.vim.ArrayOfAlarmExpression): integrityService.vim.ArrayOfAlarmExpression;
         };
         AndAlarmExpression: {
            (options?: integrityService.vim.AndAlarmExpression): integrityService.vim.AndAlarmExpression;
         };
         OrAlarmExpression: {
            (options?: integrityService.vim.OrAlarmExpression): integrityService.vim.OrAlarmExpression;
         };
         StateAlarmOperator: {
            "isEqual": string;
            "isUnequal": string;
         };
         StateAlarmExpression: {
            (options?: integrityService.vim.StateAlarmExpression): integrityService.vim.StateAlarmExpression;
         };
         EventAlarmExpressionComparisonOperator: {
            "equals": string;
            "notEqualTo": string;
            "startsWith": string;
            "doesNotStartWith": string;
            "endsWith": string;
            "doesNotEndWith": string;
         };
         EventAlarmExpressionComparison: {
            (options?: integrityService.vim.EventAlarmExpressionComparison): integrityService.vim.EventAlarmExpressionComparison;
         };
         ArrayOfEventAlarmExpressionComparison: {
            (options?: integrityService.vim.ArrayOfEventAlarmExpressionComparison): integrityService.vim.ArrayOfEventAlarmExpressionComparison;
         };
         EventAlarmExpression: {
            (options?: integrityService.vim.EventAlarmExpression): integrityService.vim.EventAlarmExpression;
         };
         MetricAlarmOperator: {
            "isAbove": string;
            "isBelow": string;
         };
         MetricAlarmExpression: {
            (options?: integrityService.vim.MetricAlarmExpression): integrityService.vim.MetricAlarmExpression;
         };
         AlarmInfo: {
            (options?: integrityService.vim.AlarmInfo): integrityService.vim.AlarmInfo;
         };
         AlarmSetting: {
            (options?: integrityService.vim.AlarmSetting): integrityService.vim.AlarmSetting;
         };
         AlarmSpec: {
            (options?: integrityService.vim.AlarmSpec): integrityService.vim.AlarmSpec;
         };
         AlarmState: {
            (options?: integrityService.vim.AlarmState): integrityService.vim.AlarmState;
         };
         ArrayOfAlarmState: {
            (options?: integrityService.vim.ArrayOfAlarmState): integrityService.vim.ArrayOfAlarmState;
         };
         ActionType: {
            "MigrationV1": string;
            "VmPowerV1": string;
            "HostPowerV1": string;
            "HostMaintenanceV1": string;
            "StorageMigrationV1": string;
            "StoragePlacementV1": string;
         };
         ClusterAction: {
            (options?: integrityService.vim.ClusterAction): integrityService.vim.ClusterAction;
         };
         ArrayOfClusterAction: {
            (options?: integrityService.vim.ArrayOfClusterAction): integrityService.vim.ArrayOfClusterAction;
         };
         ClusterActionHistory: {
            (options?: integrityService.vim.ClusterActionHistory): integrityService.vim.ClusterActionHistory;
         };
         ArrayOfClusterActionHistory: {
            (options?: integrityService.vim.ArrayOfClusterActionHistory): integrityService.vim.ArrayOfClusterActionHistory;
         };
         ClusterAffinityRuleSpec: {
            (options?: integrityService.vim.ClusterAffinityRuleSpec): integrityService.vim.ClusterAffinityRuleSpec;
         };
         ClusterAntiAffinityRuleSpec: {
            (options?: integrityService.vim.ClusterAntiAffinityRuleSpec): integrityService.vim.ClusterAntiAffinityRuleSpec;
         };
         ClusterAttemptedVmInfo: {
            (options?: integrityService.vim.ClusterAttemptedVmInfo): integrityService.vim.ClusterAttemptedVmInfo;
         };
         ArrayOfClusterAttemptedVmInfo: {
            (options?: integrityService.vim.ArrayOfClusterAttemptedVmInfo): integrityService.vim.ArrayOfClusterAttemptedVmInfo;
         };
         ClusterConfigInfo: {
            (options?: integrityService.vim.ClusterConfigInfo): integrityService.vim.ClusterConfigInfo;
         };
         DrsBehavior: {
            "manual": string;
            "partiallyAutomated": string;
            "fullyAutomated": string;
         };
         ClusterDrsConfigInfo: {
            (options?: integrityService.vim.ClusterDrsConfigInfo): integrityService.vim.ClusterDrsConfigInfo;
         };
         ClusterDrsVmConfigInfo: {
            (options?: integrityService.vim.ClusterDrsVmConfigInfo): integrityService.vim.ClusterDrsVmConfigInfo;
         };
         ArrayOfClusterDrsVmConfigInfo: {
            (options?: integrityService.vim.ArrayOfClusterDrsVmConfigInfo): integrityService.vim.ArrayOfClusterDrsVmConfigInfo;
         };
         ClusterConfigInfoEx: {
            (options?: integrityService.vim.ClusterConfigInfoEx): integrityService.vim.ClusterConfigInfoEx;
         };
         DpmBehavior: {
            "manual": string;
            "automated": string;
         };
         ClusterDpmConfigInfo: {
            (options?: integrityService.vim.ClusterDpmConfigInfo): integrityService.vim.ClusterDpmConfigInfo;
         };
         ClusterDpmHostConfigInfo: {
            (options?: integrityService.vim.ClusterDpmHostConfigInfo): integrityService.vim.ClusterDpmHostConfigInfo;
         };
         ArrayOfClusterDpmHostConfigInfo: {
            (options?: integrityService.vim.ArrayOfClusterDpmHostConfigInfo): integrityService.vim.ArrayOfClusterDpmHostConfigInfo;
         };
         ClusterConfigSpec: {
            (options?: integrityService.vim.ClusterConfigSpec): integrityService.vim.ClusterConfigSpec;
         };
         ClusterDasVmConfigSpec: {
            (options?: integrityService.vim.ClusterDasVmConfigSpec): integrityService.vim.ClusterDasVmConfigSpec;
         };
         ArrayOfClusterDasVmConfigSpec: {
            (options?: integrityService.vim.ArrayOfClusterDasVmConfigSpec): integrityService.vim.ArrayOfClusterDasVmConfigSpec;
         };
         ClusterDrsVmConfigSpec: {
            (options?: integrityService.vim.ClusterDrsVmConfigSpec): integrityService.vim.ClusterDrsVmConfigSpec;
         };
         ArrayOfClusterDrsVmConfigSpec: {
            (options?: integrityService.vim.ArrayOfClusterDrsVmConfigSpec): integrityService.vim.ArrayOfClusterDrsVmConfigSpec;
         };
         ClusterConfigSpecEx: {
            (options?: integrityService.vim.ClusterConfigSpecEx): integrityService.vim.ClusterConfigSpecEx;
         };
         ClusterDpmHostConfigSpec: {
            (options?: integrityService.vim.ClusterDpmHostConfigSpec): integrityService.vim.ClusterDpmHostConfigSpec;
         };
         ArrayOfClusterDpmHostConfigSpec: {
            (options?: integrityService.vim.ArrayOfClusterDpmHostConfigSpec): integrityService.vim.ArrayOfClusterDpmHostConfigSpec;
         };
         ClusterGroupSpec: {
            (options?: integrityService.vim.ClusterGroupSpec): integrityService.vim.ClusterGroupSpec;
         };
         ArrayOfClusterGroupSpec: {
            (options?: integrityService.vim.ArrayOfClusterGroupSpec): integrityService.vim.ArrayOfClusterGroupSpec;
         };
         ClusterDasAamHostInfo: {
            (options?: integrityService.vim.ClusterDasAamHostInfo): integrityService.vim.ClusterDasAamHostInfo;
         };
         ClusterDasAamNodeStateDasState: {
            "uninitialized": string;
            "initialized": string;
            "configuring": string;
            "unconfiguring": string;
            "running": string;
            "error": string;
            "agentShutdown": string;
            "nodeFailed": string;
         };
         ClusterDasAamNodeState: {
            (options?: integrityService.vim.ClusterDasAamNodeState): integrityService.vim.ClusterDasAamNodeState;
         };
         ArrayOfClusterDasAamNodeState: {
            (options?: integrityService.vim.ArrayOfClusterDasAamNodeState): integrityService.vim.ArrayOfClusterDasAamNodeState;
         };
         ClusterDasAdmissionControlInfo: {
            (options?: integrityService.vim.ClusterDasAdmissionControlInfo): integrityService.vim.ClusterDasAdmissionControlInfo;
         };
         ClusterDasAdmissionControlPolicy: {
            (options?: integrityService.vim.ClusterDasAdmissionControlPolicy): integrityService.vim.ClusterDasAdmissionControlPolicy;
         };
         DasHeartbeatDatastoreInfo: {
            (options?: integrityService.vim.DasHeartbeatDatastoreInfo): integrityService.vim.DasHeartbeatDatastoreInfo;
         };
         ArrayOfDasHeartbeatDatastoreInfo: {
            (options?: integrityService.vim.ArrayOfDasHeartbeatDatastoreInfo): integrityService.vim.ArrayOfDasHeartbeatDatastoreInfo;
         };
         ClusterDasAdvancedRuntimeInfo: {
            (options?: integrityService.vim.ClusterDasAdvancedRuntimeInfo): integrityService.vim.ClusterDasAdvancedRuntimeInfo;
         };
         ClusterDasConfigInfoServiceState: {
            "disabled": string;
            "enabled": string;
         };
         ClusterDasConfigInfoVmMonitoringState: {
            "vmMonitoringDisabled": string;
            "vmMonitoringOnly": string;
            "vmAndAppMonitoring": string;
         };
         ClusterDasConfigInfoHBDatastoreCandidate: {
            "userSelectedDs": string;
            "allFeasibleDs": string;
            "allFeasibleDsWithUserPreference": string;
         };
         ClusterDasConfigInfo: {
            (options?: integrityService.vim.ClusterDasConfigInfo): integrityService.vim.ClusterDasConfigInfo;
         };
         ClusterDasData: {
            (options?: integrityService.vim.ClusterDasData): integrityService.vim.ClusterDasData;
         };
         ClusterDasDataSummary: {
            (options?: integrityService.vim.ClusterDasDataSummary): integrityService.vim.ClusterDasDataSummary;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo: {
            (options?: integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo): integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots: {
            (options?: integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots): integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;
         };
         ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots: {
            (options?: integrityService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots): integrityService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots: {
            (options?: integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots): integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots;
         };
         ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots: {
            (options?: integrityService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots): integrityService.vim.ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots;
         };
         ClusterDasFailoverLevelAdvancedRuntimeInfo: {
            (options?: integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfo): integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfo;
         };
         ClusterDasFdmAvailabilityState: {
            "uninitialized": string;
            "election": string;
            "master": string;
            "connectedToMaster": string;
            "networkPartitionedFromMaster": string;
            "networkIsolated": string;
            "hostDown": string;
            "initializationError": string;
            "uninitializationError": string;
            "fdmUnreachable": string;
         };
         ClusterDasFdmHostState: {
            (options?: integrityService.vim.ClusterDasFdmHostState): integrityService.vim.ClusterDasFdmHostState;
         };
         ClusterDasHostInfo: {
            (options?: integrityService.vim.ClusterDasHostInfo): integrityService.vim.ClusterDasHostInfo;
         };
         ClusterDasHostRecommendation: {
            (options?: integrityService.vim.ClusterDasHostRecommendation): integrityService.vim.ClusterDasHostRecommendation;
         };
         DasVmPriority: {
            "disabled": string;
            "low": string;
            "medium": string;
            "high": string;
         };
         ClusterDasVmConfigInfo: {
            (options?: integrityService.vim.ClusterDasVmConfigInfo): integrityService.vim.ClusterDasVmConfigInfo;
         };
         ArrayOfClusterDasVmConfigInfo: {
            (options?: integrityService.vim.ArrayOfClusterDasVmConfigInfo): integrityService.vim.ArrayOfClusterDasVmConfigInfo;
         };
         ClusterDasVmSettingsRestartPriority: {
            "disabled": string;
            "low": string;
            "medium": string;
            "high": string;
            "clusterRestartPriority": string;
         };
         ClusterDasVmSettingsIsolationResponse: {
            "none": string;
            "powerOff": string;
            "shutdown": string;
            "clusterIsolationResponse": string;
         };
         ClusterDasVmSettings: {
            (options?: integrityService.vim.ClusterDasVmSettings): integrityService.vim.ClusterDasVmSettings;
         };
         ClusterDrsFaultsFaultsByVm: {
            (options?: integrityService.vim.ClusterDrsFaultsFaultsByVm): integrityService.vim.ClusterDrsFaultsFaultsByVm;
         };
         ArrayOfClusterDrsFaultsFaultsByVm: {
            (options?: integrityService.vim.ArrayOfClusterDrsFaultsFaultsByVm): integrityService.vim.ArrayOfClusterDrsFaultsFaultsByVm;
         };
         ClusterDrsFaultsFaultsByVirtualDisk: {
            (options?: integrityService.vim.ClusterDrsFaultsFaultsByVirtualDisk): integrityService.vim.ClusterDrsFaultsFaultsByVirtualDisk;
         };
         ClusterDrsFaults: {
            (options?: integrityService.vim.ClusterDrsFaults): integrityService.vim.ClusterDrsFaults;
         };
         ArrayOfClusterDrsFaults: {
            (options?: integrityService.vim.ArrayOfClusterDrsFaults): integrityService.vim.ArrayOfClusterDrsFaults;
         };
         ClusterDrsMigration: {
            (options?: integrityService.vim.ClusterDrsMigration): integrityService.vim.ClusterDrsMigration;
         };
         ArrayOfClusterDrsMigration: {
            (options?: integrityService.vim.ArrayOfClusterDrsMigration): integrityService.vim.ArrayOfClusterDrsMigration;
         };
         DrsRecommendationReasonCode: {
            "fairnessCpuAvg": string;
            "fairnessMemAvg": string;
            "jointAffin": string;
            "antiAffin": string;
            "hostMaint": string;
         };
         ClusterDrsRecommendation: {
            (options?: integrityService.vim.ClusterDrsRecommendation): integrityService.vim.ClusterDrsRecommendation;
         };
         ArrayOfClusterDrsRecommendation: {
            (options?: integrityService.vim.ArrayOfClusterDrsRecommendation): integrityService.vim.ArrayOfClusterDrsRecommendation;
         };
         ClusterEnterMaintenanceResult: {
            (options?: integrityService.vim.ClusterEnterMaintenanceResult): integrityService.vim.ClusterEnterMaintenanceResult;
         };
         ClusterFailoverHostAdmissionControlInfoHostStatus: {
            (options?: integrityService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus): integrityService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus;
         };
         ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus: {
            (options?: integrityService.vim.ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus): integrityService.vim.ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus;
         };
         ClusterFailoverHostAdmissionControlInfo: {
            (options?: integrityService.vim.ClusterFailoverHostAdmissionControlInfo): integrityService.vim.ClusterFailoverHostAdmissionControlInfo;
         };
         ClusterFailoverHostAdmissionControlPolicy: {
            (options?: integrityService.vim.ClusterFailoverHostAdmissionControlPolicy): integrityService.vim.ClusterFailoverHostAdmissionControlPolicy;
         };
         ClusterFailoverLevelAdmissionControlInfo: {
            (options?: integrityService.vim.ClusterFailoverLevelAdmissionControlInfo): integrityService.vim.ClusterFailoverLevelAdmissionControlInfo;
         };
         ClusterFailoverLevelAdmissionControlPolicy: {
            (options?: integrityService.vim.ClusterFailoverLevelAdmissionControlPolicy): integrityService.vim.ClusterFailoverLevelAdmissionControlPolicy;
         };
         ClusterFailoverResourcesAdmissionControlInfo: {
            (options?: integrityService.vim.ClusterFailoverResourcesAdmissionControlInfo): integrityService.vim.ClusterFailoverResourcesAdmissionControlInfo;
         };
         ClusterFailoverResourcesAdmissionControlPolicy: {
            (options?: integrityService.vim.ClusterFailoverResourcesAdmissionControlPolicy): integrityService.vim.ClusterFailoverResourcesAdmissionControlPolicy;
         };
         ClusterGroupInfo: {
            (options?: integrityService.vim.ClusterGroupInfo): integrityService.vim.ClusterGroupInfo;
         };
         ArrayOfClusterGroupInfo: {
            (options?: integrityService.vim.ArrayOfClusterGroupInfo): integrityService.vim.ArrayOfClusterGroupInfo;
         };
         ClusterHostGroup: {
            (options?: integrityService.vim.ClusterHostGroup): integrityService.vim.ClusterHostGroup;
         };
         HostPowerOperationType: {
            "powerOn": string;
            "powerOff": string;
         };
         ClusterHostPowerAction: {
            (options?: integrityService.vim.ClusterHostPowerAction): integrityService.vim.ClusterHostPowerAction;
         };
         ClusterHostRecommendation: {
            (options?: integrityService.vim.ClusterHostRecommendation): integrityService.vim.ClusterHostRecommendation;
         };
         ArrayOfClusterHostRecommendation: {
            (options?: integrityService.vim.ArrayOfClusterHostRecommendation): integrityService.vim.ArrayOfClusterHostRecommendation;
         };
         ClusterInitialPlacementAction: {
            (options?: integrityService.vim.ClusterInitialPlacementAction): integrityService.vim.ClusterInitialPlacementAction;
         };
         ClusterMigrationAction: {
            (options?: integrityService.vim.ClusterMigrationAction): integrityService.vim.ClusterMigrationAction;
         };
         ClusterNotAttemptedVmInfo: {
            (options?: integrityService.vim.ClusterNotAttemptedVmInfo): integrityService.vim.ClusterNotAttemptedVmInfo;
         };
         ArrayOfClusterNotAttemptedVmInfo: {
            (options?: integrityService.vim.ArrayOfClusterNotAttemptedVmInfo): integrityService.vim.ArrayOfClusterNotAttemptedVmInfo;
         };
         ClusterPowerOnVmOption: {
            "OverrideAutomationLevel": string;
            "ReserveResources": string;
         };
         ClusterPowerOnVmResult: {
            (options?: integrityService.vim.ClusterPowerOnVmResult): integrityService.vim.ClusterPowerOnVmResult;
         };
         RecommendationType: {
            "V1": string;
         };
         RecommendationReasonCode: {
            "fairnessCpuAvg": string;
            "fairnessMemAvg": string;
            "jointAffin": string;
            "antiAffin": string;
            "hostMaint": string;
            "enterStandby": string;
            "reservationCpu": string;
            "reservationMem": string;
            "powerOnVm": string;
            "powerSaving": string;
            "increaseCapacity": string;
            "checkResource": string;
            "unreservedCapacity": string;
            "vmHostHardAffinity": string;
            "vmHostSoftAffinity": string;
            "balanceDatastoreSpaceUsage": string;
            "balanceDatastoreIOLoad": string;
            "datastoreMaint": string;
            "virtualDiskJointAffin": string;
            "virtualDiskAntiAffin": string;
            "datastoreSpaceOutage": string;
            "storagePlacement": string;
            "iolbDisabledInternal": string;
         };
         ClusterRecommendation: {
            (options?: integrityService.vim.ClusterRecommendation): integrityService.vim.ClusterRecommendation;
         };
         ArrayOfClusterRecommendation: {
            (options?: integrityService.vim.ArrayOfClusterRecommendation): integrityService.vim.ArrayOfClusterRecommendation;
         };
         ClusterRuleInfo: {
            (options?: integrityService.vim.ClusterRuleInfo): integrityService.vim.ClusterRuleInfo;
         };
         ArrayOfClusterRuleInfo: {
            (options?: integrityService.vim.ArrayOfClusterRuleInfo): integrityService.vim.ArrayOfClusterRuleInfo;
         };
         ClusterRuleSpec: {
            (options?: integrityService.vim.ClusterRuleSpec): integrityService.vim.ClusterRuleSpec;
         };
         ArrayOfClusterRuleSpec: {
            (options?: integrityService.vim.ArrayOfClusterRuleSpec): integrityService.vim.ArrayOfClusterRuleSpec;
         };
         ClusterSlotPolicy: {
            (options?: integrityService.vim.ClusterSlotPolicy): integrityService.vim.ClusterSlotPolicy;
         };
         ClusterFixedSizeSlotPolicy: {
            (options?: integrityService.vim.ClusterFixedSizeSlotPolicy): integrityService.vim.ClusterFixedSizeSlotPolicy;
         };
         ClusterVmGroup: {
            (options?: integrityService.vim.ClusterVmGroup): integrityService.vim.ClusterVmGroup;
         };
         ClusterVmHostRuleInfo: {
            (options?: integrityService.vim.ClusterVmHostRuleInfo): integrityService.vim.ClusterVmHostRuleInfo;
         };
         ClusterVmToolsMonitoringSettings: {
            (options?: integrityService.vim.ClusterVmToolsMonitoringSettings): integrityService.vim.ClusterVmToolsMonitoringSettings;
         };
         DVPortConfigSpec: {
            (options?: integrityService.vim.DVPortConfigSpec): integrityService.vim.DVPortConfigSpec;
         };
         ArrayOfDVPortConfigSpec: {
            (options?: integrityService.vim.ArrayOfDVPortConfigSpec): integrityService.vim.ArrayOfDVPortConfigSpec;
         };
         DVPortConfigInfo: {
            (options?: integrityService.vim.DVPortConfigInfo): integrityService.vim.DVPortConfigInfo;
         };
         DVSTrafficShapingPolicy: {
            (options?: integrityService.vim.DVSTrafficShapingPolicy): integrityService.vim.DVSTrafficShapingPolicy;
         };
         DVSHostLocalPortInfo: {
            (options?: integrityService.vim.DVSHostLocalPortInfo): integrityService.vim.DVSHostLocalPortInfo;
         };
         DVSVendorSpecificConfig: {
            (options?: integrityService.vim.DVSVendorSpecificConfig): integrityService.vim.DVSVendorSpecificConfig;
         };
         DvsFilterParameter: {
            (options?: integrityService.vim.DvsFilterParameter): integrityService.vim.DvsFilterParameter;
         };
         DvsFilterOnFailure: {
            "failOpen": string;
            "failClosed": string;
         };
         DvsFilterConfig: {
            (options?: integrityService.vim.DvsFilterConfig): integrityService.vim.DvsFilterConfig;
         };
         ArrayOfDvsFilterConfig: {
            (options?: integrityService.vim.ArrayOfDvsFilterConfig): integrityService.vim.ArrayOfDvsFilterConfig;
         };
         DvsTrafficFilterConfig: {
            (options?: integrityService.vim.DvsTrafficFilterConfig): integrityService.vim.DvsTrafficFilterConfig;
         };
         DvsFilterConfigSpec: {
            (options?: integrityService.vim.DvsFilterConfigSpec): integrityService.vim.DvsFilterConfigSpec;
         };
         DvsTrafficFilterConfigSpec: {
            (options?: integrityService.vim.DvsTrafficFilterConfigSpec): integrityService.vim.DvsTrafficFilterConfigSpec;
         };
         DvsFilterPolicy: {
            (options?: integrityService.vim.DvsFilterPolicy): integrityService.vim.DvsFilterPolicy;
         };
         DVPortSetting: {
            (options?: integrityService.vim.DVPortSetting): integrityService.vim.DVPortSetting;
         };
         DVPortStatusVmDirectPathGen2InactiveReasonNetwork: {
            "portNptIncompatibleDvs": string;
            "portNptNoCompatibleNics": string;
            "portNptNoVirtualFunctionsAvailable": string;
            "portNptDisabledForPort": string;
         };
         DVPortStatusVmDirectPathGen2InactiveReasonOther: {
            "portNptIncompatibleHost": string;
            "portNptIncompatibleConnectee": string;
         };
         DVPortStatus: {
            (options?: integrityService.vim.DVPortStatus): integrityService.vim.DVPortStatus;
         };
         DVPortState: {
            (options?: integrityService.vim.DVPortState): integrityService.vim.DVPortState;
         };
         DistributedVirtualPort: {
            (options?: integrityService.vim.DistributedVirtualPort): integrityService.vim.DistributedVirtualPort;
         };
         ArrayOfDistributedVirtualPort: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualPort): integrityService.vim.ArrayOfDistributedVirtualPort;
         };
         DistributedVirtualPortgroupPortgroupType: {
            "earlyBinding": string;
            "lateBinding": string;
            "ephemeral": string;
         };
         DVPortgroupPolicy: {
            (options?: integrityService.vim.DVPortgroupPolicy): integrityService.vim.DVPortgroupPolicy;
         };
         DistributedVirtualPortgroupMetaTagName: {
            "dvsName": string;
            "portgroupName": string;
            "portIndex": string;
         };
         DVPortgroupConfigSpec: {
            (options?: integrityService.vim.DVPortgroupConfigSpec): integrityService.vim.DVPortgroupConfigSpec;
         };
         ArrayOfDVPortgroupConfigSpec: {
            (options?: integrityService.vim.ArrayOfDVPortgroupConfigSpec): integrityService.vim.ArrayOfDVPortgroupConfigSpec;
         };
         DVPortgroupConfigInfo: {
            (options?: integrityService.vim.DVPortgroupConfigInfo): integrityService.vim.DVPortgroupConfigInfo;
         };
         DistributedVirtualPortgroupInfo: {
            (options?: integrityService.vim.DistributedVirtualPortgroupInfo): integrityService.vim.DistributedVirtualPortgroupInfo;
         };
         ArrayOfDistributedVirtualPortgroupInfo: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualPortgroupInfo): integrityService.vim.ArrayOfDistributedVirtualPortgroupInfo;
         };
         DVPortgroupSelection: {
            (options?: integrityService.vim.DVPortgroupSelection): integrityService.vim.DVPortgroupSelection;
         };
         DistributedVirtualSwitchInfo: {
            (options?: integrityService.vim.DistributedVirtualSwitchInfo): integrityService.vim.DistributedVirtualSwitchInfo;
         };
         ArrayOfDistributedVirtualSwitchInfo: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchInfo): integrityService.vim.ArrayOfDistributedVirtualSwitchInfo;
         };
         DVSManagerDvsConfigTarget: {
            (options?: integrityService.vim.DVSManagerDvsConfigTarget): integrityService.vim.DVSManagerDvsConfigTarget;
         };
         DistributedVirtualSwitchManagerCompatibilityResult: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerCompatibilityResult): integrityService.vim.DistributedVirtualSwitchManagerCompatibilityResult;
         };
         ArrayOfDistributedVirtualSwitchManagerCompatibilityResult: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchManagerCompatibilityResult): integrityService.vim.ArrayOfDistributedVirtualSwitchManagerCompatibilityResult;
         };
         DistributedVirtualSwitchManagerHostContainer: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerHostContainer): integrityService.vim.DistributedVirtualSwitchManagerHostContainer;
         };
         DistributedVirtualSwitchManagerHostDvsFilterSpec: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec): integrityService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec;
         };
         ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec): integrityService.vim.ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec;
         };
         DistributedVirtualSwitchManagerHostArrayFilter: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerHostArrayFilter): integrityService.vim.DistributedVirtualSwitchManagerHostArrayFilter;
         };
         DistributedVirtualSwitchManagerHostContainerFilter: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerHostContainerFilter): integrityService.vim.DistributedVirtualSwitchManagerHostContainerFilter;
         };
         DistributedVirtualSwitchManagerHostDvsMembershipFilter: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerHostDvsMembershipFilter): integrityService.vim.DistributedVirtualSwitchManagerHostDvsMembershipFilter;
         };
         DistributedVirtualSwitchManagerDvsProductSpec: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerDvsProductSpec): integrityService.vim.DistributedVirtualSwitchManagerDvsProductSpec;
         };
         DistributedVirtualSwitchManagerImportResult: {
            (options?: integrityService.vim.DistributedVirtualSwitchManagerImportResult): integrityService.vim.DistributedVirtualSwitchManagerImportResult;
         };
         DVSSelection: {
            (options?: integrityService.vim.DVSSelection): integrityService.vim.DVSSelection;
         };
         EntityBackupConfig: {
            (options?: integrityService.vim.EntityBackupConfig): integrityService.vim.EntityBackupConfig;
         };
         ArrayOfEntityBackupConfig: {
            (options?: integrityService.vim.ArrayOfEntityBackupConfig): integrityService.vim.ArrayOfEntityBackupConfig;
         };
         EntityType: {
            "distributedVirtualSwitch": string;
            "distributedVirtualPortgroup": string;
         };
         EntityImportType: {
            "createEntityWithNewIdentifier": string;
            "createEntityWithOriginalIdentifier": string;
            "applyToEntitySpecified": string;
         };
         EntityBackup: {
            (options?: integrityService.vim.EntityBackup): integrityService.vim.EntityBackup;
         };
         DistributedVirtualSwitchHostMemberHostComponentState: {
            "up": string;
            "pending": string;
            "outOfSync": string;
            "warning": string;
            "disconnected": string;
            "down": string;
         };
         DistributedVirtualSwitchHostMemberConfigSpec: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMemberConfigSpec): integrityService.vim.DistributedVirtualSwitchHostMemberConfigSpec;
         };
         ArrayOfDistributedVirtualSwitchHostMemberConfigSpec: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchHostMemberConfigSpec): integrityService.vim.ArrayOfDistributedVirtualSwitchHostMemberConfigSpec;
         };
         DistributedVirtualSwitchHostMemberPnicSpec: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMemberPnicSpec): integrityService.vim.DistributedVirtualSwitchHostMemberPnicSpec;
         };
         ArrayOfDistributedVirtualSwitchHostMemberPnicSpec: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchHostMemberPnicSpec): integrityService.vim.ArrayOfDistributedVirtualSwitchHostMemberPnicSpec;
         };
         DistributedVirtualSwitchHostMemberBacking: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMemberBacking): integrityService.vim.DistributedVirtualSwitchHostMemberBacking;
         };
         DistributedVirtualSwitchHostMemberPnicBacking: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMemberPnicBacking): integrityService.vim.DistributedVirtualSwitchHostMemberPnicBacking;
         };
         DistributedVirtualSwitchHostMemberRuntimeState: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMemberRuntimeState): integrityService.vim.DistributedVirtualSwitchHostMemberRuntimeState;
         };
         DistributedVirtualSwitchHostMemberConfigInfo: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMemberConfigInfo): integrityService.vim.DistributedVirtualSwitchHostMemberConfigInfo;
         };
         HostMemberRuntimeInfo: {
            (options?: integrityService.vim.HostMemberRuntimeInfo): integrityService.vim.HostMemberRuntimeInfo;
         };
         ArrayOfHostMemberRuntimeInfo: {
            (options?: integrityService.vim.ArrayOfHostMemberRuntimeInfo): integrityService.vim.ArrayOfHostMemberRuntimeInfo;
         };
         HostMemberHealthCheckResult: {
            (options?: integrityService.vim.HostMemberHealthCheckResult): integrityService.vim.HostMemberHealthCheckResult;
         };
         ArrayOfHostMemberHealthCheckResult: {
            (options?: integrityService.vim.ArrayOfHostMemberHealthCheckResult): integrityService.vim.ArrayOfHostMemberHealthCheckResult;
         };
         HostMemberUplinkHealthCheckResult: {
            (options?: integrityService.vim.HostMemberUplinkHealthCheckResult): integrityService.vim.HostMemberUplinkHealthCheckResult;
         };
         DistributedVirtualSwitchHostMember: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostMember): integrityService.vim.DistributedVirtualSwitchHostMember;
         };
         ArrayOfDistributedVirtualSwitchHostMember: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchHostMember): integrityService.vim.ArrayOfDistributedVirtualSwitchHostMember;
         };
         DistributedVirtualSwitchHostProductSpec: {
            (options?: integrityService.vim.DistributedVirtualSwitchHostProductSpec): integrityService.vim.DistributedVirtualSwitchHostProductSpec;
         };
         ArrayOfDistributedVirtualSwitchHostProductSpec: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchHostProductSpec): integrityService.vim.ArrayOfDistributedVirtualSwitchHostProductSpec;
         };
         DistributedVirtualSwitchKeyedOpaqueBlob: {
            (options?: integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob): integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob;
         };
         ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob): integrityService.vim.ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob;
         };
         DVSNetworkResourcePoolAllocationInfo: {
            (options?: integrityService.vim.DVSNetworkResourcePoolAllocationInfo): integrityService.vim.DVSNetworkResourcePoolAllocationInfo;
         };
         DVSNetworkResourcePoolConfigSpec: {
            (options?: integrityService.vim.DVSNetworkResourcePoolConfigSpec): integrityService.vim.DVSNetworkResourcePoolConfigSpec;
         };
         ArrayOfDVSNetworkResourcePoolConfigSpec: {
            (options?: integrityService.vim.ArrayOfDVSNetworkResourcePoolConfigSpec): integrityService.vim.ArrayOfDVSNetworkResourcePoolConfigSpec;
         };
         DVSNetworkResourcePool: {
            (options?: integrityService.vim.DVSNetworkResourcePool): integrityService.vim.DVSNetworkResourcePool;
         };
         ArrayOfDVSNetworkResourcePool: {
            (options?: integrityService.vim.ArrayOfDVSNetworkResourcePool): integrityService.vim.ArrayOfDVSNetworkResourcePool;
         };
         DistributedVirtualSwitchPortConnecteeConnecteeType: {
            "pnic": string;
            "vmVnic": string;
            "hostConsoleVnic": string;
            "hostVmkVnic": string;
         };
         DistributedVirtualSwitchPortConnectee: {
            (options?: integrityService.vim.DistributedVirtualSwitchPortConnectee): integrityService.vim.DistributedVirtualSwitchPortConnectee;
         };
         DistributedVirtualSwitchPortConnection: {
            (options?: integrityService.vim.DistributedVirtualSwitchPortConnection): integrityService.vim.DistributedVirtualSwitchPortConnection;
         };
         DistributedVirtualSwitchPortCriteria: {
            (options?: integrityService.vim.DistributedVirtualSwitchPortCriteria): integrityService.vim.DistributedVirtualSwitchPortCriteria;
         };
         DistributedVirtualSwitchPortStatistics: {
            (options?: integrityService.vim.DistributedVirtualSwitchPortStatistics): integrityService.vim.DistributedVirtualSwitchPortStatistics;
         };
         DistributedVirtualSwitchProductSpec: {
            (options?: integrityService.vim.DistributedVirtualSwitchProductSpec): integrityService.vim.DistributedVirtualSwitchProductSpec;
         };
         ArrayOfDistributedVirtualSwitchProductSpec: {
            (options?: integrityService.vim.ArrayOfDistributedVirtualSwitchProductSpec): integrityService.vim.ArrayOfDistributedVirtualSwitchProductSpec;
         };
         DvsNetworkRuleQualifier: {
            (options?: integrityService.vim.DvsNetworkRuleQualifier): integrityService.vim.DvsNetworkRuleQualifier;
         };
         ArrayOfDvsNetworkRuleQualifier: {
            (options?: integrityService.vim.ArrayOfDvsNetworkRuleQualifier): integrityService.vim.ArrayOfDvsNetworkRuleQualifier;
         };
         DvsNetworkRuleAction: {
            (options?: integrityService.vim.DvsNetworkRuleAction): integrityService.vim.DvsNetworkRuleAction;
         };
         DvsNetworkRuleDirectionType: {
            "incomingPackets": string;
            "outgoingPackets": string;
            "both": string;
         };
         DvsIpNetworkRuleQualifier: {
            (options?: integrityService.vim.DvsIpNetworkRuleQualifier): integrityService.vim.DvsIpNetworkRuleQualifier;
         };
         DvsIpPort: {
            (options?: integrityService.vim.DvsIpPort): integrityService.vim.DvsIpPort;
         };
         DvsSingleIpPort: {
            (options?: integrityService.vim.DvsSingleIpPort): integrityService.vim.DvsSingleIpPort;
         };
         DvsIpPortRange: {
            (options?: integrityService.vim.DvsIpPortRange): integrityService.vim.DvsIpPortRange;
         };
         DvsMacNetworkRuleQualifier: {
            (options?: integrityService.vim.DvsMacNetworkRuleQualifier): integrityService.vim.DvsMacNetworkRuleQualifier;
         };
         DvsSystemTrafficNetworkRuleQualifier: {
            (options?: integrityService.vim.DvsSystemTrafficNetworkRuleQualifier): integrityService.vim.DvsSystemTrafficNetworkRuleQualifier;
         };
         DvsDropNetworkRuleAction: {
            (options?: integrityService.vim.DvsDropNetworkRuleAction): integrityService.vim.DvsDropNetworkRuleAction;
         };
         DvsAcceptNetworkRuleAction: {
            (options?: integrityService.vim.DvsAcceptNetworkRuleAction): integrityService.vim.DvsAcceptNetworkRuleAction;
         };
         DvsUpdateTagNetworkRuleAction: {
            (options?: integrityService.vim.DvsUpdateTagNetworkRuleAction): integrityService.vim.DvsUpdateTagNetworkRuleAction;
         };
         DvsRateLimitNetworkRuleAction: {
            (options?: integrityService.vim.DvsRateLimitNetworkRuleAction): integrityService.vim.DvsRateLimitNetworkRuleAction;
         };
         DvsLogNetworkRuleAction: {
            (options?: integrityService.vim.DvsLogNetworkRuleAction): integrityService.vim.DvsLogNetworkRuleAction;
         };
         DvsGreEncapNetworkRuleAction: {
            (options?: integrityService.vim.DvsGreEncapNetworkRuleAction): integrityService.vim.DvsGreEncapNetworkRuleAction;
         };
         DvsMacRewriteNetworkRuleAction: {
            (options?: integrityService.vim.DvsMacRewriteNetworkRuleAction): integrityService.vim.DvsMacRewriteNetworkRuleAction;
         };
         DvsPuntNetworkRuleAction: {
            (options?: integrityService.vim.DvsPuntNetworkRuleAction): integrityService.vim.DvsPuntNetworkRuleAction;
         };
         DvsCopyNetworkRuleAction: {
            (options?: integrityService.vim.DvsCopyNetworkRuleAction): integrityService.vim.DvsCopyNetworkRuleAction;
         };
         DvsTrafficRule: {
            (options?: integrityService.vim.DvsTrafficRule): integrityService.vim.DvsTrafficRule;
         };
         ArrayOfDvsTrafficRule: {
            (options?: integrityService.vim.ArrayOfDvsTrafficRule): integrityService.vim.ArrayOfDvsTrafficRule;
         };
         DvsTrafficRuleset: {
            (options?: integrityService.vim.DvsTrafficRuleset): integrityService.vim.DvsTrafficRuleset;
         };
         VMwareDVSFeatureCapability: {
            (options?: integrityService.vim.VMwareDVSFeatureCapability): integrityService.vim.VMwareDVSFeatureCapability;
         };
         VMwareDvsLacpCapability: {
            (options?: integrityService.vim.VMwareDvsLacpCapability): integrityService.vim.VMwareDvsLacpCapability;
         };
         VMwareDVSHealthCheckCapability: {
            (options?: integrityService.vim.VMwareDVSHealthCheckCapability): integrityService.vim.VMwareDVSHealthCheckCapability;
         };
         VMwareDVSVspanCapability: {
            (options?: integrityService.vim.VMwareDVSVspanCapability): integrityService.vim.VMwareDVSVspanCapability;
         };
         VMwareVspanPort: {
            (options?: integrityService.vim.VMwareVspanPort): integrityService.vim.VMwareVspanPort;
         };
         VMwareVspanSession: {
            (options?: integrityService.vim.VMwareVspanSession): integrityService.vim.VMwareVspanSession;
         };
         ArrayOfVMwareVspanSession: {
            (options?: integrityService.vim.ArrayOfVMwareVspanSession): integrityService.vim.ArrayOfVMwareVspanSession;
         };
         VMwareIpfixConfig: {
            (options?: integrityService.vim.VMwareIpfixConfig): integrityService.vim.VMwareIpfixConfig;
         };
         VMwareDVSConfigInfo: {
            (options?: integrityService.vim.VMwareDVSConfigInfo): integrityService.vim.VMwareDVSConfigInfo;
         };
         VMwareDVSConfigSpec: {
            (options?: integrityService.vim.VMwareDVSConfigSpec): integrityService.vim.VMwareDVSConfigSpec;
         };
         VMwareUplinkPortOrderPolicy: {
            (options?: integrityService.vim.VMwareUplinkPortOrderPolicy): integrityService.vim.VMwareUplinkPortOrderPolicy;
         };
         DVSFailureCriteria: {
            (options?: integrityService.vim.DVSFailureCriteria): integrityService.vim.DVSFailureCriteria;
         };
         VmwareUplinkPortTeamingPolicy: {
            (options?: integrityService.vim.VmwareUplinkPortTeamingPolicy): integrityService.vim.VmwareUplinkPortTeamingPolicy;
         };
         VmwareDistributedVirtualSwitchVlanSpec: {
            (options?: integrityService.vim.VmwareDistributedVirtualSwitchVlanSpec): integrityService.vim.VmwareDistributedVirtualSwitchVlanSpec;
         };
         VmwareDistributedVirtualSwitchPvlanSpec: {
            (options?: integrityService.vim.VmwareDistributedVirtualSwitchPvlanSpec): integrityService.vim.VmwareDistributedVirtualSwitchPvlanSpec;
         };
         VmwareDistributedVirtualSwitchVlanIdSpec: {
            (options?: integrityService.vim.VmwareDistributedVirtualSwitchVlanIdSpec): integrityService.vim.VmwareDistributedVirtualSwitchVlanIdSpec;
         };
         VmwareDistributedVirtualSwitchTrunkVlanSpec: {
            (options?: integrityService.vim.VmwareDistributedVirtualSwitchTrunkVlanSpec): integrityService.vim.VmwareDistributedVirtualSwitchTrunkVlanSpec;
         };
         DVSSecurityPolicy: {
            (options?: integrityService.vim.DVSSecurityPolicy): integrityService.vim.DVSSecurityPolicy;
         };
         VMwareDVSPortSetting: {
            (options?: integrityService.vim.VMwareDVSPortSetting): integrityService.vim.VMwareDVSPortSetting;
         };
         VMwareDVSPortgroupPolicy: {
            (options?: integrityService.vim.VMwareDVSPortgroupPolicy): integrityService.vim.VMwareDVSPortgroupPolicy;
         };
         VmwareDistributedVirtualSwitchPvlanPortType: {
            "promiscuous": string;
            "isolated": string;
            "community": string;
         };
         VMwareDVSPvlanConfigSpec: {
            (options?: integrityService.vim.VMwareDVSPvlanConfigSpec): integrityService.vim.VMwareDVSPvlanConfigSpec;
         };
         ArrayOfVMwareDVSPvlanConfigSpec: {
            (options?: integrityService.vim.ArrayOfVMwareDVSPvlanConfigSpec): integrityService.vim.ArrayOfVMwareDVSPvlanConfigSpec;
         };
         VMwareDVSPvlanMapEntry: {
            (options?: integrityService.vim.VMwareDVSPvlanMapEntry): integrityService.vim.VMwareDVSPvlanMapEntry;
         };
         ArrayOfVMwareDVSPvlanMapEntry: {
            (options?: integrityService.vim.ArrayOfVMwareDVSPvlanMapEntry): integrityService.vim.ArrayOfVMwareDVSPvlanMapEntry;
         };
         VMwareDVSVspanConfigSpec: {
            (options?: integrityService.vim.VMwareDVSVspanConfigSpec): integrityService.vim.VMwareDVSVspanConfigSpec;
         };
         ArrayOfVMwareDVSVspanConfigSpec: {
            (options?: integrityService.vim.ArrayOfVMwareDVSVspanConfigSpec): integrityService.vim.ArrayOfVMwareDVSVspanConfigSpec;
         };
         VMwareDVSVspanSessionType: {
            "mixedDestMirror": string;
            "dvPortMirror": string;
            "remoteMirrorSource": string;
            "remoteMirrorDest": string;
            "encapsulatedRemoteMirrorSource": string;
         };
         VMwareDVSHealthCheckConfig: {
            (options?: integrityService.vim.VMwareDVSHealthCheckConfig): integrityService.vim.VMwareDVSHealthCheckConfig;
         };
         VMwareDVSVlanMtuHealthCheckConfig: {
            (options?: integrityService.vim.VMwareDVSVlanMtuHealthCheckConfig): integrityService.vim.VMwareDVSVlanMtuHealthCheckConfig;
         };
         VMwareDVSTeamingHealthCheckConfig: {
            (options?: integrityService.vim.VMwareDVSTeamingHealthCheckConfig): integrityService.vim.VMwareDVSTeamingHealthCheckConfig;
         };
         VMwareDVSVlanHealthCheckResult: {
            (options?: integrityService.vim.VMwareDVSVlanHealthCheckResult): integrityService.vim.VMwareDVSVlanHealthCheckResult;
         };
         VMwareDVSMtuHealthCheckResult: {
            (options?: integrityService.vim.VMwareDVSMtuHealthCheckResult): integrityService.vim.VMwareDVSMtuHealthCheckResult;
         };
         VMwareDVSTeamingMatchStatus: {
            "iphashMatch": string;
            "nonIphashMatch": string;
            "iphashMismatch": string;
            "nonIphashMismatch": string;
         };
         VMwareDVSTeamingHealthCheckResult: {
            (options?: integrityService.vim.VMwareDVSTeamingHealthCheckResult): integrityService.vim.VMwareDVSTeamingHealthCheckResult;
         };
         VMwareUplinkLacpPolicy: {
            (options?: integrityService.vim.VMwareUplinkLacpPolicy): integrityService.vim.VMwareUplinkLacpPolicy;
         };
         VMwareDvsLacpGroupConfig: {
            (options?: integrityService.vim.VMwareDvsLacpGroupConfig): integrityService.vim.VMwareDvsLacpGroupConfig;
         };
         ArrayOfVMwareDvsLacpGroupConfig: {
            (options?: integrityService.vim.ArrayOfVMwareDvsLacpGroupConfig): integrityService.vim.ArrayOfVMwareDvsLacpGroupConfig;
         };
         VMwareDvsLagVlanConfig: {
            (options?: integrityService.vim.VMwareDvsLagVlanConfig): integrityService.vim.VMwareDvsLagVlanConfig;
         };
         VMwareDvsLagIpfixConfig: {
            (options?: integrityService.vim.VMwareDvsLagIpfixConfig): integrityService.vim.VMwareDvsLagIpfixConfig;
         };
         VMwareUplinkLacpMode: {
            "active": string;
            "passive": string;
         };
         VMwareDvsLacpGroupSpec: {
            (options?: integrityService.vim.VMwareDvsLacpGroupSpec): integrityService.vim.VMwareDvsLacpGroupSpec;
         };
         ArrayOfVMwareDvsLacpGroupSpec: {
            (options?: integrityService.vim.ArrayOfVMwareDvsLacpGroupSpec): integrityService.vim.ArrayOfVMwareDvsLacpGroupSpec;
         };
         VMwareDvsLacpLoadBalanceAlgorithm: {
            "srcMac": string;
            "destMac": string;
            "srcDestMac": string;
            "destIpVlan": string;
            "srcIpVlan": string;
            "srcDestIpVlan": string;
            "destTcpUdpPort": string;
            "srcTcpUdpPort": string;
            "srcDestTcpUdpPort": string;
            "destIpTcpUdpPort": string;
            "srcIpTcpUdpPort": string;
            "srcDestIpTcpUdpPort": string;
            "destIpTcpUdpPortVlan": string;
            "srcIpTcpUdpPortVlan": string;
            "srcDestIpTcpUdpPortVlan": string;
            "destIp": string;
            "srcIp": string;
            "srcDestIp": string;
            "vlan": string;
            "srcPortId": string;
         };
         VMwareDvsLacpApiVersion: {
            "singleLag": string;
            "multipleLag": string;
         };
         EventEventSeverity: {
            "error": string;
            "warning": string;
            "info": string;
            "user": string;
         };
         Event: {
            (options?: integrityService.vim.Event): integrityService.vim.Event;
         };
         ArrayOfEvent: {
            (options?: integrityService.vim.ArrayOfEvent): integrityService.vim.ArrayOfEvent;
         };
         GeneralEvent: {
            (options?: integrityService.vim.GeneralEvent): integrityService.vim.GeneralEvent;
         };
         GeneralHostInfoEvent: {
            (options?: integrityService.vim.GeneralHostInfoEvent): integrityService.vim.GeneralHostInfoEvent;
         };
         GeneralHostWarningEvent: {
            (options?: integrityService.vim.GeneralHostWarningEvent): integrityService.vim.GeneralHostWarningEvent;
         };
         GeneralHostErrorEvent: {
            (options?: integrityService.vim.GeneralHostErrorEvent): integrityService.vim.GeneralHostErrorEvent;
         };
         GeneralVmInfoEvent: {
            (options?: integrityService.vim.GeneralVmInfoEvent): integrityService.vim.GeneralVmInfoEvent;
         };
         GeneralVmWarningEvent: {
            (options?: integrityService.vim.GeneralVmWarningEvent): integrityService.vim.GeneralVmWarningEvent;
         };
         GeneralVmErrorEvent: {
            (options?: integrityService.vim.GeneralVmErrorEvent): integrityService.vim.GeneralVmErrorEvent;
         };
         GeneralUserEvent: {
            (options?: integrityService.vim.GeneralUserEvent): integrityService.vim.GeneralUserEvent;
         };
         ExtendedEventPair: {
            (options?: integrityService.vim.ExtendedEventPair): integrityService.vim.ExtendedEventPair;
         };
         ArrayOfExtendedEventPair: {
            (options?: integrityService.vim.ArrayOfExtendedEventPair): integrityService.vim.ArrayOfExtendedEventPair;
         };
         ExtendedEvent: {
            (options?: integrityService.vim.ExtendedEvent): integrityService.vim.ExtendedEvent;
         };
         HealthStatusChangedEvent: {
            (options?: integrityService.vim.HealthStatusChangedEvent): integrityService.vim.HealthStatusChangedEvent;
         };
         HostInventoryUnreadableEvent: {
            (options?: integrityService.vim.HostInventoryUnreadableEvent): integrityService.vim.HostInventoryUnreadableEvent;
         };
         DatacenterEvent: {
            (options?: integrityService.vim.DatacenterEvent): integrityService.vim.DatacenterEvent;
         };
         DatacenterCreatedEvent: {
            (options?: integrityService.vim.DatacenterCreatedEvent): integrityService.vim.DatacenterCreatedEvent;
         };
         DatacenterRenamedEvent: {
            (options?: integrityService.vim.DatacenterRenamedEvent): integrityService.vim.DatacenterRenamedEvent;
         };
         SessionEvent: {
            (options?: integrityService.vim.SessionEvent): integrityService.vim.SessionEvent;
         };
         ServerStartedSessionEvent: {
            (options?: integrityService.vim.ServerStartedSessionEvent): integrityService.vim.ServerStartedSessionEvent;
         };
         UserLoginSessionEvent: {
            (options?: integrityService.vim.UserLoginSessionEvent): integrityService.vim.UserLoginSessionEvent;
         };
         UserLogoutSessionEvent: {
            (options?: integrityService.vim.UserLogoutSessionEvent): integrityService.vim.UserLogoutSessionEvent;
         };
         BadUsernameSessionEvent: {
            (options?: integrityService.vim.BadUsernameSessionEvent): integrityService.vim.BadUsernameSessionEvent;
         };
         AlreadyAuthenticatedSessionEvent: {
            (options?: integrityService.vim.AlreadyAuthenticatedSessionEvent): integrityService.vim.AlreadyAuthenticatedSessionEvent;
         };
         NoAccessUserEvent: {
            (options?: integrityService.vim.NoAccessUserEvent): integrityService.vim.NoAccessUserEvent;
         };
         SessionTerminatedEvent: {
            (options?: integrityService.vim.SessionTerminatedEvent): integrityService.vim.SessionTerminatedEvent;
         };
         GlobalMessageChangedEvent: {
            (options?: integrityService.vim.GlobalMessageChangedEvent): integrityService.vim.GlobalMessageChangedEvent;
         };
         UpgradeEvent: {
            (options?: integrityService.vim.UpgradeEvent): integrityService.vim.UpgradeEvent;
         };
         InfoUpgradeEvent: {
            (options?: integrityService.vim.InfoUpgradeEvent): integrityService.vim.InfoUpgradeEvent;
         };
         WarningUpgradeEvent: {
            (options?: integrityService.vim.WarningUpgradeEvent): integrityService.vim.WarningUpgradeEvent;
         };
         ErrorUpgradeEvent: {
            (options?: integrityService.vim.ErrorUpgradeEvent): integrityService.vim.ErrorUpgradeEvent;
         };
         UserUpgradeEvent: {
            (options?: integrityService.vim.UserUpgradeEvent): integrityService.vim.UserUpgradeEvent;
         };
         HostEvent: {
            (options?: integrityService.vim.HostEvent): integrityService.vim.HostEvent;
         };
         HostDasEvent: {
            (options?: integrityService.vim.HostDasEvent): integrityService.vim.HostDasEvent;
         };
         HostConnectedEvent: {
            (options?: integrityService.vim.HostConnectedEvent): integrityService.vim.HostConnectedEvent;
         };
         HostDisconnectedEventReasonCode: {
            "sslThumbprintVerifyFailed": string;
            "licenseExpired": string;
            "agentUpgrade": string;
            "userRequest": string;
            "insufficientLicenses": string;
            "agentOutOfDate": string;
            "passwordDecryptFailure": string;
            "unknown": string;
            "vcVRAMCapacityExceeded": string;
         };
         HostDisconnectedEvent: {
            (options?: integrityService.vim.HostDisconnectedEvent): integrityService.vim.HostDisconnectedEvent;
         };
         HostSyncFailedEvent: {
            (options?: integrityService.vim.HostSyncFailedEvent): integrityService.vim.HostSyncFailedEvent;
         };
         HostConnectionLostEvent: {
            (options?: integrityService.vim.HostConnectionLostEvent): integrityService.vim.HostConnectionLostEvent;
         };
         HostReconnectionFailedEvent: {
            (options?: integrityService.vim.HostReconnectionFailedEvent): integrityService.vim.HostReconnectionFailedEvent;
         };
         HostCnxFailedNoConnectionEvent: {
            (options?: integrityService.vim.HostCnxFailedNoConnectionEvent): integrityService.vim.HostCnxFailedNoConnectionEvent;
         };
         HostCnxFailedBadUsernameEvent: {
            (options?: integrityService.vim.HostCnxFailedBadUsernameEvent): integrityService.vim.HostCnxFailedBadUsernameEvent;
         };
         HostCnxFailedBadVersionEvent: {
            (options?: integrityService.vim.HostCnxFailedBadVersionEvent): integrityService.vim.HostCnxFailedBadVersionEvent;
         };
         HostCnxFailedAlreadyManagedEvent: {
            (options?: integrityService.vim.HostCnxFailedAlreadyManagedEvent): integrityService.vim.HostCnxFailedAlreadyManagedEvent;
         };
         HostCnxFailedNoLicenseEvent: {
            (options?: integrityService.vim.HostCnxFailedNoLicenseEvent): integrityService.vim.HostCnxFailedNoLicenseEvent;
         };
         HostCnxFailedNetworkErrorEvent: {
            (options?: integrityService.vim.HostCnxFailedNetworkErrorEvent): integrityService.vim.HostCnxFailedNetworkErrorEvent;
         };
         HostRemovedEvent: {
            (options?: integrityService.vim.HostRemovedEvent): integrityService.vim.HostRemovedEvent;
         };
         HostCnxFailedCcagentUpgradeEvent: {
            (options?: integrityService.vim.HostCnxFailedCcagentUpgradeEvent): integrityService.vim.HostCnxFailedCcagentUpgradeEvent;
         };
         HostCnxFailedBadCcagentEvent: {
            (options?: integrityService.vim.HostCnxFailedBadCcagentEvent): integrityService.vim.HostCnxFailedBadCcagentEvent;
         };
         HostCnxFailedEvent: {
            (options?: integrityService.vim.HostCnxFailedEvent): integrityService.vim.HostCnxFailedEvent;
         };
         HostCnxFailedAccountFailedEvent: {
            (options?: integrityService.vim.HostCnxFailedAccountFailedEvent): integrityService.vim.HostCnxFailedAccountFailedEvent;
         };
         HostCnxFailedNoAccessEvent: {
            (options?: integrityService.vim.HostCnxFailedNoAccessEvent): integrityService.vim.HostCnxFailedNoAccessEvent;
         };
         HostShutdownEvent: {
            (options?: integrityService.vim.HostShutdownEvent): integrityService.vim.HostShutdownEvent;
         };
         HostCnxFailedNotFoundEvent: {
            (options?: integrityService.vim.HostCnxFailedNotFoundEvent): integrityService.vim.HostCnxFailedNotFoundEvent;
         };
         HostCnxFailedTimeoutEvent: {
            (options?: integrityService.vim.HostCnxFailedTimeoutEvent): integrityService.vim.HostCnxFailedTimeoutEvent;
         };
         HostUpgradeFailedEvent: {
            (options?: integrityService.vim.HostUpgradeFailedEvent): integrityService.vim.HostUpgradeFailedEvent;
         };
         EnteringMaintenanceModeEvent: {
            (options?: integrityService.vim.EnteringMaintenanceModeEvent): integrityService.vim.EnteringMaintenanceModeEvent;
         };
         EnteredMaintenanceModeEvent: {
            (options?: integrityService.vim.EnteredMaintenanceModeEvent): integrityService.vim.EnteredMaintenanceModeEvent;
         };
         ExitMaintenanceModeEvent: {
            (options?: integrityService.vim.ExitMaintenanceModeEvent): integrityService.vim.ExitMaintenanceModeEvent;
         };
         CanceledHostOperationEvent: {
            (options?: integrityService.vim.CanceledHostOperationEvent): integrityService.vim.CanceledHostOperationEvent;
         };
         TimedOutHostOperationEvent: {
            (options?: integrityService.vim.TimedOutHostOperationEvent): integrityService.vim.TimedOutHostOperationEvent;
         };
         HostDasEnabledEvent: {
            (options?: integrityService.vim.HostDasEnabledEvent): integrityService.vim.HostDasEnabledEvent;
         };
         HostDasDisabledEvent: {
            (options?: integrityService.vim.HostDasDisabledEvent): integrityService.vim.HostDasDisabledEvent;
         };
         HostDasEnablingEvent: {
            (options?: integrityService.vim.HostDasEnablingEvent): integrityService.vim.HostDasEnablingEvent;
         };
         HostDasDisablingEvent: {
            (options?: integrityService.vim.HostDasDisablingEvent): integrityService.vim.HostDasDisablingEvent;
         };
         HostDasErrorEventHostDasErrorReason: {
            "configFailed": string;
            "timeout": string;
            "communicationInitFailed": string;
            "healthCheckScriptFailed": string;
            "agentFailed": string;
            "agentShutdown": string;
            "isolationAddressUnpingable": string;
            "other": string;
         };
         HostDasErrorEvent: {
            (options?: integrityService.vim.HostDasErrorEvent): integrityService.vim.HostDasErrorEvent;
         };
         HostDasOkEvent: {
            (options?: integrityService.vim.HostDasOkEvent): integrityService.vim.HostDasOkEvent;
         };
         VcAgentUpgradedEvent: {
            (options?: integrityService.vim.VcAgentUpgradedEvent): integrityService.vim.VcAgentUpgradedEvent;
         };
         VcAgentUninstalledEvent: {
            (options?: integrityService.vim.VcAgentUninstalledEvent): integrityService.vim.VcAgentUninstalledEvent;
         };
         VcAgentUpgradeFailedEvent: {
            (options?: integrityService.vim.VcAgentUpgradeFailedEvent): integrityService.vim.VcAgentUpgradeFailedEvent;
         };
         VcAgentUninstallFailedEvent: {
            (options?: integrityService.vim.VcAgentUninstallFailedEvent): integrityService.vim.VcAgentUninstallFailedEvent;
         };
         HostAddedEvent: {
            (options?: integrityService.vim.HostAddedEvent): integrityService.vim.HostAddedEvent;
         };
         HostAddFailedEvent: {
            (options?: integrityService.vim.HostAddFailedEvent): integrityService.vim.HostAddFailedEvent;
         };
         HostIpChangedEvent: {
            (options?: integrityService.vim.HostIpChangedEvent): integrityService.vim.HostIpChangedEvent;
         };
         EnteringStandbyModeEvent: {
            (options?: integrityService.vim.EnteringStandbyModeEvent): integrityService.vim.EnteringStandbyModeEvent;
         };
         DrsEnteringStandbyModeEvent: {
            (options?: integrityService.vim.DrsEnteringStandbyModeEvent): integrityService.vim.DrsEnteringStandbyModeEvent;
         };
         EnteredStandbyModeEvent: {
            (options?: integrityService.vim.EnteredStandbyModeEvent): integrityService.vim.EnteredStandbyModeEvent;
         };
         DrsEnteredStandbyModeEvent: {
            (options?: integrityService.vim.DrsEnteredStandbyModeEvent): integrityService.vim.DrsEnteredStandbyModeEvent;
         };
         ExitingStandbyModeEvent: {
            (options?: integrityService.vim.ExitingStandbyModeEvent): integrityService.vim.ExitingStandbyModeEvent;
         };
         DrsExitingStandbyModeEvent: {
            (options?: integrityService.vim.DrsExitingStandbyModeEvent): integrityService.vim.DrsExitingStandbyModeEvent;
         };
         ExitedStandbyModeEvent: {
            (options?: integrityService.vim.ExitedStandbyModeEvent): integrityService.vim.ExitedStandbyModeEvent;
         };
         DrsExitedStandbyModeEvent: {
            (options?: integrityService.vim.DrsExitedStandbyModeEvent): integrityService.vim.DrsExitedStandbyModeEvent;
         };
         ExitStandbyModeFailedEvent: {
            (options?: integrityService.vim.ExitStandbyModeFailedEvent): integrityService.vim.ExitStandbyModeFailedEvent;
         };
         DrsExitStandbyModeFailedEvent: {
            (options?: integrityService.vim.DrsExitStandbyModeFailedEvent): integrityService.vim.DrsExitStandbyModeFailedEvent;
         };
         UpdatedAgentBeingRestartedEvent: {
            (options?: integrityService.vim.UpdatedAgentBeingRestartedEvent): integrityService.vim.UpdatedAgentBeingRestartedEvent;
         };
         AccountCreatedEvent: {
            (options?: integrityService.vim.AccountCreatedEvent): integrityService.vim.AccountCreatedEvent;
         };
         AccountRemovedEvent: {
            (options?: integrityService.vim.AccountRemovedEvent): integrityService.vim.AccountRemovedEvent;
         };
         UserPasswordChanged: {
            (options?: integrityService.vim.UserPasswordChanged): integrityService.vim.UserPasswordChanged;
         };
         AccountUpdatedEvent: {
            (options?: integrityService.vim.AccountUpdatedEvent): integrityService.vim.AccountUpdatedEvent;
         };
         UserAssignedToGroup: {
            (options?: integrityService.vim.UserAssignedToGroup): integrityService.vim.UserAssignedToGroup;
         };
         UserUnassignedFromGroup: {
            (options?: integrityService.vim.UserUnassignedFromGroup): integrityService.vim.UserUnassignedFromGroup;
         };
         DatastorePrincipalConfigured: {
            (options?: integrityService.vim.DatastorePrincipalConfigured): integrityService.vim.DatastorePrincipalConfigured;
         };
         VMFSDatastoreCreatedEvent: {
            (options?: integrityService.vim.VMFSDatastoreCreatedEvent): integrityService.vim.VMFSDatastoreCreatedEvent;
         };
         NASDatastoreCreatedEvent: {
            (options?: integrityService.vim.NASDatastoreCreatedEvent): integrityService.vim.NASDatastoreCreatedEvent;
         };
         LocalDatastoreCreatedEvent: {
            (options?: integrityService.vim.LocalDatastoreCreatedEvent): integrityService.vim.LocalDatastoreCreatedEvent;
         };
         VMFSDatastoreExtendedEvent: {
            (options?: integrityService.vim.VMFSDatastoreExtendedEvent): integrityService.vim.VMFSDatastoreExtendedEvent;
         };
         VMFSDatastoreExpandedEvent: {
            (options?: integrityService.vim.VMFSDatastoreExpandedEvent): integrityService.vim.VMFSDatastoreExpandedEvent;
         };
         DatastoreRemovedOnHostEvent: {
            (options?: integrityService.vim.DatastoreRemovedOnHostEvent): integrityService.vim.DatastoreRemovedOnHostEvent;
         };
         DatastoreRenamedOnHostEvent: {
            (options?: integrityService.vim.DatastoreRenamedOnHostEvent): integrityService.vim.DatastoreRenamedOnHostEvent;
         };
         DuplicateIpDetectedEvent: {
            (options?: integrityService.vim.DuplicateIpDetectedEvent): integrityService.vim.DuplicateIpDetectedEvent;
         };
         DatastoreDiscoveredEvent: {
            (options?: integrityService.vim.DatastoreDiscoveredEvent): integrityService.vim.DatastoreDiscoveredEvent;
         };
         DrsResourceConfigureFailedEvent: {
            (options?: integrityService.vim.DrsResourceConfigureFailedEvent): integrityService.vim.DrsResourceConfigureFailedEvent;
         };
         DrsResourceConfigureSyncedEvent: {
            (options?: integrityService.vim.DrsResourceConfigureSyncedEvent): integrityService.vim.DrsResourceConfigureSyncedEvent;
         };
         HostGetShortNameFailedEvent: {
            (options?: integrityService.vim.HostGetShortNameFailedEvent): integrityService.vim.HostGetShortNameFailedEvent;
         };
         HostShortNameToIpFailedEvent: {
            (options?: integrityService.vim.HostShortNameToIpFailedEvent): integrityService.vim.HostShortNameToIpFailedEvent;
         };
         HostIpToShortNameFailedEvent: {
            (options?: integrityService.vim.HostIpToShortNameFailedEvent): integrityService.vim.HostIpToShortNameFailedEvent;
         };
         HostPrimaryAgentNotShortNameEvent: {
            (options?: integrityService.vim.HostPrimaryAgentNotShortNameEvent): integrityService.vim.HostPrimaryAgentNotShortNameEvent;
         };
         HostNotInClusterEvent: {
            (options?: integrityService.vim.HostNotInClusterEvent): integrityService.vim.HostNotInClusterEvent;
         };
         HostIsolationIpPingFailedEvent: {
            (options?: integrityService.vim.HostIsolationIpPingFailedEvent): integrityService.vim.HostIsolationIpPingFailedEvent;
         };
         HostIpInconsistentEvent: {
            (options?: integrityService.vim.HostIpInconsistentEvent): integrityService.vim.HostIpInconsistentEvent;
         };
         HostUserWorldSwapNotEnabledEvent: {
            (options?: integrityService.vim.HostUserWorldSwapNotEnabledEvent): integrityService.vim.HostUserWorldSwapNotEnabledEvent;
         };
         HostNonCompliantEvent: {
            (options?: integrityService.vim.HostNonCompliantEvent): integrityService.vim.HostNonCompliantEvent;
         };
         HostCompliantEvent: {
            (options?: integrityService.vim.HostCompliantEvent): integrityService.vim.HostCompliantEvent;
         };
         HostComplianceCheckedEvent: {
            (options?: integrityService.vim.HostComplianceCheckedEvent): integrityService.vim.HostComplianceCheckedEvent;
         };
         ClusterComplianceCheckedEvent: {
            (options?: integrityService.vim.ClusterComplianceCheckedEvent): integrityService.vim.ClusterComplianceCheckedEvent;
         };
         ProfileEvent: {
            (options?: integrityService.vim.ProfileEvent): integrityService.vim.ProfileEvent;
         };
         ProfileCreatedEvent: {
            (options?: integrityService.vim.ProfileCreatedEvent): integrityService.vim.ProfileCreatedEvent;
         };
         ProfileRemovedEvent: {
            (options?: integrityService.vim.ProfileRemovedEvent): integrityService.vim.ProfileRemovedEvent;
         };
         ProfileAssociatedEvent: {
            (options?: integrityService.vim.ProfileAssociatedEvent): integrityService.vim.ProfileAssociatedEvent;
         };
         ProfileDissociatedEvent: {
            (options?: integrityService.vim.ProfileDissociatedEvent): integrityService.vim.ProfileDissociatedEvent;
         };
         HostConfigAppliedEvent: {
            (options?: integrityService.vim.HostConfigAppliedEvent): integrityService.vim.HostConfigAppliedEvent;
         };
         ProfileReferenceHostChangedEvent: {
            (options?: integrityService.vim.ProfileReferenceHostChangedEvent): integrityService.vim.ProfileReferenceHostChangedEvent;
         };
         ProfileChangedEvent: {
            (options?: integrityService.vim.ProfileChangedEvent): integrityService.vim.ProfileChangedEvent;
         };
         HostProfileAppliedEvent: {
            (options?: integrityService.vim.HostProfileAppliedEvent): integrityService.vim.HostProfileAppliedEvent;
         };
         HostShortNameInconsistentEvent: {
            (options?: integrityService.vim.HostShortNameInconsistentEvent): integrityService.vim.HostShortNameInconsistentEvent;
         };
         HostNoRedundantManagementNetworkEvent: {
            (options?: integrityService.vim.HostNoRedundantManagementNetworkEvent): integrityService.vim.HostNoRedundantManagementNetworkEvent;
         };
         HostNoAvailableNetworksEvent: {
            (options?: integrityService.vim.HostNoAvailableNetworksEvent): integrityService.vim.HostNoAvailableNetworksEvent;
         };
         HostExtraNetworksEvent: {
            (options?: integrityService.vim.HostExtraNetworksEvent): integrityService.vim.HostExtraNetworksEvent;
         };
         HostNoHAEnabledPortGroupsEvent: {
            (options?: integrityService.vim.HostNoHAEnabledPortGroupsEvent): integrityService.vim.HostNoHAEnabledPortGroupsEvent;
         };
         HostMissingNetworksEvent: {
            (options?: integrityService.vim.HostMissingNetworksEvent): integrityService.vim.HostMissingNetworksEvent;
         };
         VnicPortArgument: {
            (options?: integrityService.vim.VnicPortArgument): integrityService.vim.VnicPortArgument;
         };
         ArrayOfVnicPortArgument: {
            (options?: integrityService.vim.ArrayOfVnicPortArgument): integrityService.vim.ArrayOfVnicPortArgument;
         };
         HostVnicConnectedToCustomizedDVPortEvent: {
            (options?: integrityService.vim.HostVnicConnectedToCustomizedDVPortEvent): integrityService.vim.HostVnicConnectedToCustomizedDVPortEvent;
         };
         GhostDvsProxySwitchDetectedEvent: {
            (options?: integrityService.vim.GhostDvsProxySwitchDetectedEvent): integrityService.vim.GhostDvsProxySwitchDetectedEvent;
         };
         GhostDvsProxySwitchRemovedEvent: {
            (options?: integrityService.vim.GhostDvsProxySwitchRemovedEvent): integrityService.vim.GhostDvsProxySwitchRemovedEvent;
         };
         VmEvent: {
            (options?: integrityService.vim.VmEvent): integrityService.vim.VmEvent;
         };
         VmPoweredOffEvent: {
            (options?: integrityService.vim.VmPoweredOffEvent): integrityService.vim.VmPoweredOffEvent;
         };
         VmPoweredOnEvent: {
            (options?: integrityService.vim.VmPoweredOnEvent): integrityService.vim.VmPoweredOnEvent;
         };
         VmSuspendedEvent: {
            (options?: integrityService.vim.VmSuspendedEvent): integrityService.vim.VmSuspendedEvent;
         };
         VmStartingEvent: {
            (options?: integrityService.vim.VmStartingEvent): integrityService.vim.VmStartingEvent;
         };
         VmStoppingEvent: {
            (options?: integrityService.vim.VmStoppingEvent): integrityService.vim.VmStoppingEvent;
         };
         VmSuspendingEvent: {
            (options?: integrityService.vim.VmSuspendingEvent): integrityService.vim.VmSuspendingEvent;
         };
         VmResumingEvent: {
            (options?: integrityService.vim.VmResumingEvent): integrityService.vim.VmResumingEvent;
         };
         VmDisconnectedEvent: {
            (options?: integrityService.vim.VmDisconnectedEvent): integrityService.vim.VmDisconnectedEvent;
         };
         VmRemoteConsoleConnectedEvent: {
            (options?: integrityService.vim.VmRemoteConsoleConnectedEvent): integrityService.vim.VmRemoteConsoleConnectedEvent;
         };
         VmRemoteConsoleDisconnectedEvent: {
            (options?: integrityService.vim.VmRemoteConsoleDisconnectedEvent): integrityService.vim.VmRemoteConsoleDisconnectedEvent;
         };
         VmDiscoveredEvent: {
            (options?: integrityService.vim.VmDiscoveredEvent): integrityService.vim.VmDiscoveredEvent;
         };
         VmOrphanedEvent: {
            (options?: integrityService.vim.VmOrphanedEvent): integrityService.vim.VmOrphanedEvent;
         };
         VmBeingCreatedEvent: {
            (options?: integrityService.vim.VmBeingCreatedEvent): integrityService.vim.VmBeingCreatedEvent;
         };
         VmCreatedEvent: {
            (options?: integrityService.vim.VmCreatedEvent): integrityService.vim.VmCreatedEvent;
         };
         VmStartRecordingEvent: {
            (options?: integrityService.vim.VmStartRecordingEvent): integrityService.vim.VmStartRecordingEvent;
         };
         VmEndRecordingEvent: {
            (options?: integrityService.vim.VmEndRecordingEvent): integrityService.vim.VmEndRecordingEvent;
         };
         VmStartReplayingEvent: {
            (options?: integrityService.vim.VmStartReplayingEvent): integrityService.vim.VmStartReplayingEvent;
         };
         VmEndReplayingEvent: {
            (options?: integrityService.vim.VmEndReplayingEvent): integrityService.vim.VmEndReplayingEvent;
         };
         VmRegisteredEvent: {
            (options?: integrityService.vim.VmRegisteredEvent): integrityService.vim.VmRegisteredEvent;
         };
         VmAutoRenameEvent: {
            (options?: integrityService.vim.VmAutoRenameEvent): integrityService.vim.VmAutoRenameEvent;
         };
         VmBeingHotMigratedEvent: {
            (options?: integrityService.vim.VmBeingHotMigratedEvent): integrityService.vim.VmBeingHotMigratedEvent;
         };
         VmResettingEvent: {
            (options?: integrityService.vim.VmResettingEvent): integrityService.vim.VmResettingEvent;
         };
         VmStaticMacConflictEvent: {
            (options?: integrityService.vim.VmStaticMacConflictEvent): integrityService.vim.VmStaticMacConflictEvent;
         };
         VmMacConflictEvent: {
            (options?: integrityService.vim.VmMacConflictEvent): integrityService.vim.VmMacConflictEvent;
         };
         VmBeingDeployedEvent: {
            (options?: integrityService.vim.VmBeingDeployedEvent): integrityService.vim.VmBeingDeployedEvent;
         };
         VmDeployFailedEvent: {
            (options?: integrityService.vim.VmDeployFailedEvent): integrityService.vim.VmDeployFailedEvent;
         };
         VmDeployedEvent: {
            (options?: integrityService.vim.VmDeployedEvent): integrityService.vim.VmDeployedEvent;
         };
         VmMacChangedEvent: {
            (options?: integrityService.vim.VmMacChangedEvent): integrityService.vim.VmMacChangedEvent;
         };
         VmMacAssignedEvent: {
            (options?: integrityService.vim.VmMacAssignedEvent): integrityService.vim.VmMacAssignedEvent;
         };
         VmUuidConflictEvent: {
            (options?: integrityService.vim.VmUuidConflictEvent): integrityService.vim.VmUuidConflictEvent;
         };
         VmInstanceUuidConflictEvent: {
            (options?: integrityService.vim.VmInstanceUuidConflictEvent): integrityService.vim.VmInstanceUuidConflictEvent;
         };
         VmBeingMigratedEvent: {
            (options?: integrityService.vim.VmBeingMigratedEvent): integrityService.vim.VmBeingMigratedEvent;
         };
         VmFailedMigrateEvent: {
            (options?: integrityService.vim.VmFailedMigrateEvent): integrityService.vim.VmFailedMigrateEvent;
         };
         VmMigratedEvent: {
            (options?: integrityService.vim.VmMigratedEvent): integrityService.vim.VmMigratedEvent;
         };
         VmUnsupportedStartingEvent: {
            (options?: integrityService.vim.VmUnsupportedStartingEvent): integrityService.vim.VmUnsupportedStartingEvent;
         };
         DrsVmMigratedEvent: {
            (options?: integrityService.vim.DrsVmMigratedEvent): integrityService.vim.DrsVmMigratedEvent;
         };
         DrsVmPoweredOnEvent: {
            (options?: integrityService.vim.DrsVmPoweredOnEvent): integrityService.vim.DrsVmPoweredOnEvent;
         };
         DrsRuleViolationEvent: {
            (options?: integrityService.vim.DrsRuleViolationEvent): integrityService.vim.DrsRuleViolationEvent;
         };
         DrsRuleComplianceEvent: {
            (options?: integrityService.vim.DrsRuleComplianceEvent): integrityService.vim.DrsRuleComplianceEvent;
         };
         VmRelocateSpecEvent: {
            (options?: integrityService.vim.VmRelocateSpecEvent): integrityService.vim.VmRelocateSpecEvent;
         };
         VmBeingRelocatedEvent: {
            (options?: integrityService.vim.VmBeingRelocatedEvent): integrityService.vim.VmBeingRelocatedEvent;
         };
         VmRelocatedEvent: {
            (options?: integrityService.vim.VmRelocatedEvent): integrityService.vim.VmRelocatedEvent;
         };
         VmRelocateFailedEvent: {
            (options?: integrityService.vim.VmRelocateFailedEvent): integrityService.vim.VmRelocateFailedEvent;
         };
         VmEmigratingEvent: {
            (options?: integrityService.vim.VmEmigratingEvent): integrityService.vim.VmEmigratingEvent;
         };
         VmCloneEvent: {
            (options?: integrityService.vim.VmCloneEvent): integrityService.vim.VmCloneEvent;
         };
         VmBeingClonedEvent: {
            (options?: integrityService.vim.VmBeingClonedEvent): integrityService.vim.VmBeingClonedEvent;
         };
         VmBeingClonedNoFolderEvent: {
            (options?: integrityService.vim.VmBeingClonedNoFolderEvent): integrityService.vim.VmBeingClonedNoFolderEvent;
         };
         VmCloneFailedEvent: {
            (options?: integrityService.vim.VmCloneFailedEvent): integrityService.vim.VmCloneFailedEvent;
         };
         VmClonedEvent: {
            (options?: integrityService.vim.VmClonedEvent): integrityService.vim.VmClonedEvent;
         };
         VmResourceReallocatedEvent: {
            (options?: integrityService.vim.VmResourceReallocatedEvent): integrityService.vim.VmResourceReallocatedEvent;
         };
         VmRenamedEvent: {
            (options?: integrityService.vim.VmRenamedEvent): integrityService.vim.VmRenamedEvent;
         };
         VmDateRolledBackEvent: {
            (options?: integrityService.vim.VmDateRolledBackEvent): integrityService.vim.VmDateRolledBackEvent;
         };
         VmNoNetworkAccessEvent: {
            (options?: integrityService.vim.VmNoNetworkAccessEvent): integrityService.vim.VmNoNetworkAccessEvent;
         };
         VmDiskFailedEvent: {
            (options?: integrityService.vim.VmDiskFailedEvent): integrityService.vim.VmDiskFailedEvent;
         };
         VmFailedToPowerOnEvent: {
            (options?: integrityService.vim.VmFailedToPowerOnEvent): integrityService.vim.VmFailedToPowerOnEvent;
         };
         VmFailedToPowerOffEvent: {
            (options?: integrityService.vim.VmFailedToPowerOffEvent): integrityService.vim.VmFailedToPowerOffEvent;
         };
         VmFailedToSuspendEvent: {
            (options?: integrityService.vim.VmFailedToSuspendEvent): integrityService.vim.VmFailedToSuspendEvent;
         };
         VmFailedToResetEvent: {
            (options?: integrityService.vim.VmFailedToResetEvent): integrityService.vim.VmFailedToResetEvent;
         };
         VmFailedToShutdownGuestEvent: {
            (options?: integrityService.vim.VmFailedToShutdownGuestEvent): integrityService.vim.VmFailedToShutdownGuestEvent;
         };
         VmFailedToRebootGuestEvent: {
            (options?: integrityService.vim.VmFailedToRebootGuestEvent): integrityService.vim.VmFailedToRebootGuestEvent;
         };
         VmFailedToStandbyGuestEvent: {
            (options?: integrityService.vim.VmFailedToStandbyGuestEvent): integrityService.vim.VmFailedToStandbyGuestEvent;
         };
         VmRemovedEvent: {
            (options?: integrityService.vim.VmRemovedEvent): integrityService.vim.VmRemovedEvent;
         };
         VmGuestShutdownEvent: {
            (options?: integrityService.vim.VmGuestShutdownEvent): integrityService.vim.VmGuestShutdownEvent;
         };
         VmGuestRebootEvent: {
            (options?: integrityService.vim.VmGuestRebootEvent): integrityService.vim.VmGuestRebootEvent;
         };
         VmGuestStandbyEvent: {
            (options?: integrityService.vim.VmGuestStandbyEvent): integrityService.vim.VmGuestStandbyEvent;
         };
         VmUpgradingEvent: {
            (options?: integrityService.vim.VmUpgradingEvent): integrityService.vim.VmUpgradingEvent;
         };
         VmUpgradeCompleteEvent: {
            (options?: integrityService.vim.VmUpgradeCompleteEvent): integrityService.vim.VmUpgradeCompleteEvent;
         };
         VmUpgradeFailedEvent: {
            (options?: integrityService.vim.VmUpgradeFailedEvent): integrityService.vim.VmUpgradeFailedEvent;
         };
         VmRestartedOnAlternateHostEvent: {
            (options?: integrityService.vim.VmRestartedOnAlternateHostEvent): integrityService.vim.VmRestartedOnAlternateHostEvent;
         };
         VmReconfiguredEvent: {
            (options?: integrityService.vim.VmReconfiguredEvent): integrityService.vim.VmReconfiguredEvent;
         };
         VmMessageEvent: {
            (options?: integrityService.vim.VmMessageEvent): integrityService.vim.VmMessageEvent;
         };
         VmMessageWarningEvent: {
            (options?: integrityService.vim.VmMessageWarningEvent): integrityService.vim.VmMessageWarningEvent;
         };
         VmMessageErrorEvent: {
            (options?: integrityService.vim.VmMessageErrorEvent): integrityService.vim.VmMessageErrorEvent;
         };
         VmConfigMissingEvent: {
            (options?: integrityService.vim.VmConfigMissingEvent): integrityService.vim.VmConfigMissingEvent;
         };
         VmPowerOffOnIsolationEvent: {
            (options?: integrityService.vim.VmPowerOffOnIsolationEvent): integrityService.vim.VmPowerOffOnIsolationEvent;
         };
         VmShutdownOnIsolationEventOperation: {
            "shutdown": string;
            "poweredOff": string;
         };
         VmShutdownOnIsolationEvent: {
            (options?: integrityService.vim.VmShutdownOnIsolationEvent): integrityService.vim.VmShutdownOnIsolationEvent;
         };
         VmFailoverFailed: {
            (options?: integrityService.vim.VmFailoverFailed): integrityService.vim.VmFailoverFailed;
         };
         VmDasBeingResetEventReasonCode: {
            "vmtoolsHeartbeatFailure": string;
            "appHeartbeatFailure": string;
            "appImmediateResetRequest": string;
         };
         VmDasBeingResetEvent: {
            (options?: integrityService.vim.VmDasBeingResetEvent): integrityService.vim.VmDasBeingResetEvent;
         };
         VmDasResetFailedEvent: {
            (options?: integrityService.vim.VmDasResetFailedEvent): integrityService.vim.VmDasResetFailedEvent;
         };
         VmMaxRestartCountReached: {
            (options?: integrityService.vim.VmMaxRestartCountReached): integrityService.vim.VmMaxRestartCountReached;
         };
         VmMaxFTRestartCountReached: {
            (options?: integrityService.vim.VmMaxFTRestartCountReached): integrityService.vim.VmMaxFTRestartCountReached;
         };
         VmDasBeingResetWithScreenshotEvent: {
            (options?: integrityService.vim.VmDasBeingResetWithScreenshotEvent): integrityService.vim.VmDasBeingResetWithScreenshotEvent;
         };
         NotEnoughResourcesToStartVmEvent: {
            (options?: integrityService.vim.NotEnoughResourcesToStartVmEvent): integrityService.vim.NotEnoughResourcesToStartVmEvent;
         };
         VmUuidAssignedEvent: {
            (options?: integrityService.vim.VmUuidAssignedEvent): integrityService.vim.VmUuidAssignedEvent;
         };
         VmInstanceUuidAssignedEvent: {
            (options?: integrityService.vim.VmInstanceUuidAssignedEvent): integrityService.vim.VmInstanceUuidAssignedEvent;
         };
         VmUuidChangedEvent: {
            (options?: integrityService.vim.VmUuidChangedEvent): integrityService.vim.VmUuidChangedEvent;
         };
         VmInstanceUuidChangedEvent: {
            (options?: integrityService.vim.VmInstanceUuidChangedEvent): integrityService.vim.VmInstanceUuidChangedEvent;
         };
         VmWwnConflictEvent: {
            (options?: integrityService.vim.VmWwnConflictEvent): integrityService.vim.VmWwnConflictEvent;
         };
         VmAcquiredMksTicketEvent: {
            (options?: integrityService.vim.VmAcquiredMksTicketEvent): integrityService.vim.VmAcquiredMksTicketEvent;
         };
         VmAcquiredTicketEvent: {
            (options?: integrityService.vim.VmAcquiredTicketEvent): integrityService.vim.VmAcquiredTicketEvent;
         };
         HostWwnConflictEvent: {
            (options?: integrityService.vim.HostWwnConflictEvent): integrityService.vim.HostWwnConflictEvent;
         };
         VmWwnAssignedEvent: {
            (options?: integrityService.vim.VmWwnAssignedEvent): integrityService.vim.VmWwnAssignedEvent;
         };
         VmWwnChangedEvent: {
            (options?: integrityService.vim.VmWwnChangedEvent): integrityService.vim.VmWwnChangedEvent;
         };
         VmSecondaryAddedEvent: {
            (options?: integrityService.vim.VmSecondaryAddedEvent): integrityService.vim.VmSecondaryAddedEvent;
         };
         VmFaultToleranceTurnedOffEvent: {
            (options?: integrityService.vim.VmFaultToleranceTurnedOffEvent): integrityService.vim.VmFaultToleranceTurnedOffEvent;
         };
         VmFaultToleranceStateChangedEvent: {
            (options?: integrityService.vim.VmFaultToleranceStateChangedEvent): integrityService.vim.VmFaultToleranceStateChangedEvent;
         };
         VmSecondaryDisabledEvent: {
            (options?: integrityService.vim.VmSecondaryDisabledEvent): integrityService.vim.VmSecondaryDisabledEvent;
         };
         VmSecondaryDisabledBySystemEvent: {
            (options?: integrityService.vim.VmSecondaryDisabledBySystemEvent): integrityService.vim.VmSecondaryDisabledBySystemEvent;
         };
         VmSecondaryEnabledEvent: {
            (options?: integrityService.vim.VmSecondaryEnabledEvent): integrityService.vim.VmSecondaryEnabledEvent;
         };
         VmStartingSecondaryEvent: {
            (options?: integrityService.vim.VmStartingSecondaryEvent): integrityService.vim.VmStartingSecondaryEvent;
         };
         VmSecondaryStartedEvent: {
            (options?: integrityService.vim.VmSecondaryStartedEvent): integrityService.vim.VmSecondaryStartedEvent;
         };
         VmFailedUpdatingSecondaryConfig: {
            (options?: integrityService.vim.VmFailedUpdatingSecondaryConfig): integrityService.vim.VmFailedUpdatingSecondaryConfig;
         };
         VmFailedStartingSecondaryEventFailureReason: {
            "incompatibleHost": string;
            "loginFailed": string;
            "registerVmFailed": string;
            "migrateFailed": string;
         };
         VmFailedStartingSecondaryEvent: {
            (options?: integrityService.vim.VmFailedStartingSecondaryEvent): integrityService.vim.VmFailedStartingSecondaryEvent;
         };
         VmTimedoutStartingSecondaryEvent: {
            (options?: integrityService.vim.VmTimedoutStartingSecondaryEvent): integrityService.vim.VmTimedoutStartingSecondaryEvent;
         };
         VmNoCompatibleHostForSecondaryEvent: {
            (options?: integrityService.vim.VmNoCompatibleHostForSecondaryEvent): integrityService.vim.VmNoCompatibleHostForSecondaryEvent;
         };
         VmPrimaryFailoverEvent: {
            (options?: integrityService.vim.VmPrimaryFailoverEvent): integrityService.vim.VmPrimaryFailoverEvent;
         };
         VmFaultToleranceVmTerminatedEvent: {
            (options?: integrityService.vim.VmFaultToleranceVmTerminatedEvent): integrityService.vim.VmFaultToleranceVmTerminatedEvent;
         };
         HostWwnChangedEvent: {
            (options?: integrityService.vim.HostWwnChangedEvent): integrityService.vim.HostWwnChangedEvent;
         };
         HostAdminDisableEvent: {
            (options?: integrityService.vim.HostAdminDisableEvent): integrityService.vim.HostAdminDisableEvent;
         };
         HostAdminEnableEvent: {
            (options?: integrityService.vim.HostAdminEnableEvent): integrityService.vim.HostAdminEnableEvent;
         };
         HostEnableAdminFailedEvent: {
            (options?: integrityService.vim.HostEnableAdminFailedEvent): integrityService.vim.HostEnableAdminFailedEvent;
         };
         VmFailedRelayoutOnVmfs2DatastoreEvent: {
            (options?: integrityService.vim.VmFailedRelayoutOnVmfs2DatastoreEvent): integrityService.vim.VmFailedRelayoutOnVmfs2DatastoreEvent;
         };
         VmFailedRelayoutEvent: {
            (options?: integrityService.vim.VmFailedRelayoutEvent): integrityService.vim.VmFailedRelayoutEvent;
         };
         VmRelayoutSuccessfulEvent: {
            (options?: integrityService.vim.VmRelayoutSuccessfulEvent): integrityService.vim.VmRelayoutSuccessfulEvent;
         };
         VmRelayoutUpToDateEvent: {
            (options?: integrityService.vim.VmRelayoutUpToDateEvent): integrityService.vim.VmRelayoutUpToDateEvent;
         };
         VmConnectedEvent: {
            (options?: integrityService.vim.VmConnectedEvent): integrityService.vim.VmConnectedEvent;
         };
         VmPoweringOnWithCustomizedDVPortEvent: {
            (options?: integrityService.vim.VmPoweringOnWithCustomizedDVPortEvent): integrityService.vim.VmPoweringOnWithCustomizedDVPortEvent;
         };
         VmDasUpdateErrorEvent: {
            (options?: integrityService.vim.VmDasUpdateErrorEvent): integrityService.vim.VmDasUpdateErrorEvent;
         };
         NoMaintenanceModeDrsRecommendationForVM: {
            (options?: integrityService.vim.NoMaintenanceModeDrsRecommendationForVM): integrityService.vim.NoMaintenanceModeDrsRecommendationForVM;
         };
         VmDasUpdateOkEvent: {
            (options?: integrityService.vim.VmDasUpdateOkEvent): integrityService.vim.VmDasUpdateOkEvent;
         };
         ScheduledTaskEvent: {
            (options?: integrityService.vim.ScheduledTaskEvent): integrityService.vim.ScheduledTaskEvent;
         };
         ScheduledTaskCreatedEvent: {
            (options?: integrityService.vim.ScheduledTaskCreatedEvent): integrityService.vim.ScheduledTaskCreatedEvent;
         };
         ScheduledTaskStartedEvent: {
            (options?: integrityService.vim.ScheduledTaskStartedEvent): integrityService.vim.ScheduledTaskStartedEvent;
         };
         ScheduledTaskRemovedEvent: {
            (options?: integrityService.vim.ScheduledTaskRemovedEvent): integrityService.vim.ScheduledTaskRemovedEvent;
         };
         ScheduledTaskReconfiguredEvent: {
            (options?: integrityService.vim.ScheduledTaskReconfiguredEvent): integrityService.vim.ScheduledTaskReconfiguredEvent;
         };
         ScheduledTaskCompletedEvent: {
            (options?: integrityService.vim.ScheduledTaskCompletedEvent): integrityService.vim.ScheduledTaskCompletedEvent;
         };
         ScheduledTaskFailedEvent: {
            (options?: integrityService.vim.ScheduledTaskFailedEvent): integrityService.vim.ScheduledTaskFailedEvent;
         };
         ScheduledTaskEmailCompletedEvent: {
            (options?: integrityService.vim.ScheduledTaskEmailCompletedEvent): integrityService.vim.ScheduledTaskEmailCompletedEvent;
         };
         ScheduledTaskEmailFailedEvent: {
            (options?: integrityService.vim.ScheduledTaskEmailFailedEvent): integrityService.vim.ScheduledTaskEmailFailedEvent;
         };
         AlarmEvent: {
            (options?: integrityService.vim.AlarmEvent): integrityService.vim.AlarmEvent;
         };
         AlarmCreatedEvent: {
            (options?: integrityService.vim.AlarmCreatedEvent): integrityService.vim.AlarmCreatedEvent;
         };
         AlarmStatusChangedEvent: {
            (options?: integrityService.vim.AlarmStatusChangedEvent): integrityService.vim.AlarmStatusChangedEvent;
         };
         AlarmActionTriggeredEvent: {
            (options?: integrityService.vim.AlarmActionTriggeredEvent): integrityService.vim.AlarmActionTriggeredEvent;
         };
         AlarmEmailCompletedEvent: {
            (options?: integrityService.vim.AlarmEmailCompletedEvent): integrityService.vim.AlarmEmailCompletedEvent;
         };
         AlarmEmailFailedEvent: {
            (options?: integrityService.vim.AlarmEmailFailedEvent): integrityService.vim.AlarmEmailFailedEvent;
         };
         AlarmSnmpCompletedEvent: {
            (options?: integrityService.vim.AlarmSnmpCompletedEvent): integrityService.vim.AlarmSnmpCompletedEvent;
         };
         AlarmSnmpFailedEvent: {
            (options?: integrityService.vim.AlarmSnmpFailedEvent): integrityService.vim.AlarmSnmpFailedEvent;
         };
         AlarmScriptCompleteEvent: {
            (options?: integrityService.vim.AlarmScriptCompleteEvent): integrityService.vim.AlarmScriptCompleteEvent;
         };
         AlarmScriptFailedEvent: {
            (options?: integrityService.vim.AlarmScriptFailedEvent): integrityService.vim.AlarmScriptFailedEvent;
         };
         AlarmRemovedEvent: {
            (options?: integrityService.vim.AlarmRemovedEvent): integrityService.vim.AlarmRemovedEvent;
         };
         AlarmReconfiguredEvent: {
            (options?: integrityService.vim.AlarmReconfiguredEvent): integrityService.vim.AlarmReconfiguredEvent;
         };
         AlarmAcknowledgedEvent: {
            (options?: integrityService.vim.AlarmAcknowledgedEvent): integrityService.vim.AlarmAcknowledgedEvent;
         };
         AlarmClearedEvent: {
            (options?: integrityService.vim.AlarmClearedEvent): integrityService.vim.AlarmClearedEvent;
         };
         CustomFieldEvent: {
            (options?: integrityService.vim.CustomFieldEvent): integrityService.vim.CustomFieldEvent;
         };
         CustomFieldDefEvent: {
            (options?: integrityService.vim.CustomFieldDefEvent): integrityService.vim.CustomFieldDefEvent;
         };
         CustomFieldDefAddedEvent: {
            (options?: integrityService.vim.CustomFieldDefAddedEvent): integrityService.vim.CustomFieldDefAddedEvent;
         };
         CustomFieldDefRemovedEvent: {
            (options?: integrityService.vim.CustomFieldDefRemovedEvent): integrityService.vim.CustomFieldDefRemovedEvent;
         };
         CustomFieldDefRenamedEvent: {
            (options?: integrityService.vim.CustomFieldDefRenamedEvent): integrityService.vim.CustomFieldDefRenamedEvent;
         };
         CustomFieldValueChangedEvent: {
            (options?: integrityService.vim.CustomFieldValueChangedEvent): integrityService.vim.CustomFieldValueChangedEvent;
         };
         AuthorizationEvent: {
            (options?: integrityService.vim.AuthorizationEvent): integrityService.vim.AuthorizationEvent;
         };
         PermissionEvent: {
            (options?: integrityService.vim.PermissionEvent): integrityService.vim.PermissionEvent;
         };
         PermissionAddedEvent: {
            (options?: integrityService.vim.PermissionAddedEvent): integrityService.vim.PermissionAddedEvent;
         };
         PermissionUpdatedEvent: {
            (options?: integrityService.vim.PermissionUpdatedEvent): integrityService.vim.PermissionUpdatedEvent;
         };
         PermissionRemovedEvent: {
            (options?: integrityService.vim.PermissionRemovedEvent): integrityService.vim.PermissionRemovedEvent;
         };
         RoleEvent: {
            (options?: integrityService.vim.RoleEvent): integrityService.vim.RoleEvent;
         };
         RoleAddedEvent: {
            (options?: integrityService.vim.RoleAddedEvent): integrityService.vim.RoleAddedEvent;
         };
         RoleUpdatedEvent: {
            (options?: integrityService.vim.RoleUpdatedEvent): integrityService.vim.RoleUpdatedEvent;
         };
         RoleRemovedEvent: {
            (options?: integrityService.vim.RoleRemovedEvent): integrityService.vim.RoleRemovedEvent;
         };
         DatastoreEvent: {
            (options?: integrityService.vim.DatastoreEvent): integrityService.vim.DatastoreEvent;
         };
         DatastoreDestroyedEvent: {
            (options?: integrityService.vim.DatastoreDestroyedEvent): integrityService.vim.DatastoreDestroyedEvent;
         };
         DatastoreRenamedEvent: {
            (options?: integrityService.vim.DatastoreRenamedEvent): integrityService.vim.DatastoreRenamedEvent;
         };
         DatastoreCapacityIncreasedEvent: {
            (options?: integrityService.vim.DatastoreCapacityIncreasedEvent): integrityService.vim.DatastoreCapacityIncreasedEvent;
         };
         DatastoreDuplicatedEvent: {
            (options?: integrityService.vim.DatastoreDuplicatedEvent): integrityService.vim.DatastoreDuplicatedEvent;
         };
         DatastoreFileEvent: {
            (options?: integrityService.vim.DatastoreFileEvent): integrityService.vim.DatastoreFileEvent;
         };
         DatastoreFileCopiedEvent: {
            (options?: integrityService.vim.DatastoreFileCopiedEvent): integrityService.vim.DatastoreFileCopiedEvent;
         };
         DatastoreFileMovedEvent: {
            (options?: integrityService.vim.DatastoreFileMovedEvent): integrityService.vim.DatastoreFileMovedEvent;
         };
         DatastoreFileDeletedEvent: {
            (options?: integrityService.vim.DatastoreFileDeletedEvent): integrityService.vim.DatastoreFileDeletedEvent;
         };
         NonVIWorkloadDetectedOnDatastoreEvent: {
            (options?: integrityService.vim.NonVIWorkloadDetectedOnDatastoreEvent): integrityService.vim.NonVIWorkloadDetectedOnDatastoreEvent;
         };
         DatastoreIORMReconfiguredEvent: {
            (options?: integrityService.vim.DatastoreIORMReconfiguredEvent): integrityService.vim.DatastoreIORMReconfiguredEvent;
         };
         TaskEvent: {
            (options?: integrityService.vim.TaskEvent): integrityService.vim.TaskEvent;
         };
         TaskTimeoutEvent: {
            (options?: integrityService.vim.TaskTimeoutEvent): integrityService.vim.TaskTimeoutEvent;
         };
         LicenseEvent: {
            (options?: integrityService.vim.LicenseEvent): integrityService.vim.LicenseEvent;
         };
         ServerLicenseExpiredEvent: {
            (options?: integrityService.vim.ServerLicenseExpiredEvent): integrityService.vim.ServerLicenseExpiredEvent;
         };
         HostLicenseExpiredEvent: {
            (options?: integrityService.vim.HostLicenseExpiredEvent): integrityService.vim.HostLicenseExpiredEvent;
         };
         VMotionLicenseExpiredEvent: {
            (options?: integrityService.vim.VMotionLicenseExpiredEvent): integrityService.vim.VMotionLicenseExpiredEvent;
         };
         NoLicenseEvent: {
            (options?: integrityService.vim.NoLicenseEvent): integrityService.vim.NoLicenseEvent;
         };
         LicenseServerUnavailableEvent: {
            (options?: integrityService.vim.LicenseServerUnavailableEvent): integrityService.vim.LicenseServerUnavailableEvent;
         };
         LicenseServerAvailableEvent: {
            (options?: integrityService.vim.LicenseServerAvailableEvent): integrityService.vim.LicenseServerAvailableEvent;
         };
         LicenseExpiredEvent: {
            (options?: integrityService.vim.LicenseExpiredEvent): integrityService.vim.LicenseExpiredEvent;
         };
         InvalidEditionEvent: {
            (options?: integrityService.vim.InvalidEditionEvent): integrityService.vim.InvalidEditionEvent;
         };
         HostInventoryFullEvent: {
            (options?: integrityService.vim.HostInventoryFullEvent): integrityService.vim.HostInventoryFullEvent;
         };
         LicenseRestrictedEvent: {
            (options?: integrityService.vim.LicenseRestrictedEvent): integrityService.vim.LicenseRestrictedEvent;
         };
         IncorrectHostInformationEvent: {
            (options?: integrityService.vim.IncorrectHostInformationEvent): integrityService.vim.IncorrectHostInformationEvent;
         };
         UnlicensedVirtualMachinesEvent: {
            (options?: integrityService.vim.UnlicensedVirtualMachinesEvent): integrityService.vim.UnlicensedVirtualMachinesEvent;
         };
         UnlicensedVirtualMachinesFoundEvent: {
            (options?: integrityService.vim.UnlicensedVirtualMachinesFoundEvent): integrityService.vim.UnlicensedVirtualMachinesFoundEvent;
         };
         AllVirtualMachinesLicensedEvent: {
            (options?: integrityService.vim.AllVirtualMachinesLicensedEvent): integrityService.vim.AllVirtualMachinesLicensedEvent;
         };
         LicenseNonComplianceEvent: {
            (options?: integrityService.vim.LicenseNonComplianceEvent): integrityService.vim.LicenseNonComplianceEvent;
         };
         MigrationEvent: {
            (options?: integrityService.vim.MigrationEvent): integrityService.vim.MigrationEvent;
         };
         MigrationWarningEvent: {
            (options?: integrityService.vim.MigrationWarningEvent): integrityService.vim.MigrationWarningEvent;
         };
         MigrationErrorEvent: {
            (options?: integrityService.vim.MigrationErrorEvent): integrityService.vim.MigrationErrorEvent;
         };
         MigrationHostWarningEvent: {
            (options?: integrityService.vim.MigrationHostWarningEvent): integrityService.vim.MigrationHostWarningEvent;
         };
         MigrationHostErrorEvent: {
            (options?: integrityService.vim.MigrationHostErrorEvent): integrityService.vim.MigrationHostErrorEvent;
         };
         MigrationResourceWarningEvent: {
            (options?: integrityService.vim.MigrationResourceWarningEvent): integrityService.vim.MigrationResourceWarningEvent;
         };
         MigrationResourceErrorEvent: {
            (options?: integrityService.vim.MigrationResourceErrorEvent): integrityService.vim.MigrationResourceErrorEvent;
         };
         ClusterEvent: {
            (options?: integrityService.vim.ClusterEvent): integrityService.vim.ClusterEvent;
         };
         DasEnabledEvent: {
            (options?: integrityService.vim.DasEnabledEvent): integrityService.vim.DasEnabledEvent;
         };
         DasDisabledEvent: {
            (options?: integrityService.vim.DasDisabledEvent): integrityService.vim.DasDisabledEvent;
         };
         DasAdmissionControlDisabledEvent: {
            (options?: integrityService.vim.DasAdmissionControlDisabledEvent): integrityService.vim.DasAdmissionControlDisabledEvent;
         };
         DasAdmissionControlEnabledEvent: {
            (options?: integrityService.vim.DasAdmissionControlEnabledEvent): integrityService.vim.DasAdmissionControlEnabledEvent;
         };
         DasHostFailedEvent: {
            (options?: integrityService.vim.DasHostFailedEvent): integrityService.vim.DasHostFailedEvent;
         };
         DasHostIsolatedEvent: {
            (options?: integrityService.vim.DasHostIsolatedEvent): integrityService.vim.DasHostIsolatedEvent;
         };
         DasClusterIsolatedEvent: {
            (options?: integrityService.vim.DasClusterIsolatedEvent): integrityService.vim.DasClusterIsolatedEvent;
         };
         DasAgentUnavailableEvent: {
            (options?: integrityService.vim.DasAgentUnavailableEvent): integrityService.vim.DasAgentUnavailableEvent;
         };
         DasAgentFoundEvent: {
            (options?: integrityService.vim.DasAgentFoundEvent): integrityService.vim.DasAgentFoundEvent;
         };
         InsufficientFailoverResourcesEvent: {
            (options?: integrityService.vim.InsufficientFailoverResourcesEvent): integrityService.vim.InsufficientFailoverResourcesEvent;
         };
         FailoverLevelRestored: {
            (options?: integrityService.vim.FailoverLevelRestored): integrityService.vim.FailoverLevelRestored;
         };
         ClusterOvercommittedEvent: {
            (options?: integrityService.vim.ClusterOvercommittedEvent): integrityService.vim.ClusterOvercommittedEvent;
         };
         HostOvercommittedEvent: {
            (options?: integrityService.vim.HostOvercommittedEvent): integrityService.vim.HostOvercommittedEvent;
         };
         ClusterStatusChangedEvent: {
            (options?: integrityService.vim.ClusterStatusChangedEvent): integrityService.vim.ClusterStatusChangedEvent;
         };
         HostStatusChangedEvent: {
            (options?: integrityService.vim.HostStatusChangedEvent): integrityService.vim.HostStatusChangedEvent;
         };
         ClusterCreatedEvent: {
            (options?: integrityService.vim.ClusterCreatedEvent): integrityService.vim.ClusterCreatedEvent;
         };
         ClusterDestroyedEvent: {
            (options?: integrityService.vim.ClusterDestroyedEvent): integrityService.vim.ClusterDestroyedEvent;
         };
         DrsEnabledEvent: {
            (options?: integrityService.vim.DrsEnabledEvent): integrityService.vim.DrsEnabledEvent;
         };
         DrsDisabledEvent: {
            (options?: integrityService.vim.DrsDisabledEvent): integrityService.vim.DrsDisabledEvent;
         };
         ClusterReconfiguredEvent: {
            (options?: integrityService.vim.ClusterReconfiguredEvent): integrityService.vim.ClusterReconfiguredEvent;
         };
         HostMonitoringStateChangedEvent: {
            (options?: integrityService.vim.HostMonitoringStateChangedEvent): integrityService.vim.HostMonitoringStateChangedEvent;
         };
         VmHealthMonitoringStateChangedEvent: {
            (options?: integrityService.vim.VmHealthMonitoringStateChangedEvent): integrityService.vim.VmHealthMonitoringStateChangedEvent;
         };
         ResourcePoolEvent: {
            (options?: integrityService.vim.ResourcePoolEvent): integrityService.vim.ResourcePoolEvent;
         };
         ResourcePoolCreatedEvent: {
            (options?: integrityService.vim.ResourcePoolCreatedEvent): integrityService.vim.ResourcePoolCreatedEvent;
         };
         ResourcePoolDestroyedEvent: {
            (options?: integrityService.vim.ResourcePoolDestroyedEvent): integrityService.vim.ResourcePoolDestroyedEvent;
         };
         ResourcePoolMovedEvent: {
            (options?: integrityService.vim.ResourcePoolMovedEvent): integrityService.vim.ResourcePoolMovedEvent;
         };
         ResourcePoolReconfiguredEvent: {
            (options?: integrityService.vim.ResourcePoolReconfiguredEvent): integrityService.vim.ResourcePoolReconfiguredEvent;
         };
         ResourceViolatedEvent: {
            (options?: integrityService.vim.ResourceViolatedEvent): integrityService.vim.ResourceViolatedEvent;
         };
         VmResourcePoolMovedEvent: {
            (options?: integrityService.vim.VmResourcePoolMovedEvent): integrityService.vim.VmResourcePoolMovedEvent;
         };
         TemplateUpgradeEvent: {
            (options?: integrityService.vim.TemplateUpgradeEvent): integrityService.vim.TemplateUpgradeEvent;
         };
         TemplateBeingUpgradedEvent: {
            (options?: integrityService.vim.TemplateBeingUpgradedEvent): integrityService.vim.TemplateBeingUpgradedEvent;
         };
         TemplateUpgradeFailedEvent: {
            (options?: integrityService.vim.TemplateUpgradeFailedEvent): integrityService.vim.TemplateUpgradeFailedEvent;
         };
         TemplateUpgradedEvent: {
            (options?: integrityService.vim.TemplateUpgradedEvent): integrityService.vim.TemplateUpgradedEvent;
         };
         CustomizationEvent: {
            (options?: integrityService.vim.CustomizationEvent): integrityService.vim.CustomizationEvent;
         };
         CustomizationStartedEvent: {
            (options?: integrityService.vim.CustomizationStartedEvent): integrityService.vim.CustomizationStartedEvent;
         };
         CustomizationSucceeded: {
            (options?: integrityService.vim.CustomizationSucceeded): integrityService.vim.CustomizationSucceeded;
         };
         CustomizationFailed: {
            (options?: integrityService.vim.CustomizationFailed): integrityService.vim.CustomizationFailed;
         };
         CustomizationUnknownFailure: {
            (options?: integrityService.vim.CustomizationUnknownFailure): integrityService.vim.CustomizationUnknownFailure;
         };
         CustomizationSysprepFailed: {
            (options?: integrityService.vim.CustomizationSysprepFailed): integrityService.vim.CustomizationSysprepFailed;
         };
         CustomizationLinuxIdentityFailed: {
            (options?: integrityService.vim.CustomizationLinuxIdentityFailed): integrityService.vim.CustomizationLinuxIdentityFailed;
         };
         CustomizationNetworkSetupFailed: {
            (options?: integrityService.vim.CustomizationNetworkSetupFailed): integrityService.vim.CustomizationNetworkSetupFailed;
         };
         LockerMisconfiguredEvent: {
            (options?: integrityService.vim.LockerMisconfiguredEvent): integrityService.vim.LockerMisconfiguredEvent;
         };
         LockerReconfiguredEvent: {
            (options?: integrityService.vim.LockerReconfiguredEvent): integrityService.vim.LockerReconfiguredEvent;
         };
         NoDatastoresConfiguredEvent: {
            (options?: integrityService.vim.NoDatastoresConfiguredEvent): integrityService.vim.NoDatastoresConfiguredEvent;
         };
         AdminPasswordNotChangedEvent: {
            (options?: integrityService.vim.AdminPasswordNotChangedEvent): integrityService.vim.AdminPasswordNotChangedEvent;
         };
         HostInAuditModeEvent: {
            (options?: integrityService.vim.HostInAuditModeEvent): integrityService.vim.HostInAuditModeEvent;
         };
         LocalTSMEnabledEvent: {
            (options?: integrityService.vim.LocalTSMEnabledEvent): integrityService.vim.LocalTSMEnabledEvent;
         };
         RemoteTSMEnabledEvent: {
            (options?: integrityService.vim.RemoteTSMEnabledEvent): integrityService.vim.RemoteTSMEnabledEvent;
         };
         VimAccountPasswordChangedEvent: {
            (options?: integrityService.vim.VimAccountPasswordChangedEvent): integrityService.vim.VimAccountPasswordChangedEvent;
         };
         IScsiBootFailureEvent: {
            (options?: integrityService.vim.IScsiBootFailureEvent): integrityService.vim.IScsiBootFailureEvent;
         };
         DvsHealthStatusChangeEvent: {
            (options?: integrityService.vim.DvsHealthStatusChangeEvent): integrityService.vim.DvsHealthStatusChangeEvent;
         };
         NetworkRollbackEvent: {
            (options?: integrityService.vim.NetworkRollbackEvent): integrityService.vim.NetworkRollbackEvent;
         };
         UplinkPortVlanTrunkedEvent: {
            (options?: integrityService.vim.UplinkPortVlanTrunkedEvent): integrityService.vim.UplinkPortVlanTrunkedEvent;
         };
         UplinkPortVlanUntrunkedEvent: {
            (options?: integrityService.vim.UplinkPortVlanUntrunkedEvent): integrityService.vim.UplinkPortVlanUntrunkedEvent;
         };
         MtuMatchEvent: {
            (options?: integrityService.vim.MtuMatchEvent): integrityService.vim.MtuMatchEvent;
         };
         MtuMismatchEvent: {
            (options?: integrityService.vim.MtuMismatchEvent): integrityService.vim.MtuMismatchEvent;
         };
         UplinkPortMtuNotSupportEvent: {
            (options?: integrityService.vim.UplinkPortMtuNotSupportEvent): integrityService.vim.UplinkPortMtuNotSupportEvent;
         };
         UplinkPortMtuSupportEvent: {
            (options?: integrityService.vim.UplinkPortMtuSupportEvent): integrityService.vim.UplinkPortMtuSupportEvent;
         };
         TeamingMatchEvent: {
            (options?: integrityService.vim.TeamingMatchEvent): integrityService.vim.TeamingMatchEvent;
         };
         TeamingMisMatchEvent: {
            (options?: integrityService.vim.TeamingMisMatchEvent): integrityService.vim.TeamingMisMatchEvent;
         };
         DvsEvent: {
            (options?: integrityService.vim.DvsEvent): integrityService.vim.DvsEvent;
         };
         DvsCreatedEvent: {
            (options?: integrityService.vim.DvsCreatedEvent): integrityService.vim.DvsCreatedEvent;
         };
         DvsRenamedEvent: {
            (options?: integrityService.vim.DvsRenamedEvent): integrityService.vim.DvsRenamedEvent;
         };
         DvsReconfiguredEvent: {
            (options?: integrityService.vim.DvsReconfiguredEvent): integrityService.vim.DvsReconfiguredEvent;
         };
         DvsUpgradeAvailableEvent: {
            (options?: integrityService.vim.DvsUpgradeAvailableEvent): integrityService.vim.DvsUpgradeAvailableEvent;
         };
         DvsUpgradeInProgressEvent: {
            (options?: integrityService.vim.DvsUpgradeInProgressEvent): integrityService.vim.DvsUpgradeInProgressEvent;
         };
         DvsUpgradeRejectedEvent: {
            (options?: integrityService.vim.DvsUpgradeRejectedEvent): integrityService.vim.DvsUpgradeRejectedEvent;
         };
         DvsUpgradedEvent: {
            (options?: integrityService.vim.DvsUpgradedEvent): integrityService.vim.DvsUpgradedEvent;
         };
         DvsHostJoinedEvent: {
            (options?: integrityService.vim.DvsHostJoinedEvent): integrityService.vim.DvsHostJoinedEvent;
         };
         DvsHostLeftEvent: {
            (options?: integrityService.vim.DvsHostLeftEvent): integrityService.vim.DvsHostLeftEvent;
         };
         DvsOutOfSyncHostArgument: {
            (options?: integrityService.vim.DvsOutOfSyncHostArgument): integrityService.vim.DvsOutOfSyncHostArgument;
         };
         ArrayOfDvsOutOfSyncHostArgument: {
            (options?: integrityService.vim.ArrayOfDvsOutOfSyncHostArgument): integrityService.vim.ArrayOfDvsOutOfSyncHostArgument;
         };
         OutOfSyncDvsHost: {
            (options?: integrityService.vim.OutOfSyncDvsHost): integrityService.vim.OutOfSyncDvsHost;
         };
         DvsHostWentOutOfSyncEvent: {
            (options?: integrityService.vim.DvsHostWentOutOfSyncEvent): integrityService.vim.DvsHostWentOutOfSyncEvent;
         };
         DvsHostBackInSyncEvent: {
            (options?: integrityService.vim.DvsHostBackInSyncEvent): integrityService.vim.DvsHostBackInSyncEvent;
         };
         DvsHostStatusUpdated: {
            (options?: integrityService.vim.DvsHostStatusUpdated): integrityService.vim.DvsHostStatusUpdated;
         };
         DvsPortCreatedEvent: {
            (options?: integrityService.vim.DvsPortCreatedEvent): integrityService.vim.DvsPortCreatedEvent;
         };
         DvsPortReconfiguredEvent: {
            (options?: integrityService.vim.DvsPortReconfiguredEvent): integrityService.vim.DvsPortReconfiguredEvent;
         };
         DvsPortDeletedEvent: {
            (options?: integrityService.vim.DvsPortDeletedEvent): integrityService.vim.DvsPortDeletedEvent;
         };
         DvsPortConnectedEvent: {
            (options?: integrityService.vim.DvsPortConnectedEvent): integrityService.vim.DvsPortConnectedEvent;
         };
         DvsPortDisconnectedEvent: {
            (options?: integrityService.vim.DvsPortDisconnectedEvent): integrityService.vim.DvsPortDisconnectedEvent;
         };
         DvsPortVendorSpecificStateChangeEvent: {
            (options?: integrityService.vim.DvsPortVendorSpecificStateChangeEvent): integrityService.vim.DvsPortVendorSpecificStateChangeEvent;
         };
         DvsPortRuntimeChangeEvent: {
            (options?: integrityService.vim.DvsPortRuntimeChangeEvent): integrityService.vim.DvsPortRuntimeChangeEvent;
         };
         DvsPortLinkUpEvent: {
            (options?: integrityService.vim.DvsPortLinkUpEvent): integrityService.vim.DvsPortLinkUpEvent;
         };
         DvsPortLinkDownEvent: {
            (options?: integrityService.vim.DvsPortLinkDownEvent): integrityService.vim.DvsPortLinkDownEvent;
         };
         DvsPortJoinPortgroupEvent: {
            (options?: integrityService.vim.DvsPortJoinPortgroupEvent): integrityService.vim.DvsPortJoinPortgroupEvent;
         };
         DvsPortLeavePortgroupEvent: {
            (options?: integrityService.vim.DvsPortLeavePortgroupEvent): integrityService.vim.DvsPortLeavePortgroupEvent;
         };
         DvsPortBlockedEvent: {
            (options?: integrityService.vim.DvsPortBlockedEvent): integrityService.vim.DvsPortBlockedEvent;
         };
         DvsPortUnblockedEvent: {
            (options?: integrityService.vim.DvsPortUnblockedEvent): integrityService.vim.DvsPortUnblockedEvent;
         };
         DvsPortEnteredPassthruEvent: {
            (options?: integrityService.vim.DvsPortEnteredPassthruEvent): integrityService.vim.DvsPortEnteredPassthruEvent;
         };
         DvsPortExitedPassthruEvent: {
            (options?: integrityService.vim.DvsPortExitedPassthruEvent): integrityService.vim.DvsPortExitedPassthruEvent;
         };
         DvsDestroyedEvent: {
            (options?: integrityService.vim.DvsDestroyedEvent): integrityService.vim.DvsDestroyedEvent;
         };
         DvsMergedEvent: {
            (options?: integrityService.vim.DvsMergedEvent): integrityService.vim.DvsMergedEvent;
         };
         HostLocalPortCreatedEvent: {
            (options?: integrityService.vim.HostLocalPortCreatedEvent): integrityService.vim.HostLocalPortCreatedEvent;
         };
         RollbackEvent: {
            (options?: integrityService.vim.RollbackEvent): integrityService.vim.RollbackEvent;
         };
         RecoveryEvent: {
            (options?: integrityService.vim.RecoveryEvent): integrityService.vim.RecoveryEvent;
         };
         DvsImportEvent: {
            (options?: integrityService.vim.DvsImportEvent): integrityService.vim.DvsImportEvent;
         };
         DvsRestoreEvent: {
            (options?: integrityService.vim.DvsRestoreEvent): integrityService.vim.DvsRestoreEvent;
         };
         DVPortgroupEvent: {
            (options?: integrityService.vim.DVPortgroupEvent): integrityService.vim.DVPortgroupEvent;
         };
         DVPortgroupCreatedEvent: {
            (options?: integrityService.vim.DVPortgroupCreatedEvent): integrityService.vim.DVPortgroupCreatedEvent;
         };
         DVPortgroupRenamedEvent: {
            (options?: integrityService.vim.DVPortgroupRenamedEvent): integrityService.vim.DVPortgroupRenamedEvent;
         };
         DVPortgroupReconfiguredEvent: {
            (options?: integrityService.vim.DVPortgroupReconfiguredEvent): integrityService.vim.DVPortgroupReconfiguredEvent;
         };
         DVPortgroupDestroyedEvent: {
            (options?: integrityService.vim.DVPortgroupDestroyedEvent): integrityService.vim.DVPortgroupDestroyedEvent;
         };
         DvpgImportEvent: {
            (options?: integrityService.vim.DvpgImportEvent): integrityService.vim.DvpgImportEvent;
         };
         DvpgRestoreEvent: {
            (options?: integrityService.vim.DvpgRestoreEvent): integrityService.vim.DvpgRestoreEvent;
         };
         DrsInvocationFailedEvent: {
            (options?: integrityService.vim.DrsInvocationFailedEvent): integrityService.vim.DrsInvocationFailedEvent;
         };
         DrsRecoveredFromFailureEvent: {
            (options?: integrityService.vim.DrsRecoveredFromFailureEvent): integrityService.vim.DrsRecoveredFromFailureEvent;
         };
         VmReloadFromPathEvent: {
            (options?: integrityService.vim.VmReloadFromPathEvent): integrityService.vim.VmReloadFromPathEvent;
         };
         VmReloadFromPathFailedEvent: {
            (options?: integrityService.vim.VmReloadFromPathFailedEvent): integrityService.vim.VmReloadFromPathFailedEvent;
         };
         VmRequirementsExceedCurrentEVCModeEvent: {
            (options?: integrityService.vim.VmRequirementsExceedCurrentEVCModeEvent): integrityService.vim.VmRequirementsExceedCurrentEVCModeEvent;
         };
         EventArgument: {
            (options?: integrityService.vim.EventArgument): integrityService.vim.EventArgument;
         };
         RoleEventArgument: {
            (options?: integrityService.vim.RoleEventArgument): integrityService.vim.RoleEventArgument;
         };
         EntityEventArgument: {
            (options?: integrityService.vim.EntityEventArgument): integrityService.vim.EntityEventArgument;
         };
         ManagedEntityEventArgument: {
            (options?: integrityService.vim.ManagedEntityEventArgument): integrityService.vim.ManagedEntityEventArgument;
         };
         FolderEventArgument: {
            (options?: integrityService.vim.FolderEventArgument): integrityService.vim.FolderEventArgument;
         };
         DatacenterEventArgument: {
            (options?: integrityService.vim.DatacenterEventArgument): integrityService.vim.DatacenterEventArgument;
         };
         ComputeResourceEventArgument: {
            (options?: integrityService.vim.ComputeResourceEventArgument): integrityService.vim.ComputeResourceEventArgument;
         };
         ResourcePoolEventArgument: {
            (options?: integrityService.vim.ResourcePoolEventArgument): integrityService.vim.ResourcePoolEventArgument;
         };
         HostEventArgument: {
            (options?: integrityService.vim.HostEventArgument): integrityService.vim.HostEventArgument;
         };
         ArrayOfHostEventArgument: {
            (options?: integrityService.vim.ArrayOfHostEventArgument): integrityService.vim.ArrayOfHostEventArgument;
         };
         VmEventArgument: {
            (options?: integrityService.vim.VmEventArgument): integrityService.vim.VmEventArgument;
         };
         ArrayOfVmEventArgument: {
            (options?: integrityService.vim.ArrayOfVmEventArgument): integrityService.vim.ArrayOfVmEventArgument;
         };
         DatastoreEventArgument: {
            (options?: integrityService.vim.DatastoreEventArgument): integrityService.vim.DatastoreEventArgument;
         };
         NetworkEventArgument: {
            (options?: integrityService.vim.NetworkEventArgument): integrityService.vim.NetworkEventArgument;
         };
         AlarmEventArgument: {
            (options?: integrityService.vim.AlarmEventArgument): integrityService.vim.AlarmEventArgument;
         };
         ScheduledTaskEventArgument: {
            (options?: integrityService.vim.ScheduledTaskEventArgument): integrityService.vim.ScheduledTaskEventArgument;
         };
         ProfileEventArgument: {
            (options?: integrityService.vim.ProfileEventArgument): integrityService.vim.ProfileEventArgument;
         };
         DvsEventArgument: {
            (options?: integrityService.vim.DvsEventArgument): integrityService.vim.DvsEventArgument;
         };
         EventCategory: {
            "info": string;
            "warning": string;
            "error": string;
            "user": string;
         };
         EventArgDesc: {
            (options?: integrityService.vim.EventArgDesc): integrityService.vim.EventArgDesc;
         };
         ArrayOfEventArgDesc: {
            (options?: integrityService.vim.ArrayOfEventArgDesc): integrityService.vim.ArrayOfEventArgDesc;
         };
         EventDescriptionEventDetail: {
            (options?: integrityService.vim.EventDescriptionEventDetail): integrityService.vim.EventDescriptionEventDetail;
         };
         ArrayOfEventDescriptionEventDetail: {
            (options?: integrityService.vim.ArrayOfEventDescriptionEventDetail): integrityService.vim.ArrayOfEventDescriptionEventDetail;
         };
         EventDescription: {
            (options?: integrityService.vim.EventDescription): integrityService.vim.EventDescription;
         };
         EventEx: {
            (options?: integrityService.vim.EventEx): integrityService.vim.EventEx;
         };
         EventFilterSpecRecursionOption: {
            "self": string;
            "children": string;
            "all": string;
         };
         EventFilterSpecByEntity: {
            (options?: integrityService.vim.EventFilterSpecByEntity): integrityService.vim.EventFilterSpecByEntity;
         };
         EventFilterSpecByTime: {
            (options?: integrityService.vim.EventFilterSpecByTime): integrityService.vim.EventFilterSpecByTime;
         };
         EventFilterSpecByUsername: {
            (options?: integrityService.vim.EventFilterSpecByUsername): integrityService.vim.EventFilterSpecByUsername;
         };
         EventFilterSpec: {
            (options?: integrityService.vim.EventFilterSpec): integrityService.vim.EventFilterSpec;
         };
         ExtExtendedProductInfo: {
            (options?: integrityService.vim.ExtExtendedProductInfo): integrityService.vim.ExtExtendedProductInfo;
         };
         ManagedByInfo: {
            (options?: integrityService.vim.ManagedByInfo): integrityService.vim.ManagedByInfo;
         };
         ExtManagedEntityInfo: {
            (options?: integrityService.vim.ExtManagedEntityInfo): integrityService.vim.ExtManagedEntityInfo;
         };
         ArrayOfExtManagedEntityInfo: {
            (options?: integrityService.vim.ArrayOfExtManagedEntityInfo): integrityService.vim.ArrayOfExtManagedEntityInfo;
         };
         ExtSolutionManagerInfoTabInfo: {
            (options?: integrityService.vim.ExtSolutionManagerInfoTabInfo): integrityService.vim.ExtSolutionManagerInfoTabInfo;
         };
         ArrayOfExtSolutionManagerInfoTabInfo: {
            (options?: integrityService.vim.ArrayOfExtSolutionManagerInfoTabInfo): integrityService.vim.ArrayOfExtSolutionManagerInfoTabInfo;
         };
         ExtSolutionManagerInfo: {
            (options?: integrityService.vim.ExtSolutionManagerInfo): integrityService.vim.ExtSolutionManagerInfo;
         };
         ActiveDirectoryFault: {
            (options?: integrityService.vim.ActiveDirectoryFault): integrityService.vim.ActiveDirectoryFault;
         };
         AdminDisabled: {
            (options?: integrityService.vim.AdminDisabled): integrityService.vim.AdminDisabled;
         };
         AdminNotDisabled: {
            (options?: integrityService.vim.AdminNotDisabled): integrityService.vim.AdminNotDisabled;
         };
         AffinityType: {
            "memory": string;
            "cpu": string;
         };
         AffinityConfigured: {
            (options?: integrityService.vim.AffinityConfigured): integrityService.vim.AffinityConfigured;
         };
         AgentInstallFailedReason: {
            "NotEnoughSpaceOnDevice": string;
            "PrepareToUpgradeFailed": string;
            "AgentNotRunning": string;
            "AgentNotReachable": string;
            "InstallTimedout": string;
            "SignatureVerificationFailed": string;
            "AgentUploadFailed": string;
            "AgentUploadTimedout": string;
            "UnknownInstallerError": string;
         };
         AgentInstallFailed: {
            (options?: integrityService.vim.AgentInstallFailed): integrityService.vim.AgentInstallFailed;
         };
         AlreadyBeingManaged: {
            (options?: integrityService.vim.AlreadyBeingManaged): integrityService.vim.AlreadyBeingManaged;
         };
         AlreadyConnected: {
            (options?: integrityService.vim.AlreadyConnected): integrityService.vim.AlreadyConnected;
         };
         AlreadyExists: {
            (options?: integrityService.vim.AlreadyExists): integrityService.vim.AlreadyExists;
         };
         AlreadyUpgraded: {
            (options?: integrityService.vim.AlreadyUpgraded): integrityService.vim.AlreadyUpgraded;
         };
         AnswerFileUpdateFailure: {
            (options?: integrityService.vim.AnswerFileUpdateFailure): integrityService.vim.AnswerFileUpdateFailure;
         };
         ArrayOfAnswerFileUpdateFailure: {
            (options?: integrityService.vim.ArrayOfAnswerFileUpdateFailure): integrityService.vim.ArrayOfAnswerFileUpdateFailure;
         };
         AnswerFileUpdateFailed: {
            (options?: integrityService.vim.AnswerFileUpdateFailed): integrityService.vim.AnswerFileUpdateFailed;
         };
         ApplicationQuiesceFault: {
            (options?: integrityService.vim.ApplicationQuiesceFault): integrityService.vim.ApplicationQuiesceFault;
         };
         AuthMinimumAdminPermission: {
            (options?: integrityService.vim.AuthMinimumAdminPermission): integrityService.vim.AuthMinimumAdminPermission;
         };
         BackupBlobReadFailure: {
            (options?: integrityService.vim.BackupBlobReadFailure): integrityService.vim.BackupBlobReadFailure;
         };
         BackupBlobWriteFailure: {
            (options?: integrityService.vim.BackupBlobWriteFailure): integrityService.vim.BackupBlobWriteFailure;
         };
         BlockedByFirewall: {
            (options?: integrityService.vim.BlockedByFirewall): integrityService.vim.BlockedByFirewall;
         };
         CAMServerRefusedConnection: {
            (options?: integrityService.vim.CAMServerRefusedConnection): integrityService.vim.CAMServerRefusedConnection;
         };
         CannotAccessFile: {
            (options?: integrityService.vim.CannotAccessFile): integrityService.vim.CannotAccessFile;
         };
         CannotAccessLocalSource: {
            (options?: integrityService.vim.CannotAccessLocalSource): integrityService.vim.CannotAccessLocalSource;
         };
         CannotAccessNetwork: {
            (options?: integrityService.vim.CannotAccessNetwork): integrityService.vim.CannotAccessNetwork;
         };
         CannotAccessVmComponent: {
            (options?: integrityService.vim.CannotAccessVmComponent): integrityService.vim.CannotAccessVmComponent;
         };
         CannotAccessVmConfig: {
            (options?: integrityService.vim.CannotAccessVmConfig): integrityService.vim.CannotAccessVmConfig;
         };
         CannotAccessVmDevice: {
            (options?: integrityService.vim.CannotAccessVmDevice): integrityService.vim.CannotAccessVmDevice;
         };
         CannotAccessVmDisk: {
            (options?: integrityService.vim.CannotAccessVmDisk): integrityService.vim.CannotAccessVmDisk;
         };
         CannotAddHostWithFTVmAsStandalone: {
            (options?: integrityService.vim.CannotAddHostWithFTVmAsStandalone): integrityService.vim.CannotAddHostWithFTVmAsStandalone;
         };
         CannotAddHostWithFTVmToDifferentCluster: {
            (options?: integrityService.vim.CannotAddHostWithFTVmToDifferentCluster): integrityService.vim.CannotAddHostWithFTVmToDifferentCluster;
         };
         CannotAddHostWithFTVmToNonHACluster: {
            (options?: integrityService.vim.CannotAddHostWithFTVmToNonHACluster): integrityService.vim.CannotAddHostWithFTVmToNonHACluster;
         };
         CannotChangeDrsBehaviorForFtSecondary: {
            (options?: integrityService.vim.CannotChangeDrsBehaviorForFtSecondary): integrityService.vim.CannotChangeDrsBehaviorForFtSecondary;
         };
         CannotChangeHaSettingsForFtSecondary: {
            (options?: integrityService.vim.CannotChangeHaSettingsForFtSecondary): integrityService.vim.CannotChangeHaSettingsForFtSecondary;
         };
         CannotChangeVsanClusterUuid: {
            (options?: integrityService.vim.CannotChangeVsanClusterUuid): integrityService.vim.CannotChangeVsanClusterUuid;
         };
         CannotChangeVsanNodeUuid: {
            (options?: integrityService.vim.CannotChangeVsanNodeUuid): integrityService.vim.CannotChangeVsanNodeUuid;
         };
         CannotCreateFile: {
            (options?: integrityService.vim.CannotCreateFile): integrityService.vim.CannotCreateFile;
         };
         CannotDecryptPasswords: {
            (options?: integrityService.vim.CannotDecryptPasswords): integrityService.vim.CannotDecryptPasswords;
         };
         CannotDeleteFile: {
            (options?: integrityService.vim.CannotDeleteFile): integrityService.vim.CannotDeleteFile;
         };
         CannotDisableDrsOnClustersWithVApps: {
            (options?: integrityService.vim.CannotDisableDrsOnClustersWithVApps): integrityService.vim.CannotDisableDrsOnClustersWithVApps;
         };
         CannotDisableSnapshot: {
            (options?: integrityService.vim.CannotDisableSnapshot): integrityService.vim.CannotDisableSnapshot;
         };
         CannotDisconnectHostWithFaultToleranceVm: {
            (options?: integrityService.vim.CannotDisconnectHostWithFaultToleranceVm): integrityService.vim.CannotDisconnectHostWithFaultToleranceVm;
         };
         CannotModifyConfigCpuRequirements: {
            (options?: integrityService.vim.CannotModifyConfigCpuRequirements): integrityService.vim.CannotModifyConfigCpuRequirements;
         };
         CannotMoveFaultToleranceVmMoveType: {
            "resourcePool": string;
            "cluster": string;
         };
         CannotMoveFaultToleranceVm: {
            (options?: integrityService.vim.CannotMoveFaultToleranceVm): integrityService.vim.CannotMoveFaultToleranceVm;
         };
         CannotMoveHostWithFaultToleranceVm: {
            (options?: integrityService.vim.CannotMoveHostWithFaultToleranceVm): integrityService.vim.CannotMoveHostWithFaultToleranceVm;
         };
         CannotMoveVmWithDeltaDisk: {
            (options?: integrityService.vim.CannotMoveVmWithDeltaDisk): integrityService.vim.CannotMoveVmWithDeltaDisk;
         };
         CannotMoveVmWithNativeDeltaDisk: {
            (options?: integrityService.vim.CannotMoveVmWithNativeDeltaDisk): integrityService.vim.CannotMoveVmWithNativeDeltaDisk;
         };
         CannotMoveVsanEnabledHost: {
            (options?: integrityService.vim.CannotMoveVsanEnabledHost): integrityService.vim.CannotMoveVsanEnabledHost;
         };
         CannotPlaceWithoutPrerequisiteMoves: {
            (options?: integrityService.vim.CannotPlaceWithoutPrerequisiteMoves): integrityService.vim.CannotPlaceWithoutPrerequisiteMoves;
         };
         CannotPowerOffVmInClusterOperation: {
            "suspend": string;
            "powerOff": string;
            "guestShutdown": string;
            "guestSuspend": string;
         };
         CannotPowerOffVmInCluster: {
            (options?: integrityService.vim.CannotPowerOffVmInCluster): integrityService.vim.CannotPowerOffVmInCluster;
         };
         CannotReconfigureVsanWhenHaEnabled: {
            (options?: integrityService.vim.CannotReconfigureVsanWhenHaEnabled): integrityService.vim.CannotReconfigureVsanWhenHaEnabled;
         };
         CannotUseNetworkReason: {
            "NetworkReservationNotSupported": string;
            "MismatchedNetworkPolicies": string;
            "MismatchedDvsVersionOrVendor": string;
            "VMotionToUnsupportedNetworkType": string;
         };
         CannotUseNetwork: {
            (options?: integrityService.vim.CannotUseNetwork): integrityService.vim.CannotUseNetwork;
         };
         ClockSkew: {
            (options?: integrityService.vim.ClockSkew): integrityService.vim.ClockSkew;
         };
         CloneFromSnapshotNotSupported: {
            (options?: integrityService.vim.CloneFromSnapshotNotSupported): integrityService.vim.CloneFromSnapshotNotSupported;
         };
         CollectorAddressUnset: {
            (options?: integrityService.vim.CollectorAddressUnset): integrityService.vim.CollectorAddressUnset;
         };
         ConcurrentAccess: {
            (options?: integrityService.vim.ConcurrentAccess): integrityService.vim.ConcurrentAccess;
         };
         ConflictingConfigurationConfig: {
            (options?: integrityService.vim.ConflictingConfigurationConfig): integrityService.vim.ConflictingConfigurationConfig;
         };
         ArrayOfConflictingConfigurationConfig: {
            (options?: integrityService.vim.ArrayOfConflictingConfigurationConfig): integrityService.vim.ArrayOfConflictingConfigurationConfig;
         };
         ConflictingConfiguration: {
            (options?: integrityService.vim.ConflictingConfiguration): integrityService.vim.ConflictingConfiguration;
         };
         ConflictingDatastoreFound: {
            (options?: integrityService.vim.ConflictingDatastoreFound): integrityService.vim.ConflictingDatastoreFound;
         };
         ConnectedIso: {
            (options?: integrityService.vim.ConnectedIso): integrityService.vim.ConnectedIso;
         };
         CpuCompatibilityUnknown: {
            (options?: integrityService.vim.CpuCompatibilityUnknown): integrityService.vim.CpuCompatibilityUnknown;
         };
         CpuHotPlugNotSupported: {
            (options?: integrityService.vim.CpuHotPlugNotSupported): integrityService.vim.CpuHotPlugNotSupported;
         };
         CpuIncompatible: {
            (options?: integrityService.vim.CpuIncompatible): integrityService.vim.CpuIncompatible;
         };
         CpuIncompatible1ECX: {
            (options?: integrityService.vim.CpuIncompatible1ECX): integrityService.vim.CpuIncompatible1ECX;
         };
         CpuIncompatible81EDX: {
            (options?: integrityService.vim.CpuIncompatible81EDX): integrityService.vim.CpuIncompatible81EDX;
         };
         CustomizationFault: {
            (options?: integrityService.vim.CustomizationFault): integrityService.vim.CustomizationFault;
         };
         CustomizationPending: {
            (options?: integrityService.vim.CustomizationPending): integrityService.vim.CustomizationPending;
         };
         DVPortNotSupported: {
            (options?: integrityService.vim.DVPortNotSupported): integrityService.vim.DVPortNotSupported;
         };
         DasConfigFaultDasConfigFaultReason: {
            "HostNetworkMisconfiguration": string;
            "HostMisconfiguration": string;
            "InsufficientPrivileges": string;
            "NoPrimaryAgentAvailable": string;
            "Other": string;
            "NoDatastoresConfigured": string;
            "VSanNotSupportedOnHost": string;
         };
         DasConfigFault: {
            (options?: integrityService.vim.DasConfigFault): integrityService.vim.DasConfigFault;
         };
         DatabaseError: {
            (options?: integrityService.vim.DatabaseError): integrityService.vim.DatabaseError;
         };
         DatacenterMismatchArgument: {
            (options?: integrityService.vim.DatacenterMismatchArgument): integrityService.vim.DatacenterMismatchArgument;
         };
         ArrayOfDatacenterMismatchArgument: {
            (options?: integrityService.vim.ArrayOfDatacenterMismatchArgument): integrityService.vim.ArrayOfDatacenterMismatchArgument;
         };
         DatacenterMismatch: {
            (options?: integrityService.vim.DatacenterMismatch): integrityService.vim.DatacenterMismatch;
         };
         DatastoreNotWritableOnHost: {
            (options?: integrityService.vim.DatastoreNotWritableOnHost): integrityService.vim.DatastoreNotWritableOnHost;
         };
         DeltaDiskFormatNotSupported: {
            (options?: integrityService.vim.DeltaDiskFormatNotSupported): integrityService.vim.DeltaDiskFormatNotSupported;
         };
         DestinationSwitchFull: {
            (options?: integrityService.vim.DestinationSwitchFull): integrityService.vim.DestinationSwitchFull;
         };
         DestinationVsanDisabled: {
            (options?: integrityService.vim.DestinationVsanDisabled): integrityService.vim.DestinationVsanDisabled;
         };
         DeviceBackingNotSupported: {
            (options?: integrityService.vim.DeviceBackingNotSupported): integrityService.vim.DeviceBackingNotSupported;
         };
         DeviceControllerNotSupported: {
            (options?: integrityService.vim.DeviceControllerNotSupported): integrityService.vim.DeviceControllerNotSupported;
         };
         DeviceHotPlugNotSupported: {
            (options?: integrityService.vim.DeviceHotPlugNotSupported): integrityService.vim.DeviceHotPlugNotSupported;
         };
         DeviceNotFound: {
            (options?: integrityService.vim.DeviceNotFound): integrityService.vim.DeviceNotFound;
         };
         DeviceNotSupportedReason: {
            "host": string;
            "guest": string;
         };
         DeviceNotSupported: {
            (options?: integrityService.vim.DeviceNotSupported): integrityService.vim.DeviceNotSupported;
         };
         DeviceUnsupportedForVmPlatform: {
            (options?: integrityService.vim.DeviceUnsupportedForVmPlatform): integrityService.vim.DeviceUnsupportedForVmPlatform;
         };
         DeviceUnsupportedForVmVersion: {
            (options?: integrityService.vim.DeviceUnsupportedForVmVersion): integrityService.vim.DeviceUnsupportedForVmVersion;
         };
         DirectoryNotEmpty: {
            (options?: integrityService.vim.DirectoryNotEmpty): integrityService.vim.DirectoryNotEmpty;
         };
         DisableAdminNotSupported: {
            (options?: integrityService.vim.DisableAdminNotSupported): integrityService.vim.DisableAdminNotSupported;
         };
         DisallowedChangeByServiceDisallowedChange: {
            "hotExtendDisk": string;
         };
         DisallowedChangeByService: {
            (options?: integrityService.vim.DisallowedChangeByService): integrityService.vim.DisallowedChangeByService;
         };
         DisallowedDiskModeChange: {
            (options?: integrityService.vim.DisallowedDiskModeChange): integrityService.vim.DisallowedDiskModeChange;
         };
         DisallowedMigrationDeviceAttached: {
            (options?: integrityService.vim.DisallowedMigrationDeviceAttached): integrityService.vim.DisallowedMigrationDeviceAttached;
         };
         DisallowedOperationOnFailoverHost: {
            (options?: integrityService.vim.DisallowedOperationOnFailoverHost): integrityService.vim.DisallowedOperationOnFailoverHost;
         };
         DiskHasPartitions: {
            (options?: integrityService.vim.DiskHasPartitions): integrityService.vim.DiskHasPartitions;
         };
         DiskIsLastRemainingNonSSD: {
            (options?: integrityService.vim.DiskIsLastRemainingNonSSD): integrityService.vim.DiskIsLastRemainingNonSSD;
         };
         DiskIsNonLocal: {
            (options?: integrityService.vim.DiskIsNonLocal): integrityService.vim.DiskIsNonLocal;
         };
         DiskIsUSB: {
            (options?: integrityService.vim.DiskIsUSB): integrityService.vim.DiskIsUSB;
         };
         DiskMoveTypeNotSupported: {
            (options?: integrityService.vim.DiskMoveTypeNotSupported): integrityService.vim.DiskMoveTypeNotSupported;
         };
         DiskNotSupported: {
            (options?: integrityService.vim.DiskNotSupported): integrityService.vim.DiskNotSupported;
         };
         DiskTooSmall: {
            (options?: integrityService.vim.DiskTooSmall): integrityService.vim.DiskTooSmall;
         };
         DomainNotFound: {
            (options?: integrityService.vim.DomainNotFound): integrityService.vim.DomainNotFound;
         };
         DrsDisabledOnVm: {
            (options?: integrityService.vim.DrsDisabledOnVm): integrityService.vim.DrsDisabledOnVm;
         };
         DrsVmotionIncompatibleFault: {
            (options?: integrityService.vim.DrsVmotionIncompatibleFault): integrityService.vim.DrsVmotionIncompatibleFault;
         };
         DuplicateDisks: {
            (options?: integrityService.vim.DuplicateDisks): integrityService.vim.DuplicateDisks;
         };
         DuplicateName: {
            (options?: integrityService.vim.DuplicateName): integrityService.vim.DuplicateName;
         };
         DuplicateVsanNetworkInterface: {
            (options?: integrityService.vim.DuplicateVsanNetworkInterface): integrityService.vim.DuplicateVsanNetworkInterface;
         };
         DvsApplyOperationFaultFaultOnObject: {
            (options?: integrityService.vim.DvsApplyOperationFaultFaultOnObject): integrityService.vim.DvsApplyOperationFaultFaultOnObject;
         };
         ArrayOfDvsApplyOperationFaultFaultOnObject: {
            (options?: integrityService.vim.ArrayOfDvsApplyOperationFaultFaultOnObject): integrityService.vim.ArrayOfDvsApplyOperationFaultFaultOnObject;
         };
         DvsApplyOperationFault: {
            (options?: integrityService.vim.DvsApplyOperationFault): integrityService.vim.DvsApplyOperationFault;
         };
         DvsFault: {
            (options?: integrityService.vim.DvsFault): integrityService.vim.DvsFault;
         };
         DvsNotAuthorized: {
            (options?: integrityService.vim.DvsNotAuthorized): integrityService.vim.DvsNotAuthorized;
         };
         DvsOperationBulkFaultFaultOnHost: {
            (options?: integrityService.vim.DvsOperationBulkFaultFaultOnHost): integrityService.vim.DvsOperationBulkFaultFaultOnHost;
         };
         ArrayOfDvsOperationBulkFaultFaultOnHost: {
            (options?: integrityService.vim.ArrayOfDvsOperationBulkFaultFaultOnHost): integrityService.vim.ArrayOfDvsOperationBulkFaultFaultOnHost;
         };
         DvsOperationBulkFault: {
            (options?: integrityService.vim.DvsOperationBulkFault): integrityService.vim.DvsOperationBulkFault;
         };
         DvsScopeViolated: {
            (options?: integrityService.vim.DvsScopeViolated): integrityService.vim.DvsScopeViolated;
         };
         EVCAdmissionFailed: {
            (options?: integrityService.vim.EVCAdmissionFailed): integrityService.vim.EVCAdmissionFailed;
         };
         EVCAdmissionFailedCPUFeaturesForMode: {
            (options?: integrityService.vim.EVCAdmissionFailedCPUFeaturesForMode): integrityService.vim.EVCAdmissionFailedCPUFeaturesForMode;
         };
         EVCAdmissionFailedCPUModel: {
            (options?: integrityService.vim.EVCAdmissionFailedCPUModel): integrityService.vim.EVCAdmissionFailedCPUModel;
         };
         EVCAdmissionFailedCPUModelForMode: {
            (options?: integrityService.vim.EVCAdmissionFailedCPUModelForMode): integrityService.vim.EVCAdmissionFailedCPUModelForMode;
         };
         EVCAdmissionFailedCPUVendor: {
            (options?: integrityService.vim.EVCAdmissionFailedCPUVendor): integrityService.vim.EVCAdmissionFailedCPUVendor;
         };
         EVCAdmissionFailedCPUVendorUnknown: {
            (options?: integrityService.vim.EVCAdmissionFailedCPUVendorUnknown): integrityService.vim.EVCAdmissionFailedCPUVendorUnknown;
         };
         EVCAdmissionFailedHostDisconnected: {
            (options?: integrityService.vim.EVCAdmissionFailedHostDisconnected): integrityService.vim.EVCAdmissionFailedHostDisconnected;
         };
         EVCAdmissionFailedHostSoftware: {
            (options?: integrityService.vim.EVCAdmissionFailedHostSoftware): integrityService.vim.EVCAdmissionFailedHostSoftware;
         };
         EVCAdmissionFailedHostSoftwareForMode: {
            (options?: integrityService.vim.EVCAdmissionFailedHostSoftwareForMode): integrityService.vim.EVCAdmissionFailedHostSoftwareForMode;
         };
         EVCAdmissionFailedVmActive: {
            (options?: integrityService.vim.EVCAdmissionFailedVmActive): integrityService.vim.EVCAdmissionFailedVmActive;
         };
         EightHostLimitViolated: {
            (options?: integrityService.vim.EightHostLimitViolated): integrityService.vim.EightHostLimitViolated;
         };
         ExpiredAddonLicense: {
            (options?: integrityService.vim.ExpiredAddonLicense): integrityService.vim.ExpiredAddonLicense;
         };
         ExpiredEditionLicense: {
            (options?: integrityService.vim.ExpiredEditionLicense): integrityService.vim.ExpiredEditionLicense;
         };
         ExpiredFeatureLicense: {
            (options?: integrityService.vim.ExpiredFeatureLicense): integrityService.vim.ExpiredFeatureLicense;
         };
         ExtendedFault: {
            (options?: integrityService.vim.ExtendedFault): integrityService.vim.ExtendedFault;
         };
         FailToEnableSPBM: {
            (options?: integrityService.vim.FailToEnableSPBM): integrityService.vim.FailToEnableSPBM;
         };
         FailToLockFaultToleranceVMs: {
            (options?: integrityService.vim.FailToLockFaultToleranceVMs): integrityService.vim.FailToLockFaultToleranceVMs;
         };
         FaultToleranceAntiAffinityViolated: {
            (options?: integrityService.vim.FaultToleranceAntiAffinityViolated): integrityService.vim.FaultToleranceAntiAffinityViolated;
         };
         FaultToleranceCannotEditMem: {
            (options?: integrityService.vim.FaultToleranceCannotEditMem): integrityService.vim.FaultToleranceCannotEditMem;
         };
         FaultToleranceCpuIncompatible: {
            (options?: integrityService.vim.FaultToleranceCpuIncompatible): integrityService.vim.FaultToleranceCpuIncompatible;
         };
         FaultToleranceNeedsThickDisk: {
            (options?: integrityService.vim.FaultToleranceNeedsThickDisk): integrityService.vim.FaultToleranceNeedsThickDisk;
         };
         FaultToleranceNotLicensed: {
            (options?: integrityService.vim.FaultToleranceNotLicensed): integrityService.vim.FaultToleranceNotLicensed;
         };
         FaultToleranceNotSameBuild: {
            (options?: integrityService.vim.FaultToleranceNotSameBuild): integrityService.vim.FaultToleranceNotSameBuild;
         };
         FaultTolerancePrimaryPowerOnNotAttempted: {
            (options?: integrityService.vim.FaultTolerancePrimaryPowerOnNotAttempted): integrityService.vim.FaultTolerancePrimaryPowerOnNotAttempted;
         };
         FaultToleranceVmNotDasProtected: {
            (options?: integrityService.vim.FaultToleranceVmNotDasProtected): integrityService.vim.FaultToleranceVmNotDasProtected;
         };
         FcoeFault: {
            (options?: integrityService.vim.FcoeFault): integrityService.vim.FcoeFault;
         };
         FcoeFaultPnicHasNoPortSet: {
            (options?: integrityService.vim.FcoeFaultPnicHasNoPortSet): integrityService.vim.FcoeFaultPnicHasNoPortSet;
         };
         FeatureRequirementsNotMet: {
            (options?: integrityService.vim.FeatureRequirementsNotMet): integrityService.vim.FeatureRequirementsNotMet;
         };
         FileAlreadyExists: {
            (options?: integrityService.vim.FileAlreadyExists): integrityService.vim.FileAlreadyExists;
         };
         FileBackedPortNotSupported: {
            (options?: integrityService.vim.FileBackedPortNotSupported): integrityService.vim.FileBackedPortNotSupported;
         };
         FileFault: {
            (options?: integrityService.vim.FileFault): integrityService.vim.FileFault;
         };
         FileLocked: {
            (options?: integrityService.vim.FileLocked): integrityService.vim.FileLocked;
         };
         FileNameTooLong: {
            (options?: integrityService.vim.FileNameTooLong): integrityService.vim.FileNameTooLong;
         };
         FileNotFound: {
            (options?: integrityService.vim.FileNotFound): integrityService.vim.FileNotFound;
         };
         FileNotWritable: {
            (options?: integrityService.vim.FileNotWritable): integrityService.vim.FileNotWritable;
         };
         FileTooLarge: {
            (options?: integrityService.vim.FileTooLarge): integrityService.vim.FileTooLarge;
         };
         FilesystemQuiesceFault: {
            (options?: integrityService.vim.FilesystemQuiesceFault): integrityService.vim.FilesystemQuiesceFault;
         };
         FtIssuesOnHostHostSelectionType: {
            "user": string;
            "vc": string;
            "drs": string;
         };
         FtIssuesOnHost: {
            (options?: integrityService.vim.FtIssuesOnHost): integrityService.vim.FtIssuesOnHost;
         };
         FullStorageVMotionNotSupported: {
            (options?: integrityService.vim.FullStorageVMotionNotSupported): integrityService.vim.FullStorageVMotionNotSupported;
         };
         GenericDrsFault: {
            (options?: integrityService.vim.GenericDrsFault): integrityService.vim.GenericDrsFault;
         };
         GenericVmConfigFault: {
            (options?: integrityService.vim.GenericVmConfigFault): integrityService.vim.GenericVmConfigFault;
         };
         GuestAuthenticationChallenge: {
            (options?: integrityService.vim.GuestAuthenticationChallenge): integrityService.vim.GuestAuthenticationChallenge;
         };
         GuestComponentsOutOfDate: {
            (options?: integrityService.vim.GuestComponentsOutOfDate): integrityService.vim.GuestComponentsOutOfDate;
         };
         GuestOperationsFault: {
            (options?: integrityService.vim.GuestOperationsFault): integrityService.vim.GuestOperationsFault;
         };
         GuestOperationsUnavailable: {
            (options?: integrityService.vim.GuestOperationsUnavailable): integrityService.vim.GuestOperationsUnavailable;
         };
         GuestPermissionDenied: {
            (options?: integrityService.vim.GuestPermissionDenied): integrityService.vim.GuestPermissionDenied;
         };
         GuestProcessNotFound: {
            (options?: integrityService.vim.GuestProcessNotFound): integrityService.vim.GuestProcessNotFound;
         };
         HAErrorsAtDest: {
            (options?: integrityService.vim.HAErrorsAtDest): integrityService.vim.HAErrorsAtDest;
         };
         HostAccessRestrictedToManagementServer: {
            (options?: integrityService.vim.HostAccessRestrictedToManagementServer): integrityService.vim.HostAccessRestrictedToManagementServer;
         };
         HostConfigFailed: {
            (options?: integrityService.vim.HostConfigFailed): integrityService.vim.HostConfigFailed;
         };
         HostConfigFault: {
            (options?: integrityService.vim.HostConfigFault): integrityService.vim.HostConfigFault;
         };
         HostConnectFault: {
            (options?: integrityService.vim.HostConnectFault): integrityService.vim.HostConnectFault;
         };
         HostInDomain: {
            (options?: integrityService.vim.HostInDomain): integrityService.vim.HostInDomain;
         };
         HostIncompatibleForFaultToleranceReason: {
            "product": string;
            "processor": string;
         };
         HostIncompatibleForFaultTolerance: {
            (options?: integrityService.vim.HostIncompatibleForFaultTolerance): integrityService.vim.HostIncompatibleForFaultTolerance;
         };
         HostIncompatibleForRecordReplayReason: {
            "product": string;
            "processor": string;
         };
         HostIncompatibleForRecordReplay: {
            (options?: integrityService.vim.HostIncompatibleForRecordReplay): integrityService.vim.HostIncompatibleForRecordReplay;
         };
         HostInventoryFull: {
            (options?: integrityService.vim.HostInventoryFull): integrityService.vim.HostInventoryFull;
         };
         HostPowerOpFailed: {
            (options?: integrityService.vim.HostPowerOpFailed): integrityService.vim.HostPowerOpFailed;
         };
         HotSnapshotMoveNotSupported: {
            (options?: integrityService.vim.HotSnapshotMoveNotSupported): integrityService.vim.HotSnapshotMoveNotSupported;
         };
         IDEDiskNotSupported: {
            (options?: integrityService.vim.IDEDiskNotSupported): integrityService.vim.IDEDiskNotSupported;
         };
         IORMNotSupportedHostOnDatastore: {
            (options?: integrityService.vim.IORMNotSupportedHostOnDatastore): integrityService.vim.IORMNotSupportedHostOnDatastore;
         };
         ImportHostAddFailure: {
            (options?: integrityService.vim.ImportHostAddFailure): integrityService.vim.ImportHostAddFailure;
         };
         ImportOperationBulkFaultFaultOnImport: {
            (options?: integrityService.vim.ImportOperationBulkFaultFaultOnImport): integrityService.vim.ImportOperationBulkFaultFaultOnImport;
         };
         ArrayOfImportOperationBulkFaultFaultOnImport: {
            (options?: integrityService.vim.ArrayOfImportOperationBulkFaultFaultOnImport): integrityService.vim.ArrayOfImportOperationBulkFaultFaultOnImport;
         };
         ImportOperationBulkFault: {
            (options?: integrityService.vim.ImportOperationBulkFault): integrityService.vim.ImportOperationBulkFault;
         };
         InUseFeatureManipulationDisallowed: {
            (options?: integrityService.vim.InUseFeatureManipulationDisallowed): integrityService.vim.InUseFeatureManipulationDisallowed;
         };
         InaccessibleDatastore: {
            (options?: integrityService.vim.InaccessibleDatastore): integrityService.vim.InaccessibleDatastore;
         };
         InaccessibleVFlashSource: {
            (options?: integrityService.vim.InaccessibleVFlashSource): integrityService.vim.InaccessibleVFlashSource;
         };
         IncompatibleDefaultDevice: {
            (options?: integrityService.vim.IncompatibleDefaultDevice): integrityService.vim.IncompatibleDefaultDevice;
         };
         IncompatibleHostForFtSecondary: {
            (options?: integrityService.vim.IncompatibleHostForFtSecondary): integrityService.vim.IncompatibleHostForFtSecondary;
         };
         IncompatibleSetting: {
            (options?: integrityService.vim.IncompatibleSetting): integrityService.vim.IncompatibleSetting;
         };
         IncorrectFileType: {
            (options?: integrityService.vim.IncorrectFileType): integrityService.vim.IncorrectFileType;
         };
         IncorrectHostInformation: {
            (options?: integrityService.vim.IncorrectHostInformation): integrityService.vim.IncorrectHostInformation;
         };
         IndependentDiskVMotionNotSupported: {
            (options?: integrityService.vim.IndependentDiskVMotionNotSupported): integrityService.vim.IndependentDiskVMotionNotSupported;
         };
         InsufficientAgentVmsDeployed: {
            (options?: integrityService.vim.InsufficientAgentVmsDeployed): integrityService.vim.InsufficientAgentVmsDeployed;
         };
         InsufficientCpuResourcesFault: {
            (options?: integrityService.vim.InsufficientCpuResourcesFault): integrityService.vim.InsufficientCpuResourcesFault;
         };
         InsufficientDisks: {
            (options?: integrityService.vim.InsufficientDisks): integrityService.vim.InsufficientDisks;
         };
         InsufficientFailoverResourcesFault: {
            (options?: integrityService.vim.InsufficientFailoverResourcesFault): integrityService.vim.InsufficientFailoverResourcesFault;
         };
         InsufficientHostCapacityFault: {
            (options?: integrityService.vim.InsufficientHostCapacityFault): integrityService.vim.InsufficientHostCapacityFault;
         };
         InsufficientHostCpuCapacityFault: {
            (options?: integrityService.vim.InsufficientHostCpuCapacityFault): integrityService.vim.InsufficientHostCpuCapacityFault;
         };
         InsufficientHostMemoryCapacityFault: {
            (options?: integrityService.vim.InsufficientHostMemoryCapacityFault): integrityService.vim.InsufficientHostMemoryCapacityFault;
         };
         InsufficientMemoryResourcesFault: {
            (options?: integrityService.vim.InsufficientMemoryResourcesFault): integrityService.vim.InsufficientMemoryResourcesFault;
         };
         InsufficientPerCpuCapacity: {
            (options?: integrityService.vim.InsufficientPerCpuCapacity): integrityService.vim.InsufficientPerCpuCapacity;
         };
         InsufficientResourcesFault: {
            (options?: integrityService.vim.InsufficientResourcesFault): integrityService.vim.InsufficientResourcesFault;
         };
         InsufficientStandbyCpuResource: {
            (options?: integrityService.vim.InsufficientStandbyCpuResource): integrityService.vim.InsufficientStandbyCpuResource;
         };
         InsufficientStandbyMemoryResource: {
            (options?: integrityService.vim.InsufficientStandbyMemoryResource): integrityService.vim.InsufficientStandbyMemoryResource;
         };
         InsufficientStandbyResource: {
            (options?: integrityService.vim.InsufficientStandbyResource): integrityService.vim.InsufficientStandbyResource;
         };
         InsufficientStorageSpace: {
            (options?: integrityService.vim.InsufficientStorageSpace): integrityService.vim.InsufficientStorageSpace;
         };
         InsufficientVFlashResourcesFault: {
            (options?: integrityService.vim.InsufficientVFlashResourcesFault): integrityService.vim.InsufficientVFlashResourcesFault;
         };
         InvalidAffinitySettingFault: {
            (options?: integrityService.vim.InvalidAffinitySettingFault): integrityService.vim.InvalidAffinitySettingFault;
         };
         InvalidBmcRole: {
            (options?: integrityService.vim.InvalidBmcRole): integrityService.vim.InvalidBmcRole;
         };
         InvalidBundle: {
            (options?: integrityService.vim.InvalidBundle): integrityService.vim.InvalidBundle;
         };
         InvalidCAMCertificate: {
            (options?: integrityService.vim.InvalidCAMCertificate): integrityService.vim.InvalidCAMCertificate;
         };
         InvalidCAMServer: {
            (options?: integrityService.vim.InvalidCAMServer): integrityService.vim.InvalidCAMServer;
         };
         InvalidClientCertificate: {
            (options?: integrityService.vim.InvalidClientCertificate): integrityService.vim.InvalidClientCertificate;
         };
         InvalidController: {
            (options?: integrityService.vim.InvalidController): integrityService.vim.InvalidController;
         };
         InvalidDasConfigArgumentEntryForInvalidArgument: {
            "admissionControl": string;
            "userHeartbeatDs": string;
            "vmConfig": string;
         };
         InvalidDasConfigArgument: {
            (options?: integrityService.vim.InvalidDasConfigArgument): integrityService.vim.InvalidDasConfigArgument;
         };
         InvalidDasRestartPriorityForFtVm: {
            (options?: integrityService.vim.InvalidDasRestartPriorityForFtVm): integrityService.vim.InvalidDasRestartPriorityForFtVm;
         };
         InvalidDatastore: {
            (options?: integrityService.vim.InvalidDatastore): integrityService.vim.InvalidDatastore;
         };
         InvalidDatastorePath: {
            (options?: integrityService.vim.InvalidDatastorePath): integrityService.vim.InvalidDatastorePath;
         };
         InvalidDatastoreState: {
            (options?: integrityService.vim.InvalidDatastoreState): integrityService.vim.InvalidDatastoreState;
         };
         InvalidDeviceBacking: {
            (options?: integrityService.vim.InvalidDeviceBacking): integrityService.vim.InvalidDeviceBacking;
         };
         InvalidDeviceOperation: {
            (options?: integrityService.vim.InvalidDeviceOperation): integrityService.vim.InvalidDeviceOperation;
         };
         InvalidDeviceSpec: {
            (options?: integrityService.vim.InvalidDeviceSpec): integrityService.vim.InvalidDeviceSpec;
         };
         InvalidDiskFormat: {
            (options?: integrityService.vim.InvalidDiskFormat): integrityService.vim.InvalidDiskFormat;
         };
         InvalidDrsBehaviorForFtVm: {
            (options?: integrityService.vim.InvalidDrsBehaviorForFtVm): integrityService.vim.InvalidDrsBehaviorForFtVm;
         };
         InvalidEditionLicense: {
            (options?: integrityService.vim.InvalidEditionLicense): integrityService.vim.InvalidEditionLicense;
         };
         InvalidEvent: {
            (options?: integrityService.vim.InvalidEvent): integrityService.vim.InvalidEvent;
         };
         InvalidFolder: {
            (options?: integrityService.vim.InvalidFolder): integrityService.vim.InvalidFolder;
         };
         InvalidFormat: {
            (options?: integrityService.vim.InvalidFormat): integrityService.vim.InvalidFormat;
         };
         InvalidGuestLogin: {
            (options?: integrityService.vim.InvalidGuestLogin): integrityService.vim.InvalidGuestLogin;
         };
         InvalidHostConnectionState: {
            (options?: integrityService.vim.InvalidHostConnectionState): integrityService.vim.InvalidHostConnectionState;
         };
         InvalidHostName: {
            (options?: integrityService.vim.InvalidHostName): integrityService.vim.InvalidHostName;
         };
         InvalidHostState: {
            (options?: integrityService.vim.InvalidHostState): integrityService.vim.InvalidHostState;
         };
         InvalidIndexArgument: {
            (options?: integrityService.vim.InvalidIndexArgument): integrityService.vim.InvalidIndexArgument;
         };
         InvalidIpfixConfig: {
            (options?: integrityService.vim.InvalidIpfixConfig): integrityService.vim.InvalidIpfixConfig;
         };
         InvalidIpmiLoginInfo: {
            (options?: integrityService.vim.InvalidIpmiLoginInfo): integrityService.vim.InvalidIpmiLoginInfo;
         };
         InvalidIpmiMacAddress: {
            (options?: integrityService.vim.InvalidIpmiMacAddress): integrityService.vim.InvalidIpmiMacAddress;
         };
         InvalidLicense: {
            (options?: integrityService.vim.InvalidLicense): integrityService.vim.InvalidLicense;
         };
         InvalidLocale: {
            (options?: integrityService.vim.InvalidLocale): integrityService.vim.InvalidLocale;
         };
         InvalidLogin: {
            (options?: integrityService.vim.InvalidLogin): integrityService.vim.InvalidLogin;
         };
         InvalidName: {
            (options?: integrityService.vim.InvalidName): integrityService.vim.InvalidName;
         };
         InvalidNasCredentials: {
            (options?: integrityService.vim.InvalidNasCredentials): integrityService.vim.InvalidNasCredentials;
         };
         InvalidNetworkInType: {
            (options?: integrityService.vim.InvalidNetworkInType): integrityService.vim.InvalidNetworkInType;
         };
         InvalidNetworkResource: {
            (options?: integrityService.vim.InvalidNetworkResource): integrityService.vim.InvalidNetworkResource;
         };
         InvalidOperationOnSecondaryVm: {
            (options?: integrityService.vim.InvalidOperationOnSecondaryVm): integrityService.vim.InvalidOperationOnSecondaryVm;
         };
         InvalidPowerState: {
            (options?: integrityService.vim.InvalidPowerState): integrityService.vim.InvalidPowerState;
         };
         InvalidPrivilege: {
            (options?: integrityService.vim.InvalidPrivilege): integrityService.vim.InvalidPrivilege;
         };
         InvalidProfileReferenceHostReason: {
            "incompatibleVersion": string;
            "missingReferenceHost": string;
         };
         InvalidProfileReferenceHost: {
            (options?: integrityService.vim.InvalidProfileReferenceHost): integrityService.vim.InvalidProfileReferenceHost;
         };
         InvalidPropertyType: {
            (options?: integrityService.vim.InvalidPropertyType): integrityService.vim.InvalidPropertyType;
         };
         InvalidPropertyValue: {
            (options?: integrityService.vim.InvalidPropertyValue): integrityService.vim.InvalidPropertyValue;
         };
         InvalidResourcePoolStructureFault: {
            (options?: integrityService.vim.InvalidResourcePoolStructureFault): integrityService.vim.InvalidResourcePoolStructureFault;
         };
         InvalidSnapshotFormat: {
            (options?: integrityService.vim.InvalidSnapshotFormat): integrityService.vim.InvalidSnapshotFormat;
         };
         InvalidState: {
            (options?: integrityService.vim.InvalidState): integrityService.vim.InvalidState;
         };
         InvalidVmConfig: {
            (options?: integrityService.vim.InvalidVmConfig): integrityService.vim.InvalidVmConfig;
         };
         InventoryHasStandardAloneHosts: {
            (options?: integrityService.vim.InventoryHasStandardAloneHosts): integrityService.vim.InventoryHasStandardAloneHosts;
         };
         IpHostnameGeneratorError: {
            (options?: integrityService.vim.IpHostnameGeneratorError): integrityService.vim.IpHostnameGeneratorError;
         };
         IscsiFault: {
            (options?: integrityService.vim.IscsiFault): integrityService.vim.IscsiFault;
         };
         IscsiFaultInvalidVnic: {
            (options?: integrityService.vim.IscsiFaultInvalidVnic): integrityService.vim.IscsiFaultInvalidVnic;
         };
         IscsiFaultPnicInUse: {
            (options?: integrityService.vim.IscsiFaultPnicInUse): integrityService.vim.IscsiFaultPnicInUse;
         };
         IscsiFaultVnicAlreadyBound: {
            (options?: integrityService.vim.IscsiFaultVnicAlreadyBound): integrityService.vim.IscsiFaultVnicAlreadyBound;
         };
         IscsiFaultVnicHasActivePaths: {
            (options?: integrityService.vim.IscsiFaultVnicHasActivePaths): integrityService.vim.IscsiFaultVnicHasActivePaths;
         };
         IscsiFaultVnicHasMultipleUplinks: {
            (options?: integrityService.vim.IscsiFaultVnicHasMultipleUplinks): integrityService.vim.IscsiFaultVnicHasMultipleUplinks;
         };
         IscsiFaultVnicHasNoUplinks: {
            (options?: integrityService.vim.IscsiFaultVnicHasNoUplinks): integrityService.vim.IscsiFaultVnicHasNoUplinks;
         };
         IscsiFaultVnicHasWrongUplink: {
            (options?: integrityService.vim.IscsiFaultVnicHasWrongUplink): integrityService.vim.IscsiFaultVnicHasWrongUplink;
         };
         IscsiFaultVnicInUse: {
            (options?: integrityService.vim.IscsiFaultVnicInUse): integrityService.vim.IscsiFaultVnicInUse;
         };
         IscsiFaultVnicIsLastPath: {
            (options?: integrityService.vim.IscsiFaultVnicIsLastPath): integrityService.vim.IscsiFaultVnicIsLastPath;
         };
         IscsiFaultVnicNotBound: {
            (options?: integrityService.vim.IscsiFaultVnicNotBound): integrityService.vim.IscsiFaultVnicNotBound;
         };
         IscsiFaultVnicNotFound: {
            (options?: integrityService.vim.IscsiFaultVnicNotFound): integrityService.vim.IscsiFaultVnicNotFound;
         };
         LargeRDMConversionNotSupported: {
            (options?: integrityService.vim.LargeRDMConversionNotSupported): integrityService.vim.LargeRDMConversionNotSupported;
         };
         LargeRDMNotSupportedOnDatastore: {
            (options?: integrityService.vim.LargeRDMNotSupportedOnDatastore): integrityService.vim.LargeRDMNotSupportedOnDatastore;
         };
         LegacyNetworkInterfaceInUse: {
            (options?: integrityService.vim.LegacyNetworkInterfaceInUse): integrityService.vim.LegacyNetworkInterfaceInUse;
         };
         LicenseAssignmentFailedReason: {
            "keyEntityMismatch": string;
            "downgradeDisallowed": string;
            "inventoryNotManageableByVirtualCenter": string;
            "hostsUnmanageableByVirtualCenterWithoutLicenseServer": string;
         };
         LicenseAssignmentFailed: {
            (options?: integrityService.vim.LicenseAssignmentFailed): integrityService.vim.LicenseAssignmentFailed;
         };
         LicenseDowngradeDisallowed: {
            (options?: integrityService.vim.LicenseDowngradeDisallowed): integrityService.vim.LicenseDowngradeDisallowed;
         };
         LicenseEntityNotFound: {
            (options?: integrityService.vim.LicenseEntityNotFound): integrityService.vim.LicenseEntityNotFound;
         };
         LicenseExpired: {
            (options?: integrityService.vim.LicenseExpired): integrityService.vim.LicenseExpired;
         };
         LicenseKeyEntityMismatch: {
            (options?: integrityService.vim.LicenseKeyEntityMismatch): integrityService.vim.LicenseKeyEntityMismatch;
         };
         LicenseRestricted: {
            (options?: integrityService.vim.LicenseRestricted): integrityService.vim.LicenseRestricted;
         };
         LicenseServerUnavailable: {
            (options?: integrityService.vim.LicenseServerUnavailable): integrityService.vim.LicenseServerUnavailable;
         };
         LicenseSourceUnavailable: {
            (options?: integrityService.vim.LicenseSourceUnavailable): integrityService.vim.LicenseSourceUnavailable;
         };
         LimitExceeded: {
            (options?: integrityService.vim.LimitExceeded): integrityService.vim.LimitExceeded;
         };
         LinuxVolumeNotClean: {
            (options?: integrityService.vim.LinuxVolumeNotClean): integrityService.vim.LinuxVolumeNotClean;
         };
         LogBundlingFailed: {
            (options?: integrityService.vim.LogBundlingFailed): integrityService.vim.LogBundlingFailed;
         };
         MaintenanceModeFileMove: {
            (options?: integrityService.vim.MaintenanceModeFileMove): integrityService.vim.MaintenanceModeFileMove;
         };
         MemoryHotPlugNotSupported: {
            (options?: integrityService.vim.MemoryHotPlugNotSupported): integrityService.vim.MemoryHotPlugNotSupported;
         };
         MemorySizeNotRecommended: {
            (options?: integrityService.vim.MemorySizeNotRecommended): integrityService.vim.MemorySizeNotRecommended;
         };
         MemorySizeNotSupported: {
            (options?: integrityService.vim.MemorySizeNotSupported): integrityService.vim.MemorySizeNotSupported;
         };
         MemorySizeNotSupportedByDatastore: {
            (options?: integrityService.vim.MemorySizeNotSupportedByDatastore): integrityService.vim.MemorySizeNotSupportedByDatastore;
         };
         MemorySnapshotOnIndependentDisk: {
            (options?: integrityService.vim.MemorySnapshotOnIndependentDisk): integrityService.vim.MemorySnapshotOnIndependentDisk;
         };
         MethodAlreadyDisabledFault: {
            (options?: integrityService.vim.MethodAlreadyDisabledFault): integrityService.vim.MethodAlreadyDisabledFault;
         };
         MethodDisabled: {
            (options?: integrityService.vim.MethodDisabled): integrityService.vim.MethodDisabled;
         };
         MigrationDisabled: {
            (options?: integrityService.vim.MigrationDisabled): integrityService.vim.MigrationDisabled;
         };
         MigrationFault: {
            (options?: integrityService.vim.MigrationFault): integrityService.vim.MigrationFault;
         };
         MigrationFeatureNotSupported: {
            (options?: integrityService.vim.MigrationFeatureNotSupported): integrityService.vim.MigrationFeatureNotSupported;
         };
         MigrationNotReady: {
            (options?: integrityService.vim.MigrationNotReady): integrityService.vim.MigrationNotReady;
         };
         MismatchedBundle: {
            (options?: integrityService.vim.MismatchedBundle): integrityService.vim.MismatchedBundle;
         };
         MismatchedNetworkPolicies: {
            (options?: integrityService.vim.MismatchedNetworkPolicies): integrityService.vim.MismatchedNetworkPolicies;
         };
         MismatchedVMotionNetworkNames: {
            (options?: integrityService.vim.MismatchedVMotionNetworkNames): integrityService.vim.MismatchedVMotionNetworkNames;
         };
         MissingBmcSupport: {
            (options?: integrityService.vim.MissingBmcSupport): integrityService.vim.MissingBmcSupport;
         };
         MissingController: {
            (options?: integrityService.vim.MissingController): integrityService.vim.MissingController;
         };
         MissingIpPool: {
            (options?: integrityService.vim.MissingIpPool): integrityService.vim.MissingIpPool;
         };
         MissingLinuxCustResources: {
            (options?: integrityService.vim.MissingLinuxCustResources): integrityService.vim.MissingLinuxCustResources;
         };
         MissingNetworkIpConfig: {
            (options?: integrityService.vim.MissingNetworkIpConfig): integrityService.vim.MissingNetworkIpConfig;
         };
         MissingPowerOffConfiguration: {
            (options?: integrityService.vim.MissingPowerOffConfiguration): integrityService.vim.MissingPowerOffConfiguration;
         };
         MissingPowerOnConfiguration: {
            (options?: integrityService.vim.MissingPowerOnConfiguration): integrityService.vim.MissingPowerOnConfiguration;
         };
         MissingWindowsCustResources: {
            (options?: integrityService.vim.MissingWindowsCustResources): integrityService.vim.MissingWindowsCustResources;
         };
         MksConnectionLimitReached: {
            (options?: integrityService.vim.MksConnectionLimitReached): integrityService.vim.MksConnectionLimitReached;
         };
         MountError: {
            (options?: integrityService.vim.MountError): integrityService.vim.MountError;
         };
         MultipleCertificatesVerifyFaultThumbprintData: {
            (options?: integrityService.vim.MultipleCertificatesVerifyFaultThumbprintData): integrityService.vim.MultipleCertificatesVerifyFaultThumbprintData;
         };
         ArrayOfMultipleCertificatesVerifyFaultThumbprintData: {
            (options?: integrityService.vim.ArrayOfMultipleCertificatesVerifyFaultThumbprintData): integrityService.vim.ArrayOfMultipleCertificatesVerifyFaultThumbprintData;
         };
         MultipleCertificatesVerifyFault: {
            (options?: integrityService.vim.MultipleCertificatesVerifyFault): integrityService.vim.MultipleCertificatesVerifyFault;
         };
         MultipleSnapshotsNotSupported: {
            (options?: integrityService.vim.MultipleSnapshotsNotSupported): integrityService.vim.MultipleSnapshotsNotSupported;
         };
         NamespaceFull: {
            (options?: integrityService.vim.NamespaceFull): integrityService.vim.NamespaceFull;
         };
         NamespaceLimitReached: {
            (options?: integrityService.vim.NamespaceLimitReached): integrityService.vim.NamespaceLimitReached;
         };
         NamespaceWriteProtected: {
            (options?: integrityService.vim.NamespaceWriteProtected): integrityService.vim.NamespaceWriteProtected;
         };
         NasConfigFault: {
            (options?: integrityService.vim.NasConfigFault): integrityService.vim.NasConfigFault;
         };
         NasConnectionLimitReached: {
            (options?: integrityService.vim.NasConnectionLimitReached): integrityService.vim.NasConnectionLimitReached;
         };
         NasSessionCredentialConflict: {
            (options?: integrityService.vim.NasSessionCredentialConflict): integrityService.vim.NasSessionCredentialConflict;
         };
         NasVolumeNotMounted: {
            (options?: integrityService.vim.NasVolumeNotMounted): integrityService.vim.NasVolumeNotMounted;
         };
         NetworkCopyFault: {
            (options?: integrityService.vim.NetworkCopyFault): integrityService.vim.NetworkCopyFault;
         };
         NetworkDisruptedAndConfigRolledBack: {
            (options?: integrityService.vim.NetworkDisruptedAndConfigRolledBack): integrityService.vim.NetworkDisruptedAndConfigRolledBack;
         };
         NetworkInaccessible: {
            (options?: integrityService.vim.NetworkInaccessible): integrityService.vim.NetworkInaccessible;
         };
         NetworksMayNotBeTheSame: {
            (options?: integrityService.vim.NetworksMayNotBeTheSame): integrityService.vim.NetworksMayNotBeTheSame;
         };
         NicSettingMismatch: {
            (options?: integrityService.vim.NicSettingMismatch): integrityService.vim.NicSettingMismatch;
         };
         NoActiveHostInCluster: {
            (options?: integrityService.vim.NoActiveHostInCluster): integrityService.vim.NoActiveHostInCluster;
         };
         NoAvailableIp: {
            (options?: integrityService.vim.NoAvailableIp): integrityService.vim.NoAvailableIp;
         };
         NoClientCertificate: {
            (options?: integrityService.vim.NoClientCertificate): integrityService.vim.NoClientCertificate;
         };
         NoCompatibleDatastore: {
            (options?: integrityService.vim.NoCompatibleDatastore): integrityService.vim.NoCompatibleDatastore;
         };
         NoCompatibleHardAffinityHost: {
            (options?: integrityService.vim.NoCompatibleHardAffinityHost): integrityService.vim.NoCompatibleHardAffinityHost;
         };
         NoCompatibleHost: {
            (options?: integrityService.vim.NoCompatibleHost): integrityService.vim.NoCompatibleHost;
         };
         NoCompatibleHostWithAccessToDevice: {
            (options?: integrityService.vim.NoCompatibleHostWithAccessToDevice): integrityService.vim.NoCompatibleHostWithAccessToDevice;
         };
         NoCompatibleSoftAffinityHost: {
            (options?: integrityService.vim.NoCompatibleSoftAffinityHost): integrityService.vim.NoCompatibleSoftAffinityHost;
         };
         NoConnectedDatastore: {
            (options?: integrityService.vim.NoConnectedDatastore): integrityService.vim.NoConnectedDatastore;
         };
         NoDiskFound: {
            (options?: integrityService.vim.NoDiskFound): integrityService.vim.NoDiskFound;
         };
         NoDiskSpace: {
            (options?: integrityService.vim.NoDiskSpace): integrityService.vim.NoDiskSpace;
         };
         NoDisksToCustomize: {
            (options?: integrityService.vim.NoDisksToCustomize): integrityService.vim.NoDisksToCustomize;
         };
         NoGateway: {
            (options?: integrityService.vim.NoGateway): integrityService.vim.NoGateway;
         };
         NoGuestHeartbeat: {
            (options?: integrityService.vim.NoGuestHeartbeat): integrityService.vim.NoGuestHeartbeat;
         };
         NoHost: {
            (options?: integrityService.vim.NoHost): integrityService.vim.NoHost;
         };
         NoHostSuitableForFtSecondary: {
            (options?: integrityService.vim.NoHostSuitableForFtSecondary): integrityService.vim.NoHostSuitableForFtSecondary;
         };
         NoLicenseServerConfigured: {
            (options?: integrityService.vim.NoLicenseServerConfigured): integrityService.vim.NoLicenseServerConfigured;
         };
         NoPeerHostFound: {
            (options?: integrityService.vim.NoPeerHostFound): integrityService.vim.NoPeerHostFound;
         };
         NoPermission: {
            (options?: integrityService.vim.NoPermission): integrityService.vim.NoPermission;
         };
         NoPermissionOnAD: {
            (options?: integrityService.vim.NoPermissionOnAD): integrityService.vim.NoPermissionOnAD;
         };
         NoPermissionOnHost: {
            (options?: integrityService.vim.NoPermissionOnHost): integrityService.vim.NoPermissionOnHost;
         };
         NoPermissionOnNasVolume: {
            (options?: integrityService.vim.NoPermissionOnNasVolume): integrityService.vim.NoPermissionOnNasVolume;
         };
         NoSubjectName: {
            (options?: integrityService.vim.NoSubjectName): integrityService.vim.NoSubjectName;
         };
         NoVcManagedIpConfigured: {
            (options?: integrityService.vim.NoVcManagedIpConfigured): integrityService.vim.NoVcManagedIpConfigured;
         };
         NoVirtualNic: {
            (options?: integrityService.vim.NoVirtualNic): integrityService.vim.NoVirtualNic;
         };
         NoVmInVApp: {
            (options?: integrityService.vim.NoVmInVApp): integrityService.vim.NoVmInVApp;
         };
         NonADUserRequired: {
            (options?: integrityService.vim.NonADUserRequired): integrityService.vim.NonADUserRequired;
         };
         NonHomeRDMVMotionNotSupported: {
            (options?: integrityService.vim.NonHomeRDMVMotionNotSupported): integrityService.vim.NonHomeRDMVMotionNotSupported;
         };
         NonPersistentDisksNotSupported: {
            (options?: integrityService.vim.NonPersistentDisksNotSupported): integrityService.vim.NonPersistentDisksNotSupported;
         };
         NonVmwareOuiMacNotSupportedHost: {
            (options?: integrityService.vim.NonVmwareOuiMacNotSupportedHost): integrityService.vim.NonVmwareOuiMacNotSupportedHost;
         };
         NotADirectory: {
            (options?: integrityService.vim.NotADirectory): integrityService.vim.NotADirectory;
         };
         NotAFile: {
            (options?: integrityService.vim.NotAFile): integrityService.vim.NotAFile;
         };
         NotAuthenticated: {
            (options?: integrityService.vim.NotAuthenticated): integrityService.vim.NotAuthenticated;
         };
         NotEnoughCpus: {
            (options?: integrityService.vim.NotEnoughCpus): integrityService.vim.NotEnoughCpus;
         };
         NotEnoughLogicalCpus: {
            (options?: integrityService.vim.NotEnoughLogicalCpus): integrityService.vim.NotEnoughLogicalCpus;
         };
         NotFound: {
            (options?: integrityService.vim.NotFound): integrityService.vim.NotFound;
         };
         NotSupportedDeviceForFTDeviceType: {
            "virtualVmxnet3": string;
            "paraVirtualSCSIController": string;
         };
         NotSupportedDeviceForFT: {
            (options?: integrityService.vim.NotSupportedDeviceForFT): integrityService.vim.NotSupportedDeviceForFT;
         };
         NotSupportedHost: {
            (options?: integrityService.vim.NotSupportedHost): integrityService.vim.NotSupportedHost;
         };
         NotSupportedHostForVFlash: {
            (options?: integrityService.vim.NotSupportedHostForVFlash): integrityService.vim.NotSupportedHostForVFlash;
         };
         NotSupportedHostForVsan: {
            (options?: integrityService.vim.NotSupportedHostForVsan): integrityService.vim.NotSupportedHostForVsan;
         };
         NotSupportedHostInCluster: {
            (options?: integrityService.vim.NotSupportedHostInCluster): integrityService.vim.NotSupportedHostInCluster;
         };
         NotSupportedHostInDvs: {
            (options?: integrityService.vim.NotSupportedHostInDvs): integrityService.vim.NotSupportedHostInDvs;
         };
         NotSupportedHostInHACluster: {
            (options?: integrityService.vim.NotSupportedHostInHACluster): integrityService.vim.NotSupportedHostInHACluster;
         };
         NotUserConfigurableProperty: {
            (options?: integrityService.vim.NotUserConfigurableProperty): integrityService.vim.NotUserConfigurableProperty;
         };
         NumVirtualCoresPerSocketNotSupported: {
            (options?: integrityService.vim.NumVirtualCoresPerSocketNotSupported): integrityService.vim.NumVirtualCoresPerSocketNotSupported;
         };
         NumVirtualCpusExceedsLimit: {
            (options?: integrityService.vim.NumVirtualCpusExceedsLimit): integrityService.vim.NumVirtualCpusExceedsLimit;
         };
         NumVirtualCpusIncompatibleReason: {
            "recordReplay": string;
            "faultTolerance": string;
         };
         NumVirtualCpusIncompatible: {
            (options?: integrityService.vim.NumVirtualCpusIncompatible): integrityService.vim.NumVirtualCpusIncompatible;
         };
         NumVirtualCpusNotSupported: {
            (options?: integrityService.vim.NumVirtualCpusNotSupported): integrityService.vim.NumVirtualCpusNotSupported;
         };
         OperationDisabledByGuest: {
            (options?: integrityService.vim.OperationDisabledByGuest): integrityService.vim.OperationDisabledByGuest;
         };
         OperationDisallowedOnHost: {
            (options?: integrityService.vim.OperationDisallowedOnHost): integrityService.vim.OperationDisallowedOnHost;
         };
         OperationNotSupportedByGuest: {
            (options?: integrityService.vim.OperationNotSupportedByGuest): integrityService.vim.OperationNotSupportedByGuest;
         };
         OutOfBounds: {
            (options?: integrityService.vim.OutOfBounds): integrityService.vim.OutOfBounds;
         };
         OvfAttribute: {
            (options?: integrityService.vim.OvfAttribute): integrityService.vim.OvfAttribute;
         };
         OvfConnectedDevice: {
            (options?: integrityService.vim.OvfConnectedDevice): integrityService.vim.OvfConnectedDevice;
         };
         OvfConnectedDeviceFloppy: {
            (options?: integrityService.vim.OvfConnectedDeviceFloppy): integrityService.vim.OvfConnectedDeviceFloppy;
         };
         OvfConnectedDeviceIso: {
            (options?: integrityService.vim.OvfConnectedDeviceIso): integrityService.vim.OvfConnectedDeviceIso;
         };
         OvfConstraint: {
            (options?: integrityService.vim.OvfConstraint): integrityService.vim.OvfConstraint;
         };
         OvfConsumerCallbackFault: {
            (options?: integrityService.vim.OvfConsumerCallbackFault): integrityService.vim.OvfConsumerCallbackFault;
         };
         OvfConsumerCommunicationError: {
            (options?: integrityService.vim.OvfConsumerCommunicationError): integrityService.vim.OvfConsumerCommunicationError;
         };
         OvfConsumerFault: {
            (options?: integrityService.vim.OvfConsumerFault): integrityService.vim.OvfConsumerFault;
         };
         OvfConsumerInvalidSection: {
            (options?: integrityService.vim.OvfConsumerInvalidSection): integrityService.vim.OvfConsumerInvalidSection;
         };
         OvfConsumerPowerOnFault: {
            (options?: integrityService.vim.OvfConsumerPowerOnFault): integrityService.vim.OvfConsumerPowerOnFault;
         };
         OvfConsumerUndeclaredSection: {
            (options?: integrityService.vim.OvfConsumerUndeclaredSection): integrityService.vim.OvfConsumerUndeclaredSection;
         };
         OvfConsumerUndefinedPrefix: {
            (options?: integrityService.vim.OvfConsumerUndefinedPrefix): integrityService.vim.OvfConsumerUndefinedPrefix;
         };
         OvfConsumerValidationFault: {
            (options?: integrityService.vim.OvfConsumerValidationFault): integrityService.vim.OvfConsumerValidationFault;
         };
         OvfCpuCompatibility: {
            (options?: integrityService.vim.OvfCpuCompatibility): integrityService.vim.OvfCpuCompatibility;
         };
         OvfCpuCompatibilityCheckNotSupported: {
            (options?: integrityService.vim.OvfCpuCompatibilityCheckNotSupported): integrityService.vim.OvfCpuCompatibilityCheckNotSupported;
         };
         OvfDiskMappingNotFound: {
            (options?: integrityService.vim.OvfDiskMappingNotFound): integrityService.vim.OvfDiskMappingNotFound;
         };
         OvfDiskOrderConstraint: {
            (options?: integrityService.vim.OvfDiskOrderConstraint): integrityService.vim.OvfDiskOrderConstraint;
         };
         OvfDuplicateElement: {
            (options?: integrityService.vim.OvfDuplicateElement): integrityService.vim.OvfDuplicateElement;
         };
         OvfDuplicatedElementBoundary: {
            (options?: integrityService.vim.OvfDuplicatedElementBoundary): integrityService.vim.OvfDuplicatedElementBoundary;
         };
         OvfDuplicatedPropertyIdExport: {
            (options?: integrityService.vim.OvfDuplicatedPropertyIdExport): integrityService.vim.OvfDuplicatedPropertyIdExport;
         };
         OvfDuplicatedPropertyIdImport: {
            (options?: integrityService.vim.OvfDuplicatedPropertyIdImport): integrityService.vim.OvfDuplicatedPropertyIdImport;
         };
         OvfElement: {
            (options?: integrityService.vim.OvfElement): integrityService.vim.OvfElement;
         };
         OvfElementInvalidValue: {
            (options?: integrityService.vim.OvfElementInvalidValue): integrityService.vim.OvfElementInvalidValue;
         };
         OvfExport: {
            (options?: integrityService.vim.OvfExport): integrityService.vim.OvfExport;
         };
         OvfExportFailed: {
            (options?: integrityService.vim.OvfExportFailed): integrityService.vim.OvfExportFailed;
         };
         OvfFault: {
            (options?: integrityService.vim.OvfFault): integrityService.vim.OvfFault;
         };
         OvfHardwareCheck: {
            (options?: integrityService.vim.OvfHardwareCheck): integrityService.vim.OvfHardwareCheck;
         };
         OvfHardwareExport: {
            (options?: integrityService.vim.OvfHardwareExport): integrityService.vim.OvfHardwareExport;
         };
         OvfHostResourceConstraint: {
            (options?: integrityService.vim.OvfHostResourceConstraint): integrityService.vim.OvfHostResourceConstraint;
         };
         OvfHostValueNotParsed: {
            (options?: integrityService.vim.OvfHostValueNotParsed): integrityService.vim.OvfHostValueNotParsed;
         };
         OvfImport: {
            (options?: integrityService.vim.OvfImport): integrityService.vim.OvfImport;
         };
         OvfImportFailed: {
            (options?: integrityService.vim.OvfImportFailed): integrityService.vim.OvfImportFailed;
         };
         OvfInternalError: {
            (options?: integrityService.vim.OvfInternalError): integrityService.vim.OvfInternalError;
         };
         OvfInvalidPackage: {
            (options?: integrityService.vim.OvfInvalidPackage): integrityService.vim.OvfInvalidPackage;
         };
         OvfInvalidValue: {
            (options?: integrityService.vim.OvfInvalidValue): integrityService.vim.OvfInvalidValue;
         };
         OvfInvalidValueConfiguration: {
            (options?: integrityService.vim.OvfInvalidValueConfiguration): integrityService.vim.OvfInvalidValueConfiguration;
         };
         OvfInvalidValueEmpty: {
            (options?: integrityService.vim.OvfInvalidValueEmpty): integrityService.vim.OvfInvalidValueEmpty;
         };
         OvfInvalidValueFormatMalformed: {
            (options?: integrityService.vim.OvfInvalidValueFormatMalformed): integrityService.vim.OvfInvalidValueFormatMalformed;
         };
         OvfInvalidValueReference: {
            (options?: integrityService.vim.OvfInvalidValueReference): integrityService.vim.OvfInvalidValueReference;
         };
         OvfInvalidVmName: {
            (options?: integrityService.vim.OvfInvalidVmName): integrityService.vim.OvfInvalidVmName;
         };
         OvfMappedOsId: {
            (options?: integrityService.vim.OvfMappedOsId): integrityService.vim.OvfMappedOsId;
         };
         OvfMissingAttribute: {
            (options?: integrityService.vim.OvfMissingAttribute): integrityService.vim.OvfMissingAttribute;
         };
         OvfMissingElement: {
            (options?: integrityService.vim.OvfMissingElement): integrityService.vim.OvfMissingElement;
         };
         OvfMissingElementNormalBoundary: {
            (options?: integrityService.vim.OvfMissingElementNormalBoundary): integrityService.vim.OvfMissingElementNormalBoundary;
         };
         OvfMissingHardware: {
            (options?: integrityService.vim.OvfMissingHardware): integrityService.vim.OvfMissingHardware;
         };
         OvfNetworkMappingNotSupported: {
            (options?: integrityService.vim.OvfNetworkMappingNotSupported): integrityService.vim.OvfNetworkMappingNotSupported;
         };
         OvfNoHostNic: {
            (options?: integrityService.vim.OvfNoHostNic): integrityService.vim.OvfNoHostNic;
         };
         OvfNoSpaceOnController: {
            (options?: integrityService.vim.OvfNoSpaceOnController): integrityService.vim.OvfNoSpaceOnController;
         };
         OvfNoSupportedHardwareFamily: {
            (options?: integrityService.vim.OvfNoSupportedHardwareFamily): integrityService.vim.OvfNoSupportedHardwareFamily;
         };
         OvfProperty: {
            (options?: integrityService.vim.OvfProperty): integrityService.vim.OvfProperty;
         };
         OvfPropertyExport: {
            (options?: integrityService.vim.OvfPropertyExport): integrityService.vim.OvfPropertyExport;
         };
         OvfPropertyNetwork: {
            (options?: integrityService.vim.OvfPropertyNetwork): integrityService.vim.OvfPropertyNetwork;
         };
         OvfPropertyNetworkExport: {
            (options?: integrityService.vim.OvfPropertyNetworkExport): integrityService.vim.OvfPropertyNetworkExport;
         };
         OvfPropertyQualifier: {
            (options?: integrityService.vim.OvfPropertyQualifier): integrityService.vim.OvfPropertyQualifier;
         };
         OvfPropertyQualifierDuplicate: {
            (options?: integrityService.vim.OvfPropertyQualifierDuplicate): integrityService.vim.OvfPropertyQualifierDuplicate;
         };
         OvfPropertyQualifierIgnored: {
            (options?: integrityService.vim.OvfPropertyQualifierIgnored): integrityService.vim.OvfPropertyQualifierIgnored;
         };
         OvfPropertyType: {
            (options?: integrityService.vim.OvfPropertyType): integrityService.vim.OvfPropertyType;
         };
         OvfPropertyValue: {
            (options?: integrityService.vim.OvfPropertyValue): integrityService.vim.OvfPropertyValue;
         };
         OvfSystemFault: {
            (options?: integrityService.vim.OvfSystemFault): integrityService.vim.OvfSystemFault;
         };
         OvfToXmlUnsupportedElement: {
            (options?: integrityService.vim.OvfToXmlUnsupportedElement): integrityService.vim.OvfToXmlUnsupportedElement;
         };
         OvfUnableToExportDisk: {
            (options?: integrityService.vim.OvfUnableToExportDisk): integrityService.vim.OvfUnableToExportDisk;
         };
         OvfUnexpectedElement: {
            (options?: integrityService.vim.OvfUnexpectedElement): integrityService.vim.OvfUnexpectedElement;
         };
         OvfUnknownDevice: {
            (options?: integrityService.vim.OvfUnknownDevice): integrityService.vim.OvfUnknownDevice;
         };
         OvfUnknownDeviceBacking: {
            (options?: integrityService.vim.OvfUnknownDeviceBacking): integrityService.vim.OvfUnknownDeviceBacking;
         };
         OvfUnknownEntity: {
            (options?: integrityService.vim.OvfUnknownEntity): integrityService.vim.OvfUnknownEntity;
         };
         OvfUnsupportedAttribute: {
            (options?: integrityService.vim.OvfUnsupportedAttribute): integrityService.vim.OvfUnsupportedAttribute;
         };
         OvfUnsupportedAttributeValue: {
            (options?: integrityService.vim.OvfUnsupportedAttributeValue): integrityService.vim.OvfUnsupportedAttributeValue;
         };
         OvfUnsupportedDeviceBackingInfo: {
            (options?: integrityService.vim.OvfUnsupportedDeviceBackingInfo): integrityService.vim.OvfUnsupportedDeviceBackingInfo;
         };
         OvfUnsupportedDeviceBackingOption: {
            (options?: integrityService.vim.OvfUnsupportedDeviceBackingOption): integrityService.vim.OvfUnsupportedDeviceBackingOption;
         };
         OvfUnsupportedDeviceExport: {
            (options?: integrityService.vim.OvfUnsupportedDeviceExport): integrityService.vim.OvfUnsupportedDeviceExport;
         };
         OvfUnsupportedDiskProvisioning: {
            (options?: integrityService.vim.OvfUnsupportedDiskProvisioning): integrityService.vim.OvfUnsupportedDiskProvisioning;
         };
         OvfUnsupportedElement: {
            (options?: integrityService.vim.OvfUnsupportedElement): integrityService.vim.OvfUnsupportedElement;
         };
         OvfUnsupportedElementValue: {
            (options?: integrityService.vim.OvfUnsupportedElementValue): integrityService.vim.OvfUnsupportedElementValue;
         };
         OvfUnsupportedPackage: {
            (options?: integrityService.vim.OvfUnsupportedPackage): integrityService.vim.OvfUnsupportedPackage;
         };
         OvfUnsupportedSection: {
            (options?: integrityService.vim.OvfUnsupportedSection): integrityService.vim.OvfUnsupportedSection;
         };
         OvfUnsupportedSubType: {
            (options?: integrityService.vim.OvfUnsupportedSubType): integrityService.vim.OvfUnsupportedSubType;
         };
         OvfUnsupportedType: {
            (options?: integrityService.vim.OvfUnsupportedType): integrityService.vim.OvfUnsupportedType;
         };
         OvfWrongElement: {
            (options?: integrityService.vim.OvfWrongElement): integrityService.vim.OvfWrongElement;
         };
         OvfWrongNamespace: {
            (options?: integrityService.vim.OvfWrongNamespace): integrityService.vim.OvfWrongNamespace;
         };
         OvfXmlFormat: {
            (options?: integrityService.vim.OvfXmlFormat): integrityService.vim.OvfXmlFormat;
         };
         PatchAlreadyInstalled: {
            (options?: integrityService.vim.PatchAlreadyInstalled): integrityService.vim.PatchAlreadyInstalled;
         };
         PatchBinariesNotFound: {
            (options?: integrityService.vim.PatchBinariesNotFound): integrityService.vim.PatchBinariesNotFound;
         };
         PatchInstallFailed: {
            (options?: integrityService.vim.PatchInstallFailed): integrityService.vim.PatchInstallFailed;
         };
         PatchIntegrityError: {
            (options?: integrityService.vim.PatchIntegrityError): integrityService.vim.PatchIntegrityError;
         };
         PatchMetadataCorrupted: {
            (options?: integrityService.vim.PatchMetadataCorrupted): integrityService.vim.PatchMetadataCorrupted;
         };
         PatchMetadataInvalid: {
            (options?: integrityService.vim.PatchMetadataInvalid): integrityService.vim.PatchMetadataInvalid;
         };
         PatchMetadataNotFound: {
            (options?: integrityService.vim.PatchMetadataNotFound): integrityService.vim.PatchMetadataNotFound;
         };
         PatchMissingDependencies: {
            (options?: integrityService.vim.PatchMissingDependencies): integrityService.vim.PatchMissingDependencies;
         };
         PatchNotApplicable: {
            (options?: integrityService.vim.PatchNotApplicable): integrityService.vim.PatchNotApplicable;
         };
         PatchSuperseded: {
            (options?: integrityService.vim.PatchSuperseded): integrityService.vim.PatchSuperseded;
         };
         PhysCompatRDMNotSupported: {
            (options?: integrityService.vim.PhysCompatRDMNotSupported): integrityService.vim.PhysCompatRDMNotSupported;
         };
         PlatformConfigFault: {
            (options?: integrityService.vim.PlatformConfigFault): integrityService.vim.PlatformConfigFault;
         };
         PowerOnFtSecondaryFailed: {
            (options?: integrityService.vim.PowerOnFtSecondaryFailed): integrityService.vim.PowerOnFtSecondaryFailed;
         };
         PowerOnFtSecondaryTimedout: {
            (options?: integrityService.vim.PowerOnFtSecondaryTimedout): integrityService.vim.PowerOnFtSecondaryTimedout;
         };
         ProfileUpdateFailedUpdateFailure: {
            (options?: integrityService.vim.ProfileUpdateFailedUpdateFailure): integrityService.vim.ProfileUpdateFailedUpdateFailure;
         };
         ArrayOfProfileUpdateFailedUpdateFailure: {
            (options?: integrityService.vim.ArrayOfProfileUpdateFailedUpdateFailure): integrityService.vim.ArrayOfProfileUpdateFailedUpdateFailure;
         };
         ProfileUpdateFailed: {
            (options?: integrityService.vim.ProfileUpdateFailed): integrityService.vim.ProfileUpdateFailed;
         };
         QuestionPending: {
            (options?: integrityService.vim.QuestionPending): integrityService.vim.QuestionPending;
         };
         QuiesceDatastoreIOForHAFailed: {
            (options?: integrityService.vim.QuiesceDatastoreIOForHAFailed): integrityService.vim.QuiesceDatastoreIOForHAFailed;
         };
         RDMConversionNotSupported: {
            (options?: integrityService.vim.RDMConversionNotSupported): integrityService.vim.RDMConversionNotSupported;
         };
         RDMNotPreserved: {
            (options?: integrityService.vim.RDMNotPreserved): integrityService.vim.RDMNotPreserved;
         };
         RDMNotSupported: {
            (options?: integrityService.vim.RDMNotSupported): integrityService.vim.RDMNotSupported;
         };
         RDMNotSupportedOnDatastore: {
            (options?: integrityService.vim.RDMNotSupportedOnDatastore): integrityService.vim.RDMNotSupportedOnDatastore;
         };
         RDMPointsToInaccessibleDisk: {
            (options?: integrityService.vim.RDMPointsToInaccessibleDisk): integrityService.vim.RDMPointsToInaccessibleDisk;
         };
         RawDiskNotSupported: {
            (options?: integrityService.vim.RawDiskNotSupported): integrityService.vim.RawDiskNotSupported;
         };
         ReadHostResourcePoolTreeFailed: {
            (options?: integrityService.vim.ReadHostResourcePoolTreeFailed): integrityService.vim.ReadHostResourcePoolTreeFailed;
         };
         ReadOnlyDisksWithLegacyDestination: {
            (options?: integrityService.vim.ReadOnlyDisksWithLegacyDestination): integrityService.vim.ReadOnlyDisksWithLegacyDestination;
         };
         RebootRequired: {
            (options?: integrityService.vim.RebootRequired): integrityService.vim.RebootRequired;
         };
         RecordReplayDisabled: {
            (options?: integrityService.vim.RecordReplayDisabled): integrityService.vim.RecordReplayDisabled;
         };
         RemoteDeviceNotSupported: {
            (options?: integrityService.vim.RemoteDeviceNotSupported): integrityService.vim.RemoteDeviceNotSupported;
         };
         RemoveFailed: {
            (options?: integrityService.vim.RemoveFailed): integrityService.vim.RemoveFailed;
         };
         ReplicationConfigFault: {
            (options?: integrityService.vim.ReplicationConfigFault): integrityService.vim.ReplicationConfigFault;
         };
         ReplicationDiskConfigFaultReasonForFault: {
            "diskNotFound": string;
            "diskTypeNotSupported": string;
            "invalidDiskKey": string;
            "invalidDiskReplicationId": string;
            "duplicateDiskReplicationId": string;
            "invalidPersistentFilePath": string;
            "reconfigureDiskReplicationIdNotAllowed": string;
         };
         ReplicationDiskConfigFault: {
            (options?: integrityService.vim.ReplicationDiskConfigFault): integrityService.vim.ReplicationDiskConfigFault;
         };
         ReplicationFault: {
            (options?: integrityService.vim.ReplicationFault): integrityService.vim.ReplicationFault;
         };
         ReplicationIncompatibleWithFT: {
            (options?: integrityService.vim.ReplicationIncompatibleWithFT): integrityService.vim.ReplicationIncompatibleWithFT;
         };
         ReplicationInvalidOptions: {
            (options?: integrityService.vim.ReplicationInvalidOptions): integrityService.vim.ReplicationInvalidOptions;
         };
         ReplicationNotSupportedOnHost: {
            (options?: integrityService.vim.ReplicationNotSupportedOnHost): integrityService.vim.ReplicationNotSupportedOnHost;
         };
         ReplicationVmConfigFaultReasonForFault: {
            "incompatibleHwVersion": string;
            "invalidVmReplicationId": string;
            "invalidGenerationNumber": string;
            "outOfBoundsRpoValue": string;
            "invalidDestinationIpAddress": string;
            "invalidDestinationPort": string;
            "invalidExtraVmOptions": string;
            "staleGenerationNumber": string;
            "reconfigureVmReplicationIdNotAllowed": string;
            "cannotRetrieveVmReplicationConfiguration": string;
            "replicationAlreadyEnabled": string;
            "invalidPriorConfiguration": string;
            "replicationNotEnabled": string;
            "replicationConfigurationFailed": string;
         };
         ReplicationVmConfigFault: {
            (options?: integrityService.vim.ReplicationVmConfigFault): integrityService.vim.ReplicationVmConfigFault;
         };
         ReplicationVmFaultReasonForFault: {
            "notConfigured": string;
            "poweredOff": string;
            "suspended": string;
            "poweredOn": string;
            "offlineReplicating": string;
            "invalidState": string;
            "invalidInstanceId": string;
         };
         ReplicationVmFault: {
            (options?: integrityService.vim.ReplicationVmFault): integrityService.vim.ReplicationVmFault;
         };
         ResourceInUse: {
            (options?: integrityService.vim.ResourceInUse): integrityService.vim.ResourceInUse;
         };
         ResourceNotAvailable: {
            (options?: integrityService.vim.ResourceNotAvailable): integrityService.vim.ResourceNotAvailable;
         };
         RestrictedVersion: {
            (options?: integrityService.vim.RestrictedVersion): integrityService.vim.RestrictedVersion;
         };
         RollbackFailure: {
            (options?: integrityService.vim.RollbackFailure): integrityService.vim.RollbackFailure;
         };
         RuleViolation: {
            (options?: integrityService.vim.RuleViolation): integrityService.vim.RuleViolation;
         };
         SSLDisabledFault: {
            (options?: integrityService.vim.SSLDisabledFault): integrityService.vim.SSLDisabledFault;
         };
         SSLVerifyFault: {
            (options?: integrityService.vim.SSLVerifyFault): integrityService.vim.SSLVerifyFault;
         };
         SSPIChallenge: {
            (options?: integrityService.vim.SSPIChallenge): integrityService.vim.SSPIChallenge;
         };
         SecondaryVmAlreadyDisabled: {
            (options?: integrityService.vim.SecondaryVmAlreadyDisabled): integrityService.vim.SecondaryVmAlreadyDisabled;
         };
         SecondaryVmAlreadyEnabled: {
            (options?: integrityService.vim.SecondaryVmAlreadyEnabled): integrityService.vim.SecondaryVmAlreadyEnabled;
         };
         SecondaryVmAlreadyRegistered: {
            (options?: integrityService.vim.SecondaryVmAlreadyRegistered): integrityService.vim.SecondaryVmAlreadyRegistered;
         };
         SecondaryVmNotRegistered: {
            (options?: integrityService.vim.SecondaryVmNotRegistered): integrityService.vim.SecondaryVmNotRegistered;
         };
         SharedBusControllerNotSupported: {
            (options?: integrityService.vim.SharedBusControllerNotSupported): integrityService.vim.SharedBusControllerNotSupported;
         };
         ShrinkDiskFault: {
            (options?: integrityService.vim.ShrinkDiskFault): integrityService.vim.ShrinkDiskFault;
         };
         SnapshotCloneNotSupported: {
            (options?: integrityService.vim.SnapshotCloneNotSupported): integrityService.vim.SnapshotCloneNotSupported;
         };
         SnapshotCopyNotSupported: {
            (options?: integrityService.vim.SnapshotCopyNotSupported): integrityService.vim.SnapshotCopyNotSupported;
         };
         SnapshotDisabled: {
            (options?: integrityService.vim.SnapshotDisabled): integrityService.vim.SnapshotDisabled;
         };
         SnapshotFault: {
            (options?: integrityService.vim.SnapshotFault): integrityService.vim.SnapshotFault;
         };
         SnapshotIncompatibleDeviceInVm: {
            (options?: integrityService.vim.SnapshotIncompatibleDeviceInVm): integrityService.vim.SnapshotIncompatibleDeviceInVm;
         };
         SnapshotLocked: {
            (options?: integrityService.vim.SnapshotLocked): integrityService.vim.SnapshotLocked;
         };
         SnapshotMoveFromNonHomeNotSupported: {
            (options?: integrityService.vim.SnapshotMoveFromNonHomeNotSupported): integrityService.vim.SnapshotMoveFromNonHomeNotSupported;
         };
         SnapshotMoveNotSupported: {
            (options?: integrityService.vim.SnapshotMoveNotSupported): integrityService.vim.SnapshotMoveNotSupported;
         };
         SnapshotMoveToNonHomeNotSupported: {
            (options?: integrityService.vim.SnapshotMoveToNonHomeNotSupported): integrityService.vim.SnapshotMoveToNonHomeNotSupported;
         };
         SnapshotNoChange: {
            (options?: integrityService.vim.SnapshotNoChange): integrityService.vim.SnapshotNoChange;
         };
         SnapshotRevertIssue: {
            (options?: integrityService.vim.SnapshotRevertIssue): integrityService.vim.SnapshotRevertIssue;
         };
         SoftRuleVioCorrectionDisallowed: {
            (options?: integrityService.vim.SoftRuleVioCorrectionDisallowed): integrityService.vim.SoftRuleVioCorrectionDisallowed;
         };
         SoftRuleVioCorrectionImpact: {
            (options?: integrityService.vim.SoftRuleVioCorrectionImpact): integrityService.vim.SoftRuleVioCorrectionImpact;
         };
         SsdDiskNotAvailable: {
            (options?: integrityService.vim.SsdDiskNotAvailable): integrityService.vim.SsdDiskNotAvailable;
         };
         StorageDrsCannotMoveDiskInMultiWriterMode: {
            (options?: integrityService.vim.StorageDrsCannotMoveDiskInMultiWriterMode): integrityService.vim.StorageDrsCannotMoveDiskInMultiWriterMode;
         };
         StorageDrsCannotMoveFTVm: {
            (options?: integrityService.vim.StorageDrsCannotMoveFTVm): integrityService.vim.StorageDrsCannotMoveFTVm;
         };
         StorageDrsCannotMoveIndependentDisk: {
            (options?: integrityService.vim.StorageDrsCannotMoveIndependentDisk): integrityService.vim.StorageDrsCannotMoveIndependentDisk;
         };
         StorageDrsCannotMoveManuallyPlacedSwapFile: {
            (options?: integrityService.vim.StorageDrsCannotMoveManuallyPlacedSwapFile): integrityService.vim.StorageDrsCannotMoveManuallyPlacedSwapFile;
         };
         StorageDrsCannotMoveManuallyPlacedVm: {
            (options?: integrityService.vim.StorageDrsCannotMoveManuallyPlacedVm): integrityService.vim.StorageDrsCannotMoveManuallyPlacedVm;
         };
         StorageDrsCannotMoveSharedDisk: {
            (options?: integrityService.vim.StorageDrsCannotMoveSharedDisk): integrityService.vim.StorageDrsCannotMoveSharedDisk;
         };
         StorageDrsCannotMoveTemplate: {
            (options?: integrityService.vim.StorageDrsCannotMoveTemplate): integrityService.vim.StorageDrsCannotMoveTemplate;
         };
         StorageDrsCannotMoveVmInUserFolder: {
            (options?: integrityService.vim.StorageDrsCannotMoveVmInUserFolder): integrityService.vim.StorageDrsCannotMoveVmInUserFolder;
         };
         StorageDrsCannotMoveVmWithMountedCDROM: {
            (options?: integrityService.vim.StorageDrsCannotMoveVmWithMountedCDROM): integrityService.vim.StorageDrsCannotMoveVmWithMountedCDROM;
         };
         StorageDrsCannotMoveVmWithNoFilesInLayout: {
            (options?: integrityService.vim.StorageDrsCannotMoveVmWithNoFilesInLayout): integrityService.vim.StorageDrsCannotMoveVmWithNoFilesInLayout;
         };
         StorageDrsDatacentersCannotShareDatastore: {
            (options?: integrityService.vim.StorageDrsDatacentersCannotShareDatastore): integrityService.vim.StorageDrsDatacentersCannotShareDatastore;
         };
         StorageDrsDisabledOnVm: {
            (options?: integrityService.vim.StorageDrsDisabledOnVm): integrityService.vim.StorageDrsDisabledOnVm;
         };
         StorageDrsIolbDisabledInternally: {
            (options?: integrityService.vim.StorageDrsIolbDisabledInternally): integrityService.vim.StorageDrsIolbDisabledInternally;
         };
         StorageDrsUnableToMoveFiles: {
            (options?: integrityService.vim.StorageDrsUnableToMoveFiles): integrityService.vim.StorageDrsUnableToMoveFiles;
         };
         StorageVMotionNotSupported: {
            (options?: integrityService.vim.StorageVMotionNotSupported): integrityService.vim.StorageVMotionNotSupported;
         };
         StorageVmotionIncompatible: {
            (options?: integrityService.vim.StorageVmotionIncompatible): integrityService.vim.StorageVmotionIncompatible;
         };
         SuspendedRelocateNotSupported: {
            (options?: integrityService.vim.SuspendedRelocateNotSupported): integrityService.vim.SuspendedRelocateNotSupported;
         };
         SwapDatastoreNotWritableOnHost: {
            (options?: integrityService.vim.SwapDatastoreNotWritableOnHost): integrityService.vim.SwapDatastoreNotWritableOnHost;
         };
         SwapDatastoreUnset: {
            (options?: integrityService.vim.SwapDatastoreUnset): integrityService.vim.SwapDatastoreUnset;
         };
         SwapPlacementOverrideNotSupported: {
            (options?: integrityService.vim.SwapPlacementOverrideNotSupported): integrityService.vim.SwapPlacementOverrideNotSupported;
         };
         SwitchIpUnset: {
            (options?: integrityService.vim.SwitchIpUnset): integrityService.vim.SwitchIpUnset;
         };
         SwitchNotInUpgradeMode: {
            (options?: integrityService.vim.SwitchNotInUpgradeMode): integrityService.vim.SwitchNotInUpgradeMode;
         };
         TaskInProgress: {
            (options?: integrityService.vim.TaskInProgress): integrityService.vim.TaskInProgress;
         };
         ThirdPartyLicenseAssignmentFailedReason: {
            "licenseAssignmentFailed": string;
            "moduleNotInstalled": string;
         };
         ThirdPartyLicenseAssignmentFailed: {
            (options?: integrityService.vim.ThirdPartyLicenseAssignmentFailed): integrityService.vim.ThirdPartyLicenseAssignmentFailed;
         };
         Timedout: {
            (options?: integrityService.vim.Timedout): integrityService.vim.Timedout;
         };
         TooManyConcurrentNativeClones: {
            (options?: integrityService.vim.TooManyConcurrentNativeClones): integrityService.vim.TooManyConcurrentNativeClones;
         };
         TooManyConsecutiveOverrides: {
            (options?: integrityService.vim.TooManyConsecutiveOverrides): integrityService.vim.TooManyConsecutiveOverrides;
         };
         TooManyDevices: {
            (options?: integrityService.vim.TooManyDevices): integrityService.vim.TooManyDevices;
         };
         TooManyDisksOnLegacyHost: {
            (options?: integrityService.vim.TooManyDisksOnLegacyHost): integrityService.vim.TooManyDisksOnLegacyHost;
         };
         TooManyGuestLogons: {
            (options?: integrityService.vim.TooManyGuestLogons): integrityService.vim.TooManyGuestLogons;
         };
         TooManyHosts: {
            (options?: integrityService.vim.TooManyHosts): integrityService.vim.TooManyHosts;
         };
         TooManyNativeCloneLevels: {
            (options?: integrityService.vim.TooManyNativeCloneLevels): integrityService.vim.TooManyNativeCloneLevels;
         };
         TooManyNativeClonesOnFile: {
            (options?: integrityService.vim.TooManyNativeClonesOnFile): integrityService.vim.TooManyNativeClonesOnFile;
         };
         TooManySnapshotLevels: {
            (options?: integrityService.vim.TooManySnapshotLevels): integrityService.vim.TooManySnapshotLevels;
         };
         ToolsAlreadyUpgraded: {
            (options?: integrityService.vim.ToolsAlreadyUpgraded): integrityService.vim.ToolsAlreadyUpgraded;
         };
         ToolsAutoUpgradeNotSupported: {
            (options?: integrityService.vim.ToolsAutoUpgradeNotSupported): integrityService.vim.ToolsAutoUpgradeNotSupported;
         };
         ToolsImageCopyFailed: {
            (options?: integrityService.vim.ToolsImageCopyFailed): integrityService.vim.ToolsImageCopyFailed;
         };
         ToolsImageNotAvailable: {
            (options?: integrityService.vim.ToolsImageNotAvailable): integrityService.vim.ToolsImageNotAvailable;
         };
         ToolsImageSignatureCheckFailed: {
            (options?: integrityService.vim.ToolsImageSignatureCheckFailed): integrityService.vim.ToolsImageSignatureCheckFailed;
         };
         ToolsInstallationInProgress: {
            (options?: integrityService.vim.ToolsInstallationInProgress): integrityService.vim.ToolsInstallationInProgress;
         };
         ToolsUnavailable: {
            (options?: integrityService.vim.ToolsUnavailable): integrityService.vim.ToolsUnavailable;
         };
         ToolsUpgradeCancelled: {
            (options?: integrityService.vim.ToolsUpgradeCancelled): integrityService.vim.ToolsUpgradeCancelled;
         };
         UnSupportedDatastoreForVFlash: {
            (options?: integrityService.vim.UnSupportedDatastoreForVFlash): integrityService.vim.UnSupportedDatastoreForVFlash;
         };
         UncommittedUndoableDisk: {
            (options?: integrityService.vim.UncommittedUndoableDisk): integrityService.vim.UncommittedUndoableDisk;
         };
         UnconfiguredPropertyValue: {
            (options?: integrityService.vim.UnconfiguredPropertyValue): integrityService.vim.UnconfiguredPropertyValue;
         };
         UncustomizableGuest: {
            (options?: integrityService.vim.UncustomizableGuest): integrityService.vim.UncustomizableGuest;
         };
         UnexpectedCustomizationFault: {
            (options?: integrityService.vim.UnexpectedCustomizationFault): integrityService.vim.UnexpectedCustomizationFault;
         };
         UnrecognizedHost: {
            (options?: integrityService.vim.UnrecognizedHost): integrityService.vim.UnrecognizedHost;
         };
         UnsharedSwapVMotionNotSupported: {
            (options?: integrityService.vim.UnsharedSwapVMotionNotSupported): integrityService.vim.UnsharedSwapVMotionNotSupported;
         };
         UnsupportedDatastore: {
            (options?: integrityService.vim.UnsupportedDatastore): integrityService.vim.UnsupportedDatastore;
         };
         UnsupportedGuest: {
            (options?: integrityService.vim.UnsupportedGuest): integrityService.vim.UnsupportedGuest;
         };
         UnsupportedVimApiVersion: {
            (options?: integrityService.vim.UnsupportedVimApiVersion): integrityService.vim.UnsupportedVimApiVersion;
         };
         UnsupportedVmxLocation: {
            (options?: integrityService.vim.UnsupportedVmxLocation): integrityService.vim.UnsupportedVmxLocation;
         };
         UnusedVirtualDiskBlocksNotScrubbed: {
            (options?: integrityService.vim.UnusedVirtualDiskBlocksNotScrubbed): integrityService.vim.UnusedVirtualDiskBlocksNotScrubbed;
         };
         UserNotFound: {
            (options?: integrityService.vim.UserNotFound): integrityService.vim.UserNotFound;
         };
         VAppConfigFault: {
            (options?: integrityService.vim.VAppConfigFault): integrityService.vim.VAppConfigFault;
         };
         VAppNotRunning: {
            (options?: integrityService.vim.VAppNotRunning): integrityService.vim.VAppNotRunning;
         };
         VAppOperationInProgress: {
            (options?: integrityService.vim.VAppOperationInProgress): integrityService.vim.VAppOperationInProgress;
         };
         VAppPropertyFault: {
            (options?: integrityService.vim.VAppPropertyFault): integrityService.vim.VAppPropertyFault;
         };
         VAppTaskInProgress: {
            (options?: integrityService.vim.VAppTaskInProgress): integrityService.vim.VAppTaskInProgress;
         };
         VFlashModuleNotSupportedReason: {
            "CacheModeNotSupported": string;
            "CacheConsistencyTypeNotSupported": string;
            "CacheBlockSizeNotSupported": string;
            "CacheReservationNotSupported": string;
            "DiskSizeNotSupported": string;
         };
         VFlashModuleNotSupported: {
            (options?: integrityService.vim.VFlashModuleNotSupported): integrityService.vim.VFlashModuleNotSupported;
         };
         VFlashModuleVersionIncompatible: {
            (options?: integrityService.vim.VFlashModuleVersionIncompatible): integrityService.vim.VFlashModuleVersionIncompatible;
         };
         VMINotSupported: {
            (options?: integrityService.vim.VMINotSupported): integrityService.vim.VMINotSupported;
         };
         VMOnConflictDVPort: {
            (options?: integrityService.vim.VMOnConflictDVPort): integrityService.vim.VMOnConflictDVPort;
         };
         VMOnVirtualIntranet: {
            (options?: integrityService.vim.VMOnVirtualIntranet): integrityService.vim.VMOnVirtualIntranet;
         };
         VMotionAcrossNetworkNotSupported: {
            (options?: integrityService.vim.VMotionAcrossNetworkNotSupported): integrityService.vim.VMotionAcrossNetworkNotSupported;
         };
         VMotionInterfaceIssue: {
            (options?: integrityService.vim.VMotionInterfaceIssue): integrityService.vim.VMotionInterfaceIssue;
         };
         VMotionLinkCapacityLow: {
            (options?: integrityService.vim.VMotionLinkCapacityLow): integrityService.vim.VMotionLinkCapacityLow;
         };
         VMotionLinkDown: {
            (options?: integrityService.vim.VMotionLinkDown): integrityService.vim.VMotionLinkDown;
         };
         VMotionNotConfigured: {
            (options?: integrityService.vim.VMotionNotConfigured): integrityService.vim.VMotionNotConfigured;
         };
         VMotionNotLicensed: {
            (options?: integrityService.vim.VMotionNotLicensed): integrityService.vim.VMotionNotLicensed;
         };
         VMotionNotSupported: {
            (options?: integrityService.vim.VMotionNotSupported): integrityService.vim.VMotionNotSupported;
         };
         VMotionProtocolIncompatible: {
            (options?: integrityService.vim.VMotionProtocolIncompatible): integrityService.vim.VMotionProtocolIncompatible;
         };
         VimFault: {
            (options?: integrityService.vim.VimFault): integrityService.vim.VimFault;
         };
         VirtualDiskBlocksNotFullyProvisioned: {
            (options?: integrityService.vim.VirtualDiskBlocksNotFullyProvisioned): integrityService.vim.VirtualDiskBlocksNotFullyProvisioned;
         };
         VirtualDiskModeNotSupported: {
            (options?: integrityService.vim.VirtualDiskModeNotSupported): integrityService.vim.VirtualDiskModeNotSupported;
         };
         VirtualEthernetCardNotSupported: {
            (options?: integrityService.vim.VirtualEthernetCardNotSupported): integrityService.vim.VirtualEthernetCardNotSupported;
         };
         VirtualHardwareCompatibilityIssue: {
            (options?: integrityService.vim.VirtualHardwareCompatibilityIssue): integrityService.vim.VirtualHardwareCompatibilityIssue;
         };
         VirtualHardwareVersionNotSupported: {
            (options?: integrityService.vim.VirtualHardwareVersionNotSupported): integrityService.vim.VirtualHardwareVersionNotSupported;
         };
         VmAlreadyExistsInDatacenter: {
            (options?: integrityService.vim.VmAlreadyExistsInDatacenter): integrityService.vim.VmAlreadyExistsInDatacenter;
         };
         VmConfigFault: {
            (options?: integrityService.vim.VmConfigFault): integrityService.vim.VmConfigFault;
         };
         VmConfigIncompatibleForFaultTolerance: {
            (options?: integrityService.vim.VmConfigIncompatibleForFaultTolerance): integrityService.vim.VmConfigIncompatibleForFaultTolerance;
         };
         VmConfigIncompatibleForRecordReplay: {
            (options?: integrityService.vim.VmConfigIncompatibleForRecordReplay): integrityService.vim.VmConfigIncompatibleForRecordReplay;
         };
         VmFaultToleranceConfigIssueReasonForIssue: {
            "haNotEnabled": string;
            "moreThanOneSecondary": string;
            "recordReplayNotSupported": string;
            "replayNotSupported": string;
            "templateVm": string;
            "multipleVCPU": string;
            "hostInactive": string;
            "ftUnsupportedHardware": string;
            "ftUnsupportedProduct": string;
            "missingVMotionNic": string;
            "missingFTLoggingNic": string;
            "thinDisk": string;
            "verifySSLCertificateFlagNotSet": string;
            "hasSnapshots": string;
            "noConfig": string;
            "ftSecondaryVm": string;
            "hasLocalDisk": string;
            "esxAgentVm": string;
            "video3dEnabled": string;
            "hasUnsupportedDisk": string;
            "hasNestedHVConfiguration": string;
            "hasVFlashConfiguration": string;
         };
         VmFaultToleranceConfigIssue: {
            (options?: integrityService.vim.VmFaultToleranceConfigIssue): integrityService.vim.VmFaultToleranceConfigIssue;
         };
         VmFaultToleranceConfigIssueWrapper: {
            (options?: integrityService.vim.VmFaultToleranceConfigIssueWrapper): integrityService.vim.VmFaultToleranceConfigIssueWrapper;
         };
         VmFaultToleranceInvalidFileBackingDeviceType: {
            "virtualFloppy": string;
            "virtualCdrom": string;
            "virtualSerialPort": string;
            "virtualParallelPort": string;
            "virtualDisk": string;
         };
         VmFaultToleranceInvalidFileBacking: {
            (options?: integrityService.vim.VmFaultToleranceInvalidFileBacking): integrityService.vim.VmFaultToleranceInvalidFileBacking;
         };
         VmFaultToleranceIssue: {
            (options?: integrityService.vim.VmFaultToleranceIssue): integrityService.vim.VmFaultToleranceIssue;
         };
         VmFaultToleranceOpIssuesList: {
            (options?: integrityService.vim.VmFaultToleranceOpIssuesList): integrityService.vim.VmFaultToleranceOpIssuesList;
         };
         VmFaultToleranceTooManyVMsOnHost: {
            (options?: integrityService.vim.VmFaultToleranceTooManyVMsOnHost): integrityService.vim.VmFaultToleranceTooManyVMsOnHost;
         };
         VmHostAffinityRuleViolation: {
            (options?: integrityService.vim.VmHostAffinityRuleViolation): integrityService.vim.VmHostAffinityRuleViolation;
         };
         VmLimitLicense: {
            (options?: integrityService.vim.VmLimitLicense): integrityService.vim.VmLimitLicense;
         };
         VmMetadataManagerFault: {
            (options?: integrityService.vim.VmMetadataManagerFault): integrityService.vim.VmMetadataManagerFault;
         };
         VmMonitorIncompatibleForFaultTolerance: {
            (options?: integrityService.vim.VmMonitorIncompatibleForFaultTolerance): integrityService.vim.VmMonitorIncompatibleForFaultTolerance;
         };
         VmPowerOnDisabled: {
            (options?: integrityService.vim.VmPowerOnDisabled): integrityService.vim.VmPowerOnDisabled;
         };
         VmToolsUpgradeFault: {
            (options?: integrityService.vim.VmToolsUpgradeFault): integrityService.vim.VmToolsUpgradeFault;
         };
         VmValidateMaxDevice: {
            (options?: integrityService.vim.VmValidateMaxDevice): integrityService.vim.VmValidateMaxDevice;
         };
         VmWwnConflict: {
            (options?: integrityService.vim.VmWwnConflict): integrityService.vim.VmWwnConflict;
         };
         VmfsAlreadyMounted: {
            (options?: integrityService.vim.VmfsAlreadyMounted): integrityService.vim.VmfsAlreadyMounted;
         };
         VmfsAmbiguousMount: {
            (options?: integrityService.vim.VmfsAmbiguousMount): integrityService.vim.VmfsAmbiguousMount;
         };
         VmfsMountFault: {
            (options?: integrityService.vim.VmfsMountFault): integrityService.vim.VmfsMountFault;
         };
         VmotionInterfaceNotEnabled: {
            (options?: integrityService.vim.VmotionInterfaceNotEnabled): integrityService.vim.VmotionInterfaceNotEnabled;
         };
         VolumeEditorError: {
            (options?: integrityService.vim.VolumeEditorError): integrityService.vim.VolumeEditorError;
         };
         VramLimitLicense: {
            (options?: integrityService.vim.VramLimitLicense): integrityService.vim.VramLimitLicense;
         };
         VsanClusterUuidMismatch: {
            (options?: integrityService.vim.VsanClusterUuidMismatch): integrityService.vim.VsanClusterUuidMismatch;
         };
         VsanDiskFault: {
            (options?: integrityService.vim.VsanDiskFault): integrityService.vim.VsanDiskFault;
         };
         VsanFault: {
            (options?: integrityService.vim.VsanFault): integrityService.vim.VsanFault;
         };
         VspanDestPortConflict: {
            (options?: integrityService.vim.VspanDestPortConflict): integrityService.vim.VspanDestPortConflict;
         };
         VspanPortConflict: {
            (options?: integrityService.vim.VspanPortConflict): integrityService.vim.VspanPortConflict;
         };
         VspanPortMoveFault: {
            (options?: integrityService.vim.VspanPortMoveFault): integrityService.vim.VspanPortMoveFault;
         };
         VspanPortPromiscChangeFault: {
            (options?: integrityService.vim.VspanPortPromiscChangeFault): integrityService.vim.VspanPortPromiscChangeFault;
         };
         VspanPortgroupPromiscChangeFault: {
            (options?: integrityService.vim.VspanPortgroupPromiscChangeFault): integrityService.vim.VspanPortgroupPromiscChangeFault;
         };
         VspanPortgroupTypeChangeFault: {
            (options?: integrityService.vim.VspanPortgroupTypeChangeFault): integrityService.vim.VspanPortgroupTypeChangeFault;
         };
         VspanPromiscuousPortNotSupported: {
            (options?: integrityService.vim.VspanPromiscuousPortNotSupported): integrityService.vim.VspanPromiscuousPortNotSupported;
         };
         VspanSameSessionPortConflict: {
            (options?: integrityService.vim.VspanSameSessionPortConflict): integrityService.vim.VspanSameSessionPortConflict;
         };
         WakeOnLanNotSupported: {
            (options?: integrityService.vim.WakeOnLanNotSupported): integrityService.vim.WakeOnLanNotSupported;
         };
         WakeOnLanNotSupportedByVmotionNIC: {
            (options?: integrityService.vim.WakeOnLanNotSupportedByVmotionNIC): integrityService.vim.WakeOnLanNotSupportedByVmotionNIC;
         };
         WillLoseHAProtectionResolution: {
            "svmotion": string;
            "relocate": string;
         };
         WillLoseHAProtection: {
            (options?: integrityService.vim.WillLoseHAProtection): integrityService.vim.WillLoseHAProtection;
         };
         WillModifyConfigCpuRequirements: {
            (options?: integrityService.vim.WillModifyConfigCpuRequirements): integrityService.vim.WillModifyConfigCpuRequirements;
         };
         WillResetSnapshotDirectory: {
            (options?: integrityService.vim.WillResetSnapshotDirectory): integrityService.vim.WillResetSnapshotDirectory;
         };
         WipeDiskFault: {
            (options?: integrityService.vim.WipeDiskFault): integrityService.vim.WipeDiskFault;
         };
         HostActiveDirectoryInfoDomainMembershipStatus: {
            "unknown": string;
            "ok": string;
            "noServers": string;
            "clientTrustBroken": string;
            "serverTrustBroken": string;
            "inconsistentTrust": string;
            "otherProblem": string;
         };
         HostActiveDirectoryInfo: {
            (options?: integrityService.vim.HostActiveDirectoryInfo): integrityService.vim.HostActiveDirectoryInfo;
         };
         HostActiveDirectorySpec: {
            (options?: integrityService.vim.HostActiveDirectorySpec): integrityService.vim.HostActiveDirectorySpec;
         };
         HostActiveDirectory: {
            (options?: integrityService.vim.HostActiveDirectory): integrityService.vim.HostActiveDirectory;
         };
         ArrayOfHostActiveDirectory: {
            (options?: integrityService.vim.ArrayOfHostActiveDirectory): integrityService.vim.ArrayOfHostActiveDirectory;
         };
         HostAuthenticationManagerInfo: {
            (options?: integrityService.vim.HostAuthenticationManagerInfo): integrityService.vim.HostAuthenticationManagerInfo;
         };
         HostAuthenticationStoreInfo: {
            (options?: integrityService.vim.HostAuthenticationStoreInfo): integrityService.vim.HostAuthenticationStoreInfo;
         };
         ArrayOfHostAuthenticationStoreInfo: {
            (options?: integrityService.vim.ArrayOfHostAuthenticationStoreInfo): integrityService.vim.ArrayOfHostAuthenticationStoreInfo;
         };
         AutoStartAction: {
            "none": string;
            "systemDefault": string;
            "powerOn": string;
            "powerOff": string;
            "guestShutdown": string;
            "suspend": string;
         };
         AutoStartDefaults: {
            (options?: integrityService.vim.AutoStartDefaults): integrityService.vim.AutoStartDefaults;
         };
         AutoStartWaitHeartbeatSetting: {
            "yes": string;
            "no": string;
            "systemDefault": string;
         };
         AutoStartPowerInfo: {
            (options?: integrityService.vim.AutoStartPowerInfo): integrityService.vim.AutoStartPowerInfo;
         };
         ArrayOfAutoStartPowerInfo: {
            (options?: integrityService.vim.ArrayOfAutoStartPowerInfo): integrityService.vim.ArrayOfAutoStartPowerInfo;
         };
         HostAutoStartManagerConfig: {
            (options?: integrityService.vim.HostAutoStartManagerConfig): integrityService.vim.HostAutoStartManagerConfig;
         };
         HostBootDeviceInfo: {
            (options?: integrityService.vim.HostBootDeviceInfo): integrityService.vim.HostBootDeviceInfo;
         };
         HostBootDevice: {
            (options?: integrityService.vim.HostBootDevice): integrityService.vim.HostBootDevice;
         };
         ArrayOfHostBootDevice: {
            (options?: integrityService.vim.ArrayOfHostBootDevice): integrityService.vim.ArrayOfHostBootDevice;
         };
         HostCacheConfigurationSpec: {
            (options?: integrityService.vim.HostCacheConfigurationSpec): integrityService.vim.HostCacheConfigurationSpec;
         };
         HostCacheConfigurationInfo: {
            (options?: integrityService.vim.HostCacheConfigurationInfo): integrityService.vim.HostCacheConfigurationInfo;
         };
         ArrayOfHostCacheConfigurationInfo: {
            (options?: integrityService.vim.ArrayOfHostCacheConfigurationInfo): integrityService.vim.ArrayOfHostCacheConfigurationInfo;
         };
         HostReplayUnsupportedReason: {
            "incompatibleProduct": string;
            "incompatibleCpu": string;
            "hvDisabled": string;
            "cpuidLimitSet": string;
            "oldBIOS": string;
            "unknown": string;
         };
         HostCapabilityFtUnsupportedReason: {
            "vMotionNotLicensed": string;
            "missingVMotionNic": string;
            "missingFTLoggingNic": string;
            "ftNotLicensed": string;
            "haAgentIssue": string;
         };
         HostCapabilityVmDirectPathGen2UnsupportedReason: {
            "hostNptIncompatibleProduct": string;
            "hostNptIncompatibleHardware": string;
            "hostNptDisabled": string;
         };
         HostCapability: {
            (options?: integrityService.vim.HostCapability): integrityService.vim.HostCapability;
         };
         HostConfigChangeMode: {
            "modify": string;
            "replace": string;
         };
         HostConfigChangeOperation: {
            "add": string;
            "remove": string;
            "edit": string;
            "ignore": string;
         };
         HostConfigChange: {
            (options?: integrityService.vim.HostConfigChange): integrityService.vim.HostConfigChange;
         };
         HostConfigInfo: {
            (options?: integrityService.vim.HostConfigInfo): integrityService.vim.HostConfigInfo;
         };
         HostConfigManager: {
            (options?: integrityService.vim.HostConfigManager): integrityService.vim.HostConfigManager;
         };
         HostConfigSpec: {
            (options?: integrityService.vim.HostConfigSpec): integrityService.vim.HostConfigSpec;
         };
         HostConnectInfoNetworkInfo: {
            (options?: integrityService.vim.HostConnectInfoNetworkInfo): integrityService.vim.HostConnectInfoNetworkInfo;
         };
         ArrayOfHostConnectInfoNetworkInfo: {
            (options?: integrityService.vim.ArrayOfHostConnectInfoNetworkInfo): integrityService.vim.ArrayOfHostConnectInfoNetworkInfo;
         };
         HostNewNetworkConnectInfo: {
            (options?: integrityService.vim.HostNewNetworkConnectInfo): integrityService.vim.HostNewNetworkConnectInfo;
         };
         HostDatastoreConnectInfo: {
            (options?: integrityService.vim.HostDatastoreConnectInfo): integrityService.vim.HostDatastoreConnectInfo;
         };
         ArrayOfHostDatastoreConnectInfo: {
            (options?: integrityService.vim.ArrayOfHostDatastoreConnectInfo): integrityService.vim.ArrayOfHostDatastoreConnectInfo;
         };
         HostDatastoreExistsConnectInfo: {
            (options?: integrityService.vim.HostDatastoreExistsConnectInfo): integrityService.vim.HostDatastoreExistsConnectInfo;
         };
         HostDatastoreNameConflictConnectInfo: {
            (options?: integrityService.vim.HostDatastoreNameConflictConnectInfo): integrityService.vim.HostDatastoreNameConflictConnectInfo;
         };
         HostLicenseConnectInfo: {
            (options?: integrityService.vim.HostLicenseConnectInfo): integrityService.vim.HostLicenseConnectInfo;
         };
         HostConnectInfo: {
            (options?: integrityService.vim.HostConnectInfo): integrityService.vim.HostConnectInfo;
         };
         HostConnectSpec: {
            (options?: integrityService.vim.HostConnectSpec): integrityService.vim.HostConnectSpec;
         };
         HostCpuIdInfo: {
            (options?: integrityService.vim.HostCpuIdInfo): integrityService.vim.HostCpuIdInfo;
         };
         ArrayOfHostCpuIdInfo: {
            (options?: integrityService.vim.ArrayOfHostCpuIdInfo): integrityService.vim.ArrayOfHostCpuIdInfo;
         };
         HostHyperThreadScheduleInfo: {
            (options?: integrityService.vim.HostHyperThreadScheduleInfo): integrityService.vim.HostHyperThreadScheduleInfo;
         };
         FileQueryFlags: {
            (options?: integrityService.vim.FileQueryFlags): integrityService.vim.FileQueryFlags;
         };
         FileInfo: {
            (options?: integrityService.vim.FileInfo): integrityService.vim.FileInfo;
         };
         ArrayOfFileInfo: {
            (options?: integrityService.vim.ArrayOfFileInfo): integrityService.vim.ArrayOfFileInfo;
         };
         FileQuery: {
            (options?: integrityService.vim.FileQuery): integrityService.vim.FileQuery;
         };
         ArrayOfFileQuery: {
            (options?: integrityService.vim.ArrayOfFileQuery): integrityService.vim.ArrayOfFileQuery;
         };
         VmConfigFileQueryFilter: {
            (options?: integrityService.vim.VmConfigFileQueryFilter): integrityService.vim.VmConfigFileQueryFilter;
         };
         VmConfigFileQueryFlags: {
            (options?: integrityService.vim.VmConfigFileQueryFlags): integrityService.vim.VmConfigFileQueryFlags;
         };
         VmConfigFileQuery: {
            (options?: integrityService.vim.VmConfigFileQuery): integrityService.vim.VmConfigFileQuery;
         };
         TemplateConfigFileQuery: {
            (options?: integrityService.vim.TemplateConfigFileQuery): integrityService.vim.TemplateConfigFileQuery;
         };
         VmDiskFileQueryFilter: {
            (options?: integrityService.vim.VmDiskFileQueryFilter): integrityService.vim.VmDiskFileQueryFilter;
         };
         VmDiskFileQueryFlags: {
            (options?: integrityService.vim.VmDiskFileQueryFlags): integrityService.vim.VmDiskFileQueryFlags;
         };
         VmDiskFileQuery: {
            (options?: integrityService.vim.VmDiskFileQuery): integrityService.vim.VmDiskFileQuery;
         };
         FolderFileQuery: {
            (options?: integrityService.vim.FolderFileQuery): integrityService.vim.FolderFileQuery;
         };
         VmSnapshotFileQuery: {
            (options?: integrityService.vim.VmSnapshotFileQuery): integrityService.vim.VmSnapshotFileQuery;
         };
         IsoImageFileQuery: {
            (options?: integrityService.vim.IsoImageFileQuery): integrityService.vim.IsoImageFileQuery;
         };
         FloppyImageFileQuery: {
            (options?: integrityService.vim.FloppyImageFileQuery): integrityService.vim.FloppyImageFileQuery;
         };
         VmNvramFileQuery: {
            (options?: integrityService.vim.VmNvramFileQuery): integrityService.vim.VmNvramFileQuery;
         };
         VmLogFileQuery: {
            (options?: integrityService.vim.VmLogFileQuery): integrityService.vim.VmLogFileQuery;
         };
         VmConfigFileInfo: {
            (options?: integrityService.vim.VmConfigFileInfo): integrityService.vim.VmConfigFileInfo;
         };
         TemplateConfigFileInfo: {
            (options?: integrityService.vim.TemplateConfigFileInfo): integrityService.vim.TemplateConfigFileInfo;
         };
         VmDiskFileInfo: {
            (options?: integrityService.vim.VmDiskFileInfo): integrityService.vim.VmDiskFileInfo;
         };
         FolderFileInfo: {
            (options?: integrityService.vim.FolderFileInfo): integrityService.vim.FolderFileInfo;
         };
         VmSnapshotFileInfo: {
            (options?: integrityService.vim.VmSnapshotFileInfo): integrityService.vim.VmSnapshotFileInfo;
         };
         IsoImageFileInfo: {
            (options?: integrityService.vim.IsoImageFileInfo): integrityService.vim.IsoImageFileInfo;
         };
         FloppyImageFileInfo: {
            (options?: integrityService.vim.FloppyImageFileInfo): integrityService.vim.FloppyImageFileInfo;
         };
         VmNvramFileInfo: {
            (options?: integrityService.vim.VmNvramFileInfo): integrityService.vim.VmNvramFileInfo;
         };
         VmLogFileInfo: {
            (options?: integrityService.vim.VmLogFileInfo): integrityService.vim.VmLogFileInfo;
         };
         HostDatastoreBrowserSearchSpec: {
            (options?: integrityService.vim.HostDatastoreBrowserSearchSpec): integrityService.vim.HostDatastoreBrowserSearchSpec;
         };
         HostDatastoreBrowserSearchResults: {
            (options?: integrityService.vim.HostDatastoreBrowserSearchResults): integrityService.vim.HostDatastoreBrowserSearchResults;
         };
         ArrayOfHostDatastoreBrowserSearchResults: {
            (options?: integrityService.vim.ArrayOfHostDatastoreBrowserSearchResults): integrityService.vim.ArrayOfHostDatastoreBrowserSearchResults;
         };
         HostDatastoreSystemCapabilities: {
            (options?: integrityService.vim.HostDatastoreSystemCapabilities): integrityService.vim.HostDatastoreSystemCapabilities;
         };
         VmfsDatastoreInfo: {
            (options?: integrityService.vim.VmfsDatastoreInfo): integrityService.vim.VmfsDatastoreInfo;
         };
         NasDatastoreInfo: {
            (options?: integrityService.vim.NasDatastoreInfo): integrityService.vim.NasDatastoreInfo;
         };
         LocalDatastoreInfo: {
            (options?: integrityService.vim.LocalDatastoreInfo): integrityService.vim.LocalDatastoreInfo;
         };
         VmfsDatastoreSpec: {
            (options?: integrityService.vim.VmfsDatastoreSpec): integrityService.vim.VmfsDatastoreSpec;
         };
         VmfsDatastoreCreateSpec: {
            (options?: integrityService.vim.VmfsDatastoreCreateSpec): integrityService.vim.VmfsDatastoreCreateSpec;
         };
         VmfsDatastoreExtendSpec: {
            (options?: integrityService.vim.VmfsDatastoreExtendSpec): integrityService.vim.VmfsDatastoreExtendSpec;
         };
         VmfsDatastoreExpandSpec: {
            (options?: integrityService.vim.VmfsDatastoreExpandSpec): integrityService.vim.VmfsDatastoreExpandSpec;
         };
         VmfsDatastoreBaseOption: {
            (options?: integrityService.vim.VmfsDatastoreBaseOption): integrityService.vim.VmfsDatastoreBaseOption;
         };
         VmfsDatastoreSingleExtentOption: {
            (options?: integrityService.vim.VmfsDatastoreSingleExtentOption): integrityService.vim.VmfsDatastoreSingleExtentOption;
         };
         VmfsDatastoreAllExtentOption: {
            (options?: integrityService.vim.VmfsDatastoreAllExtentOption): integrityService.vim.VmfsDatastoreAllExtentOption;
         };
         VmfsDatastoreMultipleExtentOption: {
            (options?: integrityService.vim.VmfsDatastoreMultipleExtentOption): integrityService.vim.VmfsDatastoreMultipleExtentOption;
         };
         VmfsDatastoreOption: {
            (options?: integrityService.vim.VmfsDatastoreOption): integrityService.vim.VmfsDatastoreOption;
         };
         ArrayOfVmfsDatastoreOption: {
            (options?: integrityService.vim.ArrayOfVmfsDatastoreOption): integrityService.vim.ArrayOfVmfsDatastoreOption;
         };
         HostDateTimeConfig: {
            (options?: integrityService.vim.HostDateTimeConfig): integrityService.vim.HostDateTimeConfig;
         };
         HostDateTimeInfo: {
            (options?: integrityService.vim.HostDateTimeInfo): integrityService.vim.HostDateTimeInfo;
         };
         HostDateTimeSystemTimeZone: {
            (options?: integrityService.vim.HostDateTimeSystemTimeZone): integrityService.vim.HostDateTimeSystemTimeZone;
         };
         ArrayOfHostDateTimeSystemTimeZone: {
            (options?: integrityService.vim.ArrayOfHostDateTimeSystemTimeZone): integrityService.vim.ArrayOfHostDateTimeSystemTimeZone;
         };
         HostDevice: {
            (options?: integrityService.vim.HostDevice): integrityService.vim.HostDevice;
         };
         HostDhcpServiceSpec: {
            (options?: integrityService.vim.HostDhcpServiceSpec): integrityService.vim.HostDhcpServiceSpec;
         };
         HostDhcpServiceConfig: {
            (options?: integrityService.vim.HostDhcpServiceConfig): integrityService.vim.HostDhcpServiceConfig;
         };
         ArrayOfHostDhcpServiceConfig: {
            (options?: integrityService.vim.ArrayOfHostDhcpServiceConfig): integrityService.vim.ArrayOfHostDhcpServiceConfig;
         };
         HostDhcpService: {
            (options?: integrityService.vim.HostDhcpService): integrityService.vim.HostDhcpService;
         };
         ArrayOfHostDhcpService: {
            (options?: integrityService.vim.ArrayOfHostDhcpService): integrityService.vim.ArrayOfHostDhcpService;
         };
         DiagnosticPartitionStorageType: {
            "directAttached": string;
            "networkAttached": string;
         };
         DiagnosticPartitionType: {
            "singleHost": string;
            "multiHost": string;
         };
         HostDiagnosticPartitionCreateOption: {
            (options?: integrityService.vim.HostDiagnosticPartitionCreateOption): integrityService.vim.HostDiagnosticPartitionCreateOption;
         };
         ArrayOfHostDiagnosticPartitionCreateOption: {
            (options?: integrityService.vim.ArrayOfHostDiagnosticPartitionCreateOption): integrityService.vim.ArrayOfHostDiagnosticPartitionCreateOption;
         };
         HostDiagnosticPartitionCreateSpec: {
            (options?: integrityService.vim.HostDiagnosticPartitionCreateSpec): integrityService.vim.HostDiagnosticPartitionCreateSpec;
         };
         HostDiagnosticPartitionCreateDescription: {
            (options?: integrityService.vim.HostDiagnosticPartitionCreateDescription): integrityService.vim.HostDiagnosticPartitionCreateDescription;
         };
         HostDiagnosticPartition: {
            (options?: integrityService.vim.HostDiagnosticPartition): integrityService.vim.HostDiagnosticPartition;
         };
         ArrayOfHostDiagnosticPartition: {
            (options?: integrityService.vim.ArrayOfHostDiagnosticPartition): integrityService.vim.ArrayOfHostDiagnosticPartition;
         };
         HostDirectoryStoreInfo: {
            (options?: integrityService.vim.HostDirectoryStoreInfo): integrityService.vim.HostDirectoryStoreInfo;
         };
         HostDiskConfigurationResult: {
            (options?: integrityService.vim.HostDiskConfigurationResult): integrityService.vim.HostDiskConfigurationResult;
         };
         ArrayOfHostDiskConfigurationResult: {
            (options?: integrityService.vim.ArrayOfHostDiskConfigurationResult): integrityService.vim.ArrayOfHostDiskConfigurationResult;
         };
         HostDiskDimensionsChs: {
            (options?: integrityService.vim.HostDiskDimensionsChs): integrityService.vim.HostDiskDimensionsChs;
         };
         HostDiskDimensionsLba: {
            (options?: integrityService.vim.HostDiskDimensionsLba): integrityService.vim.HostDiskDimensionsLba;
         };
         HostDiskDimensions: {
            (options?: integrityService.vim.HostDiskDimensions): integrityService.vim.HostDiskDimensions;
         };
         HostDiskPartitionInfoPartitionFormat: {
            "gpt": string;
            "mbr": string;
            "unknown": string;
         };
         HostDiskPartitionInfoType: {
            "none": string;
            "vmfs": string;
            "linuxNative": string;
            "linuxSwap": string;
            "extended": string;
            "ntfs": string;
            "vmkDiagnostic": string;
            "vffs": string;
         };
         HostDiskPartitionAttributes: {
            (options?: integrityService.vim.HostDiskPartitionAttributes): integrityService.vim.HostDiskPartitionAttributes;
         };
         ArrayOfHostDiskPartitionAttributes: {
            (options?: integrityService.vim.ArrayOfHostDiskPartitionAttributes): integrityService.vim.ArrayOfHostDiskPartitionAttributes;
         };
         HostDiskPartitionBlockRange: {
            (options?: integrityService.vim.HostDiskPartitionBlockRange): integrityService.vim.HostDiskPartitionBlockRange;
         };
         ArrayOfHostDiskPartitionBlockRange: {
            (options?: integrityService.vim.ArrayOfHostDiskPartitionBlockRange): integrityService.vim.ArrayOfHostDiskPartitionBlockRange;
         };
         HostDiskPartitionSpec: {
            (options?: integrityService.vim.HostDiskPartitionSpec): integrityService.vim.HostDiskPartitionSpec;
         };
         HostDiskPartitionLayout: {
            (options?: integrityService.vim.HostDiskPartitionLayout): integrityService.vim.HostDiskPartitionLayout;
         };
         HostDiskPartitionInfo: {
            (options?: integrityService.vim.HostDiskPartitionInfo): integrityService.vim.HostDiskPartitionInfo;
         };
         ArrayOfHostDiskPartitionInfo: {
            (options?: integrityService.vim.ArrayOfHostDiskPartitionInfo): integrityService.vim.ArrayOfHostDiskPartitionInfo;
         };
         HostDnsConfig: {
            (options?: integrityService.vim.HostDnsConfig): integrityService.vim.HostDnsConfig;
         };
         HostDnsConfigSpec: {
            (options?: integrityService.vim.HostDnsConfigSpec): integrityService.vim.HostDnsConfigSpec;
         };
         HostEsxAgentHostManagerConfigInfo: {
            (options?: integrityService.vim.HostEsxAgentHostManagerConfigInfo): integrityService.vim.HostEsxAgentHostManagerConfigInfo;
         };
         FcoeConfigVlanRange: {
            (options?: integrityService.vim.FcoeConfigVlanRange): integrityService.vim.FcoeConfigVlanRange;
         };
         ArrayOfFcoeConfigVlanRange: {
            (options?: integrityService.vim.ArrayOfFcoeConfigVlanRange): integrityService.vim.ArrayOfFcoeConfigVlanRange;
         };
         FcoeConfigFcoeCapabilities: {
            (options?: integrityService.vim.FcoeConfigFcoeCapabilities): integrityService.vim.FcoeConfigFcoeCapabilities;
         };
         FcoeConfigFcoeSpecification: {
            (options?: integrityService.vim.FcoeConfigFcoeSpecification): integrityService.vim.FcoeConfigFcoeSpecification;
         };
         FcoeConfig: {
            (options?: integrityService.vim.FcoeConfig): integrityService.vim.FcoeConfig;
         };
         HostFeatureCapability: {
            (options?: integrityService.vim.HostFeatureCapability): integrityService.vim.HostFeatureCapability;
         };
         ArrayOfHostFeatureCapability: {
            (options?: integrityService.vim.ArrayOfHostFeatureCapability): integrityService.vim.ArrayOfHostFeatureCapability;
         };
         HostFeatureMask: {
            (options?: integrityService.vim.HostFeatureMask): integrityService.vim.HostFeatureMask;
         };
         ArrayOfHostFeatureMask: {
            (options?: integrityService.vim.ArrayOfHostFeatureMask): integrityService.vim.ArrayOfHostFeatureMask;
         };
         HostFeatureVersionKey: {
            "faultTolerance": string;
         };
         HostFeatureVersionInfo: {
            (options?: integrityService.vim.HostFeatureVersionInfo): integrityService.vim.HostFeatureVersionInfo;
         };
         ArrayOfHostFeatureVersionInfo: {
            (options?: integrityService.vim.ArrayOfHostFeatureVersionInfo): integrityService.vim.ArrayOfHostFeatureVersionInfo;
         };
         ModeInfo: {
            (options?: integrityService.vim.ModeInfo): integrityService.vim.ModeInfo;
         };
         HostFileAccess: {
            (options?: integrityService.vim.HostFileAccess): integrityService.vim.HostFileAccess;
         };
         HostFileSystemVolumeInfo: {
            (options?: integrityService.vim.HostFileSystemVolumeInfo): integrityService.vim.HostFileSystemVolumeInfo;
         };
         FileSystemMountInfoVStorageSupportStatus: {
            "vStorageSupported": string;
            "vStorageUnsupported": string;
            "vStorageUnknown": string;
         };
         HostFileSystemMountInfo: {
            (options?: integrityService.vim.HostFileSystemMountInfo): integrityService.vim.HostFileSystemMountInfo;
         };
         ArrayOfHostFileSystemMountInfo: {
            (options?: integrityService.vim.ArrayOfHostFileSystemMountInfo): integrityService.vim.ArrayOfHostFileSystemMountInfo;
         };
         HostFileSystemVolume: {
            (options?: integrityService.vim.HostFileSystemVolume): integrityService.vim.HostFileSystemVolume;
         };
         HostNasVolumeSpec: {
            (options?: integrityService.vim.HostNasVolumeSpec): integrityService.vim.HostNasVolumeSpec;
         };
         HostNasVolumeConfig: {
            (options?: integrityService.vim.HostNasVolumeConfig): integrityService.vim.HostNasVolumeConfig;
         };
         ArrayOfHostNasVolumeConfig: {
            (options?: integrityService.vim.ArrayOfHostNasVolumeConfig): integrityService.vim.ArrayOfHostNasVolumeConfig;
         };
         HostNasVolume: {
            (options?: integrityService.vim.HostNasVolume): integrityService.vim.HostNasVolume;
         };
         HostLocalFileSystemVolumeSpec: {
            (options?: integrityService.vim.HostLocalFileSystemVolumeSpec): integrityService.vim.HostLocalFileSystemVolumeSpec;
         };
         HostLocalFileSystemVolume: {
            (options?: integrityService.vim.HostLocalFileSystemVolume): integrityService.vim.HostLocalFileSystemVolume;
         };
         HostVfatVolume: {
            (options?: integrityService.vim.HostVfatVolume): integrityService.vim.HostVfatVolume;
         };
         HostFirewallConfigRuleSetConfig: {
            (options?: integrityService.vim.HostFirewallConfigRuleSetConfig): integrityService.vim.HostFirewallConfigRuleSetConfig;
         };
         ArrayOfHostFirewallConfigRuleSetConfig: {
            (options?: integrityService.vim.ArrayOfHostFirewallConfigRuleSetConfig): integrityService.vim.ArrayOfHostFirewallConfigRuleSetConfig;
         };
         HostFirewallConfig: {
            (options?: integrityService.vim.HostFirewallConfig): integrityService.vim.HostFirewallConfig;
         };
         HostFirewallDefaultPolicy: {
            (options?: integrityService.vim.HostFirewallDefaultPolicy): integrityService.vim.HostFirewallDefaultPolicy;
         };
         HostFirewallInfo: {
            (options?: integrityService.vim.HostFirewallInfo): integrityService.vim.HostFirewallInfo;
         };
         HostFlagInfo: {
            (options?: integrityService.vim.HostFlagInfo): integrityService.vim.HostFlagInfo;
         };
         HostForceMountedInfo: {
            (options?: integrityService.vim.HostForceMountedInfo): integrityService.vim.HostForceMountedInfo;
         };
         HostGraphicsInfoGraphicsType: {
            "basic": string;
            "shared": string;
            "direct": string;
         };
         HostGraphicsInfo: {
            (options?: integrityService.vim.HostGraphicsInfo): integrityService.vim.HostGraphicsInfo;
         };
         ArrayOfHostGraphicsInfo: {
            (options?: integrityService.vim.ArrayOfHostGraphicsInfo): integrityService.vim.ArrayOfHostGraphicsInfo;
         };
         HostHardwareInfo: {
            (options?: integrityService.vim.HostHardwareInfo): integrityService.vim.HostHardwareInfo;
         };
         HostSystemInfo: {
            (options?: integrityService.vim.HostSystemInfo): integrityService.vim.HostSystemInfo;
         };
         HostCpuPowerManagementInfoPolicyType: {
            "off": string;
            "staticPolicy": string;
            "dynamicPolicy": string;
         };
         HostCpuPowerManagementInfo: {
            (options?: integrityService.vim.HostCpuPowerManagementInfo): integrityService.vim.HostCpuPowerManagementInfo;
         };
         HostCpuInfo: {
            (options?: integrityService.vim.HostCpuInfo): integrityService.vim.HostCpuInfo;
         };
         HostCpuPackageVendor: {
            "unknown": string;
            "intel": string;
            "amd": string;
         };
         HostCpuPackage: {
            (options?: integrityService.vim.HostCpuPackage): integrityService.vim.HostCpuPackage;
         };
         ArrayOfHostCpuPackage: {
            (options?: integrityService.vim.ArrayOfHostCpuPackage): integrityService.vim.ArrayOfHostCpuPackage;
         };
         HostNumaInfo: {
            (options?: integrityService.vim.HostNumaInfo): integrityService.vim.HostNumaInfo;
         };
         HostNumaNode: {
            (options?: integrityService.vim.HostNumaNode): integrityService.vim.HostNumaNode;
         };
         ArrayOfHostNumaNode: {
            (options?: integrityService.vim.ArrayOfHostNumaNode): integrityService.vim.ArrayOfHostNumaNode;
         };
         HostBIOSInfo: {
            (options?: integrityService.vim.HostBIOSInfo): integrityService.vim.HostBIOSInfo;
         };
         HostReliableMemoryInfo: {
            (options?: integrityService.vim.HostReliableMemoryInfo): integrityService.vim.HostReliableMemoryInfo;
         };
         HostHardwareElementStatus: {
            "Unknown": string;
            "Green": string;
            "Yellow": string;
            "Red": string;
         };
         HostHardwareElementInfo: {
            (options?: integrityService.vim.HostHardwareElementInfo): integrityService.vim.HostHardwareElementInfo;
         };
         ArrayOfHostHardwareElementInfo: {
            (options?: integrityService.vim.ArrayOfHostHardwareElementInfo): integrityService.vim.ArrayOfHostHardwareElementInfo;
         };
         HostStorageOperationalInfo: {
            (options?: integrityService.vim.HostStorageOperationalInfo): integrityService.vim.HostStorageOperationalInfo;
         };
         ArrayOfHostStorageOperationalInfo: {
            (options?: integrityService.vim.ArrayOfHostStorageOperationalInfo): integrityService.vim.ArrayOfHostStorageOperationalInfo;
         };
         HostStorageElementInfo: {
            (options?: integrityService.vim.HostStorageElementInfo): integrityService.vim.HostStorageElementInfo;
         };
         ArrayOfHostStorageElementInfo: {
            (options?: integrityService.vim.ArrayOfHostStorageElementInfo): integrityService.vim.ArrayOfHostStorageElementInfo;
         };
         HostHardwareStatusInfo: {
            (options?: integrityService.vim.HostHardwareStatusInfo): integrityService.vim.HostHardwareStatusInfo;
         };
         HealthSystemRuntime: {
            (options?: integrityService.vim.HealthSystemRuntime): integrityService.vim.HealthSystemRuntime;
         };
         HostHostBusAdapter: {
            (options?: integrityService.vim.HostHostBusAdapter): integrityService.vim.HostHostBusAdapter;
         };
         ArrayOfHostHostBusAdapter: {
            (options?: integrityService.vim.ArrayOfHostHostBusAdapter): integrityService.vim.ArrayOfHostHostBusAdapter;
         };
         HostParallelScsiHba: {
            (options?: integrityService.vim.HostParallelScsiHba): integrityService.vim.HostParallelScsiHba;
         };
         HostBlockHba: {
            (options?: integrityService.vim.HostBlockHba): integrityService.vim.HostBlockHba;
         };
         FibreChannelPortType: {
            "fabric": string;
            "loop": string;
            "pointToPoint": string;
            "unknown": string;
         };
         HostFibreChannelHba: {
            (options?: integrityService.vim.HostFibreChannelHba): integrityService.vim.HostFibreChannelHba;
         };
         HostInternetScsiHbaParamValue: {
            (options?: integrityService.vim.HostInternetScsiHbaParamValue): integrityService.vim.HostInternetScsiHbaParamValue;
         };
         ArrayOfHostInternetScsiHbaParamValue: {
            (options?: integrityService.vim.ArrayOfHostInternetScsiHbaParamValue): integrityService.vim.ArrayOfHostInternetScsiHbaParamValue;
         };
         HostInternetScsiHbaDiscoveryCapabilities: {
            (options?: integrityService.vim.HostInternetScsiHbaDiscoveryCapabilities): integrityService.vim.HostInternetScsiHbaDiscoveryCapabilities;
         };
         InternetScsiSnsDiscoveryMethod: {
            "isnsStatic": string;
            "isnsDhcp": string;
            "isnsSlp": string;
         };
         SlpDiscoveryMethod: {
            "slpDhcp": string;
            "slpAutoUnicast": string;
            "slpAutoMulticast": string;
            "slpManual": string;
         };
         HostInternetScsiHbaDiscoveryProperties: {
            (options?: integrityService.vim.HostInternetScsiHbaDiscoveryProperties): integrityService.vim.HostInternetScsiHbaDiscoveryProperties;
         };
         HostInternetScsiHbaChapAuthenticationType: {
            "chapProhibited": string;
            "chapDiscouraged": string;
            "chapPreferred": string;
            "chapRequired": string;
         };
         HostInternetScsiHbaAuthenticationCapabilities: {
            (options?: integrityService.vim.HostInternetScsiHbaAuthenticationCapabilities): integrityService.vim.HostInternetScsiHbaAuthenticationCapabilities;
         };
         HostInternetScsiHbaAuthenticationProperties: {
            (options?: integrityService.vim.HostInternetScsiHbaAuthenticationProperties): integrityService.vim.HostInternetScsiHbaAuthenticationProperties;
         };
         HostInternetScsiHbaDigestType: {
            "digestProhibited": string;
            "digestDiscouraged": string;
            "digestPreferred": string;
            "digestRequired": string;
         };
         HostInternetScsiHbaDigestCapabilities: {
            (options?: integrityService.vim.HostInternetScsiHbaDigestCapabilities): integrityService.vim.HostInternetScsiHbaDigestCapabilities;
         };
         HostInternetScsiHbaDigestProperties: {
            (options?: integrityService.vim.HostInternetScsiHbaDigestProperties): integrityService.vim.HostInternetScsiHbaDigestProperties;
         };
         HostInternetScsiHbaIPCapabilities: {
            (options?: integrityService.vim.HostInternetScsiHbaIPCapabilities): integrityService.vim.HostInternetScsiHbaIPCapabilities;
         };
         HostInternetScsiHbaIPProperties: {
            (options?: integrityService.vim.HostInternetScsiHbaIPProperties): integrityService.vim.HostInternetScsiHbaIPProperties;
         };
         HostInternetScsiHbaSendTarget: {
            (options?: integrityService.vim.HostInternetScsiHbaSendTarget): integrityService.vim.HostInternetScsiHbaSendTarget;
         };
         ArrayOfHostInternetScsiHbaSendTarget: {
            (options?: integrityService.vim.ArrayOfHostInternetScsiHbaSendTarget): integrityService.vim.ArrayOfHostInternetScsiHbaSendTarget;
         };
         HostInternetScsiHbaStaticTargetTargetDiscoveryMethod: {
            "staticMethod": string;
            "sendTargetMethod": string;
            "slpMethod": string;
            "isnsMethod": string;
            "unknownMethod": string;
         };
         HostInternetScsiHbaStaticTarget: {
            (options?: integrityService.vim.HostInternetScsiHbaStaticTarget): integrityService.vim.HostInternetScsiHbaStaticTarget;
         };
         ArrayOfHostInternetScsiHbaStaticTarget: {
            (options?: integrityService.vim.ArrayOfHostInternetScsiHbaStaticTarget): integrityService.vim.ArrayOfHostInternetScsiHbaStaticTarget;
         };
         HostInternetScsiHbaTargetSet: {
            (options?: integrityService.vim.HostInternetScsiHbaTargetSet): integrityService.vim.HostInternetScsiHbaTargetSet;
         };
         HostInternetScsiHbaNetworkBindingSupportType: {
            "notsupported": string;
            "optional": string;
            "required": string;
         };
         HostInternetScsiHba: {
            (options?: integrityService.vim.HostInternetScsiHba): integrityService.vim.HostInternetScsiHba;
         };
         HostFibreChannelOverEthernetHbaLinkInfo: {
            (options?: integrityService.vim.HostFibreChannelOverEthernetHbaLinkInfo): integrityService.vim.HostFibreChannelOverEthernetHbaLinkInfo;
         };
         HostFibreChannelOverEthernetHba: {
            (options?: integrityService.vim.HostFibreChannelOverEthernetHba): integrityService.vim.HostFibreChannelOverEthernetHba;
         };
         HostProxySwitchSpec: {
            (options?: integrityService.vim.HostProxySwitchSpec): integrityService.vim.HostProxySwitchSpec;
         };
         HostProxySwitchConfig: {
            (options?: integrityService.vim.HostProxySwitchConfig): integrityService.vim.HostProxySwitchConfig;
         };
         ArrayOfHostProxySwitchConfig: {
            (options?: integrityService.vim.ArrayOfHostProxySwitchConfig): integrityService.vim.ArrayOfHostProxySwitchConfig;
         };
         HostProxySwitchHostLagConfig: {
            (options?: integrityService.vim.HostProxySwitchHostLagConfig): integrityService.vim.HostProxySwitchHostLagConfig;
         };
         ArrayOfHostProxySwitchHostLagConfig: {
            (options?: integrityService.vim.ArrayOfHostProxySwitchHostLagConfig): integrityService.vim.ArrayOfHostProxySwitchHostLagConfig;
         };
         HostProxySwitch: {
            (options?: integrityService.vim.HostProxySwitch): integrityService.vim.HostProxySwitch;
         };
         ArrayOfHostProxySwitch: {
            (options?: integrityService.vim.ArrayOfHostProxySwitch): integrityService.vim.ArrayOfHostProxySwitch;
         };
         HostImageAcceptanceLevel: {
            "vmware_certified": string;
            "vmware_accepted": string;
            "partner": string;
            "community": string;
         };
         HostImageProfileSummary: {
            (options?: integrityService.vim.HostImageProfileSummary): integrityService.vim.HostImageProfileSummary;
         };
         HostIpConfigIpV6AddressConfigType: {
            "other": string;
            "manual": string;
            "dhcp": string;
            "linklayer": string;
            "random": string;
         };
         HostIpConfigIpV6AddressStatus: {
            "preferred": string;
            "deprecated": string;
            "invalid": string;
            "inaccessible": string;
            "unknown": string;
            "tentative": string;
            "duplicate": string;
         };
         HostIpConfigIpV6Address: {
            (options?: integrityService.vim.HostIpConfigIpV6Address): integrityService.vim.HostIpConfigIpV6Address;
         };
         ArrayOfHostIpConfigIpV6Address: {
            (options?: integrityService.vim.ArrayOfHostIpConfigIpV6Address): integrityService.vim.ArrayOfHostIpConfigIpV6Address;
         };
         HostIpConfigIpV6AddressConfiguration: {
            (options?: integrityService.vim.HostIpConfigIpV6AddressConfiguration): integrityService.vim.HostIpConfigIpV6AddressConfiguration;
         };
         HostIpConfig: {
            (options?: integrityService.vim.HostIpConfig): integrityService.vim.HostIpConfig;
         };
         HostIpRouteConfig: {
            (options?: integrityService.vim.HostIpRouteConfig): integrityService.vim.HostIpRouteConfig;
         };
         HostIpRouteConfigSpec: {
            (options?: integrityService.vim.HostIpRouteConfigSpec): integrityService.vim.HostIpRouteConfigSpec;
         };
         HostIpRouteEntry: {
            (options?: integrityService.vim.HostIpRouteEntry): integrityService.vim.HostIpRouteEntry;
         };
         ArrayOfHostIpRouteEntry: {
            (options?: integrityService.vim.ArrayOfHostIpRouteEntry): integrityService.vim.ArrayOfHostIpRouteEntry;
         };
         HostIpRouteOp: {
            (options?: integrityService.vim.HostIpRouteOp): integrityService.vim.HostIpRouteOp;
         };
         ArrayOfHostIpRouteOp: {
            (options?: integrityService.vim.ArrayOfHostIpRouteOp): integrityService.vim.ArrayOfHostIpRouteOp;
         };
         HostIpRouteTableConfig: {
            (options?: integrityService.vim.HostIpRouteTableConfig): integrityService.vim.HostIpRouteTableConfig;
         };
         HostIpRouteTableInfo: {
            (options?: integrityService.vim.HostIpRouteTableInfo): integrityService.vim.HostIpRouteTableInfo;
         };
         HostIpmiInfo: {
            (options?: integrityService.vim.HostIpmiInfo): integrityService.vim.HostIpmiInfo;
         };
         IscsiStatus: {
            (options?: integrityService.vim.IscsiStatus): integrityService.vim.IscsiStatus;
         };
         IscsiPortInfoPathStatus: {
            "notUsed": string;
            "active": string;
            "standBy": string;
            "lastActive": string;
         };
         IscsiPortInfo: {
            (options?: integrityService.vim.IscsiPortInfo): integrityService.vim.IscsiPortInfo;
         };
         ArrayOfIscsiPortInfo: {
            (options?: integrityService.vim.ArrayOfIscsiPortInfo): integrityService.vim.ArrayOfIscsiPortInfo;
         };
         IscsiDependencyEntity: {
            (options?: integrityService.vim.IscsiDependencyEntity): integrityService.vim.IscsiDependencyEntity;
         };
         ArrayOfIscsiDependencyEntity: {
            (options?: integrityService.vim.ArrayOfIscsiDependencyEntity): integrityService.vim.ArrayOfIscsiDependencyEntity;
         };
         IscsiMigrationDependency: {
            (options?: integrityService.vim.IscsiMigrationDependency): integrityService.vim.IscsiMigrationDependency;
         };
         KernelModuleSectionInfo: {
            (options?: integrityService.vim.KernelModuleSectionInfo): integrityService.vim.KernelModuleSectionInfo;
         };
         KernelModuleInfo: {
            (options?: integrityService.vim.KernelModuleInfo): integrityService.vim.KernelModuleInfo;
         };
         ArrayOfKernelModuleInfo: {
            (options?: integrityService.vim.ArrayOfKernelModuleInfo): integrityService.vim.ArrayOfKernelModuleInfo;
         };
         HostLicenseSpec: {
            (options?: integrityService.vim.HostLicenseSpec): integrityService.vim.HostLicenseSpec;
         };
         LinkDiscoveryProtocolConfigProtocolType: {
            "cdp": string;
            "lldp": string;
         };
         LinkDiscoveryProtocolConfigOperationType: {
            "none": string;
            "listen": string;
            "advertise": string;
            "both": string;
         };
         LinkDiscoveryProtocolConfig: {
            (options?: integrityService.vim.LinkDiscoveryProtocolConfig): integrityService.vim.LinkDiscoveryProtocolConfig;
         };
         HostAccountSpec: {
            (options?: integrityService.vim.HostAccountSpec): integrityService.vim.HostAccountSpec;
         };
         ArrayOfHostAccountSpec: {
            (options?: integrityService.vim.ArrayOfHostAccountSpec): integrityService.vim.ArrayOfHostAccountSpec;
         };
         HostPosixAccountSpec: {
            (options?: integrityService.vim.HostPosixAccountSpec): integrityService.vim.HostPosixAccountSpec;
         };
         HostLocalAuthenticationInfo: {
            (options?: integrityService.vim.HostLocalAuthenticationInfo): integrityService.vim.HostLocalAuthenticationInfo;
         };
         HostLowLevelProvisioningManagerVmRecoveryInfo: {
            (options?: integrityService.vim.HostLowLevelProvisioningManagerVmRecoveryInfo): integrityService.vim.HostLowLevelProvisioningManagerVmRecoveryInfo;
         };
         HostLowLevelProvisioningManagerVmMigrationStatus: {
            (options?: integrityService.vim.HostLowLevelProvisioningManagerVmMigrationStatus): integrityService.vim.HostLowLevelProvisioningManagerVmMigrationStatus;
         };
         HostLowLevelProvisioningManagerReloadTarget: {
            "currentConfig": string;
            "snapshotConfig": string;
         };
         HostLowLevelProvisioningManagerDiskLayoutSpec: {
            (options?: integrityService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec): integrityService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec;
         };
         ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec: {
            (options?: integrityService.vim.ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec): integrityService.vim.ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec;
         };
         HostLowLevelProvisioningManagerSnapshotLayoutSpec: {
            (options?: integrityService.vim.HostLowLevelProvisioningManagerSnapshotLayoutSpec): integrityService.vim.HostLowLevelProvisioningManagerSnapshotLayoutSpec;
         };
         ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec: {
            (options?: integrityService.vim.ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec): integrityService.vim.ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec;
         };
         HostMaintenanceSpec: {
            (options?: integrityService.vim.HostMaintenanceSpec): integrityService.vim.HostMaintenanceSpec;
         };
         ServiceConsoleReservationInfo: {
            (options?: integrityService.vim.ServiceConsoleReservationInfo): integrityService.vim.ServiceConsoleReservationInfo;
         };
         VirtualMachineMemoryAllocationPolicy: {
            "swapNone": string;
            "swapSome": string;
            "swapMost": string;
         };
         VirtualMachineMemoryReservationInfo: {
            (options?: integrityService.vim.VirtualMachineMemoryReservationInfo): integrityService.vim.VirtualMachineMemoryReservationInfo;
         };
         VirtualMachineMemoryReservationSpec: {
            (options?: integrityService.vim.VirtualMachineMemoryReservationSpec): integrityService.vim.VirtualMachineMemoryReservationSpec;
         };
         HostMemorySpec: {
            (options?: integrityService.vim.HostMemorySpec): integrityService.vim.HostMemorySpec;
         };
         HostMountMode: {
            "readWrite": string;
            "readOnly": string;
         };
         HostMountInfoInaccessibleReason: {
            "AllPathsDown_Start": string;
            "AllPathsDown_Timeout": string;
            "PermanentDeviceLoss": string;
         };
         HostMountInfo: {
            (options?: integrityService.vim.HostMountInfo): integrityService.vim.HostMountInfo;
         };
         MultipathState: {
            "standby": string;
            "active": string;
            "disabled": string;
            "dead": string;
            "unknown": string;
         };
         HostMultipathInfoLogicalUnitPolicy: {
            (options?: integrityService.vim.HostMultipathInfoLogicalUnitPolicy): integrityService.vim.HostMultipathInfoLogicalUnitPolicy;
         };
         HostMultipathInfoLogicalUnitStorageArrayTypePolicy: {
            (options?: integrityService.vim.HostMultipathInfoLogicalUnitStorageArrayTypePolicy): integrityService.vim.HostMultipathInfoLogicalUnitStorageArrayTypePolicy;
         };
         HostMultipathInfoFixedLogicalUnitPolicy: {
            (options?: integrityService.vim.HostMultipathInfoFixedLogicalUnitPolicy): integrityService.vim.HostMultipathInfoFixedLogicalUnitPolicy;
         };
         HostMultipathInfoLogicalUnit: {
            (options?: integrityService.vim.HostMultipathInfoLogicalUnit): integrityService.vim.HostMultipathInfoLogicalUnit;
         };
         ArrayOfHostMultipathInfoLogicalUnit: {
            (options?: integrityService.vim.ArrayOfHostMultipathInfoLogicalUnit): integrityService.vim.ArrayOfHostMultipathInfoLogicalUnit;
         };
         HostMultipathInfoPath: {
            (options?: integrityService.vim.HostMultipathInfoPath): integrityService.vim.HostMultipathInfoPath;
         };
         ArrayOfHostMultipathInfoPath: {
            (options?: integrityService.vim.ArrayOfHostMultipathInfoPath): integrityService.vim.ArrayOfHostMultipathInfoPath;
         };
         HostMultipathInfo: {
            (options?: integrityService.vim.HostMultipathInfo): integrityService.vim.HostMultipathInfo;
         };
         HostMultipathStateInfoPath: {
            (options?: integrityService.vim.HostMultipathStateInfoPath): integrityService.vim.HostMultipathStateInfoPath;
         };
         ArrayOfHostMultipathStateInfoPath: {
            (options?: integrityService.vim.ArrayOfHostMultipathStateInfoPath): integrityService.vim.ArrayOfHostMultipathStateInfoPath;
         };
         HostMultipathStateInfo: {
            (options?: integrityService.vim.HostMultipathStateInfo): integrityService.vim.HostMultipathStateInfo;
         };
         HostNatServicePortForwardSpec: {
            (options?: integrityService.vim.HostNatServicePortForwardSpec): integrityService.vim.HostNatServicePortForwardSpec;
         };
         ArrayOfHostNatServicePortForwardSpec: {
            (options?: integrityService.vim.ArrayOfHostNatServicePortForwardSpec): integrityService.vim.ArrayOfHostNatServicePortForwardSpec;
         };
         HostNatServiceNameServiceSpec: {
            (options?: integrityService.vim.HostNatServiceNameServiceSpec): integrityService.vim.HostNatServiceNameServiceSpec;
         };
         HostNatServiceSpec: {
            (options?: integrityService.vim.HostNatServiceSpec): integrityService.vim.HostNatServiceSpec;
         };
         HostNatServiceConfig: {
            (options?: integrityService.vim.HostNatServiceConfig): integrityService.vim.HostNatServiceConfig;
         };
         ArrayOfHostNatServiceConfig: {
            (options?: integrityService.vim.ArrayOfHostNatServiceConfig): integrityService.vim.ArrayOfHostNatServiceConfig;
         };
         HostNatService: {
            (options?: integrityService.vim.HostNatService): integrityService.vim.HostNatService;
         };
         ArrayOfHostNatService: {
            (options?: integrityService.vim.ArrayOfHostNatService): integrityService.vim.ArrayOfHostNatService;
         };
         HostNetCapabilities: {
            (options?: integrityService.vim.HostNetCapabilities): integrityService.vim.HostNetCapabilities;
         };
         HostNetOffloadCapabilities: {
            (options?: integrityService.vim.HostNetOffloadCapabilities): integrityService.vim.HostNetOffloadCapabilities;
         };
         HostNetStackInstanceSystemStackKey: {
            "defaultTcpipStack": string;
         };
         HostNetStackInstanceCongestionControlAlgorithmType: {
            "newreno": string;
            "cubic": string;
         };
         HostNetStackInstance: {
            (options?: integrityService.vim.HostNetStackInstance): integrityService.vim.HostNetStackInstance;
         };
         ArrayOfHostNetStackInstance: {
            (options?: integrityService.vim.ArrayOfHostNetStackInstance): integrityService.vim.ArrayOfHostNetStackInstance;
         };
         HostNetworkConfigResult: {
            (options?: integrityService.vim.HostNetworkConfigResult): integrityService.vim.HostNetworkConfigResult;
         };
         HostNetworkConfigNetStackSpec: {
            (options?: integrityService.vim.HostNetworkConfigNetStackSpec): integrityService.vim.HostNetworkConfigNetStackSpec;
         };
         ArrayOfHostNetworkConfigNetStackSpec: {
            (options?: integrityService.vim.ArrayOfHostNetworkConfigNetStackSpec): integrityService.vim.ArrayOfHostNetworkConfigNetStackSpec;
         };
         HostNetworkConfig: {
            (options?: integrityService.vim.HostNetworkConfig): integrityService.vim.HostNetworkConfig;
         };
         HostNetworkInfo: {
            (options?: integrityService.vim.HostNetworkInfo): integrityService.vim.HostNetworkInfo;
         };
         HostNetworkSecurityPolicy: {
            (options?: integrityService.vim.HostNetworkSecurityPolicy): integrityService.vim.HostNetworkSecurityPolicy;
         };
         HostNetworkTrafficShapingPolicy: {
            (options?: integrityService.vim.HostNetworkTrafficShapingPolicy): integrityService.vim.HostNetworkTrafficShapingPolicy;
         };
         HostNicFailureCriteria: {
            (options?: integrityService.vim.HostNicFailureCriteria): integrityService.vim.HostNicFailureCriteria;
         };
         HostNicOrderPolicy: {
            (options?: integrityService.vim.HostNicOrderPolicy): integrityService.vim.HostNicOrderPolicy;
         };
         HostNicTeamingPolicy: {
            (options?: integrityService.vim.HostNicTeamingPolicy): integrityService.vim.HostNicTeamingPolicy;
         };
         HostNetworkPolicy: {
            (options?: integrityService.vim.HostNetworkPolicy): integrityService.vim.HostNetworkPolicy;
         };
         HostNtpConfig: {
            (options?: integrityService.vim.HostNtpConfig): integrityService.vim.HostNtpConfig;
         };
         HostNumericSensorHealthState: {
            "unknown": string;
            "green": string;
            "yellow": string;
            "red": string;
         };
         HostNumericSensorType: {
            "fan": string;
            "power": string;
            "temperature": string;
            "voltage": string;
            "other": string;
         };
         HostNumericSensorInfo: {
            (options?: integrityService.vim.HostNumericSensorInfo): integrityService.vim.HostNumericSensorInfo;
         };
         ArrayOfHostNumericSensorInfo: {
            (options?: integrityService.vim.ArrayOfHostNumericSensorInfo): integrityService.vim.ArrayOfHostNumericSensorInfo;
         };
         HostOpaqueNetworkInfo: {
            (options?: integrityService.vim.HostOpaqueNetworkInfo): integrityService.vim.HostOpaqueNetworkInfo;
         };
         ArrayOfHostOpaqueNetworkInfo: {
            (options?: integrityService.vim.ArrayOfHostOpaqueNetworkInfo): integrityService.vim.ArrayOfHostOpaqueNetworkInfo;
         };
         HostOpaqueSwitch: {
            (options?: integrityService.vim.HostOpaqueSwitch): integrityService.vim.HostOpaqueSwitch;
         };
         ArrayOfHostOpaqueSwitch: {
            (options?: integrityService.vim.ArrayOfHostOpaqueSwitch): integrityService.vim.ArrayOfHostOpaqueSwitch;
         };
         HostPatchManagerResult: {
            (options?: integrityService.vim.HostPatchManagerResult): integrityService.vim.HostPatchManagerResult;
         };
         HostPatchManagerReason: {
            "obsoleted": string;
            "missingPatch": string;
            "missingLib": string;
            "hasDependentPatch": string;
            "conflictPatch": string;
            "conflictLib": string;
         };
         HostPatchManagerIntegrityStatus: {
            "validated": string;
            "keyNotFound": string;
            "keyRevoked": string;
            "keyExpired": string;
            "digestMismatch": string;
            "notEnoughSignatures": string;
            "validationError": string;
         };
         HostPatchManagerInstallState: {
            "hostRestarted": string;
            "imageActive": string;
         };
         HostPatchManagerStatusPrerequisitePatch: {
            (options?: integrityService.vim.HostPatchManagerStatusPrerequisitePatch): integrityService.vim.HostPatchManagerStatusPrerequisitePatch;
         };
         ArrayOfHostPatchManagerStatusPrerequisitePatch: {
            (options?: integrityService.vim.ArrayOfHostPatchManagerStatusPrerequisitePatch): integrityService.vim.ArrayOfHostPatchManagerStatusPrerequisitePatch;
         };
         HostPatchManagerStatus: {
            (options?: integrityService.vim.HostPatchManagerStatus): integrityService.vim.HostPatchManagerStatus;
         };
         ArrayOfHostPatchManagerStatus: {
            (options?: integrityService.vim.ArrayOfHostPatchManagerStatus): integrityService.vim.ArrayOfHostPatchManagerStatus;
         };
         HostPatchManagerLocator: {
            (options?: integrityService.vim.HostPatchManagerLocator): integrityService.vim.HostPatchManagerLocator;
         };
         HostPatchManagerPatchManagerOperationSpec: {
            (options?: integrityService.vim.HostPatchManagerPatchManagerOperationSpec): integrityService.vim.HostPatchManagerPatchManagerOperationSpec;
         };
         HostPathSelectionPolicyOption: {
            (options?: integrityService.vim.HostPathSelectionPolicyOption): integrityService.vim.HostPathSelectionPolicyOption;
         };
         ArrayOfHostPathSelectionPolicyOption: {
            (options?: integrityService.vim.ArrayOfHostPathSelectionPolicyOption): integrityService.vim.ArrayOfHostPathSelectionPolicyOption;
         };
         HostPciDevice: {
            (options?: integrityService.vim.HostPciDevice): integrityService.vim.HostPciDevice;
         };
         ArrayOfHostPciDevice: {
            (options?: integrityService.vim.ArrayOfHostPciDevice): integrityService.vim.ArrayOfHostPciDevice;
         };
         HostPciPassthruConfig: {
            (options?: integrityService.vim.HostPciPassthruConfig): integrityService.vim.HostPciPassthruConfig;
         };
         ArrayOfHostPciPassthruConfig: {
            (options?: integrityService.vim.ArrayOfHostPciPassthruConfig): integrityService.vim.ArrayOfHostPciPassthruConfig;
         };
         HostPciPassthruInfo: {
            (options?: integrityService.vim.HostPciPassthruInfo): integrityService.vim.HostPciPassthruInfo;
         };
         ArrayOfHostPciPassthruInfo: {
            (options?: integrityService.vim.ArrayOfHostPciPassthruInfo): integrityService.vim.ArrayOfHostPciPassthruInfo;
         };
         PhysicalNicSpec: {
            (options?: integrityService.vim.PhysicalNicSpec): integrityService.vim.PhysicalNicSpec;
         };
         PhysicalNicConfig: {
            (options?: integrityService.vim.PhysicalNicConfig): integrityService.vim.PhysicalNicConfig;
         };
         ArrayOfPhysicalNicConfig: {
            (options?: integrityService.vim.ArrayOfPhysicalNicConfig): integrityService.vim.ArrayOfPhysicalNicConfig;
         };
         PhysicalNicLinkInfo: {
            (options?: integrityService.vim.PhysicalNicLinkInfo): integrityService.vim.PhysicalNicLinkInfo;
         };
         ArrayOfPhysicalNicLinkInfo: {
            (options?: integrityService.vim.ArrayOfPhysicalNicLinkInfo): integrityService.vim.ArrayOfPhysicalNicLinkInfo;
         };
         PhysicalNicHint: {
            (options?: integrityService.vim.PhysicalNicHint): integrityService.vim.PhysicalNicHint;
         };
         PhysicalNicIpHint: {
            (options?: integrityService.vim.PhysicalNicIpHint): integrityService.vim.PhysicalNicIpHint;
         };
         ArrayOfPhysicalNicIpHint: {
            (options?: integrityService.vim.ArrayOfPhysicalNicIpHint): integrityService.vim.ArrayOfPhysicalNicIpHint;
         };
         PhysicalNicNameHint: {
            (options?: integrityService.vim.PhysicalNicNameHint): integrityService.vim.PhysicalNicNameHint;
         };
         ArrayOfPhysicalNicNameHint: {
            (options?: integrityService.vim.ArrayOfPhysicalNicNameHint): integrityService.vim.ArrayOfPhysicalNicNameHint;
         };
         PhysicalNicHintInfo: {
            (options?: integrityService.vim.PhysicalNicHintInfo): integrityService.vim.PhysicalNicHintInfo;
         };
         ArrayOfPhysicalNicHintInfo: {
            (options?: integrityService.vim.ArrayOfPhysicalNicHintInfo): integrityService.vim.ArrayOfPhysicalNicHintInfo;
         };
         PhysicalNicCdpDeviceCapability: {
            (options?: integrityService.vim.PhysicalNicCdpDeviceCapability): integrityService.vim.PhysicalNicCdpDeviceCapability;
         };
         PhysicalNicCdpInfo: {
            (options?: integrityService.vim.PhysicalNicCdpInfo): integrityService.vim.PhysicalNicCdpInfo;
         };
         LinkLayerDiscoveryProtocolInfo: {
            (options?: integrityService.vim.LinkLayerDiscoveryProtocolInfo): integrityService.vim.LinkLayerDiscoveryProtocolInfo;
         };
         PhysicalNicVmDirectPathGen2SupportedMode: {
            "upt": string;
         };
         PhysicalNicResourcePoolSchedulerDisallowedReason: {
            "userOptOut": string;
            "hardwareUnsupported": string;
         };
         PhysicalNic: {
            (options?: integrityService.vim.PhysicalNic): integrityService.vim.PhysicalNic;
         };
         ArrayOfPhysicalNic: {
            (options?: integrityService.vim.ArrayOfPhysicalNic): integrityService.vim.ArrayOfPhysicalNic;
         };
         HostPlugStoreTopologyAdapter: {
            (options?: integrityService.vim.HostPlugStoreTopologyAdapter): integrityService.vim.HostPlugStoreTopologyAdapter;
         };
         ArrayOfHostPlugStoreTopologyAdapter: {
            (options?: integrityService.vim.ArrayOfHostPlugStoreTopologyAdapter): integrityService.vim.ArrayOfHostPlugStoreTopologyAdapter;
         };
         HostPlugStoreTopologyPath: {
            (options?: integrityService.vim.HostPlugStoreTopologyPath): integrityService.vim.HostPlugStoreTopologyPath;
         };
         ArrayOfHostPlugStoreTopologyPath: {
            (options?: integrityService.vim.ArrayOfHostPlugStoreTopologyPath): integrityService.vim.ArrayOfHostPlugStoreTopologyPath;
         };
         HostPlugStoreTopologyDevice: {
            (options?: integrityService.vim.HostPlugStoreTopologyDevice): integrityService.vim.HostPlugStoreTopologyDevice;
         };
         ArrayOfHostPlugStoreTopologyDevice: {
            (options?: integrityService.vim.ArrayOfHostPlugStoreTopologyDevice): integrityService.vim.ArrayOfHostPlugStoreTopologyDevice;
         };
         HostPlugStoreTopologyPlugin: {
            (options?: integrityService.vim.HostPlugStoreTopologyPlugin): integrityService.vim.HostPlugStoreTopologyPlugin;
         };
         ArrayOfHostPlugStoreTopologyPlugin: {
            (options?: integrityService.vim.ArrayOfHostPlugStoreTopologyPlugin): integrityService.vim.ArrayOfHostPlugStoreTopologyPlugin;
         };
         HostPlugStoreTopologyTarget: {
            (options?: integrityService.vim.HostPlugStoreTopologyTarget): integrityService.vim.HostPlugStoreTopologyTarget;
         };
         ArrayOfHostPlugStoreTopologyTarget: {
            (options?: integrityService.vim.ArrayOfHostPlugStoreTopologyTarget): integrityService.vim.ArrayOfHostPlugStoreTopologyTarget;
         };
         HostPlugStoreTopology: {
            (options?: integrityService.vim.HostPlugStoreTopology): integrityService.vim.HostPlugStoreTopology;
         };
         PortGroupConnecteeType: {
            "virtualMachine": string;
            "systemManagement": string;
            "host": string;
            "unknown": string;
         };
         HostPortGroupSpec: {
            (options?: integrityService.vim.HostPortGroupSpec): integrityService.vim.HostPortGroupSpec;
         };
         HostPortGroupConfig: {
            (options?: integrityService.vim.HostPortGroupConfig): integrityService.vim.HostPortGroupConfig;
         };
         ArrayOfHostPortGroupConfig: {
            (options?: integrityService.vim.ArrayOfHostPortGroupConfig): integrityService.vim.ArrayOfHostPortGroupConfig;
         };
         HostPortGroupPort: {
            (options?: integrityService.vim.HostPortGroupPort): integrityService.vim.HostPortGroupPort;
         };
         ArrayOfHostPortGroupPort: {
            (options?: integrityService.vim.ArrayOfHostPortGroupPort): integrityService.vim.ArrayOfHostPortGroupPort;
         };
         HostPortGroup: {
            (options?: integrityService.vim.HostPortGroup): integrityService.vim.HostPortGroup;
         };
         ArrayOfHostPortGroup: {
            (options?: integrityService.vim.ArrayOfHostPortGroup): integrityService.vim.ArrayOfHostPortGroup;
         };
         HostPowerPolicy: {
            (options?: integrityService.vim.HostPowerPolicy): integrityService.vim.HostPowerPolicy;
         };
         ArrayOfHostPowerPolicy: {
            (options?: integrityService.vim.ArrayOfHostPowerPolicy): integrityService.vim.ArrayOfHostPowerPolicy;
         };
         PowerSystemCapability: {
            (options?: integrityService.vim.PowerSystemCapability): integrityService.vim.PowerSystemCapability;
         };
         PowerSystemInfo: {
            (options?: integrityService.vim.PowerSystemInfo): integrityService.vim.PowerSystemInfo;
         };
         HostResignatureRescanResult: {
            (options?: integrityService.vim.HostResignatureRescanResult): integrityService.vim.HostResignatureRescanResult;
         };
         HostFirewallRulesetIpNetwork: {
            (options?: integrityService.vim.HostFirewallRulesetIpNetwork): integrityService.vim.HostFirewallRulesetIpNetwork;
         };
         ArrayOfHostFirewallRulesetIpNetwork: {
            (options?: integrityService.vim.ArrayOfHostFirewallRulesetIpNetwork): integrityService.vim.ArrayOfHostFirewallRulesetIpNetwork;
         };
         HostFirewallRulesetIpList: {
            (options?: integrityService.vim.HostFirewallRulesetIpList): integrityService.vim.HostFirewallRulesetIpList;
         };
         HostFirewallRulesetRulesetSpec: {
            (options?: integrityService.vim.HostFirewallRulesetRulesetSpec): integrityService.vim.HostFirewallRulesetRulesetSpec;
         };
         HostFirewallRuleDirection: {
            "inbound": string;
            "outbound": string;
         };
         HostFirewallRulePortType: {
            "src": string;
            "dst": string;
         };
         HostFirewallRuleProtocol: {
            "tcp": string;
            "udp": string;
         };
         HostFirewallRule: {
            (options?: integrityService.vim.HostFirewallRule): integrityService.vim.HostFirewallRule;
         };
         ArrayOfHostFirewallRule: {
            (options?: integrityService.vim.ArrayOfHostFirewallRule): integrityService.vim.ArrayOfHostFirewallRule;
         };
         HostFirewallRuleset: {
            (options?: integrityService.vim.HostFirewallRuleset): integrityService.vim.HostFirewallRuleset;
         };
         ArrayOfHostFirewallRuleset: {
            (options?: integrityService.vim.ArrayOfHostFirewallRuleset): integrityService.vim.ArrayOfHostFirewallRuleset;
         };
         HostRuntimeInfoNetStackInstanceRuntimeInfoState: {
            "inactive": string;
            "active": string;
            "deactivating": string;
            "activating": string;
         };
         HostRuntimeInfoNetStackInstanceRuntimeInfo: {
            (options?: integrityService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo): integrityService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo;
         };
         ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo: {
            (options?: integrityService.vim.ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo): integrityService.vim.ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo;
         };
         HostRuntimeInfoNetworkRuntimeInfo: {
            (options?: integrityService.vim.HostRuntimeInfoNetworkRuntimeInfo): integrityService.vim.HostRuntimeInfoNetworkRuntimeInfo;
         };
         HostRuntimeInfo: {
            (options?: integrityService.vim.HostRuntimeInfo): integrityService.vim.HostRuntimeInfo;
         };
         HostScsiDiskPartition: {
            (options?: integrityService.vim.HostScsiDiskPartition): integrityService.vim.HostScsiDiskPartition;
         };
         ArrayOfHostScsiDiskPartition: {
            (options?: integrityService.vim.ArrayOfHostScsiDiskPartition): integrityService.vim.ArrayOfHostScsiDiskPartition;
         };
         HostScsiDisk: {
            (options?: integrityService.vim.HostScsiDisk): integrityService.vim.HostScsiDisk;
         };
         ArrayOfHostScsiDisk: {
            (options?: integrityService.vim.ArrayOfHostScsiDisk): integrityService.vim.ArrayOfHostScsiDisk;
         };
         ScsiLunType: {
            "disk": string;
            "tape": string;
            "printer": string;
            "processor": string;
            "worm": string;
            "cdrom": string;
            "scanner": string;
            "opticalDevice": string;
            "mediaChanger": string;
            "communications": string;
            "storageArrayController": string;
            "enclosure": string;
            "unknown": string;
         };
         ScsiLunCapabilities: {
            (options?: integrityService.vim.ScsiLunCapabilities): integrityService.vim.ScsiLunCapabilities;
         };
         ScsiLunDurableName: {
            (options?: integrityService.vim.ScsiLunDurableName): integrityService.vim.ScsiLunDurableName;
         };
         ArrayOfScsiLunDurableName: {
            (options?: integrityService.vim.ArrayOfScsiLunDurableName): integrityService.vim.ArrayOfScsiLunDurableName;
         };
         ScsiLunState: {
            "unknownState": string;
            "ok": string;
            "error": string;
            "off": string;
            "quiesced": string;
            "degraded": string;
            "lostCommunication": string;
            "timeout": string;
         };
         ScsiLunDescriptorQuality: {
            "highQuality": string;
            "mediumQuality": string;
            "lowQuality": string;
            "unknownQuality": string;
         };
         ScsiLunDescriptor: {
            (options?: integrityService.vim.ScsiLunDescriptor): integrityService.vim.ScsiLunDescriptor;
         };
         ArrayOfScsiLunDescriptor: {
            (options?: integrityService.vim.ArrayOfScsiLunDescriptor): integrityService.vim.ArrayOfScsiLunDescriptor;
         };
         ScsiLunVStorageSupportStatus: {
            "vStorageSupported": string;
            "vStorageUnsupported": string;
            "vStorageUnknown": string;
         };
         ScsiLun: {
            (options?: integrityService.vim.ScsiLun): integrityService.vim.ScsiLun;
         };
         ArrayOfScsiLun: {
            (options?: integrityService.vim.ArrayOfScsiLun): integrityService.vim.ArrayOfScsiLun;
         };
         HostScsiTopologyInterface: {
            (options?: integrityService.vim.HostScsiTopologyInterface): integrityService.vim.HostScsiTopologyInterface;
         };
         ArrayOfHostScsiTopologyInterface: {
            (options?: integrityService.vim.ArrayOfHostScsiTopologyInterface): integrityService.vim.ArrayOfHostScsiTopologyInterface;
         };
         HostScsiTopologyTarget: {
            (options?: integrityService.vim.HostScsiTopologyTarget): integrityService.vim.HostScsiTopologyTarget;
         };
         ArrayOfHostScsiTopologyTarget: {
            (options?: integrityService.vim.ArrayOfHostScsiTopologyTarget): integrityService.vim.ArrayOfHostScsiTopologyTarget;
         };
         HostScsiTopologyLun: {
            (options?: integrityService.vim.HostScsiTopologyLun): integrityService.vim.HostScsiTopologyLun;
         };
         ArrayOfHostScsiTopologyLun: {
            (options?: integrityService.vim.ArrayOfHostScsiTopologyLun): integrityService.vim.ArrayOfHostScsiTopologyLun;
         };
         HostScsiTopology: {
            (options?: integrityService.vim.HostScsiTopology): integrityService.vim.HostScsiTopology;
         };
         HostSecuritySpec: {
            (options?: integrityService.vim.HostSecuritySpec): integrityService.vim.HostSecuritySpec;
         };
         HostServicePolicy: {
            "on": string;
            "automatic": string;
            "off": string;
         };
         HostServiceSourcePackage: {
            (options?: integrityService.vim.HostServiceSourcePackage): integrityService.vim.HostServiceSourcePackage;
         };
         HostService: {
            (options?: integrityService.vim.HostService): integrityService.vim.HostService;
         };
         ArrayOfHostService: {
            (options?: integrityService.vim.ArrayOfHostService): integrityService.vim.ArrayOfHostService;
         };
         HostServiceConfig: {
            (options?: integrityService.vim.HostServiceConfig): integrityService.vim.HostServiceConfig;
         };
         ArrayOfHostServiceConfig: {
            (options?: integrityService.vim.ArrayOfHostServiceConfig): integrityService.vim.ArrayOfHostServiceConfig;
         };
         HostServiceInfo: {
            (options?: integrityService.vim.HostServiceInfo): integrityService.vim.HostServiceInfo;
         };
         HostSnmpDestination: {
            (options?: integrityService.vim.HostSnmpDestination): integrityService.vim.HostSnmpDestination;
         };
         ArrayOfHostSnmpDestination: {
            (options?: integrityService.vim.ArrayOfHostSnmpDestination): integrityService.vim.ArrayOfHostSnmpDestination;
         };
         HostSnmpConfigSpec: {
            (options?: integrityService.vim.HostSnmpConfigSpec): integrityService.vim.HostSnmpConfigSpec;
         };
         HostSnmpAgentCapability: {
            "COMPLETE": string;
            "DIAGNOSTICS": string;
            "CONFIGURATION": string;
         };
         HostSnmpSystemAgentLimits: {
            (options?: integrityService.vim.HostSnmpSystemAgentLimits): integrityService.vim.HostSnmpSystemAgentLimits;
         };
         HostSriovConfig: {
            (options?: integrityService.vim.HostSriovConfig): integrityService.vim.HostSriovConfig;
         };
         HostSriovInfo: {
            (options?: integrityService.vim.HostSriovInfo): integrityService.vim.HostSriovInfo;
         };
         HostSslThumbprintInfo: {
            (options?: integrityService.vim.HostSslThumbprintInfo): integrityService.vim.HostSslThumbprintInfo;
         };
         ArrayOfHostSslThumbprintInfo: {
            (options?: integrityService.vim.ArrayOfHostSslThumbprintInfo): integrityService.vim.ArrayOfHostSslThumbprintInfo;
         };
         HostStorageArrayTypePolicyOption: {
            (options?: integrityService.vim.HostStorageArrayTypePolicyOption): integrityService.vim.HostStorageArrayTypePolicyOption;
         };
         ArrayOfHostStorageArrayTypePolicyOption: {
            (options?: integrityService.vim.ArrayOfHostStorageArrayTypePolicyOption): integrityService.vim.ArrayOfHostStorageArrayTypePolicyOption;
         };
         HostStorageDeviceInfo: {
            (options?: integrityService.vim.HostStorageDeviceInfo): integrityService.vim.HostStorageDeviceInfo;
         };
         HostHardwareSummary: {
            (options?: integrityService.vim.HostHardwareSummary): integrityService.vim.HostHardwareSummary;
         };
         HostListSummaryQuickStats: {
            (options?: integrityService.vim.HostListSummaryQuickStats): integrityService.vim.HostListSummaryQuickStats;
         };
         HostConfigSummary: {
            (options?: integrityService.vim.HostConfigSummary): integrityService.vim.HostConfigSummary;
         };
         HostListSummary: {
            (options?: integrityService.vim.HostListSummary): integrityService.vim.HostListSummary;
         };
         HostSystemHealthInfo: {
            (options?: integrityService.vim.HostSystemHealthInfo): integrityService.vim.HostSystemHealthInfo;
         };
         HostSystemIdentificationInfoIdentifier: {
            "AssetTag": string;
            "ServiceTag": string;
            "OemSpecificString": string;
         };
         HostSystemIdentificationInfo: {
            (options?: integrityService.vim.HostSystemIdentificationInfo): integrityService.vim.HostSystemIdentificationInfo;
         };
         ArrayOfHostSystemIdentificationInfo: {
            (options?: integrityService.vim.ArrayOfHostSystemIdentificationInfo): integrityService.vim.ArrayOfHostSystemIdentificationInfo;
         };
         HostSystemResourceInfo: {
            (options?: integrityService.vim.HostSystemResourceInfo): integrityService.vim.HostSystemResourceInfo;
         };
         ArrayOfHostSystemResourceInfo: {
            (options?: integrityService.vim.ArrayOfHostSystemResourceInfo): integrityService.vim.ArrayOfHostSystemResourceInfo;
         };
         HostSystemSwapConfigurationSystemSwapOption: {
            (options?: integrityService.vim.HostSystemSwapConfigurationSystemSwapOption): integrityService.vim.HostSystemSwapConfigurationSystemSwapOption;
         };
         ArrayOfHostSystemSwapConfigurationSystemSwapOption: {
            (options?: integrityService.vim.ArrayOfHostSystemSwapConfigurationSystemSwapOption): integrityService.vim.ArrayOfHostSystemSwapConfigurationSystemSwapOption;
         };
         HostSystemSwapConfigurationDisabledOption: {
            (options?: integrityService.vim.HostSystemSwapConfigurationDisabledOption): integrityService.vim.HostSystemSwapConfigurationDisabledOption;
         };
         HostSystemSwapConfigurationHostCacheOption: {
            (options?: integrityService.vim.HostSystemSwapConfigurationHostCacheOption): integrityService.vim.HostSystemSwapConfigurationHostCacheOption;
         };
         HostSystemSwapConfigurationHostLocalSwapOption: {
            (options?: integrityService.vim.HostSystemSwapConfigurationHostLocalSwapOption): integrityService.vim.HostSystemSwapConfigurationHostLocalSwapOption;
         };
         HostSystemSwapConfigurationDatastoreOption: {
            (options?: integrityService.vim.HostSystemSwapConfigurationDatastoreOption): integrityService.vim.HostSystemSwapConfigurationDatastoreOption;
         };
         HostSystemSwapConfiguration: {
            (options?: integrityService.vim.HostSystemSwapConfiguration): integrityService.vim.HostSystemSwapConfiguration;
         };
         HostTargetTransport: {
            (options?: integrityService.vim.HostTargetTransport): integrityService.vim.HostTargetTransport;
         };
         HostParallelScsiTargetTransport: {
            (options?: integrityService.vim.HostParallelScsiTargetTransport): integrityService.vim.HostParallelScsiTargetTransport;
         };
         HostBlockAdapterTargetTransport: {
            (options?: integrityService.vim.HostBlockAdapterTargetTransport): integrityService.vim.HostBlockAdapterTargetTransport;
         };
         HostFibreChannelTargetTransport: {
            (options?: integrityService.vim.HostFibreChannelTargetTransport): integrityService.vim.HostFibreChannelTargetTransport;
         };
         HostInternetScsiTargetTransport: {
            (options?: integrityService.vim.HostInternetScsiTargetTransport): integrityService.vim.HostInternetScsiTargetTransport;
         };
         HostFibreChannelOverEthernetTargetTransport: {
            (options?: integrityService.vim.HostFibreChannelOverEthernetTargetTransport): integrityService.vim.HostFibreChannelOverEthernetTargetTransport;
         };
         HostTpmAttestationReport: {
            (options?: integrityService.vim.HostTpmAttestationReport): integrityService.vim.HostTpmAttestationReport;
         };
         HostTpmBootSecurityOptionEventDetails: {
            (options?: integrityService.vim.HostTpmBootSecurityOptionEventDetails): integrityService.vim.HostTpmBootSecurityOptionEventDetails;
         };
         HostTpmCommandEventDetails: {
            (options?: integrityService.vim.HostTpmCommandEventDetails): integrityService.vim.HostTpmCommandEventDetails;
         };
         HostDigestInfoDigestMethodType: {
            "SHA1": string;
            "MD5": string;
         };
         HostDigestInfo: {
            (options?: integrityService.vim.HostDigestInfo): integrityService.vim.HostDigestInfo;
         };
         HostTpmDigestInfo: {
            (options?: integrityService.vim.HostTpmDigestInfo): integrityService.vim.HostTpmDigestInfo;
         };
         ArrayOfHostTpmDigestInfo: {
            (options?: integrityService.vim.ArrayOfHostTpmDigestInfo): integrityService.vim.ArrayOfHostTpmDigestInfo;
         };
         HostTpmEventDetails: {
            (options?: integrityService.vim.HostTpmEventDetails): integrityService.vim.HostTpmEventDetails;
         };
         HostTpmEventLogEntry: {
            (options?: integrityService.vim.HostTpmEventLogEntry): integrityService.vim.HostTpmEventLogEntry;
         };
         ArrayOfHostTpmEventLogEntry: {
            (options?: integrityService.vim.ArrayOfHostTpmEventLogEntry): integrityService.vim.ArrayOfHostTpmEventLogEntry;
         };
         HostTpmOptionEventDetails: {
            (options?: integrityService.vim.HostTpmOptionEventDetails): integrityService.vim.HostTpmOptionEventDetails;
         };
         HostTpmSoftwareComponentEventDetails: {
            (options?: integrityService.vim.HostTpmSoftwareComponentEventDetails): integrityService.vim.HostTpmSoftwareComponentEventDetails;
         };
         HostUnresolvedVmfsExtentUnresolvedReason: {
            "diskIdMismatch": string;
            "uuidConflict": string;
         };
         HostUnresolvedVmfsExtent: {
            (options?: integrityService.vim.HostUnresolvedVmfsExtent): integrityService.vim.HostUnresolvedVmfsExtent;
         };
         ArrayOfHostUnresolvedVmfsExtent: {
            (options?: integrityService.vim.ArrayOfHostUnresolvedVmfsExtent): integrityService.vim.ArrayOfHostUnresolvedVmfsExtent;
         };
         HostUnresolvedVmfsResignatureSpec: {
            (options?: integrityService.vim.HostUnresolvedVmfsResignatureSpec): integrityService.vim.HostUnresolvedVmfsResignatureSpec;
         };
         HostUnresolvedVmfsResolutionResult: {
            (options?: integrityService.vim.HostUnresolvedVmfsResolutionResult): integrityService.vim.HostUnresolvedVmfsResolutionResult;
         };
         ArrayOfHostUnresolvedVmfsResolutionResult: {
            (options?: integrityService.vim.ArrayOfHostUnresolvedVmfsResolutionResult): integrityService.vim.ArrayOfHostUnresolvedVmfsResolutionResult;
         };
         HostUnresolvedVmfsResolutionSpecVmfsUuidResolution: {
            "resignature": string;
            "forceMount": string;
         };
         HostUnresolvedVmfsResolutionSpec: {
            (options?: integrityService.vim.HostUnresolvedVmfsResolutionSpec): integrityService.vim.HostUnresolvedVmfsResolutionSpec;
         };
         ArrayOfHostUnresolvedVmfsResolutionSpec: {
            (options?: integrityService.vim.ArrayOfHostUnresolvedVmfsResolutionSpec): integrityService.vim.ArrayOfHostUnresolvedVmfsResolutionSpec;
         };
         HostUnresolvedVmfsVolumeResolveStatus: {
            (options?: integrityService.vim.HostUnresolvedVmfsVolumeResolveStatus): integrityService.vim.HostUnresolvedVmfsVolumeResolveStatus;
         };
         HostUnresolvedVmfsVolume: {
            (options?: integrityService.vim.HostUnresolvedVmfsVolume): integrityService.vim.HostUnresolvedVmfsVolume;
         };
         ArrayOfHostUnresolvedVmfsVolume: {
            (options?: integrityService.vim.ArrayOfHostUnresolvedVmfsVolume): integrityService.vim.ArrayOfHostUnresolvedVmfsVolume;
         };
         HostVFlashManagerVFlashResourceConfigSpec: {
            (options?: integrityService.vim.HostVFlashManagerVFlashResourceConfigSpec): integrityService.vim.HostVFlashManagerVFlashResourceConfigSpec;
         };
         HostVFlashManagerVFlashResourceConfigInfo: {
            (options?: integrityService.vim.HostVFlashManagerVFlashResourceConfigInfo): integrityService.vim.HostVFlashManagerVFlashResourceConfigInfo;
         };
         HostVFlashManagerVFlashResourceRunTimeInfo: {
            (options?: integrityService.vim.HostVFlashManagerVFlashResourceRunTimeInfo): integrityService.vim.HostVFlashManagerVFlashResourceRunTimeInfo;
         };
         HostVFlashManagerVFlashCacheConfigSpec: {
            (options?: integrityService.vim.HostVFlashManagerVFlashCacheConfigSpec): integrityService.vim.HostVFlashManagerVFlashCacheConfigSpec;
         };
         HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption: {
            (options?: integrityService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption): integrityService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
         };
         ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption: {
            (options?: integrityService.vim.ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption): integrityService.vim.ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
         };
         HostVFlashManagerVFlashCacheConfigInfo: {
            (options?: integrityService.vim.HostVFlashManagerVFlashCacheConfigInfo): integrityService.vim.HostVFlashManagerVFlashCacheConfigInfo;
         };
         HostVFlashManagerVFlashConfigInfo: {
            (options?: integrityService.vim.HostVFlashManagerVFlashConfigInfo): integrityService.vim.HostVFlashManagerVFlashConfigInfo;
         };
         HostVFlashResourceConfigurationResult: {
            (options?: integrityService.vim.HostVFlashResourceConfigurationResult): integrityService.vim.HostVFlashResourceConfigurationResult;
         };
         HostVMotionConfig: {
            (options?: integrityService.vim.HostVMotionConfig): integrityService.vim.HostVMotionConfig;
         };
         HostVMotionInfo: {
            (options?: integrityService.vim.HostVMotionInfo): integrityService.vim.HostVMotionInfo;
         };
         HostVMotionNetConfig: {
            (options?: integrityService.vim.HostVMotionNetConfig): integrityService.vim.HostVMotionNetConfig;
         };
         HostVffsSpec: {
            (options?: integrityService.vim.HostVffsSpec): integrityService.vim.HostVffsSpec;
         };
         HostVffsVolume: {
            (options?: integrityService.vim.HostVffsVolume): integrityService.vim.HostVffsVolume;
         };
         HostVirtualNicSpec: {
            (options?: integrityService.vim.HostVirtualNicSpec): integrityService.vim.HostVirtualNicSpec;
         };
         HostVirtualNicConfig: {
            (options?: integrityService.vim.HostVirtualNicConfig): integrityService.vim.HostVirtualNicConfig;
         };
         ArrayOfHostVirtualNicConfig: {
            (options?: integrityService.vim.ArrayOfHostVirtualNicConfig): integrityService.vim.ArrayOfHostVirtualNicConfig;
         };
         HostVirtualNic: {
            (options?: integrityService.vim.HostVirtualNic): integrityService.vim.HostVirtualNic;
         };
         ArrayOfHostVirtualNic: {
            (options?: integrityService.vim.ArrayOfHostVirtualNic): integrityService.vim.ArrayOfHostVirtualNic;
         };
         HostVirtualNicConnection: {
            (options?: integrityService.vim.HostVirtualNicConnection): integrityService.vim.HostVirtualNicConnection;
         };
         HostVirtualNicManagerNicType: {
            "vmotion": string;
            "faultToleranceLogging": string;
            "vSphereReplication": string;
            "management": string;
            "vsan": string;
         };
         HostVirtualNicManagerNicTypeSelection: {
            (options?: integrityService.vim.HostVirtualNicManagerNicTypeSelection): integrityService.vim.HostVirtualNicManagerNicTypeSelection;
         };
         ArrayOfHostVirtualNicManagerNicTypeSelection: {
            (options?: integrityService.vim.ArrayOfHostVirtualNicManagerNicTypeSelection): integrityService.vim.ArrayOfHostVirtualNicManagerNicTypeSelection;
         };
         VirtualNicManagerNetConfig: {
            (options?: integrityService.vim.VirtualNicManagerNetConfig): integrityService.vim.VirtualNicManagerNetConfig;
         };
         ArrayOfVirtualNicManagerNetConfig: {
            (options?: integrityService.vim.ArrayOfVirtualNicManagerNetConfig): integrityService.vim.ArrayOfVirtualNicManagerNetConfig;
         };
         HostVirtualNicManagerInfo: {
            (options?: integrityService.vim.HostVirtualNicManagerInfo): integrityService.vim.HostVirtualNicManagerInfo;
         };
         HostVirtualSwitchBridge: {
            (options?: integrityService.vim.HostVirtualSwitchBridge): integrityService.vim.HostVirtualSwitchBridge;
         };
         HostVirtualSwitchAutoBridge: {
            (options?: integrityService.vim.HostVirtualSwitchAutoBridge): integrityService.vim.HostVirtualSwitchAutoBridge;
         };
         HostVirtualSwitchSimpleBridge: {
            (options?: integrityService.vim.HostVirtualSwitchSimpleBridge): integrityService.vim.HostVirtualSwitchSimpleBridge;
         };
         HostVirtualSwitchBondBridge: {
            (options?: integrityService.vim.HostVirtualSwitchBondBridge): integrityService.vim.HostVirtualSwitchBondBridge;
         };
         HostVirtualSwitchBeaconConfig: {
            (options?: integrityService.vim.HostVirtualSwitchBeaconConfig): integrityService.vim.HostVirtualSwitchBeaconConfig;
         };
         HostVirtualSwitchSpec: {
            (options?: integrityService.vim.HostVirtualSwitchSpec): integrityService.vim.HostVirtualSwitchSpec;
         };
         HostVirtualSwitchConfig: {
            (options?: integrityService.vim.HostVirtualSwitchConfig): integrityService.vim.HostVirtualSwitchConfig;
         };
         ArrayOfHostVirtualSwitchConfig: {
            (options?: integrityService.vim.ArrayOfHostVirtualSwitchConfig): integrityService.vim.ArrayOfHostVirtualSwitchConfig;
         };
         HostVirtualSwitch: {
            (options?: integrityService.vim.HostVirtualSwitch): integrityService.vim.HostVirtualSwitch;
         };
         ArrayOfHostVirtualSwitch: {
            (options?: integrityService.vim.ArrayOfHostVirtualSwitch): integrityService.vim.ArrayOfHostVirtualSwitch;
         };
         HostVmciAccessManagerMode: {
            "grant": string;
            "replace": string;
            "revoke": string;
         };
         HostVmciAccessManagerAccessSpec: {
            (options?: integrityService.vim.HostVmciAccessManagerAccessSpec): integrityService.vim.HostVmciAccessManagerAccessSpec;
         };
         ArrayOfHostVmciAccessManagerAccessSpec: {
            (options?: integrityService.vim.ArrayOfHostVmciAccessManagerAccessSpec): integrityService.vim.ArrayOfHostVmciAccessManagerAccessSpec;
         };
         HostVmfsRescanResult: {
            (options?: integrityService.vim.HostVmfsRescanResult): integrityService.vim.HostVmfsRescanResult;
         };
         ArrayOfHostVmfsRescanResult: {
            (options?: integrityService.vim.ArrayOfHostVmfsRescanResult): integrityService.vim.ArrayOfHostVmfsRescanResult;
         };
         HostVmfsSpec: {
            (options?: integrityService.vim.HostVmfsSpec): integrityService.vim.HostVmfsSpec;
         };
         HostVmfsVolume: {
            (options?: integrityService.vim.HostVmfsVolume): integrityService.vim.HostVmfsVolume;
         };
         HostVsanInternalSystemCmmdsQuery: {
            (options?: integrityService.vim.HostVsanInternalSystemCmmdsQuery): integrityService.vim.HostVsanInternalSystemCmmdsQuery;
         };
         ArrayOfHostVsanInternalSystemCmmdsQuery: {
            (options?: integrityService.vim.ArrayOfHostVsanInternalSystemCmmdsQuery): integrityService.vim.ArrayOfHostVsanInternalSystemCmmdsQuery;
         };
         NetDhcpConfigInfoDhcpOptions: {
            (options?: integrityService.vim.NetDhcpConfigInfoDhcpOptions): integrityService.vim.NetDhcpConfigInfoDhcpOptions;
         };
         NetDhcpConfigInfo: {
            (options?: integrityService.vim.NetDhcpConfigInfo): integrityService.vim.NetDhcpConfigInfo;
         };
         NetDhcpConfigSpecDhcpOptionsSpec: {
            (options?: integrityService.vim.NetDhcpConfigSpecDhcpOptionsSpec): integrityService.vim.NetDhcpConfigSpecDhcpOptionsSpec;
         };
         NetDhcpConfigSpec: {
            (options?: integrityService.vim.NetDhcpConfigSpec): integrityService.vim.NetDhcpConfigSpec;
         };
         NetDnsConfigInfo: {
            (options?: integrityService.vim.NetDnsConfigInfo): integrityService.vim.NetDnsConfigInfo;
         };
         NetDnsConfigSpec: {
            (options?: integrityService.vim.NetDnsConfigSpec): integrityService.vim.NetDnsConfigSpec;
         };
         NetIpConfigInfoIpAddressOrigin: {
            "other": string;
            "manual": string;
            "dhcp": string;
            "linklayer": string;
            "random": string;
         };
         NetIpConfigInfoIpAddressStatus: {
            "preferred": string;
            "deprecated": string;
            "invalid": string;
            "inaccessible": string;
            "unknown": string;
            "tentative": string;
            "duplicate": string;
         };
         NetIpConfigInfoIpAddress: {
            (options?: integrityService.vim.NetIpConfigInfoIpAddress): integrityService.vim.NetIpConfigInfoIpAddress;
         };
         ArrayOfNetIpConfigInfoIpAddress: {
            (options?: integrityService.vim.ArrayOfNetIpConfigInfoIpAddress): integrityService.vim.ArrayOfNetIpConfigInfoIpAddress;
         };
         NetIpConfigInfo: {
            (options?: integrityService.vim.NetIpConfigInfo): integrityService.vim.NetIpConfigInfo;
         };
         NetIpConfigSpecIpAddressSpec: {
            (options?: integrityService.vim.NetIpConfigSpecIpAddressSpec): integrityService.vim.NetIpConfigSpecIpAddressSpec;
         };
         ArrayOfNetIpConfigSpecIpAddressSpec: {
            (options?: integrityService.vim.ArrayOfNetIpConfigSpecIpAddressSpec): integrityService.vim.ArrayOfNetIpConfigSpecIpAddressSpec;
         };
         NetIpConfigSpec: {
            (options?: integrityService.vim.NetIpConfigSpec): integrityService.vim.NetIpConfigSpec;
         };
         NetIpRouteConfigInfoGateway: {
            (options?: integrityService.vim.NetIpRouteConfigInfoGateway): integrityService.vim.NetIpRouteConfigInfoGateway;
         };
         NetIpRouteConfigInfoIpRoute: {
            (options?: integrityService.vim.NetIpRouteConfigInfoIpRoute): integrityService.vim.NetIpRouteConfigInfoIpRoute;
         };
         ArrayOfNetIpRouteConfigInfoIpRoute: {
            (options?: integrityService.vim.ArrayOfNetIpRouteConfigInfoIpRoute): integrityService.vim.ArrayOfNetIpRouteConfigInfoIpRoute;
         };
         NetIpRouteConfigInfo: {
            (options?: integrityService.vim.NetIpRouteConfigInfo): integrityService.vim.NetIpRouteConfigInfo;
         };
         NetIpRouteConfigSpecGatewaySpec: {
            (options?: integrityService.vim.NetIpRouteConfigSpecGatewaySpec): integrityService.vim.NetIpRouteConfigSpecGatewaySpec;
         };
         NetIpRouteConfigSpecIpRouteSpec: {
            (options?: integrityService.vim.NetIpRouteConfigSpecIpRouteSpec): integrityService.vim.NetIpRouteConfigSpecIpRouteSpec;
         };
         ArrayOfNetIpRouteConfigSpecIpRouteSpec: {
            (options?: integrityService.vim.ArrayOfNetIpRouteConfigSpecIpRouteSpec): integrityService.vim.ArrayOfNetIpRouteConfigSpecIpRouteSpec;
         };
         NetIpRouteConfigSpec: {
            (options?: integrityService.vim.NetIpRouteConfigSpec): integrityService.vim.NetIpRouteConfigSpec;
         };
         NetIpStackInfoEntryType: {
            "other": string;
            "invalid": string;
            "dynamic": string;
            "manual": string;
         };
         NetIpStackInfoPreference: {
            "reserved": string;
            "low": string;
            "medium": string;
            "high": string;
         };
         NetIpStackInfoNetToMedia: {
            (options?: integrityService.vim.NetIpStackInfoNetToMedia): integrityService.vim.NetIpStackInfoNetToMedia;
         };
         ArrayOfNetIpStackInfoNetToMedia: {
            (options?: integrityService.vim.ArrayOfNetIpStackInfoNetToMedia): integrityService.vim.ArrayOfNetIpStackInfoNetToMedia;
         };
         NetIpStackInfoDefaultRouter: {
            (options?: integrityService.vim.NetIpStackInfoDefaultRouter): integrityService.vim.NetIpStackInfoDefaultRouter;
         };
         ArrayOfNetIpStackInfoDefaultRouter: {
            (options?: integrityService.vim.ArrayOfNetIpStackInfoDefaultRouter): integrityService.vim.ArrayOfNetIpStackInfoDefaultRouter;
         };
         NetIpStackInfo: {
            (options?: integrityService.vim.NetIpStackInfo): integrityService.vim.NetIpStackInfo;
         };
         NetBIOSConfigInfoMode: {
            "unknown": string;
            "enabled": string;
            "disabled": string;
            "enabledViaDHCP": string;
         };
         NetBIOSConfigInfo: {
            (options?: integrityService.vim.NetBIOSConfigInfo): integrityService.vim.NetBIOSConfigInfo;
         };
         WinNetBIOSConfigInfo: {
            (options?: integrityService.vim.WinNetBIOSConfigInfo): integrityService.vim.WinNetBIOSConfigInfo;
         };
         ArrayUpdateOperation: {
            "add": string;
            "remove": string;
            "edit": string;
         };
         ArrayUpdateSpec: {
            (options?: integrityService.vim.ArrayUpdateSpec): integrityService.vim.ArrayUpdateSpec;
         };
         BoolOption: {
            (options?: integrityService.vim.BoolOption): integrityService.vim.BoolOption;
         };
         ChoiceOption: {
            (options?: integrityService.vim.ChoiceOption): integrityService.vim.ChoiceOption;
         };
         FloatOption: {
            (options?: integrityService.vim.FloatOption): integrityService.vim.FloatOption;
         };
         IntOption: {
            (options?: integrityService.vim.IntOption): integrityService.vim.IntOption;
         };
         LongOption: {
            (options?: integrityService.vim.LongOption): integrityService.vim.LongOption;
         };
         OptionDef: {
            (options?: integrityService.vim.OptionDef): integrityService.vim.OptionDef;
         };
         ArrayOfOptionDef: {
            (options?: integrityService.vim.ArrayOfOptionDef): integrityService.vim.ArrayOfOptionDef;
         };
         OptionType: {
            (options?: integrityService.vim.OptionType): integrityService.vim.OptionType;
         };
         OptionValue: {
            (options?: integrityService.vim.OptionValue): integrityService.vim.OptionValue;
         };
         ArrayOfOptionValue: {
            (options?: integrityService.vim.ArrayOfOptionValue): integrityService.vim.ArrayOfOptionValue;
         };
         StringOption: {
            (options?: integrityService.vim.StringOption): integrityService.vim.StringOption;
         };
         ApplyProfile: {
            (options?: integrityService.vim.ApplyProfile): integrityService.vim.ApplyProfile;
         };
         ArrayOfApplyProfile: {
            (options?: integrityService.vim.ArrayOfApplyProfile): integrityService.vim.ArrayOfApplyProfile;
         };
         ProfileApplyProfileElement: {
            (options?: integrityService.vim.ProfileApplyProfileElement): integrityService.vim.ProfileApplyProfileElement;
         };
         ProfileApplyProfileProperty: {
            (options?: integrityService.vim.ProfileApplyProfileProperty): integrityService.vim.ProfileApplyProfileProperty;
         };
         ArrayOfProfileApplyProfileProperty: {
            (options?: integrityService.vim.ArrayOfProfileApplyProfileProperty): integrityService.vim.ArrayOfProfileApplyProfileProperty;
         };
         ComplianceLocator: {
            (options?: integrityService.vim.ComplianceLocator): integrityService.vim.ComplianceLocator;
         };
         ArrayOfComplianceLocator: {
            (options?: integrityService.vim.ArrayOfComplianceLocator): integrityService.vim.ArrayOfComplianceLocator;
         };
         ComplianceProfile: {
            (options?: integrityService.vim.ComplianceProfile): integrityService.vim.ComplianceProfile;
         };
         ComplianceResultStatus: {
            "compliant": string;
            "nonCompliant": string;
            "unknown": string;
         };
         ComplianceFailure: {
            (options?: integrityService.vim.ComplianceFailure): integrityService.vim.ComplianceFailure;
         };
         ArrayOfComplianceFailure: {
            (options?: integrityService.vim.ArrayOfComplianceFailure): integrityService.vim.ArrayOfComplianceFailure;
         };
         ComplianceResult: {
            (options?: integrityService.vim.ComplianceResult): integrityService.vim.ComplianceResult;
         };
         ArrayOfComplianceResult: {
            (options?: integrityService.vim.ArrayOfComplianceResult): integrityService.vim.ArrayOfComplianceResult;
         };
         ProfileDeferredPolicyOptionParameter: {
            (options?: integrityService.vim.ProfileDeferredPolicyOptionParameter): integrityService.vim.ProfileDeferredPolicyOptionParameter;
         };
         ArrayOfProfileDeferredPolicyOptionParameter: {
            (options?: integrityService.vim.ArrayOfProfileDeferredPolicyOptionParameter): integrityService.vim.ArrayOfProfileDeferredPolicyOptionParameter;
         };
         ProfileExpression: {
            (options?: integrityService.vim.ProfileExpression): integrityService.vim.ProfileExpression;
         };
         ArrayOfProfileExpression: {
            (options?: integrityService.vim.ArrayOfProfileExpression): integrityService.vim.ArrayOfProfileExpression;
         };
         ProfileSimpleExpression: {
            (options?: integrityService.vim.ProfileSimpleExpression): integrityService.vim.ProfileSimpleExpression;
         };
         ProfileCompositeExpression: {
            (options?: integrityService.vim.ProfileCompositeExpression): integrityService.vim.ProfileCompositeExpression;
         };
         ProfileExpressionMetadata: {
            (options?: integrityService.vim.ProfileExpressionMetadata): integrityService.vim.ProfileExpressionMetadata;
         };
         ArrayOfProfileExpressionMetadata: {
            (options?: integrityService.vim.ArrayOfProfileExpressionMetadata): integrityService.vim.ArrayOfProfileExpressionMetadata;
         };
         ProfileNumericComparator: {
            "lessThan": string;
            "lessThanEqual": string;
            "equal": string;
            "notEqual": string;
            "greaterThanEqual": string;
            "greaterThan": string;
         };
         ProfileParameterMetadata: {
            (options?: integrityService.vim.ProfileParameterMetadata): integrityService.vim.ProfileParameterMetadata;
         };
         ArrayOfProfileParameterMetadata: {
            (options?: integrityService.vim.ArrayOfProfileParameterMetadata): integrityService.vim.ArrayOfProfileParameterMetadata;
         };
         ProfilePolicy: {
            (options?: integrityService.vim.ProfilePolicy): integrityService.vim.ProfilePolicy;
         };
         ArrayOfProfilePolicy: {
            (options?: integrityService.vim.ArrayOfProfilePolicy): integrityService.vim.ArrayOfProfilePolicy;
         };
         ProfilePolicyOptionMetadata: {
            (options?: integrityService.vim.ProfilePolicyOptionMetadata): integrityService.vim.ProfilePolicyOptionMetadata;
         };
         ArrayOfProfilePolicyOptionMetadata: {
            (options?: integrityService.vim.ArrayOfProfilePolicyOptionMetadata): integrityService.vim.ArrayOfProfilePolicyOptionMetadata;
         };
         ProfileCompositePolicyOptionMetadata: {
            (options?: integrityService.vim.ProfileCompositePolicyOptionMetadata): integrityService.vim.ProfileCompositePolicyOptionMetadata;
         };
         UserInputRequiredParameterMetadata: {
            (options?: integrityService.vim.UserInputRequiredParameterMetadata): integrityService.vim.UserInputRequiredParameterMetadata;
         };
         ProfilePolicyMetadata: {
            (options?: integrityService.vim.ProfilePolicyMetadata): integrityService.vim.ProfilePolicyMetadata;
         };
         ArrayOfProfilePolicyMetadata: {
            (options?: integrityService.vim.ArrayOfProfilePolicyMetadata): integrityService.vim.ArrayOfProfilePolicyMetadata;
         };
         PolicyOption: {
            (options?: integrityService.vim.PolicyOption): integrityService.vim.PolicyOption;
         };
         ArrayOfPolicyOption: {
            (options?: integrityService.vim.ArrayOfPolicyOption): integrityService.vim.ArrayOfPolicyOption;
         };
         CompositePolicyOption: {
            (options?: integrityService.vim.CompositePolicyOption): integrityService.vim.CompositePolicyOption;
         };
         ProfileCreateSpec: {
            (options?: integrityService.vim.ProfileCreateSpec): integrityService.vim.ProfileCreateSpec;
         };
         ProfileSerializedCreateSpec: {
            (options?: integrityService.vim.ProfileSerializedCreateSpec): integrityService.vim.ProfileSerializedCreateSpec;
         };
         ProfileConfigInfo: {
            (options?: integrityService.vim.ProfileConfigInfo): integrityService.vim.ProfileConfigInfo;
         };
         ProfileDescriptionSection: {
            (options?: integrityService.vim.ProfileDescriptionSection): integrityService.vim.ProfileDescriptionSection;
         };
         ArrayOfProfileDescriptionSection: {
            (options?: integrityService.vim.ArrayOfProfileDescriptionSection): integrityService.vim.ArrayOfProfileDescriptionSection;
         };
         ProfileDescription: {
            (options?: integrityService.vim.ProfileDescription): integrityService.vim.ProfileDescription;
         };
         ProfileMetadataProfileSortSpec: {
            (options?: integrityService.vim.ProfileMetadataProfileSortSpec): integrityService.vim.ProfileMetadataProfileSortSpec;
         };
         ArrayOfProfileMetadataProfileSortSpec: {
            (options?: integrityService.vim.ArrayOfProfileMetadataProfileSortSpec): integrityService.vim.ArrayOfProfileMetadataProfileSortSpec;
         };
         ProfileMetadata: {
            (options?: integrityService.vim.ProfileMetadata): integrityService.vim.ProfileMetadata;
         };
         ArrayOfProfileMetadata: {
            (options?: integrityService.vim.ArrayOfProfileMetadata): integrityService.vim.ArrayOfProfileMetadata;
         };
         ProfilePropertyPath: {
            (options?: integrityService.vim.ProfilePropertyPath): integrityService.vim.ProfilePropertyPath;
         };
         ArrayOfProfilePropertyPath: {
            (options?: integrityService.vim.ArrayOfProfilePropertyPath): integrityService.vim.ArrayOfProfilePropertyPath;
         };
         ProfileProfileStructure: {
            (options?: integrityService.vim.ProfileProfileStructure): integrityService.vim.ProfileProfileStructure;
         };
         ProfileProfileStructureProperty: {
            (options?: integrityService.vim.ProfileProfileStructureProperty): integrityService.vim.ProfileProfileStructureProperty;
         };
         ArrayOfProfileProfileStructureProperty: {
            (options?: integrityService.vim.ArrayOfProfileProfileStructureProperty): integrityService.vim.ArrayOfProfileProfileStructureProperty;
         };
         ClusterProfileConfigInfo: {
            (options?: integrityService.vim.ClusterProfileConfigInfo): integrityService.vim.ClusterProfileConfigInfo;
         };
         ClusterProfileCreateSpec: {
            (options?: integrityService.vim.ClusterProfileCreateSpec): integrityService.vim.ClusterProfileCreateSpec;
         };
         ClusterProfileConfigSpec: {
            (options?: integrityService.vim.ClusterProfileConfigSpec): integrityService.vim.ClusterProfileConfigSpec;
         };
         ClusterProfileCompleteConfigSpec: {
            (options?: integrityService.vim.ClusterProfileCompleteConfigSpec): integrityService.vim.ClusterProfileCompleteConfigSpec;
         };
         ClusterProfileServiceType: {
            "DRS": string;
            "HA": string;
            "DPM": string;
            "FT": string;
         };
         ClusterProfileConfigServiceCreateSpec: {
            (options?: integrityService.vim.ClusterProfileConfigServiceCreateSpec): integrityService.vim.ClusterProfileConfigServiceCreateSpec;
         };
         AnswerFile: {
            (options?: integrityService.vim.AnswerFile): integrityService.vim.AnswerFile;
         };
         AnswerFileStatusError: {
            (options?: integrityService.vim.AnswerFileStatusError): integrityService.vim.AnswerFileStatusError;
         };
         ArrayOfAnswerFileStatusError: {
            (options?: integrityService.vim.ArrayOfAnswerFileStatusError): integrityService.vim.ArrayOfAnswerFileStatusError;
         };
         AnswerFileStatusResult: {
            (options?: integrityService.vim.AnswerFileStatusResult): integrityService.vim.AnswerFileStatusResult;
         };
         ArrayOfAnswerFileStatusResult: {
            (options?: integrityService.vim.ArrayOfAnswerFileStatusResult): integrityService.vim.ArrayOfAnswerFileStatusResult;
         };
         ProfileExecuteResultStatus: {
            "success": string;
            "needInput": string;
            "error": string;
         };
         ProfileExecuteError: {
            (options?: integrityService.vim.ProfileExecuteError): integrityService.vim.ProfileExecuteError;
         };
         ArrayOfProfileExecuteError: {
            (options?: integrityService.vim.ArrayOfProfileExecuteError): integrityService.vim.ArrayOfProfileExecuteError;
         };
         ProfileExecuteResult: {
            (options?: integrityService.vim.ProfileExecuteResult): integrityService.vim.ProfileExecuteResult;
         };
         HostApplyProfile: {
            (options?: integrityService.vim.HostApplyProfile): integrityService.vim.HostApplyProfile;
         };
         PhysicalNicProfile: {
            (options?: integrityService.vim.PhysicalNicProfile): integrityService.vim.PhysicalNicProfile;
         };
         ArrayOfPhysicalNicProfile: {
            (options?: integrityService.vim.ArrayOfPhysicalNicProfile): integrityService.vim.ArrayOfPhysicalNicProfile;
         };
         HostMemoryProfile: {
            (options?: integrityService.vim.HostMemoryProfile): integrityService.vim.HostMemoryProfile;
         };
         UserProfile: {
            (options?: integrityService.vim.UserProfile): integrityService.vim.UserProfile;
         };
         ArrayOfUserProfile: {
            (options?: integrityService.vim.ArrayOfUserProfile): integrityService.vim.ArrayOfUserProfile;
         };
         UserGroupProfile: {
            (options?: integrityService.vim.UserGroupProfile): integrityService.vim.UserGroupProfile;
         };
         ArrayOfUserGroupProfile: {
            (options?: integrityService.vim.ArrayOfUserGroupProfile): integrityService.vim.ArrayOfUserGroupProfile;
         };
         SecurityProfile: {
            (options?: integrityService.vim.SecurityProfile): integrityService.vim.SecurityProfile;
         };
         OptionProfile: {
            (options?: integrityService.vim.OptionProfile): integrityService.vim.OptionProfile;
         };
         ArrayOfOptionProfile: {
            (options?: integrityService.vim.ArrayOfOptionProfile): integrityService.vim.ArrayOfOptionProfile;
         };
         DateTimeProfile: {
            (options?: integrityService.vim.DateTimeProfile): integrityService.vim.DateTimeProfile;
         };
         ServiceProfile: {
            (options?: integrityService.vim.ServiceProfile): integrityService.vim.ServiceProfile;
         };
         ArrayOfServiceProfile: {
            (options?: integrityService.vim.ArrayOfServiceProfile): integrityService.vim.ArrayOfServiceProfile;
         };
         FirewallProfileRulesetProfile: {
            (options?: integrityService.vim.FirewallProfileRulesetProfile): integrityService.vim.FirewallProfileRulesetProfile;
         };
         ArrayOfFirewallProfileRulesetProfile: {
            (options?: integrityService.vim.ArrayOfFirewallProfileRulesetProfile): integrityService.vim.ArrayOfFirewallProfileRulesetProfile;
         };
         FirewallProfile: {
            (options?: integrityService.vim.FirewallProfile): integrityService.vim.FirewallProfile;
         };
         NasStorageProfile: {
            (options?: integrityService.vim.NasStorageProfile): integrityService.vim.NasStorageProfile;
         };
         ArrayOfNasStorageProfile: {
            (options?: integrityService.vim.ArrayOfNasStorageProfile): integrityService.vim.ArrayOfNasStorageProfile;
         };
         StorageProfile: {
            (options?: integrityService.vim.StorageProfile): integrityService.vim.StorageProfile;
         };
         NetworkProfileDnsConfigProfile: {
            (options?: integrityService.vim.NetworkProfileDnsConfigProfile): integrityService.vim.NetworkProfileDnsConfigProfile;
         };
         NetworkProfile: {
            (options?: integrityService.vim.NetworkProfile): integrityService.vim.NetworkProfile;
         };
         DvsVNicProfile: {
            (options?: integrityService.vim.DvsVNicProfile): integrityService.vim.DvsVNicProfile;
         };
         DvsServiceConsoleVNicProfile: {
            (options?: integrityService.vim.DvsServiceConsoleVNicProfile): integrityService.vim.DvsServiceConsoleVNicProfile;
         };
         ArrayOfDvsServiceConsoleVNicProfile: {
            (options?: integrityService.vim.ArrayOfDvsServiceConsoleVNicProfile): integrityService.vim.ArrayOfDvsServiceConsoleVNicProfile;
         };
         DvsHostVNicProfile: {
            (options?: integrityService.vim.DvsHostVNicProfile): integrityService.vim.DvsHostVNicProfile;
         };
         ArrayOfDvsHostVNicProfile: {
            (options?: integrityService.vim.ArrayOfDvsHostVNicProfile): integrityService.vim.ArrayOfDvsHostVNicProfile;
         };
         DvsProfile: {
            (options?: integrityService.vim.DvsProfile): integrityService.vim.DvsProfile;
         };
         ArrayOfDvsProfile: {
            (options?: integrityService.vim.ArrayOfDvsProfile): integrityService.vim.ArrayOfDvsProfile;
         };
         PnicUplinkProfile: {
            (options?: integrityService.vim.PnicUplinkProfile): integrityService.vim.PnicUplinkProfile;
         };
         ArrayOfPnicUplinkProfile: {
            (options?: integrityService.vim.ArrayOfPnicUplinkProfile): integrityService.vim.ArrayOfPnicUplinkProfile;
         };
         IpRouteProfile: {
            (options?: integrityService.vim.IpRouteProfile): integrityService.vim.IpRouteProfile;
         };
         StaticRouteProfile: {
            (options?: integrityService.vim.StaticRouteProfile): integrityService.vim.StaticRouteProfile;
         };
         ArrayOfStaticRouteProfile: {
            (options?: integrityService.vim.ArrayOfStaticRouteProfile): integrityService.vim.ArrayOfStaticRouteProfile;
         };
         LinkProfile: {
            (options?: integrityService.vim.LinkProfile): integrityService.vim.LinkProfile;
         };
         NumPortsProfile: {
            (options?: integrityService.vim.NumPortsProfile): integrityService.vim.NumPortsProfile;
         };
         VirtualSwitchProfile: {
            (options?: integrityService.vim.VirtualSwitchProfile): integrityService.vim.VirtualSwitchProfile;
         };
         ArrayOfVirtualSwitchProfile: {
            (options?: integrityService.vim.ArrayOfVirtualSwitchProfile): integrityService.vim.ArrayOfVirtualSwitchProfile;
         };
         NetStackInstanceProfile: {
            (options?: integrityService.vim.NetStackInstanceProfile): integrityService.vim.NetStackInstanceProfile;
         };
         ArrayOfNetStackInstanceProfile: {
            (options?: integrityService.vim.ArrayOfNetStackInstanceProfile): integrityService.vim.ArrayOfNetStackInstanceProfile;
         };
         VlanProfile: {
            (options?: integrityService.vim.VlanProfile): integrityService.vim.VlanProfile;
         };
         VirtualSwitchSelectionProfile: {
            (options?: integrityService.vim.VirtualSwitchSelectionProfile): integrityService.vim.VirtualSwitchSelectionProfile;
         };
         PortGroupProfile: {
            (options?: integrityService.vim.PortGroupProfile): integrityService.vim.PortGroupProfile;
         };
         VmPortGroupProfile: {
            (options?: integrityService.vim.VmPortGroupProfile): integrityService.vim.VmPortGroupProfile;
         };
         ArrayOfVmPortGroupProfile: {
            (options?: integrityService.vim.ArrayOfVmPortGroupProfile): integrityService.vim.ArrayOfVmPortGroupProfile;
         };
         HostPortGroupProfile: {
            (options?: integrityService.vim.HostPortGroupProfile): integrityService.vim.HostPortGroupProfile;
         };
         ArrayOfHostPortGroupProfile: {
            (options?: integrityService.vim.ArrayOfHostPortGroupProfile): integrityService.vim.ArrayOfHostPortGroupProfile;
         };
         ServiceConsolePortGroupProfile: {
            (options?: integrityService.vim.ServiceConsolePortGroupProfile): integrityService.vim.ServiceConsolePortGroupProfile;
         };
         ArrayOfServiceConsolePortGroupProfile: {
            (options?: integrityService.vim.ArrayOfServiceConsolePortGroupProfile): integrityService.vim.ArrayOfServiceConsolePortGroupProfile;
         };
         NetworkPolicyProfile: {
            (options?: integrityService.vim.NetworkPolicyProfile): integrityService.vim.NetworkPolicyProfile;
         };
         IpAddressProfile: {
            (options?: integrityService.vim.IpAddressProfile): integrityService.vim.IpAddressProfile;
         };
         AuthenticationProfile: {
            (options?: integrityService.vim.AuthenticationProfile): integrityService.vim.AuthenticationProfile;
         };
         ActiveDirectoryProfile: {
            (options?: integrityService.vim.ActiveDirectoryProfile): integrityService.vim.ActiveDirectoryProfile;
         };
         PermissionProfile: {
            (options?: integrityService.vim.PermissionProfile): integrityService.vim.PermissionProfile;
         };
         ArrayOfPermissionProfile: {
            (options?: integrityService.vim.ArrayOfPermissionProfile): integrityService.vim.ArrayOfPermissionProfile;
         };
         HostProfileConfigInfo: {
            (options?: integrityService.vim.HostProfileConfigInfo): integrityService.vim.HostProfileConfigInfo;
         };
         HostProfileConfigSpec: {
            (options?: integrityService.vim.HostProfileConfigSpec): integrityService.vim.HostProfileConfigSpec;
         };
         HostProfileSerializedHostProfileSpec: {
            (options?: integrityService.vim.HostProfileSerializedHostProfileSpec): integrityService.vim.HostProfileSerializedHostProfileSpec;
         };
         HostProfileCompleteConfigSpec: {
            (options?: integrityService.vim.HostProfileCompleteConfigSpec): integrityService.vim.HostProfileCompleteConfigSpec;
         };
         HostProfileHostBasedConfigSpec: {
            (options?: integrityService.vim.HostProfileHostBasedConfigSpec): integrityService.vim.HostProfileHostBasedConfigSpec;
         };
         HostProfileManagerConfigTaskList: {
            (options?: integrityService.vim.HostProfileManagerConfigTaskList): integrityService.vim.HostProfileManagerConfigTaskList;
         };
         AnswerFileCreateSpec: {
            (options?: integrityService.vim.AnswerFileCreateSpec): integrityService.vim.AnswerFileCreateSpec;
         };
         AnswerFileOptionsCreateSpec: {
            (options?: integrityService.vim.AnswerFileOptionsCreateSpec): integrityService.vim.AnswerFileOptionsCreateSpec;
         };
         AnswerFileSerializedCreateSpec: {
            (options?: integrityService.vim.AnswerFileSerializedCreateSpec): integrityService.vim.AnswerFileSerializedCreateSpec;
         };
         HostProfileManagerAnswerFileStatus: {
            "valid": string;
            "invalid": string;
            "unknown": string;
         };
         ScheduledTaskDetail: {
            (options?: integrityService.vim.ScheduledTaskDetail): integrityService.vim.ScheduledTaskDetail;
         };
         ArrayOfScheduledTaskDetail: {
            (options?: integrityService.vim.ArrayOfScheduledTaskDetail): integrityService.vim.ArrayOfScheduledTaskDetail;
         };
         ScheduledTaskDescription: {
            (options?: integrityService.vim.ScheduledTaskDescription): integrityService.vim.ScheduledTaskDescription;
         };
         ScheduledTaskInfo: {
            (options?: integrityService.vim.ScheduledTaskInfo): integrityService.vim.ScheduledTaskInfo;
         };
         TaskScheduler: {
            (options?: integrityService.vim.TaskScheduler): integrityService.vim.TaskScheduler;
         };
         AfterStartupTaskScheduler: {
            (options?: integrityService.vim.AfterStartupTaskScheduler): integrityService.vim.AfterStartupTaskScheduler;
         };
         OnceTaskScheduler: {
            (options?: integrityService.vim.OnceTaskScheduler): integrityService.vim.OnceTaskScheduler;
         };
         RecurrentTaskScheduler: {
            (options?: integrityService.vim.RecurrentTaskScheduler): integrityService.vim.RecurrentTaskScheduler;
         };
         HourlyTaskScheduler: {
            (options?: integrityService.vim.HourlyTaskScheduler): integrityService.vim.HourlyTaskScheduler;
         };
         DailyTaskScheduler: {
            (options?: integrityService.vim.DailyTaskScheduler): integrityService.vim.DailyTaskScheduler;
         };
         WeeklyTaskScheduler: {
            (options?: integrityService.vim.WeeklyTaskScheduler): integrityService.vim.WeeklyTaskScheduler;
         };
         MonthlyTaskScheduler: {
            (options?: integrityService.vim.MonthlyTaskScheduler): integrityService.vim.MonthlyTaskScheduler;
         };
         MonthlyByDayTaskScheduler: {
            (options?: integrityService.vim.MonthlyByDayTaskScheduler): integrityService.vim.MonthlyByDayTaskScheduler;
         };
         DayOfWeek: {
            "sunday": string;
            "monday": string;
            "tuesday": string;
            "wednesday": string;
            "thursday": string;
            "friday": string;
            "saturday": string;
         };
         WeekOfMonth: {
            "first": string;
            "second": string;
            "third": string;
            "fourth": string;
            "last": string;
         };
         MonthlyByWeekdayTaskScheduler: {
            (options?: integrityService.vim.MonthlyByWeekdayTaskScheduler): integrityService.vim.MonthlyByWeekdayTaskScheduler;
         };
         ScheduledTaskSpec: {
            (options?: integrityService.vim.ScheduledTaskSpec): integrityService.vim.ScheduledTaskSpec;
         };
         ApplyStorageRecommendationResult: {
            (options?: integrityService.vim.ApplyStorageRecommendationResult): integrityService.vim.ApplyStorageRecommendationResult;
         };
         StorageDrsConfigInfo: {
            (options?: integrityService.vim.StorageDrsConfigInfo): integrityService.vim.StorageDrsConfigInfo;
         };
         StorageDrsConfigSpec: {
            (options?: integrityService.vim.StorageDrsConfigSpec): integrityService.vim.StorageDrsConfigSpec;
         };
         StorageDrsVmConfigSpec: {
            (options?: integrityService.vim.StorageDrsVmConfigSpec): integrityService.vim.StorageDrsVmConfigSpec;
         };
         ArrayOfStorageDrsVmConfigSpec: {
            (options?: integrityService.vim.ArrayOfStorageDrsVmConfigSpec): integrityService.vim.ArrayOfStorageDrsVmConfigSpec;
         };
         StorageDrsPodConfigInfoBehavior: {
            "manual": string;
            "automated": string;
         };
         StorageDrsPodConfigInfo: {
            (options?: integrityService.vim.StorageDrsPodConfigInfo): integrityService.vim.StorageDrsPodConfigInfo;
         };
         StorageDrsSpaceLoadBalanceConfig: {
            (options?: integrityService.vim.StorageDrsSpaceLoadBalanceConfig): integrityService.vim.StorageDrsSpaceLoadBalanceConfig;
         };
         StorageDrsIoLoadBalanceConfig: {
            (options?: integrityService.vim.StorageDrsIoLoadBalanceConfig): integrityService.vim.StorageDrsIoLoadBalanceConfig;
         };
         StorageDrsPodConfigSpec: {
            (options?: integrityService.vim.StorageDrsPodConfigSpec): integrityService.vim.StorageDrsPodConfigSpec;
         };
         StorageDrsOptionSpec: {
            (options?: integrityService.vim.StorageDrsOptionSpec): integrityService.vim.StorageDrsOptionSpec;
         };
         ArrayOfStorageDrsOptionSpec: {
            (options?: integrityService.vim.ArrayOfStorageDrsOptionSpec): integrityService.vim.ArrayOfStorageDrsOptionSpec;
         };
         VmPodConfigForPlacement: {
            (options?: integrityService.vim.VmPodConfigForPlacement): integrityService.vim.VmPodConfigForPlacement;
         };
         ArrayOfVmPodConfigForPlacement: {
            (options?: integrityService.vim.ArrayOfVmPodConfigForPlacement): integrityService.vim.ArrayOfVmPodConfigForPlacement;
         };
         PodDiskLocator: {
            (options?: integrityService.vim.PodDiskLocator): integrityService.vim.PodDiskLocator;
         };
         ArrayOfPodDiskLocator: {
            (options?: integrityService.vim.ArrayOfPodDiskLocator): integrityService.vim.ArrayOfPodDiskLocator;
         };
         StorageDrsPodSelectionSpec: {
            (options?: integrityService.vim.StorageDrsPodSelectionSpec): integrityService.vim.StorageDrsPodSelectionSpec;
         };
         StorageMigrationAction: {
            (options?: integrityService.vim.StorageMigrationAction): integrityService.vim.StorageMigrationAction;
         };
         StoragePlacementAction: {
            (options?: integrityService.vim.StoragePlacementAction): integrityService.vim.StoragePlacementAction;
         };
         StoragePlacementResult: {
            (options?: integrityService.vim.StoragePlacementResult): integrityService.vim.StoragePlacementResult;
         };
         StoragePlacementSpecPlacementType: {
            "create": string;
            "reconfigure": string;
            "relocate": string;
            "clone": string;
         };
         StoragePlacementSpec: {
            (options?: integrityService.vim.StoragePlacementSpec): integrityService.vim.StoragePlacementSpec;
         };
         VirtualDiskAntiAffinityRuleSpec: {
            (options?: integrityService.vim.VirtualDiskAntiAffinityRuleSpec): integrityService.vim.VirtualDiskAntiAffinityRuleSpec;
         };
         StorageDrsVmConfigInfo: {
            (options?: integrityService.vim.StorageDrsVmConfigInfo): integrityService.vim.StorageDrsVmConfigInfo;
         };
         ArrayOfStorageDrsVmConfigInfo: {
            (options?: integrityService.vim.ArrayOfStorageDrsVmConfigInfo): integrityService.vim.ArrayOfStorageDrsVmConfigInfo;
         };
         VAppCloneSpecNetworkMappingPair: {
            (options?: integrityService.vim.VAppCloneSpecNetworkMappingPair): integrityService.vim.VAppCloneSpecNetworkMappingPair;
         };
         ArrayOfVAppCloneSpecNetworkMappingPair: {
            (options?: integrityService.vim.ArrayOfVAppCloneSpecNetworkMappingPair): integrityService.vim.ArrayOfVAppCloneSpecNetworkMappingPair;
         };
         VAppCloneSpecResourceMap: {
            (options?: integrityService.vim.VAppCloneSpecResourceMap): integrityService.vim.VAppCloneSpecResourceMap;
         };
         ArrayOfVAppCloneSpecResourceMap: {
            (options?: integrityService.vim.ArrayOfVAppCloneSpecResourceMap): integrityService.vim.ArrayOfVAppCloneSpecResourceMap;
         };
         VAppCloneSpecProvisioningType: {
            "sameAsSource": string;
            "thin": string;
            "thick": string;
         };
         VAppCloneSpec: {
            (options?: integrityService.vim.VAppCloneSpec): integrityService.vim.VAppCloneSpec;
         };
         VAppAutoStartAction: {
            "none": string;
            "powerOn": string;
            "powerOff": string;
            "guestShutdown": string;
            "suspend": string;
         };
         VAppEntityConfigInfo: {
            (options?: integrityService.vim.VAppEntityConfigInfo): integrityService.vim.VAppEntityConfigInfo;
         };
         ArrayOfVAppEntityConfigInfo: {
            (options?: integrityService.vim.ArrayOfVAppEntityConfigInfo): integrityService.vim.ArrayOfVAppEntityConfigInfo;
         };
         VAppIPAssignmentInfoIpAllocationPolicy: {
            "dhcpPolicy": string;
            "transientPolicy": string;
            "fixedPolicy": string;
            "fixedAllocatedPolicy": string;
         };
         VAppIPAssignmentInfoAllocationSchemes: {
            "dhcp": string;
            "ovfenv": string;
         };
         VAppIPAssignmentInfoProtocols: {
            "IPv4": string;
            "IPv6": string;
         };
         VAppIPAssignmentInfo: {
            (options?: integrityService.vim.VAppIPAssignmentInfo): integrityService.vim.VAppIPAssignmentInfo;
         };
         IpPoolIpPoolConfigInfo: {
            (options?: integrityService.vim.IpPoolIpPoolConfigInfo): integrityService.vim.IpPoolIpPoolConfigInfo;
         };
         IpPoolAssociation: {
            (options?: integrityService.vim.IpPoolAssociation): integrityService.vim.IpPoolAssociation;
         };
         ArrayOfIpPoolAssociation: {
            (options?: integrityService.vim.ArrayOfIpPoolAssociation): integrityService.vim.ArrayOfIpPoolAssociation;
         };
         IpPool: {
            (options?: integrityService.vim.IpPool): integrityService.vim.IpPool;
         };
         ArrayOfIpPool: {
            (options?: integrityService.vim.ArrayOfIpPool): integrityService.vim.ArrayOfIpPool;
         };
         VAppOvfSectionInfo: {
            (options?: integrityService.vim.VAppOvfSectionInfo): integrityService.vim.VAppOvfSectionInfo;
         };
         ArrayOfVAppOvfSectionInfo: {
            (options?: integrityService.vim.ArrayOfVAppOvfSectionInfo): integrityService.vim.ArrayOfVAppOvfSectionInfo;
         };
         VAppProductInfo: {
            (options?: integrityService.vim.VAppProductInfo): integrityService.vim.VAppProductInfo;
         };
         ArrayOfVAppProductInfo: {
            (options?: integrityService.vim.ArrayOfVAppProductInfo): integrityService.vim.ArrayOfVAppProductInfo;
         };
         VAppPropertyInfo: {
            (options?: integrityService.vim.VAppPropertyInfo): integrityService.vim.VAppPropertyInfo;
         };
         ArrayOfVAppPropertyInfo: {
            (options?: integrityService.vim.ArrayOfVAppPropertyInfo): integrityService.vim.ArrayOfVAppPropertyInfo;
         };
         VAppConfigInfo: {
            (options?: integrityService.vim.VAppConfigInfo): integrityService.vim.VAppConfigInfo;
         };
         VAppConfigSpec: {
            (options?: integrityService.vim.VAppConfigSpec): integrityService.vim.VAppConfigSpec;
         };
         VirtualAppImportSpec: {
            (options?: integrityService.vim.VirtualAppImportSpec): integrityService.vim.VirtualAppImportSpec;
         };
         VmConfigInfo: {
            (options?: integrityService.vim.VmConfigInfo): integrityService.vim.VmConfigInfo;
         };
         VmConfigSpec: {
            (options?: integrityService.vim.VmConfigSpec): integrityService.vim.VmConfigSpec;
         };
         VAppProductSpec: {
            (options?: integrityService.vim.VAppProductSpec): integrityService.vim.VAppProductSpec;
         };
         ArrayOfVAppProductSpec: {
            (options?: integrityService.vim.ArrayOfVAppProductSpec): integrityService.vim.ArrayOfVAppProductSpec;
         };
         VAppPropertySpec: {
            (options?: integrityService.vim.VAppPropertySpec): integrityService.vim.VAppPropertySpec;
         };
         ArrayOfVAppPropertySpec: {
            (options?: integrityService.vim.ArrayOfVAppPropertySpec): integrityService.vim.ArrayOfVAppPropertySpec;
         };
         VAppOvfSectionSpec: {
            (options?: integrityService.vim.VAppOvfSectionSpec): integrityService.vim.VAppOvfSectionSpec;
         };
         ArrayOfVAppOvfSectionSpec: {
            (options?: integrityService.vim.ArrayOfVAppOvfSectionSpec): integrityService.vim.ArrayOfVAppOvfSectionSpec;
         };
         VirtualMachineAffinityInfo: {
            (options?: integrityService.vim.VirtualMachineAffinityInfo): integrityService.vim.VirtualMachineAffinityInfo;
         };
         VirtualMachineBootOptionsBootableDevice: {
            (options?: integrityService.vim.VirtualMachineBootOptionsBootableDevice): integrityService.vim.VirtualMachineBootOptionsBootableDevice;
         };
         ArrayOfVirtualMachineBootOptionsBootableDevice: {
            (options?: integrityService.vim.ArrayOfVirtualMachineBootOptionsBootableDevice): integrityService.vim.ArrayOfVirtualMachineBootOptionsBootableDevice;
         };
         VirtualMachineBootOptionsBootableDiskDevice: {
            (options?: integrityService.vim.VirtualMachineBootOptionsBootableDiskDevice): integrityService.vim.VirtualMachineBootOptionsBootableDiskDevice;
         };
         VirtualMachineBootOptionsBootableEthernetDevice: {
            (options?: integrityService.vim.VirtualMachineBootOptionsBootableEthernetDevice): integrityService.vim.VirtualMachineBootOptionsBootableEthernetDevice;
         };
         VirtualMachineBootOptionsBootableFloppyDevice: {
            (options?: integrityService.vim.VirtualMachineBootOptionsBootableFloppyDevice): integrityService.vim.VirtualMachineBootOptionsBootableFloppyDevice;
         };
         VirtualMachineBootOptionsBootableCdromDevice: {
            (options?: integrityService.vim.VirtualMachineBootOptionsBootableCdromDevice): integrityService.vim.VirtualMachineBootOptionsBootableCdromDevice;
         };
         VirtualMachineBootOptions: {
            (options?: integrityService.vim.VirtualMachineBootOptions): integrityService.vim.VirtualMachineBootOptions;
         };
         VirtualMachineCapability: {
            (options?: integrityService.vim.VirtualMachineCapability): integrityService.vim.VirtualMachineCapability;
         };
         VirtualMachineCdromInfo: {
            (options?: integrityService.vim.VirtualMachineCdromInfo): integrityService.vim.VirtualMachineCdromInfo;
         };
         ArrayOfVirtualMachineCdromInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineCdromInfo): integrityService.vim.ArrayOfVirtualMachineCdromInfo;
         };
         VirtualMachineCloneSpec: {
            (options?: integrityService.vim.VirtualMachineCloneSpec): integrityService.vim.VirtualMachineCloneSpec;
         };
         VirtualMachineConfigInfoNpivWwnType: {
            "vc": string;
            "host": string;
            "external": string;
         };
         VirtualMachineConfigInfoSwapPlacementType: {
            "inherit": string;
            "vmDirectory": string;
            "hostLocal": string;
         };
         VirtualMachineConfigInfoDatastoreUrlPair: {
            (options?: integrityService.vim.VirtualMachineConfigInfoDatastoreUrlPair): integrityService.vim.VirtualMachineConfigInfoDatastoreUrlPair;
         };
         ArrayOfVirtualMachineConfigInfoDatastoreUrlPair: {
            (options?: integrityService.vim.ArrayOfVirtualMachineConfigInfoDatastoreUrlPair): integrityService.vim.ArrayOfVirtualMachineConfigInfoDatastoreUrlPair;
         };
         VirtualMachineConfigInfoOverheadInfo: {
            (options?: integrityService.vim.VirtualMachineConfigInfoOverheadInfo): integrityService.vim.VirtualMachineConfigInfoOverheadInfo;
         };
         VirtualMachineConfigInfo: {
            (options?: integrityService.vim.VirtualMachineConfigInfo): integrityService.vim.VirtualMachineConfigInfo;
         };
         VirtualMachineConfigOption: {
            (options?: integrityService.vim.VirtualMachineConfigOption): integrityService.vim.VirtualMachineConfigOption;
         };
         VirtualMachineConfigOptionDescriptor: {
            (options?: integrityService.vim.VirtualMachineConfigOptionDescriptor): integrityService.vim.VirtualMachineConfigOptionDescriptor;
         };
         ArrayOfVirtualMachineConfigOptionDescriptor: {
            (options?: integrityService.vim.ArrayOfVirtualMachineConfigOptionDescriptor): integrityService.vim.ArrayOfVirtualMachineConfigOptionDescriptor;
         };
         VirtualMachineConfigSpecNpivWwnOp: {
            "generate": string;
            "set": string;
            "remove": string;
            "extend": string;
         };
         VirtualMachineCpuIdInfoSpec: {
            (options?: integrityService.vim.VirtualMachineCpuIdInfoSpec): integrityService.vim.VirtualMachineCpuIdInfoSpec;
         };
         ArrayOfVirtualMachineCpuIdInfoSpec: {
            (options?: integrityService.vim.ArrayOfVirtualMachineCpuIdInfoSpec): integrityService.vim.ArrayOfVirtualMachineCpuIdInfoSpec;
         };
         VirtualMachineConfigSpec: {
            (options?: integrityService.vim.VirtualMachineConfigSpec): integrityService.vim.VirtualMachineConfigSpec;
         };
         ConfigTarget: {
            (options?: integrityService.vim.ConfigTarget): integrityService.vim.ConfigTarget;
         };
         VirtualMachineConsolePreferences: {
            (options?: integrityService.vim.VirtualMachineConsolePreferences): integrityService.vim.VirtualMachineConsolePreferences;
         };
         VirtualMachineDatastoreInfo: {
            (options?: integrityService.vim.VirtualMachineDatastoreInfo): integrityService.vim.VirtualMachineDatastoreInfo;
         };
         ArrayOfVirtualMachineDatastoreInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineDatastoreInfo): integrityService.vim.ArrayOfVirtualMachineDatastoreInfo;
         };
         VirtualMachineDatastoreVolumeOption: {
            (options?: integrityService.vim.VirtualMachineDatastoreVolumeOption): integrityService.vim.VirtualMachineDatastoreVolumeOption;
         };
         ArrayOfVirtualMachineDatastoreVolumeOption: {
            (options?: integrityService.vim.ArrayOfVirtualMachineDatastoreVolumeOption): integrityService.vim.ArrayOfVirtualMachineDatastoreVolumeOption;
         };
         DatastoreOption: {
            (options?: integrityService.vim.DatastoreOption): integrityService.vim.DatastoreOption;
         };
         VirtualMachinePowerOpType: {
            "soft": string;
            "hard": string;
            "preset": string;
         };
         VirtualMachineStandbyActionType: {
            "checkpoint": string;
            "powerOnSuspend": string;
         };
         VirtualMachineDefaultPowerOpInfo: {
            (options?: integrityService.vim.VirtualMachineDefaultPowerOpInfo): integrityService.vim.VirtualMachineDefaultPowerOpInfo;
         };
         VirtualMachineDefinedProfileSpec: {
            (options?: integrityService.vim.VirtualMachineDefinedProfileSpec): integrityService.vim.VirtualMachineDefinedProfileSpec;
         };
         VirtualMachineDeviceRuntimeInfoDeviceRuntimeState: {
            (options?: integrityService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState): integrityService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState;
         };
         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm: {
            "vmNptIncompatibleGuest": string;
            "vmNptIncompatibleGuestDriver": string;
            "vmNptIncompatibleAdapterType": string;
            "vmNptDisabledOrDisconnectedAdapter": string;
            "vmNptIncompatibleAdapterFeatures": string;
            "vmNptIncompatibleBackingType": string;
            "vmNptInsufficientMemoryReservation": string;
            "vmNptFaultToleranceOrRecordReplayConfigured": string;
            "vmNptConflictingIOChainConfigured": string;
            "vmNptMonitorBlocks": string;
            "vmNptConflictingOperationInProgress": string;
            "vmNptRuntimeError": string;
            "vmNptOutOfIntrVector": string;
            "vmNptVMCIActive": string;
         };
         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther: {
            "vmNptIncompatibleHost": string;
            "vmNptIncompatibleNetwork": string;
         };
         VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState: {
            (options?: integrityService.vim.VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState): integrityService.vim.VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState;
         };
         VirtualMachineDeviceRuntimeInfo: {
            (options?: integrityService.vim.VirtualMachineDeviceRuntimeInfo): integrityService.vim.VirtualMachineDeviceRuntimeInfo;
         };
         ArrayOfVirtualMachineDeviceRuntimeInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineDeviceRuntimeInfo): integrityService.vim.ArrayOfVirtualMachineDeviceRuntimeInfo;
         };
         VirtualMachineDiskDeviceInfo: {
            (options?: integrityService.vim.VirtualMachineDiskDeviceInfo): integrityService.vim.VirtualMachineDiskDeviceInfo;
         };
         VirtualMachineEmptyProfileSpec: {
            (options?: integrityService.vim.VirtualMachineEmptyProfileSpec): integrityService.vim.VirtualMachineEmptyProfileSpec;
         };
         FaultToleranceConfigInfo: {
            (options?: integrityService.vim.FaultToleranceConfigInfo): integrityService.vim.FaultToleranceConfigInfo;
         };
         FaultTolerancePrimaryConfigInfo: {
            (options?: integrityService.vim.FaultTolerancePrimaryConfigInfo): integrityService.vim.FaultTolerancePrimaryConfigInfo;
         };
         FaultToleranceSecondaryConfigInfo: {
            (options?: integrityService.vim.FaultToleranceSecondaryConfigInfo): integrityService.vim.FaultToleranceSecondaryConfigInfo;
         };
         FaultToleranceSecondaryOpResult: {
            (options?: integrityService.vim.FaultToleranceSecondaryOpResult): integrityService.vim.FaultToleranceSecondaryOpResult;
         };
         VirtualMachineFeatureRequirement: {
            (options?: integrityService.vim.VirtualMachineFeatureRequirement): integrityService.vim.VirtualMachineFeatureRequirement;
         };
         ArrayOfVirtualMachineFeatureRequirement: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFeatureRequirement): integrityService.vim.ArrayOfVirtualMachineFeatureRequirement;
         };
         VirtualMachineFileInfo: {
            (options?: integrityService.vim.VirtualMachineFileInfo): integrityService.vim.VirtualMachineFileInfo;
         };
         VirtualMachineFileLayoutDiskLayout: {
            (options?: integrityService.vim.VirtualMachineFileLayoutDiskLayout): integrityService.vim.VirtualMachineFileLayoutDiskLayout;
         };
         ArrayOfVirtualMachineFileLayoutDiskLayout: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFileLayoutDiskLayout): integrityService.vim.ArrayOfVirtualMachineFileLayoutDiskLayout;
         };
         VirtualMachineFileLayoutSnapshotLayout: {
            (options?: integrityService.vim.VirtualMachineFileLayoutSnapshotLayout): integrityService.vim.VirtualMachineFileLayoutSnapshotLayout;
         };
         ArrayOfVirtualMachineFileLayoutSnapshotLayout: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFileLayoutSnapshotLayout): integrityService.vim.ArrayOfVirtualMachineFileLayoutSnapshotLayout;
         };
         VirtualMachineFileLayout: {
            (options?: integrityService.vim.VirtualMachineFileLayout): integrityService.vim.VirtualMachineFileLayout;
         };
         VirtualMachineFileLayoutExFileType: {
            "config": string;
            "extendedConfig": string;
            "diskDescriptor": string;
            "diskExtent": string;
            "digestDescriptor": string;
            "digestExtent": string;
            "diskReplicationState": string;
            "log": string;
            "stat": string;
            "namespaceData": string;
            "nvram": string;
            "snapshotData": string;
            "snapshotList": string;
            "snapshotManifestList": string;
            "suspend": string;
            "swap": string;
            "uwswap": string;
            "core": string;
            "screenshot": string;
         };
         VirtualMachineFileLayoutExFileInfo: {
            (options?: integrityService.vim.VirtualMachineFileLayoutExFileInfo): integrityService.vim.VirtualMachineFileLayoutExFileInfo;
         };
         ArrayOfVirtualMachineFileLayoutExFileInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFileLayoutExFileInfo): integrityService.vim.ArrayOfVirtualMachineFileLayoutExFileInfo;
         };
         VirtualMachineFileLayoutExDiskUnit: {
            (options?: integrityService.vim.VirtualMachineFileLayoutExDiskUnit): integrityService.vim.VirtualMachineFileLayoutExDiskUnit;
         };
         ArrayOfVirtualMachineFileLayoutExDiskUnit: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFileLayoutExDiskUnit): integrityService.vim.ArrayOfVirtualMachineFileLayoutExDiskUnit;
         };
         VirtualMachineFileLayoutExDiskLayout: {
            (options?: integrityService.vim.VirtualMachineFileLayoutExDiskLayout): integrityService.vim.VirtualMachineFileLayoutExDiskLayout;
         };
         ArrayOfVirtualMachineFileLayoutExDiskLayout: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFileLayoutExDiskLayout): integrityService.vim.ArrayOfVirtualMachineFileLayoutExDiskLayout;
         };
         VirtualMachineFileLayoutExSnapshotLayout: {
            (options?: integrityService.vim.VirtualMachineFileLayoutExSnapshotLayout): integrityService.vim.VirtualMachineFileLayoutExSnapshotLayout;
         };
         ArrayOfVirtualMachineFileLayoutExSnapshotLayout: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFileLayoutExSnapshotLayout): integrityService.vim.ArrayOfVirtualMachineFileLayoutExSnapshotLayout;
         };
         VirtualMachineFileLayoutEx: {
            (options?: integrityService.vim.VirtualMachineFileLayoutEx): integrityService.vim.VirtualMachineFileLayoutEx;
         };
         VirtualMachineHtSharing: {
            "any": string;
            "none": string;
            "internal": string;
         };
         VirtualMachinePowerOffBehavior: {
            "powerOff": string;
            "revert": string;
            "prompt": string;
         };
         VirtualMachineFlagInfoMonitorType: {
            "release": string;
            "debug": string;
            "stats": string;
         };
         VirtualMachineFlagInfoVirtualMmuUsage: {
            "automatic": string;
            "on": string;
            "off": string;
         };
         VirtualMachineFlagInfoVirtualExecUsage: {
            "hvAuto": string;
            "hvOn": string;
            "hvOff": string;
         };
         VirtualMachineFlagInfo: {
            (options?: integrityService.vim.VirtualMachineFlagInfo): integrityService.vim.VirtualMachineFlagInfo;
         };
         VirtualMachineFloppyInfo: {
            (options?: integrityService.vim.VirtualMachineFloppyInfo): integrityService.vim.VirtualMachineFloppyInfo;
         };
         ArrayOfVirtualMachineFloppyInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineFloppyInfo): integrityService.vim.ArrayOfVirtualMachineFloppyInfo;
         };
         VirtualMachineToolsStatus: {
            "toolsNotInstalled": string;
            "toolsNotRunning": string;
            "toolsOld": string;
            "toolsOk": string;
         };
         VirtualMachineToolsVersionStatus: {
            "guestToolsNotInstalled": string;
            "guestToolsNeedUpgrade": string;
            "guestToolsCurrent": string;
            "guestToolsUnmanaged": string;
            "guestToolsTooOld": string;
            "guestToolsSupportedOld": string;
            "guestToolsSupportedNew": string;
            "guestToolsTooNew": string;
            "guestToolsBlacklisted": string;
         };
         VirtualMachineToolsRunningStatus: {
            "guestToolsNotRunning": string;
            "guestToolsRunning": string;
            "guestToolsExecutingScripts": string;
         };
         GuestDiskInfo: {
            (options?: integrityService.vim.GuestDiskInfo): integrityService.vim.GuestDiskInfo;
         };
         ArrayOfGuestDiskInfo: {
            (options?: integrityService.vim.ArrayOfGuestDiskInfo): integrityService.vim.ArrayOfGuestDiskInfo;
         };
         GuestNicInfo: {
            (options?: integrityService.vim.GuestNicInfo): integrityService.vim.GuestNicInfo;
         };
         ArrayOfGuestNicInfo: {
            (options?: integrityService.vim.ArrayOfGuestNicInfo): integrityService.vim.ArrayOfGuestNicInfo;
         };
         GuestStackInfo: {
            (options?: integrityService.vim.GuestStackInfo): integrityService.vim.GuestStackInfo;
         };
         ArrayOfGuestStackInfo: {
            (options?: integrityService.vim.ArrayOfGuestStackInfo): integrityService.vim.ArrayOfGuestStackInfo;
         };
         GuestScreenInfo: {
            (options?: integrityService.vim.GuestScreenInfo): integrityService.vim.GuestScreenInfo;
         };
         VirtualMachineGuestState: {
            "running": string;
            "shuttingDown": string;
            "resetting": string;
            "standby": string;
            "notRunning": string;
            "unknown": string;
         };
         GuestInfoAppStateType: {
            "none": string;
            "appStateOk": string;
            "appStateNeedReset": string;
         };
         GuestInfoNamespaceGenerationInfo: {
            (options?: integrityService.vim.GuestInfoNamespaceGenerationInfo): integrityService.vim.GuestInfoNamespaceGenerationInfo;
         };
         ArrayOfGuestInfoNamespaceGenerationInfo: {
            (options?: integrityService.vim.ArrayOfGuestInfoNamespaceGenerationInfo): integrityService.vim.ArrayOfGuestInfoNamespaceGenerationInfo;
         };
         GuestInfo: {
            (options?: integrityService.vim.GuestInfo): integrityService.vim.GuestInfo;
         };
         VirtualMachineGuestOsFamily: {
            "windowsGuest": string;
            "linuxGuest": string;
            "netwareGuest": string;
            "solarisGuest": string;
            "darwinGuestFamily": string;
            "otherGuestFamily": string;
         };
         VirtualMachineGuestOsIdentifier: {
            "dosGuest": string;
            "win31Guest": string;
            "win95Guest": string;
            "win98Guest": string;
            "winMeGuest": string;
            "winNTGuest": string;
            "win2000ProGuest": string;
            "win2000ServGuest": string;
            "win2000AdvServGuest": string;
            "winXPHomeGuest": string;
            "winXPProGuest": string;
            "winXPPro64Guest": string;
            "winNetWebGuest": string;
            "winNetStandardGuest": string;
            "winNetEnterpriseGuest": string;
            "winNetDatacenterGuest": string;
            "winNetBusinessGuest": string;
            "winNetStandard64Guest": string;
            "winNetEnterprise64Guest": string;
            "winLonghornGuest": string;
            "winLonghorn64Guest": string;
            "winNetDatacenter64Guest": string;
            "winVistaGuest": string;
            "winVista64Guest": string;
            "windows7Guest": string;
            "windows7_64Guest": string;
            "windows7Server64Guest": string;
            "windows8Guest": string;
            "windows8_64Guest": string;
            "windows8Server64Guest": string;
            "windowsHyperVGuest": string;
            "freebsdGuest": string;
            "freebsd64Guest": string;
            "redhatGuest": string;
            "rhel2Guest": string;
            "rhel3Guest": string;
            "rhel3_64Guest": string;
            "rhel4Guest": string;
            "rhel4_64Guest": string;
            "rhel5Guest": string;
            "rhel5_64Guest": string;
            "rhel6Guest": string;
            "rhel6_64Guest": string;
            "rhel7Guest": string;
            "rhel7_64Guest": string;
            "centosGuest": string;
            "centos64Guest": string;
            "oracleLinuxGuest": string;
            "oracleLinux64Guest": string;
            "suseGuest": string;
            "suse64Guest": string;
            "slesGuest": string;
            "sles64Guest": string;
            "sles10Guest": string;
            "sles10_64Guest": string;
            "sles11Guest": string;
            "sles11_64Guest": string;
            "sles12Guest": string;
            "sles12_64Guest": string;
            "nld9Guest": string;
            "oesGuest": string;
            "sjdsGuest": string;
            "mandrakeGuest": string;
            "mandrivaGuest": string;
            "mandriva64Guest": string;
            "turboLinuxGuest": string;
            "turboLinux64Guest": string;
            "ubuntuGuest": string;
            "ubuntu64Guest": string;
            "debian4Guest": string;
            "debian4_64Guest": string;
            "debian5Guest": string;
            "debian5_64Guest": string;
            "debian6Guest": string;
            "debian6_64Guest": string;
            "debian7Guest": string;
            "debian7_64Guest": string;
            "asianux3Guest": string;
            "asianux3_64Guest": string;
            "asianux4Guest": string;
            "asianux4_64Guest": string;
            "opensuseGuest": string;
            "opensuse64Guest": string;
            "fedoraGuest": string;
            "fedora64Guest": string;
            "other24xLinuxGuest": string;
            "other26xLinuxGuest": string;
            "otherLinuxGuest": string;
            "other3xLinuxGuest": string;
            "genericLinuxGuest": string;
            "other24xLinux64Guest": string;
            "other26xLinux64Guest": string;
            "other3xLinux64Guest": string;
            "otherLinux64Guest": string;
            "solaris6Guest": string;
            "solaris7Guest": string;
            "solaris8Guest": string;
            "solaris9Guest": string;
            "solaris10Guest": string;
            "solaris10_64Guest": string;
            "solaris11_64Guest": string;
            "os2Guest": string;
            "eComStationGuest": string;
            "eComStation2Guest": string;
            "netware4Guest": string;
            "netware5Guest": string;
            "netware6Guest": string;
            "openServer5Guest": string;
            "openServer6Guest": string;
            "unixWare7Guest": string;
            "darwinGuest": string;
            "darwin64Guest": string;
            "darwin10Guest": string;
            "darwin10_64Guest": string;
            "darwin11Guest": string;
            "darwin11_64Guest": string;
            "darwin12_64Guest": string;
            "darwin13_64Guest": string;
            "vmkernelGuest": string;
            "vmkernel5Guest": string;
            "otherGuest": string;
            "otherGuest64": string;
         };
         GuestOsDescriptorFirmwareType: {
            "bios": string;
            "efi": string;
         };
         GuestOsDescriptorSupportLevel: {
            "experimental": string;
            "legacy": string;
            "terminated": string;
            "supported": string;
            "unsupported": string;
            "deprecated": string;
            "techPreview": string;
         };
         GuestOsDescriptor: {
            (options?: integrityService.vim.GuestOsDescriptor): integrityService.vim.GuestOsDescriptor;
         };
         ArrayOfGuestOsDescriptor: {
            (options?: integrityService.vim.ArrayOfGuestOsDescriptor): integrityService.vim.ArrayOfGuestOsDescriptor;
         };
         VirtualMachineIdeDiskDevicePartitionInfo: {
            (options?: integrityService.vim.VirtualMachineIdeDiskDevicePartitionInfo): integrityService.vim.VirtualMachineIdeDiskDevicePartitionInfo;
         };
         ArrayOfVirtualMachineIdeDiskDevicePartitionInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineIdeDiskDevicePartitionInfo): integrityService.vim.ArrayOfVirtualMachineIdeDiskDevicePartitionInfo;
         };
         VirtualMachineIdeDiskDeviceInfo: {
            (options?: integrityService.vim.VirtualMachineIdeDiskDeviceInfo): integrityService.vim.VirtualMachineIdeDiskDeviceInfo;
         };
         ArrayOfVirtualMachineIdeDiskDeviceInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineIdeDiskDeviceInfo): integrityService.vim.ArrayOfVirtualMachineIdeDiskDeviceInfo;
         };
         VirtualMachineLegacyNetworkSwitchInfo: {
            (options?: integrityService.vim.VirtualMachineLegacyNetworkSwitchInfo): integrityService.vim.VirtualMachineLegacyNetworkSwitchInfo;
         };
         ArrayOfVirtualMachineLegacyNetworkSwitchInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineLegacyNetworkSwitchInfo): integrityService.vim.ArrayOfVirtualMachineLegacyNetworkSwitchInfo;
         };
         VirtualMachineMessage: {
            (options?: integrityService.vim.VirtualMachineMessage): integrityService.vim.VirtualMachineMessage;
         };
         ArrayOfVirtualMachineMessage: {
            (options?: integrityService.vim.ArrayOfVirtualMachineMessage): integrityService.vim.ArrayOfVirtualMachineMessage;
         };
         VirtualMachineMetadataManagerVmMetadataOwnerOwner: {
            "ComVmwareVsphereHA": string;
         };
         VirtualMachineMetadataManagerVmMetadataOwner: {
            (options?: integrityService.vim.VirtualMachineMetadataManagerVmMetadataOwner): integrityService.vim.VirtualMachineMetadataManagerVmMetadataOwner;
         };
         VirtualMachineMetadataManagerVmMetadataOp: {
            "Update": string;
            "Remove": string;
         };
         VirtualMachineMetadataManagerVmMetadata: {
            (options?: integrityService.vim.VirtualMachineMetadataManagerVmMetadata): integrityService.vim.VirtualMachineMetadataManagerVmMetadata;
         };
         VirtualMachineMetadataManagerVmMetadataInput: {
            (options?: integrityService.vim.VirtualMachineMetadataManagerVmMetadataInput): integrityService.vim.VirtualMachineMetadataManagerVmMetadataInput;
         };
         ArrayOfVirtualMachineMetadataManagerVmMetadataInput: {
            (options?: integrityService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataInput): integrityService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataInput;
         };
         VirtualMachineMetadataManagerVmMetadataResult: {
            (options?: integrityService.vim.VirtualMachineMetadataManagerVmMetadataResult): integrityService.vim.VirtualMachineMetadataManagerVmMetadataResult;
         };
         ArrayOfVirtualMachineMetadataManagerVmMetadataResult: {
            (options?: integrityService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataResult): integrityService.vim.ArrayOfVirtualMachineMetadataManagerVmMetadataResult;
         };
         VirtualMachineNetworkInfo: {
            (options?: integrityService.vim.VirtualMachineNetworkInfo): integrityService.vim.VirtualMachineNetworkInfo;
         };
         ArrayOfVirtualMachineNetworkInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineNetworkInfo): integrityService.vim.ArrayOfVirtualMachineNetworkInfo;
         };
         VirtualMachineNetworkShaperInfo: {
            (options?: integrityService.vim.VirtualMachineNetworkShaperInfo): integrityService.vim.VirtualMachineNetworkShaperInfo;
         };
         OpaqueNetworkTargetInfo: {
            (options?: integrityService.vim.OpaqueNetworkTargetInfo): integrityService.vim.OpaqueNetworkTargetInfo;
         };
         ArrayOfOpaqueNetworkTargetInfo: {
            (options?: integrityService.vim.ArrayOfOpaqueNetworkTargetInfo): integrityService.vim.ArrayOfOpaqueNetworkTargetInfo;
         };
         VirtualMachineParallelInfo: {
            (options?: integrityService.vim.VirtualMachineParallelInfo): integrityService.vim.VirtualMachineParallelInfo;
         };
         ArrayOfVirtualMachineParallelInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineParallelInfo): integrityService.vim.ArrayOfVirtualMachineParallelInfo;
         };
         VirtualMachinePciPassthroughInfo: {
            (options?: integrityService.vim.VirtualMachinePciPassthroughInfo): integrityService.vim.VirtualMachinePciPassthroughInfo;
         };
         ArrayOfVirtualMachinePciPassthroughInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachinePciPassthroughInfo): integrityService.vim.ArrayOfVirtualMachinePciPassthroughInfo;
         };
         VirtualMachineProfileRawData: {
            (options?: integrityService.vim.VirtualMachineProfileRawData): integrityService.vim.VirtualMachineProfileRawData;
         };
         VirtualMachineProfileSpec: {
            (options?: integrityService.vim.VirtualMachineProfileSpec): integrityService.vim.VirtualMachineProfileSpec;
         };
         ArrayOfVirtualMachineProfileSpec: {
            (options?: integrityService.vim.ArrayOfVirtualMachineProfileSpec): integrityService.vim.ArrayOfVirtualMachineProfileSpec;
         };
         VirtualMachineQuestionInfo: {
            (options?: integrityService.vim.VirtualMachineQuestionInfo): integrityService.vim.VirtualMachineQuestionInfo;
         };
         VirtualMachineRelocateTransformation: {
            "flat": string;
            "sparse": string;
         };
         VirtualMachineRelocateSpecDiskLocator: {
            (options?: integrityService.vim.VirtualMachineRelocateSpecDiskLocator): integrityService.vim.VirtualMachineRelocateSpecDiskLocator;
         };
         ArrayOfVirtualMachineRelocateSpecDiskLocator: {
            (options?: integrityService.vim.ArrayOfVirtualMachineRelocateSpecDiskLocator): integrityService.vim.ArrayOfVirtualMachineRelocateSpecDiskLocator;
         };
         VirtualMachineRelocateDiskMoveOptions: {
            "moveAllDiskBackingsAndAllowSharing": string;
            "moveAllDiskBackingsAndDisallowSharing": string;
            "moveChildMostDiskBacking": string;
            "createNewChildDiskBacking": string;
            "moveAllDiskBackingsAndConsolidate": string;
         };
         VirtualMachineRelocateSpec: {
            (options?: integrityService.vim.VirtualMachineRelocateSpec): integrityService.vim.VirtualMachineRelocateSpec;
         };
         ReplicationInfoDiskSettings: {
            (options?: integrityService.vim.ReplicationInfoDiskSettings): integrityService.vim.ReplicationInfoDiskSettings;
         };
         ArrayOfReplicationInfoDiskSettings: {
            (options?: integrityService.vim.ArrayOfReplicationInfoDiskSettings): integrityService.vim.ArrayOfReplicationInfoDiskSettings;
         };
         VirtualMachineRuntimeInfoDasProtectionState: {
            (options?: integrityService.vim.VirtualMachineRuntimeInfoDasProtectionState): integrityService.vim.VirtualMachineRuntimeInfoDasProtectionState;
         };
         VirtualMachineRuntimeInfo: {
            (options?: integrityService.vim.VirtualMachineRuntimeInfo): integrityService.vim.VirtualMachineRuntimeInfo;
         };
         ScheduledHardwareUpgradeInfoHardwareUpgradePolicy: {
            "never": string;
            "onSoftPowerOff": string;
            "always": string;
         };
         ScheduledHardwareUpgradeInfoHardwareUpgradeStatus: {
            "none": string;
            "pending": string;
            "success": string;
            "failed": string;
         };
         ScheduledHardwareUpgradeInfo: {
            (options?: integrityService.vim.ScheduledHardwareUpgradeInfo): integrityService.vim.ScheduledHardwareUpgradeInfo;
         };
         VirtualMachineScsiDiskDeviceInfo: {
            (options?: integrityService.vim.VirtualMachineScsiDiskDeviceInfo): integrityService.vim.VirtualMachineScsiDiskDeviceInfo;
         };
         ArrayOfVirtualMachineScsiDiskDeviceInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineScsiDiskDeviceInfo): integrityService.vim.ArrayOfVirtualMachineScsiDiskDeviceInfo;
         };
         VirtualMachineScsiPassthroughType: {
            "disk": string;
            "tape": string;
            "printer": string;
            "processor": string;
            "worm": string;
            "cdrom": string;
            "scanner": string;
            "optical": string;
            "media": string;
            "com": string;
            "raid": string;
            "unknown": string;
         };
         VirtualMachineScsiPassthroughInfo: {
            (options?: integrityService.vim.VirtualMachineScsiPassthroughInfo): integrityService.vim.VirtualMachineScsiPassthroughInfo;
         };
         ArrayOfVirtualMachineScsiPassthroughInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineScsiPassthroughInfo): integrityService.vim.ArrayOfVirtualMachineScsiPassthroughInfo;
         };
         VirtualMachineSerialInfo: {
            (options?: integrityService.vim.VirtualMachineSerialInfo): integrityService.vim.VirtualMachineSerialInfo;
         };
         ArrayOfVirtualMachineSerialInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineSerialInfo): integrityService.vim.ArrayOfVirtualMachineSerialInfo;
         };
         VirtualMachineSnapshotInfo: {
            (options?: integrityService.vim.VirtualMachineSnapshotInfo): integrityService.vim.VirtualMachineSnapshotInfo;
         };
         VirtualMachineSnapshotTree: {
            (options?: integrityService.vim.VirtualMachineSnapshotTree): integrityService.vim.VirtualMachineSnapshotTree;
         };
         ArrayOfVirtualMachineSnapshotTree: {
            (options?: integrityService.vim.ArrayOfVirtualMachineSnapshotTree): integrityService.vim.ArrayOfVirtualMachineSnapshotTree;
         };
         VirtualMachineSoundInfo: {
            (options?: integrityService.vim.VirtualMachineSoundInfo): integrityService.vim.VirtualMachineSoundInfo;
         };
         ArrayOfVirtualMachineSoundInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineSoundInfo): integrityService.vim.ArrayOfVirtualMachineSoundInfo;
         };
         VirtualMachineSriovInfo: {
            (options?: integrityService.vim.VirtualMachineSriovInfo): integrityService.vim.VirtualMachineSriovInfo;
         };
         ArrayOfVirtualMachineSriovInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineSriovInfo): integrityService.vim.ArrayOfVirtualMachineSriovInfo;
         };
         VirtualMachineUsageOnDatastore: {
            (options?: integrityService.vim.VirtualMachineUsageOnDatastore): integrityService.vim.VirtualMachineUsageOnDatastore;
         };
         ArrayOfVirtualMachineUsageOnDatastore: {
            (options?: integrityService.vim.ArrayOfVirtualMachineUsageOnDatastore): integrityService.vim.ArrayOfVirtualMachineUsageOnDatastore;
         };
         VirtualMachineStorageInfo: {
            (options?: integrityService.vim.VirtualMachineStorageInfo): integrityService.vim.VirtualMachineStorageInfo;
         };
         VirtualMachineConfigSummary: {
            (options?: integrityService.vim.VirtualMachineConfigSummary): integrityService.vim.VirtualMachineConfigSummary;
         };
         VirtualMachineQuickStats: {
            (options?: integrityService.vim.VirtualMachineQuickStats): integrityService.vim.VirtualMachineQuickStats;
         };
         VirtualMachineGuestSummary: {
            (options?: integrityService.vim.VirtualMachineGuestSummary): integrityService.vim.VirtualMachineGuestSummary;
         };
         VirtualMachineStorageSummary: {
            (options?: integrityService.vim.VirtualMachineStorageSummary): integrityService.vim.VirtualMachineStorageSummary;
         };
         VirtualMachineSummary: {
            (options?: integrityService.vim.VirtualMachineSummary): integrityService.vim.VirtualMachineSummary;
         };
         ArrayOfVirtualMachineSummary: {
            (options?: integrityService.vim.ArrayOfVirtualMachineSummary): integrityService.vim.ArrayOfVirtualMachineSummary;
         };
         VirtualMachineTargetInfoConfigurationTag: {
            "compliant": string;
            "clusterWide": string;
         };
         VirtualMachineTargetInfo: {
            (options?: integrityService.vim.VirtualMachineTargetInfo): integrityService.vim.VirtualMachineTargetInfo;
         };
         UpgradePolicy: {
            "manual": string;
            "upgradeAtPowerCycle": string;
         };
         ToolsConfigInfoToolsLastInstallInfo: {
            (options?: integrityService.vim.ToolsConfigInfoToolsLastInstallInfo): integrityService.vim.ToolsConfigInfoToolsLastInstallInfo;
         };
         ToolsConfigInfo: {
            (options?: integrityService.vim.ToolsConfigInfo): integrityService.vim.ToolsConfigInfo;
         };
         VirtualMachineUsbInfoSpeed: {
            "low": string;
            "full": string;
            "high": string;
            "superSpeed": string;
            "unknownSpeed": string;
         };
         VirtualMachineUsbInfoFamily: {
            "audio": string;
            "hid": string;
            "hid_bootable": string;
            "physical": string;
            "communication": string;
            "imaging": string;
            "printer": string;
            "storage": string;
            "hub": string;
            "smart_card": string;
            "security": string;
            "video": string;
            "wireless": string;
            "bluetooth": string;
            "wusb": string;
            "pda": string;
            "vendor_specific": string;
            "other": string;
            "unknownFamily": string;
         };
         VirtualMachineUsbInfo: {
            (options?: integrityService.vim.VirtualMachineUsbInfo): integrityService.vim.VirtualMachineUsbInfo;
         };
         ArrayOfVirtualMachineUsbInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineUsbInfo): integrityService.vim.ArrayOfVirtualMachineUsbInfo;
         };
         VirtualMachineVFlashModuleInfo: {
            (options?: integrityService.vim.VirtualMachineVFlashModuleInfo): integrityService.vim.VirtualMachineVFlashModuleInfo;
         };
         ArrayOfVirtualMachineVFlashModuleInfo: {
            (options?: integrityService.vim.ArrayOfVirtualMachineVFlashModuleInfo): integrityService.vim.ArrayOfVirtualMachineVFlashModuleInfo;
         };
         VirtualHardware: {
            (options?: integrityService.vim.VirtualHardware): integrityService.vim.VirtualHardware;
         };
         VirtualHardwareOption: {
            (options?: integrityService.vim.VirtualHardwareOption): integrityService.vim.VirtualHardwareOption;
         };
         VirtualMachineImportSpec: {
            (options?: integrityService.vim.VirtualMachineImportSpec): integrityService.vim.VirtualMachineImportSpec;
         };
         CheckResult: {
            (options?: integrityService.vim.CheckResult): integrityService.vim.CheckResult;
         };
         ArrayOfCheckResult: {
            (options?: integrityService.vim.ArrayOfCheckResult): integrityService.vim.ArrayOfCheckResult;
         };
         CheckTestType: {
            "sourceTests": string;
            "hostTests": string;
            "resourcePoolTests": string;
            "datastoreTests": string;
            "networkTests": string;
         };
         CustomizationIPSettingsIpV6AddressSpec: {
            (options?: integrityService.vim.CustomizationIPSettingsIpV6AddressSpec): integrityService.vim.CustomizationIPSettingsIpV6AddressSpec;
         };
         CustomizationNetBIOSMode: {
            "enableNetBIOSViaDhcp": string;
            "enableNetBIOS": string;
            "disableNetBIOS": string;
         };
         CustomizationIPSettings: {
            (options?: integrityService.vim.CustomizationIPSettings): integrityService.vim.CustomizationIPSettings;
         };
         CustomizationSpec: {
            (options?: integrityService.vim.CustomizationSpec): integrityService.vim.CustomizationSpec;
         };
         CustomizationName: {
            (options?: integrityService.vim.CustomizationName): integrityService.vim.CustomizationName;
         };
         CustomizationFixedName: {
            (options?: integrityService.vim.CustomizationFixedName): integrityService.vim.CustomizationFixedName;
         };
         CustomizationPrefixName: {
            (options?: integrityService.vim.CustomizationPrefixName): integrityService.vim.CustomizationPrefixName;
         };
         CustomizationVirtualMachineName: {
            (options?: integrityService.vim.CustomizationVirtualMachineName): integrityService.vim.CustomizationVirtualMachineName;
         };
         CustomizationUnknownName: {
            (options?: integrityService.vim.CustomizationUnknownName): integrityService.vim.CustomizationUnknownName;
         };
         CustomizationCustomName: {
            (options?: integrityService.vim.CustomizationCustomName): integrityService.vim.CustomizationCustomName;
         };
         CustomizationPassword: {
            (options?: integrityService.vim.CustomizationPassword): integrityService.vim.CustomizationPassword;
         };
         CustomizationOptions: {
            (options?: integrityService.vim.CustomizationOptions): integrityService.vim.CustomizationOptions;
         };
         CustomizationSysprepRebootOption: {
            "reboot": string;
            "noreboot": string;
            "shutdown": string;
         };
         CustomizationWinOptions: {
            (options?: integrityService.vim.CustomizationWinOptions): integrityService.vim.CustomizationWinOptions;
         };
         CustomizationLinuxOptions: {
            (options?: integrityService.vim.CustomizationLinuxOptions): integrityService.vim.CustomizationLinuxOptions;
         };
         CustomizationGuiUnattended: {
            (options?: integrityService.vim.CustomizationGuiUnattended): integrityService.vim.CustomizationGuiUnattended;
         };
         CustomizationUserData: {
            (options?: integrityService.vim.CustomizationUserData): integrityService.vim.CustomizationUserData;
         };
         CustomizationGuiRunOnce: {
            (options?: integrityService.vim.CustomizationGuiRunOnce): integrityService.vim.CustomizationGuiRunOnce;
         };
         CustomizationIdentification: {
            (options?: integrityService.vim.CustomizationIdentification): integrityService.vim.CustomizationIdentification;
         };
         CustomizationLicenseDataMode: {
            "perServer": string;
            "perSeat": string;
         };
         CustomizationLicenseFilePrintData: {
            (options?: integrityService.vim.CustomizationLicenseFilePrintData): integrityService.vim.CustomizationLicenseFilePrintData;
         };
         CustomizationIdentitySettings: {
            (options?: integrityService.vim.CustomizationIdentitySettings): integrityService.vim.CustomizationIdentitySettings;
         };
         CustomizationSysprepText: {
            (options?: integrityService.vim.CustomizationSysprepText): integrityService.vim.CustomizationSysprepText;
         };
         CustomizationSysprep: {
            (options?: integrityService.vim.CustomizationSysprep): integrityService.vim.CustomizationSysprep;
         };
         CustomizationLinuxPrep: {
            (options?: integrityService.vim.CustomizationLinuxPrep): integrityService.vim.CustomizationLinuxPrep;
         };
         CustomizationGlobalIPSettings: {
            (options?: integrityService.vim.CustomizationGlobalIPSettings): integrityService.vim.CustomizationGlobalIPSettings;
         };
         CustomizationIpGenerator: {
            (options?: integrityService.vim.CustomizationIpGenerator): integrityService.vim.CustomizationIpGenerator;
         };
         CustomizationDhcpIpGenerator: {
            (options?: integrityService.vim.CustomizationDhcpIpGenerator): integrityService.vim.CustomizationDhcpIpGenerator;
         };
         CustomizationFixedIp: {
            (options?: integrityService.vim.CustomizationFixedIp): integrityService.vim.CustomizationFixedIp;
         };
         CustomizationUnknownIpGenerator: {
            (options?: integrityService.vim.CustomizationUnknownIpGenerator): integrityService.vim.CustomizationUnknownIpGenerator;
         };
         CustomizationCustomIpGenerator: {
            (options?: integrityService.vim.CustomizationCustomIpGenerator): integrityService.vim.CustomizationCustomIpGenerator;
         };
         CustomizationIpV6Generator: {
            (options?: integrityService.vim.CustomizationIpV6Generator): integrityService.vim.CustomizationIpV6Generator;
         };
         ArrayOfCustomizationIpV6Generator: {
            (options?: integrityService.vim.ArrayOfCustomizationIpV6Generator): integrityService.vim.ArrayOfCustomizationIpV6Generator;
         };
         CustomizationDhcpIpV6Generator: {
            (options?: integrityService.vim.CustomizationDhcpIpV6Generator): integrityService.vim.CustomizationDhcpIpV6Generator;
         };
         CustomizationStatelessIpV6Generator: {
            (options?: integrityService.vim.CustomizationStatelessIpV6Generator): integrityService.vim.CustomizationStatelessIpV6Generator;
         };
         CustomizationFixedIpV6: {
            (options?: integrityService.vim.CustomizationFixedIpV6): integrityService.vim.CustomizationFixedIpV6;
         };
         CustomizationAutoIpV6Generator: {
            (options?: integrityService.vim.CustomizationAutoIpV6Generator): integrityService.vim.CustomizationAutoIpV6Generator;
         };
         CustomizationUnknownIpV6Generator: {
            (options?: integrityService.vim.CustomizationUnknownIpV6Generator): integrityService.vim.CustomizationUnknownIpV6Generator;
         };
         CustomizationCustomIpV6Generator: {
            (options?: integrityService.vim.CustomizationCustomIpV6Generator): integrityService.vim.CustomizationCustomIpV6Generator;
         };
         CustomizationAdapterMapping: {
            (options?: integrityService.vim.CustomizationAdapterMapping): integrityService.vim.CustomizationAdapterMapping;
         };
         ArrayOfCustomizationAdapterMapping: {
            (options?: integrityService.vim.ArrayOfCustomizationAdapterMapping): integrityService.vim.ArrayOfCustomizationAdapterMapping;
         };
         HostDiskMappingPartitionInfo: {
            (options?: integrityService.vim.HostDiskMappingPartitionInfo): integrityService.vim.HostDiskMappingPartitionInfo;
         };
         HostDiskMappingInfo: {
            (options?: integrityService.vim.HostDiskMappingInfo): integrityService.vim.HostDiskMappingInfo;
         };
         HostDiskMappingPartitionOption: {
            (options?: integrityService.vim.HostDiskMappingPartitionOption): integrityService.vim.HostDiskMappingPartitionOption;
         };
         ArrayOfHostDiskMappingPartitionOption: {
            (options?: integrityService.vim.ArrayOfHostDiskMappingPartitionOption): integrityService.vim.ArrayOfHostDiskMappingPartitionOption;
         };
         HostDiskMappingOption: {
            (options?: integrityService.vim.HostDiskMappingOption): integrityService.vim.HostDiskMappingOption;
         };
         ParaVirtualSCSIController: {
            (options?: integrityService.vim.ParaVirtualSCSIController): integrityService.vim.ParaVirtualSCSIController;
         };
         ParaVirtualSCSIControllerOption: {
            (options?: integrityService.vim.ParaVirtualSCSIControllerOption): integrityService.vim.ParaVirtualSCSIControllerOption;
         };
         VirtualAHCIController: {
            (options?: integrityService.vim.VirtualAHCIController): integrityService.vim.VirtualAHCIController;
         };
         VirtualAHCIControllerOption: {
            (options?: integrityService.vim.VirtualAHCIControllerOption): integrityService.vim.VirtualAHCIControllerOption;
         };
         VirtualBusLogicController: {
            (options?: integrityService.vim.VirtualBusLogicController): integrityService.vim.VirtualBusLogicController;
         };
         VirtualBusLogicControllerOption: {
            (options?: integrityService.vim.VirtualBusLogicControllerOption): integrityService.vim.VirtualBusLogicControllerOption;
         };
         VirtualCdromIsoBackingInfo: {
            (options?: integrityService.vim.VirtualCdromIsoBackingInfo): integrityService.vim.VirtualCdromIsoBackingInfo;
         };
         VirtualCdromPassthroughBackingInfo: {
            (options?: integrityService.vim.VirtualCdromPassthroughBackingInfo): integrityService.vim.VirtualCdromPassthroughBackingInfo;
         };
         VirtualCdromRemotePassthroughBackingInfo: {
            (options?: integrityService.vim.VirtualCdromRemotePassthroughBackingInfo): integrityService.vim.VirtualCdromRemotePassthroughBackingInfo;
         };
         VirtualCdromAtapiBackingInfo: {
            (options?: integrityService.vim.VirtualCdromAtapiBackingInfo): integrityService.vim.VirtualCdromAtapiBackingInfo;
         };
         VirtualCdromRemoteAtapiBackingInfo: {
            (options?: integrityService.vim.VirtualCdromRemoteAtapiBackingInfo): integrityService.vim.VirtualCdromRemoteAtapiBackingInfo;
         };
         VirtualCdrom: {
            (options?: integrityService.vim.VirtualCdrom): integrityService.vim.VirtualCdrom;
         };
         VirtualCdromIsoBackingOption: {
            (options?: integrityService.vim.VirtualCdromIsoBackingOption): integrityService.vim.VirtualCdromIsoBackingOption;
         };
         VirtualCdromPassthroughBackingOption: {
            (options?: integrityService.vim.VirtualCdromPassthroughBackingOption): integrityService.vim.VirtualCdromPassthroughBackingOption;
         };
         VirtualCdromRemotePassthroughBackingOption: {
            (options?: integrityService.vim.VirtualCdromRemotePassthroughBackingOption): integrityService.vim.VirtualCdromRemotePassthroughBackingOption;
         };
         VirtualCdromAtapiBackingOption: {
            (options?: integrityService.vim.VirtualCdromAtapiBackingOption): integrityService.vim.VirtualCdromAtapiBackingOption;
         };
         VirtualCdromRemoteAtapiBackingOption: {
            (options?: integrityService.vim.VirtualCdromRemoteAtapiBackingOption): integrityService.vim.VirtualCdromRemoteAtapiBackingOption;
         };
         VirtualCdromOption: {
            (options?: integrityService.vim.VirtualCdromOption): integrityService.vim.VirtualCdromOption;
         };
         VirtualController: {
            (options?: integrityService.vim.VirtualController): integrityService.vim.VirtualController;
         };
         VirtualControllerOption: {
            (options?: integrityService.vim.VirtualControllerOption): integrityService.vim.VirtualControllerOption;
         };
         VirtualDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualDeviceBackingInfo): integrityService.vim.VirtualDeviceBackingInfo;
         };
         VirtualDeviceFileBackingInfo: {
            (options?: integrityService.vim.VirtualDeviceFileBackingInfo): integrityService.vim.VirtualDeviceFileBackingInfo;
         };
         VirtualDeviceDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualDeviceDeviceBackingInfo): integrityService.vim.VirtualDeviceDeviceBackingInfo;
         };
         VirtualDeviceRemoteDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualDeviceRemoteDeviceBackingInfo): integrityService.vim.VirtualDeviceRemoteDeviceBackingInfo;
         };
         VirtualDevicePipeBackingInfo: {
            (options?: integrityService.vim.VirtualDevicePipeBackingInfo): integrityService.vim.VirtualDevicePipeBackingInfo;
         };
         VirtualDeviceURIBackingInfo: {
            (options?: integrityService.vim.VirtualDeviceURIBackingInfo): integrityService.vim.VirtualDeviceURIBackingInfo;
         };
         VirtualDeviceConnectInfoStatus: {
            "ok": string;
            "recoverableError": string;
            "unrecoverableError": string;
            "untried": string;
         };
         VirtualDeviceConnectInfo: {
            (options?: integrityService.vim.VirtualDeviceConnectInfo): integrityService.vim.VirtualDeviceConnectInfo;
         };
         VirtualDeviceBusSlotInfo: {
            (options?: integrityService.vim.VirtualDeviceBusSlotInfo): integrityService.vim.VirtualDeviceBusSlotInfo;
         };
         VirtualDevicePciBusSlotInfo: {
            (options?: integrityService.vim.VirtualDevicePciBusSlotInfo): integrityService.vim.VirtualDevicePciBusSlotInfo;
         };
         VirtualDevice: {
            (options?: integrityService.vim.VirtualDevice): integrityService.vim.VirtualDevice;
         };
         ArrayOfVirtualDevice: {
            (options?: integrityService.vim.ArrayOfVirtualDevice): integrityService.vim.ArrayOfVirtualDevice;
         };
         VirtualDeviceBackingOption: {
            (options?: integrityService.vim.VirtualDeviceBackingOption): integrityService.vim.VirtualDeviceBackingOption;
         };
         ArrayOfVirtualDeviceBackingOption: {
            (options?: integrityService.vim.ArrayOfVirtualDeviceBackingOption): integrityService.vim.ArrayOfVirtualDeviceBackingOption;
         };
         VirtualDeviceFileExtension: {
            "iso": string;
            "flp": string;
            "vmdk": string;
            "dsk": string;
            "rdm": string;
         };
         VirtualDeviceFileBackingOption: {
            (options?: integrityService.vim.VirtualDeviceFileBackingOption): integrityService.vim.VirtualDeviceFileBackingOption;
         };
         VirtualDeviceDeviceBackingOption: {
            (options?: integrityService.vim.VirtualDeviceDeviceBackingOption): integrityService.vim.VirtualDeviceDeviceBackingOption;
         };
         VirtualDeviceRemoteDeviceBackingOption: {
            (options?: integrityService.vim.VirtualDeviceRemoteDeviceBackingOption): integrityService.vim.VirtualDeviceRemoteDeviceBackingOption;
         };
         VirtualDevicePipeBackingOption: {
            (options?: integrityService.vim.VirtualDevicePipeBackingOption): integrityService.vim.VirtualDevicePipeBackingOption;
         };
         VirtualDeviceURIBackingOptionDirection: {
            "server": string;
            "client": string;
         };
         VirtualDeviceURIBackingOption: {
            (options?: integrityService.vim.VirtualDeviceURIBackingOption): integrityService.vim.VirtualDeviceURIBackingOption;
         };
         VirtualDeviceConnectOption: {
            (options?: integrityService.vim.VirtualDeviceConnectOption): integrityService.vim.VirtualDeviceConnectOption;
         };
         VirtualDeviceBusSlotOption: {
            (options?: integrityService.vim.VirtualDeviceBusSlotOption): integrityService.vim.VirtualDeviceBusSlotOption;
         };
         VirtualDeviceOption: {
            (options?: integrityService.vim.VirtualDeviceOption): integrityService.vim.VirtualDeviceOption;
         };
         ArrayOfVirtualDeviceOption: {
            (options?: integrityService.vim.ArrayOfVirtualDeviceOption): integrityService.vim.ArrayOfVirtualDeviceOption;
         };
         VirtualDeviceConfigSpecOperation: {
            "add": string;
            "remove": string;
            "edit": string;
         };
         VirtualDeviceConfigSpecFileOperation: {
            "create": string;
            "destroy": string;
            "replace": string;
         };
         VirtualDeviceConfigSpec: {
            (options?: integrityService.vim.VirtualDeviceConfigSpec): integrityService.vim.VirtualDeviceConfigSpec;
         };
         ArrayOfVirtualDeviceConfigSpec: {
            (options?: integrityService.vim.ArrayOfVirtualDeviceConfigSpec): integrityService.vim.ArrayOfVirtualDeviceConfigSpec;
         };
         VirtualDiskDeltaDiskFormat: {
            "redoLogFormat": string;
            "nativeFormat": string;
            "seSparseFormat": string;
         };
         VirtualDiskSparseVer1BackingInfo: {
            (options?: integrityService.vim.VirtualDiskSparseVer1BackingInfo): integrityService.vim.VirtualDiskSparseVer1BackingInfo;
         };
         VirtualDiskSparseVer2BackingInfo: {
            (options?: integrityService.vim.VirtualDiskSparseVer2BackingInfo): integrityService.vim.VirtualDiskSparseVer2BackingInfo;
         };
         VirtualDiskFlatVer1BackingInfo: {
            (options?: integrityService.vim.VirtualDiskFlatVer1BackingInfo): integrityService.vim.VirtualDiskFlatVer1BackingInfo;
         };
         VirtualDiskFlatVer2BackingInfo: {
            (options?: integrityService.vim.VirtualDiskFlatVer2BackingInfo): integrityService.vim.VirtualDiskFlatVer2BackingInfo;
         };
         VirtualDiskSeSparseBackingInfo: {
            (options?: integrityService.vim.VirtualDiskSeSparseBackingInfo): integrityService.vim.VirtualDiskSeSparseBackingInfo;
         };
         VirtualDiskRawDiskVer2BackingInfo: {
            (options?: integrityService.vim.VirtualDiskRawDiskVer2BackingInfo): integrityService.vim.VirtualDiskRawDiskVer2BackingInfo;
         };
         VirtualDiskPartitionedRawDiskVer2BackingInfo: {
            (options?: integrityService.vim.VirtualDiskPartitionedRawDiskVer2BackingInfo): integrityService.vim.VirtualDiskPartitionedRawDiskVer2BackingInfo;
         };
         VirtualDiskRawDiskMappingVer1BackingInfo: {
            (options?: integrityService.vim.VirtualDiskRawDiskMappingVer1BackingInfo): integrityService.vim.VirtualDiskRawDiskMappingVer1BackingInfo;
         };
         VirtualDiskVFlashCacheConfigInfoCacheConsistencyType: {
            "strong": string;
            "weak": string;
         };
         VirtualDiskVFlashCacheConfigInfoCacheMode: {
            "write_thru": string;
            "write_back": string;
         };
         VirtualDiskVFlashCacheConfigInfo: {
            (options?: integrityService.vim.VirtualDiskVFlashCacheConfigInfo): integrityService.vim.VirtualDiskVFlashCacheConfigInfo;
         };
         VirtualDisk: {
            (options?: integrityService.vim.VirtualDisk): integrityService.vim.VirtualDisk;
         };
         ArrayOfVirtualDisk: {
            (options?: integrityService.vim.ArrayOfVirtualDisk): integrityService.vim.ArrayOfVirtualDisk;
         };
         VirtualDiskId: {
            (options?: integrityService.vim.VirtualDiskId): integrityService.vim.VirtualDiskId;
         };
         VirtualDiskMode: {
            "persistent": string;
            "nonpersistent": string;
            "undoable": string;
            "independent_persistent": string;
            "independent_nonpersistent": string;
            "append": string;
         };
         VirtualDiskCompatibilityMode: {
            "virtualMode": string;
            "physicalMode": string;
         };
         VirtualDiskSparseVer1BackingOption: {
            (options?: integrityService.vim.VirtualDiskSparseVer1BackingOption): integrityService.vim.VirtualDiskSparseVer1BackingOption;
         };
         VirtualDiskSparseVer2BackingOption: {
            (options?: integrityService.vim.VirtualDiskSparseVer2BackingOption): integrityService.vim.VirtualDiskSparseVer2BackingOption;
         };
         VirtualDiskFlatVer1BackingOption: {
            (options?: integrityService.vim.VirtualDiskFlatVer1BackingOption): integrityService.vim.VirtualDiskFlatVer1BackingOption;
         };
         VirtualDiskDeltaDiskFormatsSupported: {
            (options?: integrityService.vim.VirtualDiskDeltaDiskFormatsSupported): integrityService.vim.VirtualDiskDeltaDiskFormatsSupported;
         };
         ArrayOfVirtualDiskDeltaDiskFormatsSupported: {
            (options?: integrityService.vim.ArrayOfVirtualDiskDeltaDiskFormatsSupported): integrityService.vim.ArrayOfVirtualDiskDeltaDiskFormatsSupported;
         };
         VirtualDiskFlatVer2BackingOption: {
            (options?: integrityService.vim.VirtualDiskFlatVer2BackingOption): integrityService.vim.VirtualDiskFlatVer2BackingOption;
         };
         VirtualDiskSeSparseBackingOption: {
            (options?: integrityService.vim.VirtualDiskSeSparseBackingOption): integrityService.vim.VirtualDiskSeSparseBackingOption;
         };
         VirtualDiskRawDiskVer2BackingOption: {
            (options?: integrityService.vim.VirtualDiskRawDiskVer2BackingOption): integrityService.vim.VirtualDiskRawDiskVer2BackingOption;
         };
         VirtualDiskPartitionedRawDiskVer2BackingOption: {
            (options?: integrityService.vim.VirtualDiskPartitionedRawDiskVer2BackingOption): integrityService.vim.VirtualDiskPartitionedRawDiskVer2BackingOption;
         };
         VirtualDiskRawDiskMappingVer1BackingOption: {
            (options?: integrityService.vim.VirtualDiskRawDiskMappingVer1BackingOption): integrityService.vim.VirtualDiskRawDiskMappingVer1BackingOption;
         };
         VirtualDiskOptionVFlashCacheConfigOption: {
            (options?: integrityService.vim.VirtualDiskOptionVFlashCacheConfigOption): integrityService.vim.VirtualDiskOptionVFlashCacheConfigOption;
         };
         VirtualDiskOption: {
            (options?: integrityService.vim.VirtualDiskOption): integrityService.vim.VirtualDiskOption;
         };
         VirtualDiskConfigSpec: {
            (options?: integrityService.vim.VirtualDiskConfigSpec): integrityService.vim.VirtualDiskConfigSpec;
         };
         VirtualE1000: {
            (options?: integrityService.vim.VirtualE1000): integrityService.vim.VirtualE1000;
         };
         VirtualE1000Option: {
            (options?: integrityService.vim.VirtualE1000Option): integrityService.vim.VirtualE1000Option;
         };
         VirtualE1000e: {
            (options?: integrityService.vim.VirtualE1000e): integrityService.vim.VirtualE1000e;
         };
         VirtualE1000eOption: {
            (options?: integrityService.vim.VirtualE1000eOption): integrityService.vim.VirtualE1000eOption;
         };
         VirtualEnsoniq1371: {
            (options?: integrityService.vim.VirtualEnsoniq1371): integrityService.vim.VirtualEnsoniq1371;
         };
         VirtualEnsoniq1371Option: {
            (options?: integrityService.vim.VirtualEnsoniq1371Option): integrityService.vim.VirtualEnsoniq1371Option;
         };
         VirtualEthernetCardNetworkBackingInfo: {
            (options?: integrityService.vim.VirtualEthernetCardNetworkBackingInfo): integrityService.vim.VirtualEthernetCardNetworkBackingInfo;
         };
         VirtualEthernetCardLegacyNetworkBackingInfo: {
            (options?: integrityService.vim.VirtualEthernetCardLegacyNetworkBackingInfo): integrityService.vim.VirtualEthernetCardLegacyNetworkBackingInfo;
         };
         VirtualEthernetCardDistributedVirtualPortBackingInfo: {
            (options?: integrityService.vim.VirtualEthernetCardDistributedVirtualPortBackingInfo): integrityService.vim.VirtualEthernetCardDistributedVirtualPortBackingInfo;
         };
         VirtualEthernetCardOpaqueNetworkBackingInfo: {
            (options?: integrityService.vim.VirtualEthernetCardOpaqueNetworkBackingInfo): integrityService.vim.VirtualEthernetCardOpaqueNetworkBackingInfo;
         };
         VirtualEthernetCard: {
            (options?: integrityService.vim.VirtualEthernetCard): integrityService.vim.VirtualEthernetCard;
         };
         VirtualEthernetCardNetworkBackingOption: {
            (options?: integrityService.vim.VirtualEthernetCardNetworkBackingOption): integrityService.vim.VirtualEthernetCardNetworkBackingOption;
         };
         VirtualEthernetCardOpaqueNetworkBackingOption: {
            (options?: integrityService.vim.VirtualEthernetCardOpaqueNetworkBackingOption): integrityService.vim.VirtualEthernetCardOpaqueNetworkBackingOption;
         };
         VirtualEthernetCardLegacyNetworkDeviceName: {
            "bridged": string;
            "nat": string;
            "hostonly": string;
         };
         VirtualEthernetCardLegacyNetworkBackingOption: {
            (options?: integrityService.vim.VirtualEthernetCardLegacyNetworkBackingOption): integrityService.vim.VirtualEthernetCardLegacyNetworkBackingOption;
         };
         VirtualEthernetCardDVPortBackingOption: {
            (options?: integrityService.vim.VirtualEthernetCardDVPortBackingOption): integrityService.vim.VirtualEthernetCardDVPortBackingOption;
         };
         VirtualEthernetCardMacType: {
            "manual": string;
            "generated": string;
            "assigned": string;
         };
         VirtualEthernetCardOption: {
            (options?: integrityService.vim.VirtualEthernetCardOption): integrityService.vim.VirtualEthernetCardOption;
         };
         VirtualFloppyImageBackingInfo: {
            (options?: integrityService.vim.VirtualFloppyImageBackingInfo): integrityService.vim.VirtualFloppyImageBackingInfo;
         };
         VirtualFloppyDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualFloppyDeviceBackingInfo): integrityService.vim.VirtualFloppyDeviceBackingInfo;
         };
         VirtualFloppyRemoteDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualFloppyRemoteDeviceBackingInfo): integrityService.vim.VirtualFloppyRemoteDeviceBackingInfo;
         };
         VirtualFloppy: {
            (options?: integrityService.vim.VirtualFloppy): integrityService.vim.VirtualFloppy;
         };
         VirtualFloppyImageBackingOption: {
            (options?: integrityService.vim.VirtualFloppyImageBackingOption): integrityService.vim.VirtualFloppyImageBackingOption;
         };
         VirtualFloppyDeviceBackingOption: {
            (options?: integrityService.vim.VirtualFloppyDeviceBackingOption): integrityService.vim.VirtualFloppyDeviceBackingOption;
         };
         VirtualFloppyRemoteDeviceBackingOption: {
            (options?: integrityService.vim.VirtualFloppyRemoteDeviceBackingOption): integrityService.vim.VirtualFloppyRemoteDeviceBackingOption;
         };
         VirtualFloppyOption: {
            (options?: integrityService.vim.VirtualFloppyOption): integrityService.vim.VirtualFloppyOption;
         };
         VirtualHdAudioCard: {
            (options?: integrityService.vim.VirtualHdAudioCard): integrityService.vim.VirtualHdAudioCard;
         };
         VirtualHdAudioCardOption: {
            (options?: integrityService.vim.VirtualHdAudioCardOption): integrityService.vim.VirtualHdAudioCardOption;
         };
         VirtualIDEController: {
            (options?: integrityService.vim.VirtualIDEController): integrityService.vim.VirtualIDEController;
         };
         VirtualIDEControllerOption: {
            (options?: integrityService.vim.VirtualIDEControllerOption): integrityService.vim.VirtualIDEControllerOption;
         };
         VirtualKeyboard: {
            (options?: integrityService.vim.VirtualKeyboard): integrityService.vim.VirtualKeyboard;
         };
         VirtualKeyboardOption: {
            (options?: integrityService.vim.VirtualKeyboardOption): integrityService.vim.VirtualKeyboardOption;
         };
         VirtualLsiLogicController: {
            (options?: integrityService.vim.VirtualLsiLogicController): integrityService.vim.VirtualLsiLogicController;
         };
         VirtualLsiLogicControllerOption: {
            (options?: integrityService.vim.VirtualLsiLogicControllerOption): integrityService.vim.VirtualLsiLogicControllerOption;
         };
         VirtualLsiLogicSASController: {
            (options?: integrityService.vim.VirtualLsiLogicSASController): integrityService.vim.VirtualLsiLogicSASController;
         };
         VirtualLsiLogicSASControllerOption: {
            (options?: integrityService.vim.VirtualLsiLogicSASControllerOption): integrityService.vim.VirtualLsiLogicSASControllerOption;
         };
         VirtualPCIController: {
            (options?: integrityService.vim.VirtualPCIController): integrityService.vim.VirtualPCIController;
         };
         VirtualPCIControllerOption: {
            (options?: integrityService.vim.VirtualPCIControllerOption): integrityService.vim.VirtualPCIControllerOption;
         };
         VirtualPCIPassthroughDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualPCIPassthroughDeviceBackingInfo): integrityService.vim.VirtualPCIPassthroughDeviceBackingInfo;
         };
         VirtualPCIPassthrough: {
            (options?: integrityService.vim.VirtualPCIPassthrough): integrityService.vim.VirtualPCIPassthrough;
         };
         VirtualPCIPassthroughDeviceBackingOption: {
            (options?: integrityService.vim.VirtualPCIPassthroughDeviceBackingOption): integrityService.vim.VirtualPCIPassthroughDeviceBackingOption;
         };
         VirtualPCIPassthroughOption: {
            (options?: integrityService.vim.VirtualPCIPassthroughOption): integrityService.vim.VirtualPCIPassthroughOption;
         };
         VirtualPCNet32: {
            (options?: integrityService.vim.VirtualPCNet32): integrityService.vim.VirtualPCNet32;
         };
         VirtualPCNet32Option: {
            (options?: integrityService.vim.VirtualPCNet32Option): integrityService.vim.VirtualPCNet32Option;
         };
         VirtualPS2Controller: {
            (options?: integrityService.vim.VirtualPS2Controller): integrityService.vim.VirtualPS2Controller;
         };
         VirtualPS2ControllerOption: {
            (options?: integrityService.vim.VirtualPS2ControllerOption): integrityService.vim.VirtualPS2ControllerOption;
         };
         VirtualParallelPortFileBackingInfo: {
            (options?: integrityService.vim.VirtualParallelPortFileBackingInfo): integrityService.vim.VirtualParallelPortFileBackingInfo;
         };
         VirtualParallelPortDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualParallelPortDeviceBackingInfo): integrityService.vim.VirtualParallelPortDeviceBackingInfo;
         };
         VirtualParallelPort: {
            (options?: integrityService.vim.VirtualParallelPort): integrityService.vim.VirtualParallelPort;
         };
         VirtualParallelPortFileBackingOption: {
            (options?: integrityService.vim.VirtualParallelPortFileBackingOption): integrityService.vim.VirtualParallelPortFileBackingOption;
         };
         VirtualParallelPortDeviceBackingOption: {
            (options?: integrityService.vim.VirtualParallelPortDeviceBackingOption): integrityService.vim.VirtualParallelPortDeviceBackingOption;
         };
         VirtualParallelPortOption: {
            (options?: integrityService.vim.VirtualParallelPortOption): integrityService.vim.VirtualParallelPortOption;
         };
         VirtualPointingDeviceDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualPointingDeviceDeviceBackingInfo): integrityService.vim.VirtualPointingDeviceDeviceBackingInfo;
         };
         VirtualPointingDevice: {
            (options?: integrityService.vim.VirtualPointingDevice): integrityService.vim.VirtualPointingDevice;
         };
         VirtualPointingDeviceHostChoice: {
            "autodetect": string;
            "intellimouseExplorer": string;
            "intellimousePs2": string;
            "logitechMouseman": string;
            "microsoft_serial": string;
            "mouseSystems": string;
            "mousemanSerial": string;
            "ps2": string;
         };
         VirtualPointingDeviceBackingOption: {
            (options?: integrityService.vim.VirtualPointingDeviceBackingOption): integrityService.vim.VirtualPointingDeviceBackingOption;
         };
         VirtualPointingDeviceOption: {
            (options?: integrityService.vim.VirtualPointingDeviceOption): integrityService.vim.VirtualPointingDeviceOption;
         };
         VirtualSATAController: {
            (options?: integrityService.vim.VirtualSATAController): integrityService.vim.VirtualSATAController;
         };
         VirtualSATAControllerOption: {
            (options?: integrityService.vim.VirtualSATAControllerOption): integrityService.vim.VirtualSATAControllerOption;
         };
         VirtualSCSISharing: {
            "noSharing": string;
            "virtualSharing": string;
            "physicalSharing": string;
         };
         ArrayOfVirtualSCSISharing: {
            (options?: integrityService.vim.ArrayOfVirtualSCSISharing): integrityService.vim.ArrayOfVirtualSCSISharing;
         };
         VirtualSCSIController: {
            (options?: integrityService.vim.VirtualSCSIController): integrityService.vim.VirtualSCSIController;
         };
         VirtualSCSIControllerOption: {
            (options?: integrityService.vim.VirtualSCSIControllerOption): integrityService.vim.VirtualSCSIControllerOption;
         };
         VirtualSCSIPassthroughDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualSCSIPassthroughDeviceBackingInfo): integrityService.vim.VirtualSCSIPassthroughDeviceBackingInfo;
         };
         VirtualSCSIPassthrough: {
            (options?: integrityService.vim.VirtualSCSIPassthrough): integrityService.vim.VirtualSCSIPassthrough;
         };
         VirtualSCSIPassthroughDeviceBackingOption: {
            (options?: integrityService.vim.VirtualSCSIPassthroughDeviceBackingOption): integrityService.vim.VirtualSCSIPassthroughDeviceBackingOption;
         };
         VirtualSCSIPassthroughOption: {
            (options?: integrityService.vim.VirtualSCSIPassthroughOption): integrityService.vim.VirtualSCSIPassthroughOption;
         };
         VirtualSIOController: {
            (options?: integrityService.vim.VirtualSIOController): integrityService.vim.VirtualSIOController;
         };
         VirtualSIOControllerOption: {
            (options?: integrityService.vim.VirtualSIOControllerOption): integrityService.vim.VirtualSIOControllerOption;
         };
         VirtualSerialPortFileBackingInfo: {
            (options?: integrityService.vim.VirtualSerialPortFileBackingInfo): integrityService.vim.VirtualSerialPortFileBackingInfo;
         };
         VirtualSerialPortDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualSerialPortDeviceBackingInfo): integrityService.vim.VirtualSerialPortDeviceBackingInfo;
         };
         VirtualSerialPortPipeBackingInfo: {
            (options?: integrityService.vim.VirtualSerialPortPipeBackingInfo): integrityService.vim.VirtualSerialPortPipeBackingInfo;
         };
         VirtualSerialPortURIBackingInfo: {
            (options?: integrityService.vim.VirtualSerialPortURIBackingInfo): integrityService.vim.VirtualSerialPortURIBackingInfo;
         };
         VirtualSerialPortThinPrintBackingInfo: {
            (options?: integrityService.vim.VirtualSerialPortThinPrintBackingInfo): integrityService.vim.VirtualSerialPortThinPrintBackingInfo;
         };
         VirtualSerialPort: {
            (options?: integrityService.vim.VirtualSerialPort): integrityService.vim.VirtualSerialPort;
         };
         VirtualSerialPortEndPoint: {
            "client": string;
            "server": string;
         };
         VirtualSerialPortFileBackingOption: {
            (options?: integrityService.vim.VirtualSerialPortFileBackingOption): integrityService.vim.VirtualSerialPortFileBackingOption;
         };
         VirtualSerialPortDeviceBackingOption: {
            (options?: integrityService.vim.VirtualSerialPortDeviceBackingOption): integrityService.vim.VirtualSerialPortDeviceBackingOption;
         };
         VirtualSerialPortPipeBackingOption: {
            (options?: integrityService.vim.VirtualSerialPortPipeBackingOption): integrityService.vim.VirtualSerialPortPipeBackingOption;
         };
         VirtualSerialPortURIBackingOption: {
            (options?: integrityService.vim.VirtualSerialPortURIBackingOption): integrityService.vim.VirtualSerialPortURIBackingOption;
         };
         VirtualSerialPortThinPrintBackingOption: {
            (options?: integrityService.vim.VirtualSerialPortThinPrintBackingOption): integrityService.vim.VirtualSerialPortThinPrintBackingOption;
         };
         VirtualSerialPortOption: {
            (options?: integrityService.vim.VirtualSerialPortOption): integrityService.vim.VirtualSerialPortOption;
         };
         VirtualSoundBlaster16: {
            (options?: integrityService.vim.VirtualSoundBlaster16): integrityService.vim.VirtualSoundBlaster16;
         };
         VirtualSoundBlaster16Option: {
            (options?: integrityService.vim.VirtualSoundBlaster16Option): integrityService.vim.VirtualSoundBlaster16Option;
         };
         VirtualSoundCardDeviceBackingInfo: {
            (options?: integrityService.vim.VirtualSoundCardDeviceBackingInfo): integrityService.vim.VirtualSoundCardDeviceBackingInfo;
         };
         VirtualSoundCard: {
            (options?: integrityService.vim.VirtualSoundCard): integrityService.vim.VirtualSoundCard;
         };
         VirtualSoundCardDeviceBackingOption: {
            (options?: integrityService.vim.VirtualSoundCardDeviceBackingOption): integrityService.vim.VirtualSoundCardDeviceBackingOption;
         };
         VirtualSoundCardOption: {
            (options?: integrityService.vim.VirtualSoundCardOption): integrityService.vim.VirtualSoundCardOption;
         };
         VirtualSriovEthernetCardSriovBackingInfo: {
            (options?: integrityService.vim.VirtualSriovEthernetCardSriovBackingInfo): integrityService.vim.VirtualSriovEthernetCardSriovBackingInfo;
         };
         VirtualSriovEthernetCard: {
            (options?: integrityService.vim.VirtualSriovEthernetCard): integrityService.vim.VirtualSriovEthernetCard;
         };
         VirtualSriovEthernetCardSriovBackingOption: {
            (options?: integrityService.vim.VirtualSriovEthernetCardSriovBackingOption): integrityService.vim.VirtualSriovEthernetCardSriovBackingOption;
         };
         VirtualSriovEthernetCardOption: {
            (options?: integrityService.vim.VirtualSriovEthernetCardOption): integrityService.vim.VirtualSriovEthernetCardOption;
         };
         VirtualUSBUSBBackingInfo: {
            (options?: integrityService.vim.VirtualUSBUSBBackingInfo): integrityService.vim.VirtualUSBUSBBackingInfo;
         };
         VirtualUSBRemoteHostBackingInfo: {
            (options?: integrityService.vim.VirtualUSBRemoteHostBackingInfo): integrityService.vim.VirtualUSBRemoteHostBackingInfo;
         };
         VirtualUSBRemoteClientBackingInfo: {
            (options?: integrityService.vim.VirtualUSBRemoteClientBackingInfo): integrityService.vim.VirtualUSBRemoteClientBackingInfo;
         };
         VirtualUSB: {
            (options?: integrityService.vim.VirtualUSB): integrityService.vim.VirtualUSB;
         };
         VirtualUSBControllerPciBusSlotInfo: {
            (options?: integrityService.vim.VirtualUSBControllerPciBusSlotInfo): integrityService.vim.VirtualUSBControllerPciBusSlotInfo;
         };
         VirtualUSBController: {
            (options?: integrityService.vim.VirtualUSBController): integrityService.vim.VirtualUSBController;
         };
         VirtualUSBControllerOption: {
            (options?: integrityService.vim.VirtualUSBControllerOption): integrityService.vim.VirtualUSBControllerOption;
         };
         VirtualUSBUSBBackingOption: {
            (options?: integrityService.vim.VirtualUSBUSBBackingOption): integrityService.vim.VirtualUSBUSBBackingOption;
         };
         VirtualUSBRemoteHostBackingOption: {
            (options?: integrityService.vim.VirtualUSBRemoteHostBackingOption): integrityService.vim.VirtualUSBRemoteHostBackingOption;
         };
         VirtualUSBRemoteClientBackingOption: {
            (options?: integrityService.vim.VirtualUSBRemoteClientBackingOption): integrityService.vim.VirtualUSBRemoteClientBackingOption;
         };
         VirtualUSBOption: {
            (options?: integrityService.vim.VirtualUSBOption): integrityService.vim.VirtualUSBOption;
         };
         VirtualUSBXHCIController: {
            (options?: integrityService.vim.VirtualUSBXHCIController): integrityService.vim.VirtualUSBXHCIController;
         };
         VirtualUSBXHCIControllerOption: {
            (options?: integrityService.vim.VirtualUSBXHCIControllerOption): integrityService.vim.VirtualUSBXHCIControllerOption;
         };
         VirtualMachineVMCIDevice: {
            (options?: integrityService.vim.VirtualMachineVMCIDevice): integrityService.vim.VirtualMachineVMCIDevice;
         };
         VirtualMachineVMCIDeviceOption: {
            (options?: integrityService.vim.VirtualMachineVMCIDeviceOption): integrityService.vim.VirtualMachineVMCIDeviceOption;
         };
         VirtualMachineVMIROM: {
            (options?: integrityService.vim.VirtualMachineVMIROM): integrityService.vim.VirtualMachineVMIROM;
         };
         VirtualVMIROMOption: {
            (options?: integrityService.vim.VirtualVMIROMOption): integrityService.vim.VirtualVMIROMOption;
         };
         VirtualMachineVideoCardUse3dRenderer: {
            "automatic": string;
            "software": string;
            "hardware": string;
         };
         VirtualMachineVideoCard: {
            (options?: integrityService.vim.VirtualMachineVideoCard): integrityService.vim.VirtualMachineVideoCard;
         };
         VirtualVideoCardOption: {
            (options?: integrityService.vim.VirtualVideoCardOption): integrityService.vim.VirtualVideoCardOption;
         };
         VirtualVmxnet: {
            (options?: integrityService.vim.VirtualVmxnet): integrityService.vim.VirtualVmxnet;
         };
         VirtualVmxnet2: {
            (options?: integrityService.vim.VirtualVmxnet2): integrityService.vim.VirtualVmxnet2;
         };
         VirtualVmxnet2Option: {
            (options?: integrityService.vim.VirtualVmxnet2Option): integrityService.vim.VirtualVmxnet2Option;
         };
         VirtualVmxnet3: {
            (options?: integrityService.vim.VirtualVmxnet3): integrityService.vim.VirtualVmxnet3;
         };
         VirtualVmxnet3Option: {
            (options?: integrityService.vim.VirtualVmxnet3Option): integrityService.vim.VirtualVmxnet3Option;
         };
         VirtualVmxnetOption: {
            (options?: integrityService.vim.VirtualVmxnetOption): integrityService.vim.VirtualVmxnetOption;
         };
         GuestFileAttributes: {
            (options?: integrityService.vim.GuestFileAttributes): integrityService.vim.GuestFileAttributes;
         };
         GuestPosixFileAttributes: {
            (options?: integrityService.vim.GuestPosixFileAttributes): integrityService.vim.GuestPosixFileAttributes;
         };
         GuestWindowsFileAttributes: {
            (options?: integrityService.vim.GuestWindowsFileAttributes): integrityService.vim.GuestWindowsFileAttributes;
         };
         GuestFileType: {
            "file": string;
            "directory": string;
            "symlink": string;
         };
         GuestFileInfo: {
            (options?: integrityService.vim.GuestFileInfo): integrityService.vim.GuestFileInfo;
         };
         ArrayOfGuestFileInfo: {
            (options?: integrityService.vim.ArrayOfGuestFileInfo): integrityService.vim.ArrayOfGuestFileInfo;
         };
         GuestListFileInfo: {
            (options?: integrityService.vim.GuestListFileInfo): integrityService.vim.GuestListFileInfo;
         };
         FileTransferInformation: {
            (options?: integrityService.vim.FileTransferInformation): integrityService.vim.FileTransferInformation;
         };
         GuestAuthentication: {
            (options?: integrityService.vim.GuestAuthentication): integrityService.vim.GuestAuthentication;
         };
         NamePasswordAuthentication: {
            (options?: integrityService.vim.NamePasswordAuthentication): integrityService.vim.NamePasswordAuthentication;
         };
         GuestProgramSpec: {
            (options?: integrityService.vim.GuestProgramSpec): integrityService.vim.GuestProgramSpec;
         };
         GuestWindowsProgramSpec: {
            (options?: integrityService.vim.GuestWindowsProgramSpec): integrityService.vim.GuestWindowsProgramSpec;
         };
         GuestProcessInfo: {
            (options?: integrityService.vim.GuestProcessInfo): integrityService.vim.GuestProcessInfo;
         };
         ArrayOfGuestProcessInfo: {
            (options?: integrityService.vim.ArrayOfGuestProcessInfo): integrityService.vim.ArrayOfGuestProcessInfo;
         };
         SSPIAuthentication: {
            (options?: integrityService.vim.SSPIAuthentication): integrityService.vim.SSPIAuthentication;
         };
         TicketedSessionAuthentication: {
            (options?: integrityService.vim.TicketedSessionAuthentication): integrityService.vim.TicketedSessionAuthentication;
         };
         VsanClusterConfigInfoHostDefaultInfo: {
            (options?: integrityService.vim.VsanClusterConfigInfoHostDefaultInfo): integrityService.vim.VsanClusterConfigInfoHostDefaultInfo;
         };
         VsanClusterConfigInfo: {
            (options?: integrityService.vim.VsanClusterConfigInfo): integrityService.vim.VsanClusterConfigInfo;
         };
         VsanHostClusterStatusStateCompletionEstimate: {
            (options?: integrityService.vim.VsanHostClusterStatusStateCompletionEstimate): integrityService.vim.VsanHostClusterStatusStateCompletionEstimate;
         };
         VsanHostClusterStatusState: {
            (options?: integrityService.vim.VsanHostClusterStatusState): integrityService.vim.VsanHostClusterStatusState;
         };
         VsanHostClusterStatus: {
            (options?: integrityService.vim.VsanHostClusterStatus): integrityService.vim.VsanHostClusterStatus;
         };
         VsanHostConfigInfoStorageInfo: {
            (options?: integrityService.vim.VsanHostConfigInfoStorageInfo): integrityService.vim.VsanHostConfigInfoStorageInfo;
         };
         VsanHostConfigInfoClusterInfo: {
            (options?: integrityService.vim.VsanHostConfigInfoClusterInfo): integrityService.vim.VsanHostConfigInfoClusterInfo;
         };
         VsanHostConfigInfoNetworkInfoPortConfig: {
            (options?: integrityService.vim.VsanHostConfigInfoNetworkInfoPortConfig): integrityService.vim.VsanHostConfigInfoNetworkInfoPortConfig;
         };
         ArrayOfVsanHostConfigInfoNetworkInfoPortConfig: {
            (options?: integrityService.vim.ArrayOfVsanHostConfigInfoNetworkInfoPortConfig): integrityService.vim.ArrayOfVsanHostConfigInfoNetworkInfoPortConfig;
         };
         VsanHostConfigInfoNetworkInfo: {
            (options?: integrityService.vim.VsanHostConfigInfoNetworkInfo): integrityService.vim.VsanHostConfigInfoNetworkInfo;
         };
         VsanHostConfigInfo: {
            (options?: integrityService.vim.VsanHostConfigInfo): integrityService.vim.VsanHostConfigInfo;
         };
         ArrayOfVsanHostConfigInfo: {
            (options?: integrityService.vim.ArrayOfVsanHostConfigInfo): integrityService.vim.ArrayOfVsanHostConfigInfo;
         };
         VsanHostDecommissionModeObjectAction: {
            "noAction": string;
            "ensureObjectAccessibility": string;
            "evacuateAllData": string;
         };
         VsanHostDecommissionMode: {
            (options?: integrityService.vim.VsanHostDecommissionMode): integrityService.vim.VsanHostDecommissionMode;
         };
         VsanHostDiskMapResult: {
            (options?: integrityService.vim.VsanHostDiskMapResult): integrityService.vim.VsanHostDiskMapResult;
         };
         ArrayOfVsanHostDiskMapResult: {
            (options?: integrityService.vim.ArrayOfVsanHostDiskMapResult): integrityService.vim.ArrayOfVsanHostDiskMapResult;
         };
         VsanHostDiskMapping: {
            (options?: integrityService.vim.VsanHostDiskMapping): integrityService.vim.VsanHostDiskMapping;
         };
         ArrayOfVsanHostDiskMapping: {
            (options?: integrityService.vim.ArrayOfVsanHostDiskMapping): integrityService.vim.ArrayOfVsanHostDiskMapping;
         };
         VsanHostDiskResultState: {
            "inUse": string;
            "eligible": string;
            "ineligible": string;
         };
         VsanHostDiskResult: {
            (options?: integrityService.vim.VsanHostDiskResult): integrityService.vim.VsanHostDiskResult;
         };
         ArrayOfVsanHostDiskResult: {
            (options?: integrityService.vim.ArrayOfVsanHostDiskResult): integrityService.vim.ArrayOfVsanHostDiskResult;
         };
         VsanHostHealthState: {
            "unknown": string;
            "healthy": string;
            "unhealthy": string;
         };
         VsanHostIpConfig: {
            (options?: integrityService.vim.VsanHostIpConfig): integrityService.vim.VsanHostIpConfig;
         };
         VsanHostMembershipInfo: {
            (options?: integrityService.vim.VsanHostMembershipInfo): integrityService.vim.VsanHostMembershipInfo;
         };
         ArrayOfVsanHostMembershipInfo: {
            (options?: integrityService.vim.ArrayOfVsanHostMembershipInfo): integrityService.vim.ArrayOfVsanHostMembershipInfo;
         };
         VsanHostNodeState: {
            "error": string;
            "disabled": string;
            "agent": string;
            "master": string;
            "backup": string;
            "starting": string;
            "stopping": string;
            "enteringMaintenanceMode": string;
            "exitingMaintenanceMode": string;
            "decommissioning": string;
         };
         VsanDiskIssueType: {
            "nonExist": string;
            "stampMismatch": string;
            "unknown": string;
         };
         VsanHostRuntimeInfoDiskIssue: {
            (options?: integrityService.vim.VsanHostRuntimeInfoDiskIssue): integrityService.vim.VsanHostRuntimeInfoDiskIssue;
         };
         ArrayOfVsanHostRuntimeInfoDiskIssue: {
            (options?: integrityService.vim.ArrayOfVsanHostRuntimeInfoDiskIssue): integrityService.vim.ArrayOfVsanHostRuntimeInfoDiskIssue;
         };
         VsanHostRuntimeInfo: {
            (options?: integrityService.vim.VsanHostRuntimeInfo): integrityService.vim.VsanHostRuntimeInfo;
         };
         SysimageFaultFileNotFound: {
            (options?: integrityService.vim.SysimageFaultFileNotFound): integrityService.vim.SysimageFaultFileNotFound;
         };
      }
   }
   namespace integrityService {
      interface xs {
      }
      namespace xs {
         interface AnyType {
            value: string;
         }
         interface AnyURI {
            value: string;
         }
         interface Base64Binary {
            value: string;
         }
         interface Boolean {
            value: string;
         }
         interface Byte {
            value: string;
         }
         interface DateTime {
            value: string;
         }
         interface Double {
            value: string;
         }
         interface Float {
            value: string;
         }
         interface ID {
            value: string;
         }
         interface Int {
            value: string;
         }
         interface Integer {
            value: string;
         }
         interface Long {
            value: string;
         }
         interface NCName {
            value: string;
         }
         interface NegativeInteger {
            value: string;
         }
         interface NonNegativeInteger {
            value: string;
         }
         interface NonPositiveInteger {
            value: string;
         }
         interface PositiveInteger {
            value: string;
         }
         interface QName {
            value: string;
         }
         interface Short {
            value: string;
         }
         interface String {
            value: string;
         }
         interface UnsignedLong {
            value: string;
         }
      }
      interface integrity {
      }
      namespace integrity {
         enum BaselineAttributeBaselineType {
            "Patch",
            "Upgrade",
            "Configuration",
            "Extension",
         }
         enum BaselineAttributeAttribute {
            "Singleton",
            "LeafOnly",
            "NonRemediable",
         }
         interface BaselineAttribute extends integrityService.vim.DynamicData {
            targetType: string;
            targetComponent?: string;
            type: string;
            extraAttribute?: Array<string>;
         }
         interface BaselineGroupManagerBaselineGroupSpec extends integrityService.vim.DynamicData {
            name: string;
            description?: string;
            targetType: string;
            baseline?: Array<number>;
            owner?: string;
            ownerdata?: string;
         }
         interface BaselineGroupManagerBaselineGroupInfo extends integrityService.integrity.BaselineGroupManagerBaselineGroupSpec {
            key: number;
            versionNumber: number;
            lastUpdateTime?: Date;
         }
         interface ArrayOfBaselineGroupManagerBaselineGroupInfo {
            BaselineGroupManagerBaselineGroupInfo?: Array<integrityService.integrity.BaselineGroupManagerBaselineGroupInfo>;
         }
         interface BaselineGroupManagerTargetBaselineGroup extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            groupId?: Array<number>;
         }
         interface ArrayOfBaselineGroupManagerTargetBaselineGroup {
            BaselineGroupManagerTargetBaselineGroup?: Array<integrityService.integrity.BaselineGroupManagerTargetBaselineGroup>;
         }
         interface BaselineGroupManagerAssignedEntityGroup extends integrityService.vim.DynamicData {
            group: number;
            entity?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ArrayOfBaselineGroupManagerAssignedEntityGroup {
            BaselineGroupManagerAssignedEntityGroup?: Array<integrityService.integrity.BaselineGroupManagerAssignedEntityGroup>;
         }
         enum BaselineInfoContentType {
            "DYNAMIC",
            "STATIC",
            "BOTH",
            "INVALID",
         }
         interface BaselineInfo extends integrityService.vim.DynamicData {
            spec: integrityService.integrity.BaselineSpec;
            key: number;
            versionNumber: number;
            lastUpdateTime?: Date;
            contentType: string;
            builtin: boolean;
         }
         interface ArrayOfBaselineInfo {
            BaselineInfo?: Array<integrityService.integrity.BaselineInfo>;
         }
         interface BaselineManagerBaselinesSearchSpec extends integrityService.vim.DynamicData {
            inheritFromParent?: boolean;
            includeChild?: boolean;
            includeBaselineGroup?: boolean;
         }
         interface BaselineManagerTargetBaselineGroup extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            baselineId?: Array<number>;
         }
         interface ArrayOfBaselineManagerTargetBaselineGroup {
            BaselineManagerTargetBaselineGroup?: Array<integrityService.integrity.BaselineManagerTargetBaselineGroup>;
         }
         interface BaselineManagerAssignedEntityGroup extends integrityService.vim.DynamicData {
            baseline: number;
            entity?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ArrayOfBaselineManagerAssignedEntityGroup {
            BaselineManagerAssignedEntityGroup?: Array<integrityService.integrity.BaselineManagerAssignedEntityGroup>;
         }
         interface BaselineManagerTargetMissingPatchGroup extends integrityService.vim.DynamicData {
            updateId: number;
            entities?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ArrayOfBaselineManagerTargetMissingPatchGroup {
            BaselineManagerTargetMissingPatchGroup?: Array<integrityService.integrity.BaselineManagerTargetMissingPatchGroup>;
         }
         interface BaselineManagerUpdateBaselinesGroup extends integrityService.vim.DynamicData {
            update: number;
            baseline?: Array<number>;
         }
         interface ArrayOfBaselineManagerUpdateBaselinesGroup {
            BaselineManagerUpdateBaselinesGroup?: Array<integrityService.integrity.BaselineManagerUpdateBaselinesGroup>;
         }
         interface BaselineManagerUpdateGroup extends integrityService.vim.DynamicData {
            baselineId: number;
            updateId?: Array<number>;
         }
         interface ArrayOfBaselineManagerUpdateGroup {
            BaselineManagerUpdateGroup?: Array<integrityService.integrity.BaselineManagerUpdateGroup>;
         }
         interface BaselineManagerVmHWScanResult extends integrityService.vim.DynamicData {
            baseline: number;
            vm: integrityService.vim.ManagedObjectReference;
            vmHWVersion: number;
            baselineHWVersion: number;
            details?: integrityService.vim.LocalizableMessage;
         }
         interface ArrayOfBaselineManagerVmHWScanResult {
            BaselineManagerVmHWScanResult?: Array<integrityService.integrity.BaselineManagerVmHWScanResult>;
         }
         interface BaselineManagerVmToolsStatus extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            toolsStatus?: string;
         }
         interface ArrayOfBaselineManagerVmToolsStatus {
            BaselineManagerVmToolsStatus?: Array<integrityService.integrity.BaselineManagerVmToolsStatus>;
         }
         interface BaselineManagerBaselineEntityUpdateInfo extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            baselineId: number;
            baselineApplicable: boolean;
            update?: Array<number>;
         }
         interface ArrayOfBaselineManagerBaselineEntityUpdateInfo {
            BaselineManagerBaselineEntityUpdateInfo?: Array<integrityService.integrity.BaselineManagerBaselineEntityUpdateInfo>;
         }
         interface BaselineSpec extends integrityService.vim.DynamicData {
            name: string;
            description?: string;
            attribute: integrityService.integrity.BaselineAttribute;
            owner?: string;
            ownerdata?: string;
         }
         enum BaselineComplianceStatusStatus {
            "Compliant",
            "NotCompliant",
            "Unknown",
            "Incompatible",
         }
         interface BaselineComplianceStatus extends integrityService.vim.DynamicData {
            key: number;
            status: string;
         }
         interface ArrayOfBaselineComplianceStatus {
            BaselineComplianceStatus?: Array<integrityService.integrity.BaselineComplianceStatus>;
         }
         interface BaselineGroupComplianceStatus extends integrityService.vim.DynamicData {
            key: number;
            status: string;
         }
         interface ArrayOfBaselineGroupComplianceStatus {
            BaselineGroupComplianceStatus?: Array<integrityService.integrity.BaselineGroupComplianceStatus>;
         }
         interface ComplianceStatusManagerDetailedComplianceStatusSpec extends integrityService.vim.DynamicData {
            baseline: Array<number>;
         }
         interface ComplianceStatusManagerEntityBaselinesCompliance extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            status: string;
            baselineId: Array<number>;
            baselineType: string;
            lastScanTime?: Date;
            toolsUpgradeOnPowerCycle?: boolean;
         }
         interface ArrayOfComplianceStatusManagerEntityBaselinesCompliance {
            ComplianceStatusManagerEntityBaselinesCompliance?: Array<integrityService.integrity.ComplianceStatusManagerEntityBaselinesCompliance>;
         }
         interface ComplianceStatusManagerEntityComplianceCountsSummary extends integrityService.vim.DynamicData {
            notCompliantEntities: number;
            inCompatibleEntities: number;
            unknownEntities: number;
            compliantEntities: number;
         }
         interface ComplianceStatusManagerEntityBaselinesComplianceSummary extends integrityService.vim.DynamicData {
            summary: integrityService.integrity.ComplianceStatusManagerEntityComplianceCountsSummary;
            baselinesComplianceStatus: Array<integrityService.integrity.ComplianceStatusManagerEntityBaselinesCompliance>;
         }
         enum ComplianceStatusManagerUpdateStatus {
            "Missing",
            "Installed",
            "NotApplicable",
            "Unknown",
            "Staged",
            "Conflict",
            "ObsoletedByHost",
            "MissingPackage",
            "NotInstallable",
            "NewModule",
            "UnsupportedUpgrade",
            "IncompatibleHardware",
            "ConflictingNewModule",
            "InstalledRecalled",
            "NotApplicableRecalled",
            "PrerequisiteRecalled",
            "MissingRecalled",
            "NewModuleRecalled",
            "PrerequisiteRecalledInstalled",
            "IncompatibleSoftwareConfig",
         }
         interface ComplianceStatusManagerUpdateCompliantStatus extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            missingUpdate?: Array<number>;
            installedUpdate?: Array<number>;
            stagedUpdate?: Array<number>;
            notApplicableUpdate?: Array<number>;
            UnknownUpdate?: Array<number>;
            conflict?: Array<number>;
            obsoletedByHost?: Array<number>;
            missingPackage?: Array<number>;
            notInstallable?: Array<number>;
            newModule?: Array<number>;
            unSupportedUpgrade?: Array<number>;
            incompatibleHardware?: Array<number>;
            conflictingNewModule?: Array<number>;
            installedRecalled?: Array<number>;
            notApplicableRecalled?: Array<number>;
            prerequisiteRecalled?: Array<number>;
            missingRecalled?: Array<number>;
            newModuleRecalled?: Array<number>;
            prerequisiteRecalledInstalled?: Array<number>;
            incompatibleSoftwareConfig?: Array<number>;
         }
         interface ArrayOfComplianceStatusManagerUpdateCompliantStatus {
            ComplianceStatusManagerUpdateCompliantStatus?: Array<integrityService.integrity.ComplianceStatusManagerUpdateCompliantStatus>;
         }
         interface ComplianceStatusManagerBaselineUpdateStatus extends integrityService.vim.DynamicData {
            baselineId: number;
            updateStatus?: Array<integrityService.integrity.ComplianceStatusManagerUpdateCompliantStatus>;
         }
         interface ArrayOfComplianceStatusManagerBaselineUpdateStatus {
            ComplianceStatusManagerBaselineUpdateStatus?: Array<integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus>;
         }
         interface ComplianceStatusManagerUpdateStatusSummary extends integrityService.vim.DynamicData {
            status?: string;
            patchCount?: number;
            upgradeCount?: number;
            stagedPatchCount?: number;
            stagedUpgradeCount?: number;
            extensionCount?: number;
            stagedExtensionCount?: number;
         }
         interface ArrayOfComplianceStatusManagerUpdateStatusSummary {
            ComplianceStatusManagerUpdateStatusSummary?: Array<integrityService.integrity.ComplianceStatusManagerUpdateStatusSummary>;
         }
         interface ComplianceStatusManagerEntityComplianceStatus extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            baseline?: Array<number>;
            lastScanTime?: Date;
            updateStatus?: Array<integrityService.integrity.ComplianceStatusManagerUpdateStatusSummary>;
            toolsUpgradeOnPowerCycle?: boolean;
         }
         interface ArrayOfComplianceStatusManagerEntityComplianceStatus {
            ComplianceStatusManagerEntityComplianceStatus?: Array<integrityService.integrity.ComplianceStatusManagerEntityComplianceStatus>;
         }
         interface ComplianceStatusManagerEntityStatusSummary extends integrityService.vim.DynamicData {
            entityStatus?: Array<integrityService.integrity.ComplianceStatusManagerEntityComplianceStatus>;
            summary?: Array<integrityService.integrity.ComplianceStatusManagerUpdateStatusSummary>;
         }
         interface GuestRemediationRollbackOption extends integrityService.vim.DynamicData {
            createSnapshot: boolean;
            takeMemoryDump: boolean;
            hoursToKeepSnapshot?: number;
            snapshotName?: string;
            snapshotDesc?: string;
         }
         enum GuestRemediationScheduleOptionActionTime {
            "Immediate",
            "Later",
            "Notification",
         }
         interface GuestRemediationScheduleOption extends integrityService.vim.DynamicData {
            powerOpOffline: string;
            powerOpOfflineTime?: Date;
            powerOpOnline: string;
            powerOpOnlineTime?: Date;
            includeSuspendedVM: boolean;
            powerOpSuspended: string;
            powerOpSuspendedTime?: Date;
            scheduledTaskName?: string;
            scheduledTaskDescription?: string;
            upgradeToolsOnNextReboot?: boolean;
         }
         enum HostRemediationScheduleOptionFailureAction {
            "FailTask",
            "Retry",
         }
         enum HostRemediationScheduleOptionPreRemediationPowerAction {
            "PowerOffVMs",
            "SuspendVMs",
            "DoNotChangeVMsPowerState",
         }
         interface HostRemediationScheduleOption extends integrityService.vim.DynamicData {
            updateHostTime?: Date;
            evacuationTimeout?: number;
            failureAction: string;
            preRemediationPowerAction?: string;
            retryDelay?: number;
            numberOfRetries?: number;
            scheduledTaskName?: string;
            scheduledTaskDescription?: string;
            disconnectRemovableDevices?: boolean;
            disableDpm?: boolean;
            disableHac?: boolean;
            disableFt?: boolean;
            concurrentRemediationInCluster?: boolean;
            allowStatelessRemediation?: boolean;
            evacuateOfflineVMs?: boolean;
            maxHostsForParallelRemediationInCluster?: number;
         }
         interface ConfigSpec extends integrityService.vim.DynamicData {
            guestRemediationRollbackOption: integrityService.integrity.GuestRemediationRollbackOption;
            hostRemediationScheduleOption: integrityService.integrity.HostRemediationScheduleOption;
            hostUpgradeOptions: Array<integrityService.integrity.HostUpgradeOptionManagerOptions>;
         }
         interface VciDVSOption extends integrityService.vim.DynamicData {
            feedURL: string;
         }
         interface VciDVSScanOption extends integrityService.integrity.VciDVSOption {
         }
         interface VciDVSScanSpec extends integrityService.vim.DynamicData {
            softwareUpdateUniqueId: Array<string>;
            option?: integrityService.integrity.VciDVSScanOption;
         }
         interface VciDVSStagingOption extends integrityService.integrity.VciDVSOption {
         }
         interface VciDVSStagingSpec extends integrityService.vim.DynamicData {
            softwareUpdateUniqueId: Array<string>;
            option?: integrityService.integrity.VciDVSStagingOption;
         }
         interface VciDVSRemediationOption extends integrityService.integrity.VciDVSOption {
         }
         interface VciDVSRemediationSpec extends integrityService.vim.DynamicData {
            softwareUpdateUniqueId: Array<string>;
            option: integrityService.integrity.VciDVSRemediationOption;
         }
         enum VciDVSUpdateStatus {
            "Missing",
            "Installed",
            "NotApplicable",
            "Unknown",
            "Staged",
            "Conflict",
            "ObsoletedByHost",
         }
         enum VciDVSResult {
            "Success",
            "Fail",
         }
         interface VciDVSUpdateComplianceStatus extends integrityService.vim.DynamicData {
            softwareUpdateUniqueId: string;
            status: string;
            result: string;
            fault?: integrityService.vim.LocalizedMethodFault;
            replacementUpdateUniqueId?: string;
         }
         interface ArrayOfVciDVSUpdateComplianceStatus {
            VciDVSUpdateComplianceStatus?: Array<integrityService.integrity.VciDVSUpdateComplianceStatus>;
         }
         interface VciDVSUpdateComplianceStatusGroup extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            status?: Array<integrityService.integrity.VciDVSUpdateComplianceStatus>;
         }
         interface ArrayOfVciDVSUpdateComplianceStatusGroup {
            VciDVSUpdateComplianceStatusGroup?: Array<integrityService.integrity.VciDVSUpdateComplianceStatusGroup>;
         }
         interface VciDVSUpdateComplianceStatusSpec extends integrityService.vim.DynamicData {
            operationId: Array<string>;
            softwareUpdateUniqueId: Array<string>;
         }
         interface BasicComplianceStatus extends integrityService.vim.DynamicData {
            key: number;
            status: string;
            reason?: Array<integrityService.vim.LocalizableMessage>;
         }
         enum EulaManagerEulaStatus {
            "EULA_NOTAPPLICABLE",
            "EULA_ACCEPTED",
            "EULA_NOTACCEPTED",
         }
         enum FileUploadManagerFileFunctionalType {
            "Upgrade",
            "Patch",
            "StateElement",
         }
         enum FileUploadManagerOperationType {
            "Upload",
            "Confirm",
            "UploadAndConfirm",
            "Cancel",
         }
         interface FileUploadManagerFileUploadSpec extends integrityService.vim.DynamicData {
            fileFunctionalType: string;
            filePath: string;
            opType: string;
            sessionId: string;
         }
         interface FileUploadManagerFileUploadResponse extends integrityService.vim.DynamicData {
            type: string;
            sessionId: string;
            details?: any;
         }
         interface PatchBundleDetail extends integrityService.vim.DynamicData {
            description: string;
            updates: Array<integrityService.integrity.SoftwareUpdateInfo>;
         }
         interface UpgradePackageDetail extends integrityService.vim.DynamicData {
            release: integrityService.integrity.UpgradeReleaseManagerUpgradeRelease;
            upgrade: integrityService.integrity.UpgradeProductManagerUpgradeProduct;
         }
         interface HostUpgradeBaselineSpec extends integrityService.integrity.UpgradeBaselineSpec {
            upgradeReleaseKey: string;
         }
         interface HostUpgradeBaselineInfo extends integrityService.integrity.UpgradeBaselineInfo {
         }
         interface HostUpgradeOptionManagerOptions extends integrityService.vim.DynamicData {
            ignore3rdPartyModules?: boolean;
         }
         interface ArrayOfHostUpgradeOptionManagerOptions {
            HostUpgradeOptionManagerOptions?: Array<integrityService.integrity.HostUpgradeOptionManagerOptions>;
         }
         interface IntegrityDescription extends integrityService.vim.DynamicData {
            reasonCode: Array<integrityService.integrity.VumElementDescription>;
            complianceStatus: Array<integrityService.integrity.VumElementDescription>;
            contentType: Array<integrityService.integrity.VumElementDescription>;
            updateStatus: Array<integrityService.integrity.VumElementDescription>;
            impactLevel: Array<integrityService.integrity.VumElementDescription>;
            hostUpdateCategory: Array<integrityService.integrity.VumElementDescription>;
            guestActionTime: Array<integrityService.integrity.VumElementDescription>;
            hostFailureAction: Array<integrityService.integrity.VumElementDescription>;
            preRemediationPowerAction: Array<integrityService.integrity.VumElementDescription>;
            updateType: Array<integrityService.integrity.VumElementDescription>;
            updateTargetType: Array<integrityService.integrity.VumElementDescription>;
            baselineType: Array<integrityService.integrity.VumElementDescription>;
            baselineAttribute: Array<integrityService.integrity.VumElementDescription>;
            acceptanceLevel: Array<integrityService.integrity.VumElementDescription>;
         }
         enum MissingUpdateReasonCode {
            "fileOutOfDate",
            "regOutOfDate",
         }
         interface MissingUpdate extends integrityService.integrity.Vulnerability {
            reason?: Array<string>;
            update: integrityService.integrity.SoftwareUpdateInfo;
            remediationStatus: number;
         }
         interface NewUpdateConfigSpec extends integrityService.vim.DynamicData {
            enabled: boolean;
            name: string;
            description: string;
            newUpdateScheduler?: integrityService.integrity.Scheduler;
            useSmartDownload?: boolean;
            emailNotificationList?: string;
         }
         enum PlatformInfoOsFamily {
            "NO_OS",
            "WINDOWS",
            "LINUX",
            "ESX",
            "EESX",
            "OTHER",
         }
         interface PlatformInfo extends integrityService.vim.DynamicData {
            family: string;
            displayName: string;
            version: string;
            locale: string;
         }
         interface ArrayOfPlatformInfo {
            PlatformInfo?: Array<integrityService.integrity.PlatformInfo>;
         }
         interface Scheduler extends integrityService.vim.DynamicData {
            activeTime?: Date;
            expireTime?: Date;
         }
         interface AfterStartupScheduler extends integrityService.integrity.Scheduler {
            minute: number;
         }
         interface OnceScheduler extends integrityService.integrity.Scheduler {
            runAt?: Date;
         }
         interface RecurrentScheduler extends integrityService.integrity.Scheduler {
            interval: number;
         }
         interface HourlyScheduler extends integrityService.integrity.RecurrentScheduler {
            minute: number;
         }
         interface DailyScheduler extends integrityService.integrity.HourlyScheduler {
            hour: number;
         }
         interface WeeklyScheduler extends integrityService.integrity.DailyScheduler {
            sunday: boolean;
            monday: boolean;
            tuesday: boolean;
            wednesday: boolean;
            thursday: boolean;
            friday: boolean;
            saturday: boolean;
         }
         interface MonthlyScheduler extends integrityService.integrity.DailyScheduler {
         }
         interface MonthlyByDayScheduler extends integrityService.integrity.MonthlyScheduler {
            day: number;
         }
         enum MonthlyByWeekdaySchedulerDayOfWeek {
            "sunday",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
         }
         enum MonthlyByWeekdaySchedulerWeekOfMonth {
            "first",
            "second",
            "third",
            "fourth",
            "last",
         }
         interface MonthlyByWeekdayScheduler extends integrityService.integrity.MonthlyScheduler {
            offset: integrityService.integrity.MonthlyByWeekdaySchedulerWeekOfMonth;
            weekday: integrityService.integrity.MonthlyByWeekdaySchedulerDayOfWeek;
         }
         interface IntegrityUserSession extends integrityService.vim.DynamicData {
            key: string;
            userName: string;
            locale?: string;
         }
         interface SoftwareUpdateDetail extends integrityService.vim.DynamicData {
            status: number;
            idByVendor?: Array<string>;
            detailsUrl?: string;
            description: string;
            vendor?: string;
            installSeparately: boolean;
            affectedComponent?: Array<string>;
            binaryPath?: string;
            installFlags?: string;
            patchSize?: number;
            bugtraqId?: Array<string>;
            cveId?: Array<string>;
         }
         interface ServicePackDetail extends integrityService.integrity.SoftwareUpdateDetail {
            spId: number;
         }
         enum SoftwareUpdateInfoUpdateType {
            "Other",
            "OperatingSystem",
            "Security",
         }
         enum SoftwareUpdateInfoImpactLevel {
            "Low",
            "Moderate",
            "Important",
            "Critical",
         }
         enum SoftwareUpdateInfoTargetType {
            "VM",
            "HOST",
            "VA",
         }
         enum SoftwareUpdateInfoTargetComponent {
            "HOST_GENERAL",
            "HOST_THIRDPARTY",
            "VM_GENERAL",
            "VM_TOOLS",
            "VM_HARDWAREVERSION",
            "VA_GENERAL",
         }
         enum SoftwareUpdateInfoHostUpdateCategory {
            "SecurityFix",
            "BugFix",
            "Enhancement",
            "Recall",
            "RecallFix",
            "Info",
            "Misc",
         }
         interface SoftwareUpdateInfo extends integrityService.vim.DynamicData {
            key: number;
            idByVendor?: string;
            releaseDate?: Date;
            title: string;
            language: string;
            updateType: string;
            severity: string;
            os?: Array<integrityService.integrity.PlatformInfo>;
            targetType: string;
            bundleType?: string;
            installationImpact?: Array<string>;
            lastUpdateTime?: Date;
            vendor?: string;
            recalled?: boolean;
            hostUpdateCategory?: string;
         }
         interface ArrayOfSoftwareUpdateInfo {
            SoftwareUpdateInfo?: Array<integrityService.integrity.SoftwareUpdateInfo>;
         }
         interface NotificationInfo extends integrityService.integrity.SoftwareUpdateInfo {
            notificationContent?: string;
            isHTML: boolean;
         }
         interface ArrayOfNotificationInfo {
            NotificationInfo?: Array<integrityService.integrity.NotificationInfo>;
         }
         interface SoftwareUpdate extends integrityService.vim.DynamicData {
            info: integrityService.integrity.SoftwareUpdateInfo;
            detail: integrityService.integrity.SoftwareUpdateDetail;
         }
         interface ArrayOfSoftwareUpdate {
            SoftwareUpdate?: Array<integrityService.integrity.SoftwareUpdate>;
         }
         enum SoftwareUpdateURLURLType {
            "VMWindowsPatches",
            "VMUnixPatches",
            "ESX3xHostPatches",
            "ESX4xHostPatches",
            "ThirdPartyHostPatches",
            "VAUpgrades",
            "ThirdPartyVAUpgrades",
            "IntranetPatchSource",
            "Unknown",
         }
         interface SoftwareUpdateURL extends integrityService.vim.DynamicData {
            url: string;
            description: string;
            systemDefined: boolean;
            urlTypes: Array<string>;
            enabled: boolean;
         }
         interface ArrayOfSoftwareUpdateURL {
            SoftwareUpdateURL?: Array<integrityService.integrity.SoftwareUpdateURL>;
         }
         interface URLTestResult extends integrityService.vim.DynamicData {
            url: string;
            testResult: boolean;
            urlTypes?: Array<string>;
            reason?: integrityService.vim.LocalizableMessage;
         }
         interface BaselineSoftwareUpdates extends integrityService.vim.DynamicData {
            query?: integrityService.integrity.UpdateManagerSearchSpec;
            updateId?: Array<number>;
            excludedUpdateId?: Array<number>;
         }
         interface UpdateBaselineSpec extends integrityService.integrity.BaselineSpec {
            updates?: integrityService.integrity.BaselineSoftwareUpdates;
         }
         interface UpdateBaselineInfo extends integrityService.integrity.BaselineInfo {
            numberOfUpdates: number;
         }
         interface UpdateComplianceStatus extends integrityService.integrity.BasicComplianceStatus {
         }
         interface ArrayOfUpdateComplianceStatus {
            UpdateComplianceStatus?: Array<integrityService.integrity.UpdateComplianceStatus>;
         }
         interface UpdateComplianceStatusReport extends integrityService.vim.DynamicData {
            lastScanTime?: Date;
            detailStatuses?: Array<integrityService.integrity.UpdateComplianceStatus>;
         }
         interface VcIntegrityOption extends integrityService.vim.DynamicData {
            reason?: string;
            targetVm?: boolean;
         }
         interface VcIntegrityScanOption extends integrityService.integrity.VcIntegrityOption {
         }
         interface VcIntegrityStageOption extends integrityService.integrity.VcIntegrityOption {
         }
         interface VcIntegrityRemediateOption extends integrityService.integrity.VcIntegrityOption {
            guestScheduler?: integrityService.integrity.GuestRemediationScheduleOption;
            guestRollback?: integrityService.integrity.GuestRemediationRollbackOption;
            hostScheduler?: integrityService.integrity.HostRemediationScheduleOption;
            hostUpgradeOptions?: Array<integrityService.integrity.HostUpgradeOptionManagerOptions>;
            entityToolsUpgradeOption?: Array<integrityService.integrity.EntityToolsUpgradeOption>;
            toolsUpgradeOnPowerCycle?: boolean;
         }
         interface RecallFixDetail extends integrityService.vim.DynamicData {
            recallID?: number;
            recallResolutions?: Array<number>;
         }
         interface ArrayOfRecallFixDetail {
            RecallFixDetail?: Array<integrityService.integrity.RecallFixDetail>;
         }
         interface PatchRecallDetailInfo extends integrityService.vim.DynamicData {
            affectedBaselines?: Array<integrityService.integrity.BaselineManagerUpdateBaselinesGroup>;
            affectedHosts?: Array<integrityService.vim.ManagedObjectReference>;
            recalledIDs?: Array<number>;
            resolutions?: Array<integrityService.integrity.RecallFixDetail>;
         }
         interface EntityToolsUpgradeOption extends integrityService.vim.DynamicData {
            toolsUpgradeOnPowerCycle?: boolean;
            entity: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfEntityToolsUpgradeOption {
            EntityToolsUpgradeOption?: Array<integrityService.integrity.EntityToolsUpgradeOption>;
         }
         interface UpdateManagerSearchSpec extends integrityService.vim.DynamicData {
            searchPhrases?: string;
            language?: Array<string>;
            updateType?: Array<string>;
            hostUpdateCategory?: Array<string>;
            severity?: Array<string>;
            vendor?: Array<string>;
            product?: Array<string>;
            targetType?: Array<string>;
            startTime?: Date;
            endTime?: Date;
            failOnTooManyUpdates: boolean;
         }
         interface UpdateManagerScanType extends integrityService.vim.DynamicData {
            type: string;
            targetComponent: string;
         }
         interface ArrayOfUpdateManagerScanType {
            UpdateManagerScanType?: Array<integrityService.integrity.UpdateManagerScanType>;
         }
         interface UpdateManagerScanSpec extends integrityService.vim.DynamicData {
            scanTypes: Array<integrityService.integrity.UpdateManagerScanType>;
            baselinegroup?: number;
            baselineId?: Array<number>;
            updateId?: Array<number>;
            option?: integrityService.integrity.VcIntegrityScanOption;
         }
         interface UpdateManagerStageSpec extends integrityService.vim.DynamicData {
            baselineGroupUnit?: integrityService.integrity.UpdateManagerBaselineGroupUnit;
            baselineId?: Array<number>;
            excludedUpdateId?: Array<number>;
            option: integrityService.integrity.VcIntegrityStageOption;
         }
         interface UpdateManagerBaselineGroupUnit extends integrityService.vim.DynamicData {
            baselinegroup: number;
            baselineSubSet?: Array<number>;
         }
         interface UpdateManagerRemediationSpec extends integrityService.vim.DynamicData {
            baselineGroupUnit?: integrityService.integrity.UpdateManagerBaselineGroupUnit;
            baselineId?: Array<number>;
            excludedUpdateId?: Array<number>;
            option: integrityService.integrity.VcIntegrityRemediateOption;
         }
         interface UpdateManagerPrecheckResult extends integrityService.vim.DynamicData {
            cluster: string;
            host?: string;
            vm?: string;
            problems: Array<integrityService.vim.LocalizableMessage>;
            resolutions: Array<integrityService.vim.LocalizableMessage>;
         }
         interface ArrayOfUpdateManagerPrecheckResult {
            UpdateManagerPrecheckResult?: Array<integrityService.integrity.UpdateManagerPrecheckResult>;
         }
         interface UpdateManagerPrecheckResults extends integrityService.vim.DynamicData {
            results?: Array<integrityService.integrity.UpdateManagerPrecheckResult>;
         }
         interface UpdateManagerUpdateManagerProductDescription extends integrityService.integrity.VumElementDescription {
            targetType: string;
            vendor: string;
         }
         interface ArrayOfUpdateManagerUpdateManagerProductDescription {
            UpdateManagerUpdateManagerProductDescription?: Array<integrityService.integrity.UpdateManagerUpdateManagerProductDescription>;
         }
         interface UpgradeBaselineSpec extends integrityService.integrity.BaselineSpec {
            upgradeTo?: string;
            upgradeToVersion: string;
         }
         interface UpgradeBaselineInfo extends integrityService.integrity.BaselineInfo {
         }
         interface UpgradeComplianceStatus extends integrityService.integrity.BasicComplianceStatus {
            currentVersion?: string;
         }
         interface ArrayOfUpgradeComplianceStatus {
            UpgradeComplianceStatus?: Array<integrityService.integrity.UpgradeComplianceStatus>;
         }
         interface UpgradeComplianceStatusReport extends integrityService.vim.DynamicData {
            lastScanTime?: Date;
            detailStatuses?: Array<integrityService.integrity.UpgradeComplianceStatus>;
         }
         enum UpgradeProductManagerUpgradeProductType {
            "Host",
            "VirtualAppliance",
            "VirtualMachineHardware",
            "VirtualMachineTools",
         }
         enum UpgradeProductManagerAcceptanceLevel {
            "Certified",
            "Accepted",
            "Partner",
            "Community",
         }
         interface UpgradeProductManagerSoftwarePackage extends integrityService.vim.DynamicData {
            name?: string;
            vendor?: string;
            version?: string;
            size?: number;
            acceptanceLevel?: string;
            dateOfRelease?: Date;
         }
         interface ArrayOfUpgradeProductManagerSoftwarePackage {
            UpgradeProductManagerSoftwarePackage?: Array<integrityService.integrity.UpgradeProductManagerSoftwarePackage>;
         }
         interface UpgradeProductManagerUpgradeProduct extends integrityService.vim.DynamicData {
            type: string;
            key: string;
            name: string;
            vendor?: string;
            edition?: string;
            version?: string;
            locale?: string;
            build?: number;
            profileName?: string;
            dateOfRelease?: Date;
            digest?: string;
            acceptanceLevel?: string;
            softwarePackages?: Array<integrityService.integrity.UpgradeProductManagerSoftwarePackage>;
            family?: string;
            path?: string;
            upgradeReleaseKey?: string;
         }
         interface ArrayOfUpgradeProductManagerUpgradeProduct {
            UpgradeProductManagerUpgradeProduct?: Array<integrityService.integrity.UpgradeProductManagerUpgradeProduct>;
         }
         interface UpgradeReleaseManagerUpgradeRelease extends integrityService.vim.DynamicData {
            key: string;
            displayName: string;
         }
         interface ArrayOfUpgradeReleaseManagerUpgradeRelease {
            UpgradeReleaseManagerUpgradeRelease?: Array<integrityService.integrity.UpgradeReleaseManagerUpgradeRelease>;
         }
         interface VUMTaskManagerVUMTaskInfo extends integrityService.vim.DynamicData {
            vcTask: integrityService.vim.ManagedObjectReference;
            result?: any;
            error?: integrityService.vim.LocalizedMethodFault;
         }
         interface VcIntegrityInternetConnectionResult extends integrityService.vim.DynamicData {
            url: string;
            success: boolean;
            errMessage?: string;
         }
         interface ArrayOfVcIntegrityInternetConnectionResult {
            VcIntegrityInternetConnectionResult?: Array<integrityService.integrity.VcIntegrityInternetConnectionResult>;
         }
         interface VcIntegrityContent extends integrityService.vim.DynamicData {
            propertyCollector: integrityService.vim.ManagedObjectReference;
            baselineManager?: integrityService.vim.ManagedObjectReference;
            complianceStatusManager?: integrityService.vim.ManagedObjectReference;
            sessionManager?: integrityService.vim.ManagedObjectReference;
            scheduledTaskManager?: integrityService.vim.ManagedObjectReference;
            updateManager?: integrityService.vim.ManagedObjectReference;
            about: integrityService.vim.AboutInfo;
            optionManager?: integrityService.vim.ManagedObjectReference;
            baselineGroupManager?: integrityService.vim.ManagedObjectReference;
            upgradeProductManager?: integrityService.vim.ManagedObjectReference;
            upgradeReleaseManager?: integrityService.vim.ManagedObjectReference;
            virtApplianceManager?: integrityService.vim.ManagedObjectReference;
            fileUploadManager?: integrityService.vim.ManagedObjectReference;
            taskManager?: integrityService.vim.ManagedObjectReference;
            hostUpgradeOptionManager?: integrityService.vim.ManagedObjectReference;
            eulaManager?: integrityService.vim.ManagedObjectReference;
         }
         interface VirtApplianceInfo extends integrityService.vim.DynamicData {
            vendorUuid: string;
            productRid: string;
            vendorName: string;
            productName: string;
            version: string;
            versionString: string;
            serialNumber: string;
         }
         interface ArrayOfVirtApplianceInfo {
            VirtApplianceInfo?: Array<integrityService.integrity.VirtApplianceInfo>;
         }
         interface Vulnerability extends integrityService.vim.DynamicData {
         }
         interface VumElementDescription extends integrityService.vim.DynamicData {
            label: string;
            summary: string;
            key: string;
         }
         interface ArrayOfVumElementDescription {
            VumElementDescription?: Array<integrityService.integrity.VumElementDescription>;
         }
         interface BaselinesAttachedToRelease extends integrityService.integrity.VcIntegrityFault {
         }
         interface CheckPXEHostFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface ClusterConfigRestoreFailure extends integrityService.integrity.VcIntegrityFault {
            cluster: string;
         }
         interface ClusterRemediationPrecheckFailure extends integrityService.integrity.RemediateFailure {
            host?: string;
         }
         interface ConfigInfoFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
         }
         interface ConflictedBaselines extends integrityService.integrity.VcIntegrityFault {
         }
         interface DVSRemediateFailure extends integrityService.integrity.VciDVSFault {
            reason?: string;
         }
         interface DVSScanFailure extends integrityService.integrity.VciDVSFault {
            reason?: string;
         }
         interface DVSStageFailure extends integrityService.integrity.VciDVSFault {
            reason?: string;
         }
         interface DVSUpdateDownloadFailure extends integrityService.integrity.VciDVSFault {
            site?: string;
            errorCode?: number;
            errorDesc?: string;
         }
         interface EnterMaintenanceModeFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorBundleDownloadFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorBundleFormatFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorConfigFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorDatabaseFormatFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorDatabaseIOFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorDependencyFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorFileIOFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorInvalidOptionFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorLockingFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorMaintenanceModeFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorMetadataDownloadFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorMetadataFormatFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorNoMatchFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorNotRootErrorFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorPackageManagerFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorPostScriptFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorUnhandledExceptionFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorUnsatisfiedDependenciesFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorUnsupportedCommandFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibDownloadFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibFormatFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibIOFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibSigDigestFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibSigFormatFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibSigInvalidFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibSigMissingFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVibSigVersionFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface EsxupdateErrorVisorSetupFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface FileDownloadFailure extends integrityService.integrity.VcIntegrityFault {
            filePath: string;
         }
         interface FileUploadInvalidPackage extends integrityService.integrity.VcIntegrityFault {
         }
         interface FileUploadNoSessionMatch extends integrityService.integrity.VcIntegrityFault {
         }
         interface FileUploadNotEnoughSpace extends integrityService.integrity.VcIntegrityFault {
         }
         interface FileUploadUnsupportedFileLocation extends integrityService.integrity.VcIntegrityFault {
         }
         interface FileUploadUnsupportedFileType extends integrityService.integrity.VcIntegrityFault {
         }
         interface GAInstallFailure extends integrityService.integrity.VcIntegrityFault {
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface GuestInfoFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
         }
         interface HostCommunicationFault extends integrityService.integrity.VcIntegrityFault {
            host: integrityService.vim.ManagedObjectReference;
         }
         interface HostGetInfoFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostInMModeFault extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchConflictDependenciesFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchConflictPackagesFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostPatchConflictPatchesFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostPatchConflictVibsFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostPatchCycleDetectedFailure extends integrityService.integrity.VcIntegrityFault {
            cycle?: string;
         }
         interface HostPatchDnsResolveFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostPatchESXUpdateFailure extends integrityService.integrity.VcIntegrityFault {
            errorCodes?: string;
         }
         interface HostPatchEnterMmodeFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchEsxFileDownloadFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchExitMmodeFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchInputRecalledFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostPatchInvalidBundle extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchInvalidVendorCode extends integrityService.integrity.VcIntegrityFault {
            vendor?: string;
         }
         interface HostPatchMetadataCorruptFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchMetadataNotFoundFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchNoBootTime extends integrityService.integrity.VcIntegrityFault {
            host?: string;
         }
         interface HostPatchNotConnectedFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchNotHostEntityFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchNotInstallableFailure extends integrityService.integrity.VcIntegrityFault {
            patches?: string;
         }
         interface HostPatchNotSupportedHostVersionFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchNullRefFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchOutdatedMetadataImport extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchPowerStateFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchPrerequisiteRecalledFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostPatchPxeRebootSkipFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchRebootFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchRebootReconnectFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchReconnectFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchRestoreVmFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostPatchTaskTimedOutFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostPatchUpgradeTaskTimedOutFailure extends integrityService.integrity.HostPatchTaskTimedOutFailure {
         }
         interface HostPatchVibDownloadFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeBootTimeUnsetFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeChecksumFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeComponentFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeConflict extends integrityService.integrity.VcIntegrityFault {
            host?: string;
            version?: string;
         }
         interface HostUpgradeConflictPackagesFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostUpgradeConflictVibsFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface HostUpgradeCorruptPackage extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeDeployAgentFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeDuplicatePackage extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeGrubUpdateFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeInaccessibleDatastore extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeIncompatibleHardware extends integrityService.integrity.RemediateFailure {
            hostName?: string;
         }
         interface HostUpgradeIncompatibleSoftwareConfig extends integrityService.integrity.RemediateFailure {
            hostName?: string;
         }
         interface HostUpgradeIncorrectPackage extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeInvalidPackage extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeLicenseFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeMissingPackage extends integrityService.integrity.VcIntegrityFault {
            host?: string;
            version?: string;
         }
         interface HostUpgradeNfcCopyFailure extends integrityService.integrity.VcIntegrityFault {
            hostName?: string;
         }
         interface HostUpgradeNoRolledBack extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeNoSpaceOnDatastore extends integrityService.integrity.RemediateFailure {
            requiredSpace?: number;
         }
         interface HostUpgradeNotEnoughSpace extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeRebootFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeRolledBack extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeRunScriptFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeStageFailure extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeTimeout extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeUnableToPersistPackage extends integrityService.integrity.VcIntegrityFault {
         }
         interface HostUpgradeUnexpectedHostVersion extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeUnsuitableDatastores extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeUnsupported extends integrityService.integrity.VcIntegrityFault {
            host?: string;
         }
         interface HostUpgradeUnsupportedDatastore extends integrityService.integrity.RemediateFailure {
         }
         interface HostUpgradeUnsupportedRelease extends integrityService.integrity.VcIntegrityFault {
         }
         interface IgnoreErrorInChainFault extends integrityService.integrity.VcIntegrityFault {
            errorCode: number;
         }
         interface IncompatibleBaselineFault extends integrityService.integrity.RemediateFailure {
            vm: string;
         }
         interface IncompatibleTools extends integrityService.integrity.VcIntegrityFault {
            installedVersion?: number;
            requiredVersion?: number;
         }
         interface IncompatibleUMDSFault extends integrityService.integrity.VcIntegrityFault {
            folder?: string;
         }
         interface IncompatibleVc extends integrityService.integrity.VcIntegrityFault {
         }
         interface InvalidHostUpdateLevel extends integrityService.integrity.VcIntegrityFault {
            host?: string;
         }
         interface InvalidObjectName extends integrityService.integrity.VcIntegrityFault {
            name: string;
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface VciLicenseExpired extends integrityService.vim.RuntimeFault {
         }
         interface LockFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface MetadataDownloadFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface MmodeDisallowedFault extends integrityService.integrity.VcIntegrityFault {
            host?: string;
         }
         interface MultipleBaselinesAttached extends integrityService.integrity.RemediateFailure {
         }
         interface NoEntities extends integrityService.integrity.VcIntegrityFault {
         }
         interface NoLicense extends integrityService.vim.RuntimeFault {
         }
         interface NoSignatureSiteConnection extends integrityService.integrity.VcIntegrityFault {
            site?: string;
         }
         interface NoVcConnection extends integrityService.vim.RuntimeFault {
            vcServer?: string;
         }
         interface NotApplicableEulaState extends integrityService.integrity.VcIntegrityFault {
         }
         interface OperationNotAllowed extends integrityService.integrity.VcIntegrityFault {
            errorDesc?: string;
         }
         interface PowerStateRestoreFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
         }
         interface ReadOnlyObject extends integrityService.integrity.VcIntegrityFault {
            obj?: string;
         }
         interface RemediateFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface RemovableDevicesAttachedFailure extends integrityService.integrity.VcIntegrityFault {
            vms?: string;
         }
         interface ScanFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface SigUpdateNoDiskSpace extends integrityService.integrity.VcIntegrityFault {
         }
         interface SpecialVmOnHost extends integrityService.integrity.IgnoreErrorInChainFault {
            vm?: string;
            host?: string;
         }
         interface StageFailure extends integrityService.integrity.VcIntegrityFault {
            reason?: string;
         }
         interface StaleScheduledTaskFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface SysprepAccessFailure extends integrityService.integrity.VcIntegrityFault {
            vm: string;
         }
         interface TooManyBaselinegroups extends integrityService.integrity.VcIntegrityFault {
         }
         interface TooManyBaselines extends integrityService.integrity.VcIntegrityFault {
         }
         interface TooManyUpdatesFault extends integrityService.integrity.VcIntegrityFault {
            TotalUpdateCount: number;
         }
         interface ToolsAutoUpgradeUnsupported extends integrityService.integrity.VcIntegrityFault {
         }
         interface ToolsNotRunning extends integrityService.integrity.VcIntegrityFault {
         }
         interface UnsupportedHostRemediateSpecialVM extends integrityService.integrity.VcIntegrityFault {
            entity?: integrityService.vim.ManagedObjectReference;
            vm?: integrityService.vim.ManagedObjectReference;
         }
         interface UnsupportedPXEHost extends integrityService.integrity.VcIntegrityFault {
         }
         interface UnsupportedSpecialVM extends integrityService.integrity.VcIntegrityFault {
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface VAAutoUpdateTimedoutFailure extends integrityService.integrity.VcIntegrityFault {
         }
         interface VAPostInstallScriptError extends integrityService.integrity.RemediateFailure {
            errorCode: number;
         }
         interface VAPostInstallScriptTimedoutError extends integrityService.integrity.VcIntegrityFault {
         }
         interface VAPostInstallVixError extends integrityService.integrity.RemediateFailure {
         }
         interface VAPreInstallScriptError extends integrityService.integrity.RemediateFailure {
            errorCode: number;
         }
         interface VAPreInstallScriptTimedoutError extends integrityService.integrity.VcIntegrityFault {
         }
         interface VAPreInstallVixError extends integrityService.integrity.RemediateFailure {
         }
         interface VARemediateEulaNotAcceptedFault extends integrityService.integrity.RemediateFailure {
            vendor: string;
            product: string;
            targetVersion: string;
         }
         interface VARemediateSnapshotError extends integrityService.integrity.RemediateFailure {
         }
         interface VARemediateUnsupportedUpgrade extends integrityService.integrity.RemediateFailure {
         }
         interface VCVARemediationFault extends integrityService.integrity.RemediateFailure {
         }
         interface VMHWUpgradeToolsNotInstalled extends integrityService.integrity.RemediateFailure {
         }
         interface VMHWUpgradeToolsNotLatest extends integrityService.integrity.RemediateFailure {
         }
         interface VMHWUpgradeToolsUnknown extends integrityService.integrity.RemediateFailure {
         }
         interface VMHWUpgradeToolsUnmanaged extends integrityService.integrity.RemediateFailure {
         }
         interface VMHardwareRemediationFault extends integrityService.integrity.RemediateFailure {
            vm: string;
         }
         interface VMHardwareScanFault extends integrityService.integrity.ScanFailure {
            vm: string;
         }
         interface VMToolsNotInstalledOrUnmanagedFault extends integrityService.integrity.VMToolsRemediationFault {
         }
         interface VMToolsRemediationFault extends integrityService.integrity.RemediateFailure {
            vm: string;
         }
         interface VMToolsRemediationSetPolicyFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
         }
         interface VMToolsScanFault extends integrityService.integrity.ScanFailure {
            vm: string;
         }
         interface VMToolsUpgradedButRebootNotInitiated extends integrityService.integrity.VMToolsRemediationFault {
         }
         interface VcIntegrityFault extends integrityService.vim.MethodFault {
         }
         interface VciDVSFault extends integrityService.integrity.VcIntegrityFault {
         }
         interface VmFtDisabledFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
            host: string;
         }
         interface VmFtEnabledFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
            host: string;
         }
         interface VmMigrationFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
            sourceHost: string;
            destinationHost: string;
         }
         interface VmPowerOrDevicesRestoreFailure extends integrityService.integrity.VcIntegrityFault {
            cluster: string;
         }
         interface VmotionCompatibilityQueryFault extends integrityService.integrity.VcIntegrityFault {
            vm: string;
            destinationHost: string;
         }
         enum IntegrityArrayUpdateOperation {
            "add",
            "remove",
            "edit",
         }
         interface IntegrityArrayUpdateSpec extends integrityService.vim.DynamicData {
            operation: integrityService.integrity.IntegrityArrayUpdateOperation;
            removeKey?: any;
         }
         interface IntegrityBoolOption extends integrityService.integrity.IntegrityOptionType {
            supported: boolean;
            defaultValue: boolean;
         }
         interface IntegrityChoiceOption extends integrityService.integrity.IntegrityOptionType {
            choiceInfo: Array<integrityService.integrity.VumElementDescription>;
            defaultIndex?: number;
         }
         interface IntegrityFloatOption extends integrityService.integrity.IntegrityOptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface IntegrityIntOption extends integrityService.integrity.IntegrityOptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface IntegrityLongOption extends integrityService.integrity.IntegrityOptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface IntegrityOptionDef extends integrityService.vim.DynamicData {
            key: string;
            optionType: integrityService.integrity.IntegrityOptionType;
         }
         interface ArrayOfIntegrityOptionDef {
            IntegrityOptionDef?: Array<integrityService.integrity.IntegrityOptionDef>;
         }
         interface IntegrityOptionType extends integrityService.vim.DynamicData {
            valueIsReadonly?: boolean;
         }
         interface IntegrityOptionValue extends integrityService.vim.DynamicData {
            key: string;
            value?: any;
         }
         interface ArrayOfIntegrityOptionValue {
            IntegrityOptionValue?: Array<integrityService.integrity.IntegrityOptionValue>;
         }
         interface IntegrityStringOption extends integrityService.integrity.IntegrityOptionType {
            defaultValue: string;
            validCharacters?: string;
         }
         interface VaProductId extends integrityService.vim.DynamicData {
            vendorUuid: string;
            productRid: string;
         }
         enum VaUpgradeBaselineSelectorUpgradeAction {
            "DontUpgrade",
            "Latest",
            "LatestModerate",
            "LatestImportant",
            "LatestCritical",
            "SpecificVersion",
         }
         interface VaUpgradeBaselineSelector extends integrityService.vim.DynamicData {
            productId: integrityService.integrity.VaProductId;
            action: string;
            vendorName?: string;
            productName?: string;
            version?: string;
            typeConstraints?: Array<string>;
         }
         interface ArrayOfVaUpgradeBaselineSelector {
            VaUpgradeBaselineSelector?: Array<integrityService.integrity.VaUpgradeBaselineSelector>;
         }
         interface VaUpgradeBaselineSpec extends integrityService.integrity.BaselineSpec {
            selectors: Array<integrityService.integrity.VaUpgradeBaselineSelector>;
         }
         interface VaUpgradeBaselineInfo extends integrityService.integrity.BaselineInfo {
         }
         interface VaUpgradeProduct extends integrityService.integrity.UpgradeProductManagerUpgradeProduct {
            productId: integrityService.integrity.VaProductId;
            updates?: Array<integrityService.integrity.SoftwareUpdate>;
            severity?: string;
            containsNewSecurityUpdate?: boolean;
            releaseDate?: Date;
         }
         enum VaVAChangelogCategoryType {
            "Feature",
            "Security",
            "Fix",
         }
         enum VaVAChangelogSeverityType {
            "Low",
            "Moderate",
            "Important",
            "Critical",
         }
         interface VaVAChangelog extends integrityService.vim.DynamicData {
            description: string;
            category: string;
            severity: string;
            introducedVersion?: string;
            referenceType: string;
            referenceId: string;
            referenceUrl?: string;
            affectedVersions?: string;
         }
         interface ArrayOfVaVAChangelog {
            VaVAChangelog?: Array<integrityService.integrity.VaVAChangelog>;
         }
         interface VaVAUpgradeInfo extends integrityService.vim.DynamicData {
            key: number;
            productId: integrityService.integrity.VaProductId;
            vendorName: string;
            productName: string;
            version: string;
            versionString: string;
            releaseDate: Date;
            summary: string;
            contact?: string;
            changeLog?: Array<integrityService.integrity.VaVAChangelog>;
            eulaStatus: integrityService.integrity.EulaManagerEulaStatus;
         }
         interface ArrayOfVaVAUpgradeInfo {
            VaVAUpgradeInfo?: Array<integrityService.integrity.VaVAUpgradeInfo>;
         }
         interface DestroyPropertyFilterResponse {
         }
         interface CreateFilterResponse {
            returnval: integrityService.vim.ManagedObjectReference;
         }
         interface RetrievePropertiesResponse {
            returnval?: Array<integrityService.vim.ObjectContent>;
         }
         interface CheckForUpdatesResponse {
            returnval?: integrityService.vim.UpdateSet;
         }
         interface WaitForUpdatesResponse {
            returnval: integrityService.vim.UpdateSet;
         }
         interface CancelWaitForUpdatesResponse {
         }
         interface WaitForUpdatesExResponse {
            returnval?: integrityService.vim.UpdateSet;
         }
         interface RetrievePropertiesExResponse {
            returnval?: integrityService.vim.RetrieveResult;
         }
         interface ContinueRetrievePropertiesExResponse {
            returnval: integrityService.vim.RetrieveResult;
         }
         interface CancelRetrievePropertiesExResponse {
         }
         interface CreatePropertyCollectorResponse {
            returnval: integrityService.vim.ManagedObjectReference;
         }
         interface DestroyPropertyCollectorResponse {
         }
      }
      interface integrityPort {
         destroyPropertyFilter(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         createFilter(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.vim.PropertyFilterSpec, partialUpdates: boolean): Promise<integrityService.vim.ManagedObjectReference>;
         retrieveProperties(_this: integrityService.vim.ManagedObjectReference, specSet: Array<integrityService.vim.PropertyFilterSpec>): Promise<Array<integrityService.vim.ObjectContent>>;
         checkForUpdates(_this: integrityService.vim.ManagedObjectReference, version: string): Promise<integrityService.vim.UpdateSet>;
         waitForUpdates(_this: integrityService.vim.ManagedObjectReference, version: string): Promise<integrityService.vim.UpdateSet>;
         cancelWaitForUpdates(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         waitForUpdatesEx(_this: integrityService.vim.ManagedObjectReference, version: string, options: integrityService.vim.WaitOptions): Promise<integrityService.vim.UpdateSet>;
         retrievePropertiesEx(_this: integrityService.vim.ManagedObjectReference, specSet: Array<integrityService.vim.PropertyFilterSpec>, options: integrityService.vim.RetrieveOptions): Promise<integrityService.vim.RetrieveResult>;
         continueRetrievePropertiesEx(_this: integrityService.vim.ManagedObjectReference, token: string): Promise<integrityService.vim.RetrieveResult>;
         cancelRetrievePropertiesEx(_this: integrityService.vim.ManagedObjectReference, token: string): Promise<void>;
         createPropertyCollector(_this: integrityService.vim.ManagedObjectReference): Promise<integrityService.vim.ManagedObjectReference>;
         destroyPropertyCollector(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         createBaselineGroup(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.BaselineGroupManagerBaselineGroupSpec): Promise<number>;
         getBaselineGroupInfo(_this: integrityService.vim.ManagedObjectReference, id: Array<number>): Promise<Array<integrityService.integrity.BaselineGroupManagerBaselineGroupInfo>>;
         setBaselineGroupInfo(_this: integrityService.vim.ManagedObjectReference, info: integrityService.integrity.BaselineGroupManagerBaselineGroupInfo): Promise<void>;
         deleteBaselineGroup(_this: integrityService.vim.ManagedObjectReference, id: number): Promise<void>;
         assignBaselineGroupToEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, group: Array<number>): Promise<void>;
         removeBaselineGroupFromEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, group: Array<number>): Promise<void>;
         queryBaselineGroupForEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, inheritFromParent: boolean, assignedToChild: boolean): Promise<Array<integrityService.integrity.BaselineGroupManagerTargetBaselineGroup>>;
         queryAssignedEntityForBaselineGroup(_this: integrityService.vim.ManagedObjectReference, group: Array<number>): Promise<Array<integrityService.integrity.BaselineGroupManagerAssignedEntityGroup>>;
         createBaseline(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.BaselineSpec): Promise<number>;
         getBaselineInfo(_this: integrityService.vim.ManagedObjectReference, id: Array<number>): Promise<Array<integrityService.integrity.BaselineInfo>>;
         setBaselineInfo(_this: integrityService.vim.ManagedObjectReference, baseline: integrityService.integrity.BaselineInfo): Promise<void>;
         deleteBaseline(_this: integrityService.vim.ManagedObjectReference, id: number): Promise<void>;
         assignBaselinesToEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<void>;
         removeBaselinesFromEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<void>;
         queryBaselinesForEntity(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, searchCriteria: integrityService.integrity.BaselineManagerBaselinesSearchSpec): Promise<Array<integrityService.integrity.BaselineManagerTargetBaselineGroup>>;
         queryAssignedEntityForBaseline(_this: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<Array<integrityService.integrity.BaselineManagerAssignedEntityGroup>>;
         queryMissingPatchInformation(_this: integrityService.vim.ManagedObjectReference): Promise<Array<integrityService.integrity.BaselineManagerTargetMissingPatchGroup>>;
         queryBaselinesForUpdate(_this: integrityService.vim.ManagedObjectReference, update: Array<number>): Promise<Array<integrityService.integrity.BaselineManagerUpdateBaselinesGroup>>;
         queryUpdates(_this: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<Array<integrityService.integrity.BaselineManagerUpdateGroup>>;
         queryVMHWScanResult(_this: integrityService.vim.ManagedObjectReference, entities: Array<integrityService.vim.ManagedObjectReference>, baseline: number): Promise<Array<integrityService.integrity.BaselineManagerVmHWScanResult>>;
         queryVMToolsStatus(_this: integrityService.vim.ManagedObjectReference, entities: Array<integrityService.vim.ManagedObjectReference>): Promise<Array<integrityService.integrity.BaselineManagerVmToolsStatus>>;
         queryBaselinesForUpgradeRelease(_this: integrityService.vim.ManagedObjectReference, releaseKey: string): Promise<Array<integrityService.integrity.BaselineInfo>>;
         queryUpdatesForEntityBaseline(_this: integrityService.vim.ManagedObjectReference, entities: Array<integrityService.vim.ManagedObjectReference>, baseline: number): Promise<Array<integrityService.integrity.BaselineManagerBaselineEntityUpdateInfo>>;
         getComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference): Promise<integrityService.vim.ManagedObjectReference>;
         getUpdateComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.ComplianceStatusManagerDetailedComplianceStatusSpec): Promise<integrityService.vim.ManagedObjectReference>;
         queryEntityComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baselineIds: Array<number>): Promise<integrityService.integrity.ComplianceStatusManagerEntityBaselinesComplianceSummary>;
         queryUpdateStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baseline: Array<number>): Promise<Array<integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus>>;
         queryBaselineStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, selectedStatus: Array<string>, baseline: Array<number>): Promise<integrityService.integrity.ComplianceStatusManagerEntityStatusSummary>;
         queryUpdateStatusForBaselineGroup(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference, baselinegroup: number): Promise<Array<integrityService.integrity.ComplianceStatusManagerBaselineUpdateStatus>>;
         queryBaselineComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference): Promise<Array<integrityService.integrity.BaselineComplianceStatus>>;
         queryBaselineGroupComplianceStatus(_this: integrityService.vim.ManagedObjectReference, entity: integrityService.vim.ManagedObjectReference): Promise<Array<integrityService.integrity.BaselineGroupComplianceStatus>>;
         integrityDispose(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         integrityMakeSticky(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         retrieveEulaDetails(_this: integrityService.vim.ManagedObjectReference, updateId: number): Promise<Array<string>>;
         setEulaState(_this: integrityService.vim.ManagedObjectReference, updateId: number, accepted: boolean): Promise<void>;
         getEulaState(_this: integrityService.vim.ManagedObjectReference, updateId: number): Promise<integrityService.integrity.EulaManagerEulaStatus>;
         importFileTask(_this: integrityService.vim.ManagedObjectReference, fileSpec: integrityService.integrity.FileUploadManagerFileUploadSpec): Promise<integrityService.vim.ManagedObjectReference>;
         createScheduledIntegrityTask(_this: integrityService.vim.ManagedObjectReference, target: integrityService.vim.ManagedObjectReference, spec: integrityService.vim.ScheduledTaskSpec): Promise<integrityService.vim.ManagedObjectReference>;
         getScheduledIntegrityTask(_this: integrityService.vim.ManagedObjectReference, task: integrityService.vim.ManagedObjectReference): Promise<integrityService.vim.ScheduledTaskInfo>;
         reconfigureScheduledIntegrityTask(_this: integrityService.vim.ManagedObjectReference, task: integrityService.vim.ManagedObjectReference, spec: integrityService.vim.ScheduledTaskSpec): Promise<void>;
         vciLogin(_this: integrityService.vim.ManagedObjectReference, userName: string, sessionId: string, locale: string): Promise<integrityService.integrity.IntegrityUserSession>;
         vciLogout(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         vciCheckSessionActive(_this: integrityService.vim.ManagedObjectReference, sessionID: string): Promise<boolean>;
         removeStatusCollector(_this: integrityService.vim.ManagedObjectReference): Promise<void>;
         downloadUpdateSignaturesTask(_this: integrityService.vim.ManagedObjectReference, language: Array<string>): Promise<integrityService.vim.ManagedObjectReference>;
         retrieveVAFile(_this: integrityService.vim.ManagedObjectReference, relativePath: string): Promise<string>;
         checkNotificationsTask(_this: integrityService.vim.ManagedObjectReference, language: Array<string>): Promise<integrityService.vim.ManagedObjectReference>;
         getPatchRecallDetailInfo(_this: integrityService.vim.ManagedObjectReference, recallID: number): Promise<integrityService.integrity.PatchRecallDetailInfo>;
         allowLiveVibInstall(_this: integrityService.vim.ManagedObjectReference, hostMoId: integrityService.vim.ManagedObjectReference): Promise<boolean>;
         searchUpdate(_this: integrityService.vim.ManagedObjectReference, spec: integrityService.integrity.UpdateManagerSearchSpec): Promise<Array<number>>;
         getSoftwareUpdate(_this: integrityService.vim.ManagedObjectReference, updateId: Array<number>): Promise<Array<integrityService.integrity.SoftwareUpdate>>;
         deleteUpdatePackage(_this: integrityService.vim.ManagedObjectReference, updateId: number): Promise<void>;
         scanTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerScanSpec): Promise<integrityService.vim.ManagedObjectReference>;
         stageTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, leafEntity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerStageSpec): Promise<integrityService.vim.ManagedObjectReference>;
         remediateTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, leafEntity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerRemediationSpec): Promise<integrityService.vim.ManagedObjectReference>;
         configureToolsUpgradeTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, leafEntity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerRemediationSpec): Promise<integrityService.vim.ManagedObjectReference>;
         configureToolsUpgradeOptionTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>, spec: integrityService.integrity.UpdateManagerRemediationSpec): Promise<integrityService.vim.ManagedObjectReference>;
         remediatePrecheckTask(_this: integrityService.vim.ManagedObjectReference, entity: Array<integrityService.vim.ManagedObjectReference>): Promise<integrityService.vim.ManagedObjectReference>;
         queryAvailableProducts(_this: integrityService.vim.ManagedObjectReference, productType: string): Promise<Array<integrityService.integrity.UpgradeProductManagerUpgradeProduct>>;
         deleteUpgradeProduct(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<void>;
         upgradeProductsForRelease(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<Array<integrityService.integrity.UpgradeProductManagerUpgradeProduct>>;
         getUpgradeRelease(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<integrityService.integrity.UpgradeReleaseManagerUpgradeRelease>;
         checkAndGet(_this: integrityService.vim.ManagedObjectReference, productKeys: Array<string>): Promise<integrityService.integrity.UpgradeReleaseManagerUpgradeRelease>;
         deleteRelease(_this: integrityService.vim.ManagedObjectReference, key: string): Promise<void>;
         getVUMTaskInfo(_this: integrityService.vim.ManagedObjectReference, taskMO: integrityService.vim.ManagedObjectReference): Promise<integrityService.integrity.VUMTaskManagerVUMTaskInfo>;
         setConfig(_this: integrityService.vim.ManagedObjectReference, config: integrityService.integrity.ConfigSpec): Promise<void>;
         setNewUpdateConfig(_this: integrityService.vim.ManagedObjectReference, config: integrityService.integrity.NewUpdateConfigSpec): Promise<void>;
         setNewNotificationConfig(_this: integrityService.vim.ManagedObjectReference, config: integrityService.integrity.NewUpdateConfigSpec): Promise<void>;
         retrieveVcIntegrityContent(_this: integrityService.vim.ManagedObjectReference): Promise<integrityService.integrity.VcIntegrityContent>;
         vcIntegrityCurrentTime(_this: integrityService.vim.ManagedObjectReference): Promise<Date>;
         retrieveScoreBoardData(_this: integrityService.vim.ManagedObjectReference): Promise<string>;
         testInternetConnection(_this: integrityService.vim.ManagedObjectReference, proxyinfo: string, urls: Array<string>): Promise<Array<integrityService.integrity.VcIntegrityInternetConnectionResult>>;
         retrieveHostIPAddresses(_this: integrityService.vim.ManagedObjectReference): Promise<Array<string>>;
         queryIntegrityOptions(_this: integrityService.vim.ManagedObjectReference, name: Array<string>): Promise<Array<integrityService.integrity.IntegrityOptionValue>>;
         updateIntegrityOptions(_this: integrityService.vim.ManagedObjectReference, changedValue: Array<integrityService.integrity.IntegrityOptionValue>): Promise<void>;
         removeIntegrityOptions(_this: integrityService.vim.ManagedObjectReference, valueToRemove: Array<integrityService.integrity.IntegrityOptionValue>): Promise<void>;
         setUpdateURLs(_this: integrityService.vim.ManagedObjectReference, urlObj: Array<integrityService.integrity.SoftwareUpdateURL>): Promise<void>;
         deleteUpdateURLs(_this: integrityService.vim.ManagedObjectReference, url: Array<string>): Promise<void>;
         testUpdateURL(_this: integrityService.vim.ManagedObjectReference, url: string, urlType: string): Promise<integrityService.integrity.URLTestResult>;
         testUpdateDepotURL(_this: integrityService.vim.ManagedObjectReference, url: string): Promise<integrityService.integrity.URLTestResult>;
         setURLEnabledByType(_this: integrityService.vim.ManagedObjectReference, urlType: string, value: boolean): Promise<void>;
         setURLEnabledByName(_this: integrityService.vim.ManagedObjectReference, url: string, value: boolean): Promise<void>;
      }
      namespace integrityPort {
      }
      interface vim {
      }
      namespace vim {
         interface DynamicArray {
            val: Array<any>;
         }
         interface DynamicData {
         }
         interface DynamicProperty {
            name: string;
            val: any;
         }
         interface ArrayOfDynamicProperty {
            DynamicProperty?: Array<integrityService.vim.DynamicProperty>;
         }
         interface KeyAnyValue extends integrityService.vim.DynamicData {
            key: string;
            value: any;
         }
         interface ArrayOfKeyAnyValue {
            KeyAnyValue?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface LocalizableMessage extends integrityService.vim.DynamicData {
            key: string;
            arg?: Array<integrityService.vim.KeyAnyValue>;
            message?: string;
         }
         interface ArrayOfLocalizableMessage {
            LocalizableMessage?: Array<integrityService.vim.LocalizableMessage>;
         }
         interface LocalizedMethodFault extends integrityService.vim.DynamicData {
            fault: integrityService.vim.MethodFault;
            localizedMessage?: string;
         }
         interface MethodFault {
            faultCause?: integrityService.vim.LocalizedMethodFault;
            faultMessage?: Array<integrityService.vim.LocalizableMessage>;
         }
         interface ArrayOfMethodFault {
            MethodFault?: Array<integrityService.vim.MethodFault>;
         }
         interface RuntimeFault extends integrityService.vim.MethodFault {
         }
         interface HostCommunication extends integrityService.vim.RuntimeFault {
         }
         interface HostNotConnected extends integrityService.vim.HostCommunication {
         }
         interface HostNotReachable extends integrityService.vim.HostCommunication {
         }
         interface InvalidArgument extends integrityService.vim.RuntimeFault {
            invalidProperty?: string;
         }
         interface InvalidRequest extends integrityService.vim.RuntimeFault {
         }
         interface InvalidType extends integrityService.vim.InvalidRequest {
            argument?: string;
         }
         interface ManagedObjectNotFound extends integrityService.vim.RuntimeFault {
            obj: integrityService.vim.ManagedObjectReference;
         }
         interface MethodNotFound extends integrityService.vim.InvalidRequest {
            receiver: integrityService.vim.ManagedObjectReference;
            method: string;
         }
         interface NotEnoughLicenses extends integrityService.vim.RuntimeFault {
         }
         interface NotImplemented extends integrityService.vim.RuntimeFault {
         }
         interface NotSupported extends integrityService.vim.RuntimeFault {
         }
         interface RequestCanceled extends integrityService.vim.RuntimeFault {
         }
         interface SecurityError extends integrityService.vim.RuntimeFault {
         }
         interface SystemError extends integrityService.vim.RuntimeFault {
            reason: string;
         }
         interface UnexpectedFault extends integrityService.vim.RuntimeFault {
            faultName: string;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface ManagedObjectReference extends integrityService.xs.String {
            type: string;
            value: string;
         }
         interface ArrayOfString {
            string?: Array<string>;
         }
         interface ArrayOfAnyType {
            anyType?: Array<any>;
         }
         interface ArrayOfManagedObjectReference {
            ManagedObjectReference?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ArrayOfBoolean {
            boolean?: Array<boolean>;
         }
         interface ArrayOfByte {
            byte?: Array<number>;
         }
         interface ArrayOfDouble {
            double?: Array<number>;
         }
         interface ArrayOfInt {
            int?: Array<number>;
         }
         interface ArrayOfLong {
            long?: Array<number>;
         }
         interface ArrayOfShort {
            short?: Array<number>;
         }
         interface InvalidCollectorVersion extends integrityService.vim.MethodFault {
         }
         interface InvalidProperty extends integrityService.vim.MethodFault {
            name: string;
         }
         interface PropertyFilterSpec extends integrityService.vim.DynamicData {
            propSet: Array<integrityService.vim.PropertySpec>;
            objectSet: Array<integrityService.vim.ObjectSpec>;
            reportMissingObjectsInResults?: boolean;
         }
         interface ArrayOfPropertyFilterSpec {
            PropertyFilterSpec?: Array<integrityService.vim.PropertyFilterSpec>;
         }
         interface PropertySpec extends integrityService.vim.DynamicData {
            type: string;
            all?: boolean;
            pathSet?: Array<string>;
         }
         interface ArrayOfPropertySpec {
            PropertySpec?: Array<integrityService.vim.PropertySpec>;
         }
         interface ObjectSpec extends integrityService.vim.DynamicData {
            obj: integrityService.vim.ManagedObjectReference;
            skip?: boolean;
            selectSet?: Array<integrityService.vim.SelectionSpec>;
         }
         interface ArrayOfObjectSpec {
            ObjectSpec?: Array<integrityService.vim.ObjectSpec>;
         }
         interface SelectionSpec extends integrityService.vim.DynamicData {
            name?: string;
         }
         interface ArrayOfSelectionSpec {
            SelectionSpec?: Array<integrityService.vim.SelectionSpec>;
         }
         interface TraversalSpec extends integrityService.vim.SelectionSpec {
            type: string;
            path: string;
            skip?: boolean;
            selectSet?: Array<integrityService.vim.SelectionSpec>;
         }
         interface ObjectContent extends integrityService.vim.DynamicData {
            obj: integrityService.vim.ManagedObjectReference;
            propSet?: Array<integrityService.vim.DynamicProperty>;
            missingSet?: Array<integrityService.vim.MissingProperty>;
         }
         interface ArrayOfObjectContent {
            ObjectContent?: Array<integrityService.vim.ObjectContent>;
         }
         interface UpdateSet extends integrityService.vim.DynamicData {
            version: string;
            filterSet?: Array<integrityService.vim.PropertyFilterUpdate>;
            truncated?: boolean;
         }
         interface PropertyFilterUpdate extends integrityService.vim.DynamicData {
            filter: integrityService.vim.ManagedObjectReference;
            objectSet?: Array<integrityService.vim.ObjectUpdate>;
            missingSet?: Array<integrityService.vim.MissingObject>;
         }
         interface ArrayOfPropertyFilterUpdate {
            PropertyFilterUpdate?: Array<integrityService.vim.PropertyFilterUpdate>;
         }
         enum ObjectUpdateKind {
            "modify",
            "enter",
            "leave",
         }
         interface ObjectUpdate extends integrityService.vim.DynamicData {
            kind: integrityService.vim.ObjectUpdateKind;
            obj: integrityService.vim.ManagedObjectReference;
            changeSet?: Array<integrityService.vim.PropertyChange>;
            missingSet?: Array<integrityService.vim.MissingProperty>;
         }
         interface ArrayOfObjectUpdate {
            ObjectUpdate?: Array<integrityService.vim.ObjectUpdate>;
         }
         enum PropertyChangeOp {
            "add",
            "remove",
            "assign",
            "indirectRemove",
         }
         interface PropertyChange extends integrityService.vim.DynamicData {
            name: string;
            op: integrityService.vim.PropertyChangeOp;
            val?: any;
         }
         interface ArrayOfPropertyChange {
            PropertyChange?: Array<integrityService.vim.PropertyChange>;
         }
         interface MissingProperty extends integrityService.vim.DynamicData {
            path: string;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfMissingProperty {
            MissingProperty?: Array<integrityService.vim.MissingProperty>;
         }
         interface MissingObject extends integrityService.vim.DynamicData {
            obj: integrityService.vim.ManagedObjectReference;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfMissingObject {
            MissingObject?: Array<integrityService.vim.MissingObject>;
         }
         interface WaitOptions extends integrityService.vim.DynamicData {
            maxWaitSeconds?: number;
            maxObjectUpdates?: number;
         }
         interface RetrieveOptions extends integrityService.vim.DynamicData {
            maxObjects?: number;
         }
         interface RetrieveResult extends integrityService.vim.DynamicData {
            token?: string;
            objects: Array<integrityService.vim.ObjectContent>;
         }
         interface DestroyPropertyFilterRequestType {
            _this: integrityService.vim.ManagedObjectReference;
         }
         interface CreateFilterRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            spec: integrityService.vim.PropertyFilterSpec;
            partialUpdates: boolean;
         }
         interface RetrievePropertiesRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            specSet: Array<integrityService.vim.PropertyFilterSpec>;
         }
         interface CheckForUpdatesRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            version?: string;
         }
         interface WaitForUpdatesRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            version?: string;
         }
         interface CancelWaitForUpdatesRequestType {
            _this: integrityService.vim.ManagedObjectReference;
         }
         interface WaitForUpdatesExRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            version?: string;
            options?: integrityService.vim.WaitOptions;
         }
         interface RetrievePropertiesExRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            specSet: Array<integrityService.vim.PropertyFilterSpec>;
            options: integrityService.vim.RetrieveOptions;
         }
         interface ContinueRetrievePropertiesExRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            token: string;
         }
         interface CancelRetrievePropertiesExRequestType {
            _this: integrityService.vim.ManagedObjectReference;
            token: string;
         }
         interface CreatePropertyCollectorRequestType {
            _this: integrityService.vim.ManagedObjectReference;
         }
         interface DestroyPropertyCollectorRequestType {
            _this: integrityService.vim.ManagedObjectReference;
         }
         interface AboutInfo extends integrityService.vim.DynamicData {
            name: string;
            fullName: string;
            vendor: string;
            version: string;
            build: string;
            localeVersion?: string;
            localeBuild?: string;
            osType: string;
            productLineId: string;
            apiType: string;
            apiVersion: string;
            instanceUuid?: string;
            licenseProductName?: string;
            licenseProductVersion?: string;
         }
         interface AuthorizationDescription extends integrityService.vim.DynamicData {
            privilege: Array<integrityService.vim.ElementDescription>;
            privilegeGroup: Array<integrityService.vim.ElementDescription>;
         }
         interface Permission extends integrityService.vim.DynamicData {
            entity?: integrityService.vim.ManagedObjectReference;
            principal: string;
            group: boolean;
            roleId: number;
            propagate: boolean;
         }
         interface ArrayOfPermission {
            Permission?: Array<integrityService.vim.Permission>;
         }
         interface AuthorizationRole extends integrityService.vim.DynamicData {
            roleId: number;
            system: boolean;
            name: string;
            info: integrityService.vim.Description;
            privilege?: Array<string>;
         }
         interface ArrayOfAuthorizationRole {
            AuthorizationRole?: Array<integrityService.vim.AuthorizationRole>;
         }
         interface AuthorizationPrivilege extends integrityService.vim.DynamicData {
            privId: string;
            onParent: boolean;
            name: string;
            privGroupName: string;
         }
         interface ArrayOfAuthorizationPrivilege {
            AuthorizationPrivilege?: Array<integrityService.vim.AuthorizationPrivilege>;
         }
         interface PrivilegeAvailability extends integrityService.vim.DynamicData {
            privId: string;
            isGranted: boolean;
         }
         interface ArrayOfPrivilegeAvailability {
            PrivilegeAvailability?: Array<integrityService.vim.PrivilegeAvailability>;
         }
         interface EntityPrivilege extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            privAvailability: Array<integrityService.vim.PrivilegeAvailability>;
         }
         interface ArrayOfEntityPrivilege {
            EntityPrivilege?: Array<integrityService.vim.EntityPrivilege>;
         }
         interface BoolPolicy extends integrityService.vim.InheritablePolicy {
            value?: boolean;
         }
         interface Capability extends integrityService.vim.DynamicData {
            provisioningSupported: boolean;
            multiHostSupported: boolean;
            userShellAccessSupported?: boolean;
            supportedEVCMode?: Array<integrityService.vim.EVCMode>;
            networkBackupAndRestoreSupported?: boolean;
         }
         interface ClusterComputeResourceSummary extends integrityService.vim.ComputeResourceSummary {
            currentFailoverLevel: number;
            admissionControlInfo?: integrityService.vim.ClusterDasAdmissionControlInfo;
            numVmotions: number;
            targetBalance?: number;
            currentBalance?: number;
            currentEVCModeKey?: string;
            dasData?: integrityService.vim.ClusterDasData;
         }
         interface ComputeResourceSummary extends integrityService.vim.DynamicData {
            totalCpu: number;
            totalMemory: number;
            numCpuCores: number;
            numCpuThreads: number;
            effectiveCpu: number;
            effectiveMemory: number;
            numHosts: number;
            numEffectiveHosts: number;
            overallStatus: integrityService.vim.ManagedEntityStatus;
         }
         interface ComputeResourceConfigInfo extends integrityService.vim.DynamicData {
            vmSwapPlacement: string;
            spbmEnabled?: boolean;
            defaultHardwareVersionKey?: string;
         }
         enum ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState {
            "licensed",
            "unlicensed",
            "unknown",
         }
         interface ComputeResourceHostSPBMLicenseInfo extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            licenseState: integrityService.vim.ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState;
         }
         interface ArrayOfComputeResourceHostSPBMLicenseInfo {
            ComputeResourceHostSPBMLicenseInfo?: Array<integrityService.vim.ComputeResourceHostSPBMLicenseInfo>;
         }
         interface ComputeResourceConfigSpec extends integrityService.vim.DynamicData {
            vmSwapPlacement?: string;
            spbmEnabled?: boolean;
            defaultHardwareVersionKey?: string;
         }
         enum ConfigSpecOperation {
            "add",
            "edit",
            "remove",
         }
         interface CustomFieldDef extends integrityService.vim.DynamicData {
            key: number;
            name: string;
            type: string;
            managedObjectType?: string;
            fieldDefPrivileges?: integrityService.vim.PrivilegePolicyDef;
            fieldInstancePrivileges?: integrityService.vim.PrivilegePolicyDef;
         }
         interface ArrayOfCustomFieldDef {
            CustomFieldDef?: Array<integrityService.vim.CustomFieldDef>;
         }
         interface CustomFieldValue extends integrityService.vim.DynamicData {
            key: number;
         }
         interface ArrayOfCustomFieldValue {
            CustomFieldValue?: Array<integrityService.vim.CustomFieldValue>;
         }
         interface CustomFieldStringValue extends integrityService.vim.CustomFieldValue {
            value: string;
         }
         interface CustomizationSpecInfo extends integrityService.vim.DynamicData {
            name: string;
            description: string;
            type: string;
            changeVersion?: string;
            lastUpdateTime?: Date;
         }
         interface ArrayOfCustomizationSpecInfo {
            CustomizationSpecInfo?: Array<integrityService.vim.CustomizationSpecInfo>;
         }
         interface CustomizationSpecItem extends integrityService.vim.DynamicData {
            info: integrityService.vim.CustomizationSpecInfo;
            spec: integrityService.vim.CustomizationSpec;
         }
         interface DatacenterConfigInfo extends integrityService.vim.DynamicData {
            defaultHardwareVersionKey?: string;
         }
         interface DatacenterConfigSpec extends integrityService.vim.DynamicData {
            defaultHardwareVersionKey?: string;
         }
         enum DatastoreAccessible {
            "True",
            "False",
         }
         enum DatastoreSummaryMaintenanceModeState {
            "normal",
            "enteringMaintenance",
            "inMaintenance",
         }
         interface DatastoreSummary extends integrityService.vim.DynamicData {
            datastore?: integrityService.vim.ManagedObjectReference;
            name: string;
            url: string;
            capacity: number;
            freeSpace: number;
            uncommitted?: number;
            accessible: boolean;
            multipleHostAccess?: boolean;
            type: string;
            maintenanceMode?: string;
         }
         interface DatastoreInfo extends integrityService.vim.DynamicData {
            name: string;
            url: string;
            freeSpace: number;
            maxFileSize: number;
            maxVirtualDiskCapacity?: number;
            timestamp?: Date;
            containerId?: string;
         }
         interface DatastoreCapability extends integrityService.vim.DynamicData {
            directoryHierarchySupported: boolean;
            rawDiskMappingsSupported: boolean;
            perFileThinProvisioningSupported: boolean;
            storageIORMSupported?: boolean;
            nativeSnapshotSupported?: boolean;
            topLevelDirectoryCreateSupported?: boolean;
            seSparseSupported?: boolean;
         }
         interface DatastoreHostMount extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            mountInfo: integrityService.vim.HostMountInfo;
         }
         interface ArrayOfDatastoreHostMount {
            DatastoreHostMount?: Array<integrityService.vim.DatastoreHostMount>;
         }
         interface DatastoreMountPathDatastorePair extends integrityService.vim.DynamicData {
            oldMountPath: string;
            datastore: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfDatastoreMountPathDatastorePair {
            DatastoreMountPathDatastorePair?: Array<integrityService.vim.DatastoreMountPathDatastorePair>;
         }
         interface Description extends integrityService.vim.DynamicData {
            label: string;
            summary: string;
         }
         enum DiagnosticManagerLogCreator {
            "vpxd",
            "vpxa",
            "hostd",
            "serverd",
            "install",
            "vpxClient",
            "recordLog",
         }
         enum DiagnosticManagerLogFormat {
            "plain",
         }
         interface DiagnosticManagerLogDescriptor extends integrityService.vim.DynamicData {
            key: string;
            fileName: string;
            creator: string;
            format: string;
            mimeType: string;
            info: integrityService.vim.Description;
         }
         interface ArrayOfDiagnosticManagerLogDescriptor {
            DiagnosticManagerLogDescriptor?: Array<integrityService.vim.DiagnosticManagerLogDescriptor>;
         }
         interface DiagnosticManagerLogHeader extends integrityService.vim.DynamicData {
            lineStart: number;
            lineEnd: number;
            lineText?: Array<string>;
         }
         interface DiagnosticManagerBundleInfo extends integrityService.vim.DynamicData {
            system?: integrityService.vim.ManagedObjectReference;
            url: string;
         }
         interface ArrayOfDiagnosticManagerBundleInfo {
            DiagnosticManagerBundleInfo?: Array<integrityService.vim.DiagnosticManagerBundleInfo>;
         }
         enum DistributedVirtualSwitchProductSpecOperationType {
            "preInstall",
            "upgrade",
            "notifyAvailableUpgrade",
            "proceedWithUpgrade",
            "updateBundleInfo",
         }
         interface DVSContactInfo extends integrityService.vim.DynamicData {
            name?: string;
            contact?: string;
         }
         enum DistributedVirtualSwitchNicTeamingPolicyMode {
            "loadbalance_ip",
            "loadbalance_srcmac",
            "loadbalance_srcid",
            "failover_explicit",
            "loadbalance_loadbased",
         }
         interface DVSNetworkResourceManagementCapability extends integrityService.vim.DynamicData {
            networkResourceManagementSupported: boolean;
            networkResourcePoolHighShareValue: number;
            qosSupported: boolean;
            userDefinedNetworkResourcePoolsSupported: boolean;
         }
         interface DVSRollbackCapability extends integrityService.vim.DynamicData {
            rollbackSupported: boolean;
         }
         interface DVSBackupRestoreCapability extends integrityService.vim.DynamicData {
            backupRestoreSupported: boolean;
         }
         interface DVSFeatureCapability extends integrityService.vim.DynamicData {
            networkResourceManagementSupported: boolean;
            vmDirectPathGen2Supported: boolean;
            nicTeamingPolicy?: Array<string>;
            networkResourcePoolHighShareValue?: number;
            networkResourceManagementCapability?: integrityService.vim.DVSNetworkResourceManagementCapability;
            healthCheckCapability?: integrityService.vim.DVSHealthCheckCapability;
            rollbackCapability?: integrityService.vim.DVSRollbackCapability;
            backupRestoreCapability?: integrityService.vim.DVSBackupRestoreCapability;
            networkFilterSupported?: boolean;
         }
         interface DVSHealthCheckCapability extends integrityService.vim.DynamicData {
         }
         interface DVSCapability extends integrityService.vim.DynamicData {
            dvsOperationSupported?: boolean;
            dvPortGroupOperationSupported?: boolean;
            dvPortOperationSupported?: boolean;
            compatibleHostComponentProductInfo?: Array<integrityService.vim.DistributedVirtualSwitchHostProductSpec>;
            featuresSupported?: integrityService.vim.DVSFeatureCapability;
         }
         interface DVSSummary extends integrityService.vim.DynamicData {
            name: string;
            uuid: string;
            numPorts: number;
            productInfo?: integrityService.vim.DistributedVirtualSwitchProductSpec;
            hostMember?: Array<integrityService.vim.ManagedObjectReference>;
            vm?: Array<integrityService.vim.ManagedObjectReference>;
            host?: Array<integrityService.vim.ManagedObjectReference>;
            portgroupName?: Array<string>;
            description?: string;
            contact?: integrityService.vim.DVSContactInfo;
            numHosts?: number;
         }
         interface DVSPolicy extends integrityService.vim.DynamicData {
            autoPreInstallAllowed?: boolean;
            autoUpgradeAllowed?: boolean;
            partialUpgradeAllowed?: boolean;
         }
         interface DVSUplinkPortPolicy extends integrityService.vim.DynamicData {
         }
         interface DVSNameArrayUplinkPortPolicy extends integrityService.vim.DVSUplinkPortPolicy {
            uplinkPortName: Array<string>;
         }
         interface DVSConfigSpec extends integrityService.vim.DynamicData {
            configVersion?: string;
            name?: string;
            numStandalonePorts?: number;
            maxPorts?: number;
            uplinkPortPolicy?: integrityService.vim.DVSUplinkPortPolicy;
            uplinkPortgroup?: Array<integrityService.vim.ManagedObjectReference>;
            defaultPortConfig?: integrityService.vim.DVPortSetting;
            host?: Array<integrityService.vim.DistributedVirtualSwitchHostMemberConfigSpec>;
            extensionKey?: string;
            description?: string;
            policy?: integrityService.vim.DVSPolicy;
            vendorSpecificConfig?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            contact?: integrityService.vim.DVSContactInfo;
            switchIpAddress?: string;
            defaultProxySwitchMaxNumPorts?: number;
         }
         interface DVSCreateSpec extends integrityService.vim.DynamicData {
            configSpec: integrityService.vim.DVSConfigSpec;
            productInfo?: integrityService.vim.DistributedVirtualSwitchProductSpec;
            capability?: integrityService.vim.DVSCapability;
         }
         interface DVSConfigInfo extends integrityService.vim.DynamicData {
            uuid: string;
            name: string;
            numStandalonePorts: number;
            numPorts: number;
            maxPorts: number;
            uplinkPortPolicy: integrityService.vim.DVSUplinkPortPolicy;
            uplinkPortgroup?: Array<integrityService.vim.ManagedObjectReference>;
            defaultPortConfig: integrityService.vim.DVPortSetting;
            host?: Array<integrityService.vim.DistributedVirtualSwitchHostMember>;
            productInfo: integrityService.vim.DistributedVirtualSwitchProductSpec;
            targetInfo?: integrityService.vim.DistributedVirtualSwitchProductSpec;
            extensionKey?: string;
            vendorSpecificConfig?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            policy?: integrityService.vim.DVSPolicy;
            description?: string;
            configVersion: string;
            contact: integrityService.vim.DVSContactInfo;
            switchIpAddress?: string;
            createTime: Date;
            networkResourceManagementEnabled?: boolean;
            defaultProxySwitchMaxNumPorts?: number;
            healthCheckConfig?: Array<integrityService.vim.DVSHealthCheckConfig>;
         }
         enum DistributedVirtualSwitchHostInfrastructureTrafficClass {
            "management",
            "faultTolerance",
            "vmotion",
            "virtualMachine",
            "iSCSI",
            "nfs",
            "hbr",
            "vsan",
         }
         interface DVSHealthCheckConfig extends integrityService.vim.DynamicData {
            enable?: boolean;
            interval?: number;
         }
         interface ArrayOfDVSHealthCheckConfig {
            DVSHealthCheckConfig?: Array<integrityService.vim.DVSHealthCheckConfig>;
         }
         interface DVSRuntimeInfo extends integrityService.vim.DynamicData {
            hostMemberRuntime?: Array<integrityService.vim.HostMemberRuntimeInfo>;
         }
         enum DrsInjectorWorkloadCorrelationState {
            "Correlated",
            "Uncorrelated",
         }
         interface EVCMode extends integrityService.vim.ElementDescription {
            guaranteedCPUFeatures?: Array<integrityService.vim.HostCpuIdInfo>;
            featureCapability?: Array<integrityService.vim.HostFeatureCapability>;
            featureMask?: Array<integrityService.vim.HostFeatureMask>;
            featureRequirement?: Array<integrityService.vim.VirtualMachineFeatureRequirement>;
            vendor: string;
            track?: Array<string>;
            vendorTier: number;
         }
         interface ArrayOfEVCMode {
            EVCMode?: Array<integrityService.vim.EVCMode>;
         }
         interface ElementDescription extends integrityService.vim.Description {
            key: string;
         }
         interface ArrayOfElementDescription {
            ElementDescription?: Array<integrityService.vim.ElementDescription>;
         }
         interface EnumDescription extends integrityService.vim.DynamicData {
            key: string;
            tags: Array<integrityService.vim.ElementDescription>;
         }
         interface ArrayOfEnumDescription {
            EnumDescription?: Array<integrityService.vim.EnumDescription>;
         }
         interface ExtendedDescription extends integrityService.vim.Description {
            messageCatalogKeyPrefix: string;
            messageArg?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface ExtendedElementDescription extends integrityService.vim.ElementDescription {
            messageCatalogKeyPrefix: string;
            messageArg?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface ExtensionServerInfo extends integrityService.vim.DynamicData {
            url: string;
            description: integrityService.vim.Description;
            company: string;
            type: string;
            adminEmail: Array<string>;
            serverThumbprint?: string;
         }
         interface ArrayOfExtensionServerInfo {
            ExtensionServerInfo?: Array<integrityService.vim.ExtensionServerInfo>;
         }
         interface ExtensionClientInfo extends integrityService.vim.DynamicData {
            version: string;
            description: integrityService.vim.Description;
            company: string;
            type: string;
            url: string;
         }
         interface ArrayOfExtensionClientInfo {
            ExtensionClientInfo?: Array<integrityService.vim.ExtensionClientInfo>;
         }
         interface ExtensionTaskTypeInfo extends integrityService.vim.DynamicData {
            taskID: string;
         }
         interface ArrayOfExtensionTaskTypeInfo {
            ExtensionTaskTypeInfo?: Array<integrityService.vim.ExtensionTaskTypeInfo>;
         }
         interface ExtensionEventTypeInfo extends integrityService.vim.DynamicData {
            eventID: string;
            eventTypeSchema?: string;
         }
         interface ArrayOfExtensionEventTypeInfo {
            ExtensionEventTypeInfo?: Array<integrityService.vim.ExtensionEventTypeInfo>;
         }
         interface ExtensionFaultTypeInfo extends integrityService.vim.DynamicData {
            faultID: string;
         }
         interface ArrayOfExtensionFaultTypeInfo {
            ExtensionFaultTypeInfo?: Array<integrityService.vim.ExtensionFaultTypeInfo>;
         }
         interface ExtensionPrivilegeInfo extends integrityService.vim.DynamicData {
            privID: string;
            privGroupName: string;
         }
         interface ArrayOfExtensionPrivilegeInfo {
            ExtensionPrivilegeInfo?: Array<integrityService.vim.ExtensionPrivilegeInfo>;
         }
         interface ExtensionResourceInfo extends integrityService.vim.DynamicData {
            locale: string;
            module: string;
            data: Array<integrityService.vim.KeyValue>;
         }
         interface ArrayOfExtensionResourceInfo {
            ExtensionResourceInfo?: Array<integrityService.vim.ExtensionResourceInfo>;
         }
         interface ExtensionHealthInfo extends integrityService.vim.DynamicData {
            url: string;
         }
         interface ExtensionOvfConsumerInfo extends integrityService.vim.DynamicData {
            callbackUrl: string;
            sectionType: Array<string>;
         }
         interface Extension extends integrityService.vim.DynamicData {
            description: integrityService.vim.Description;
            key: string;
            company?: string;
            type?: string;
            version: string;
            subjectName?: string;
            server?: Array<integrityService.vim.ExtensionServerInfo>;
            client?: Array<integrityService.vim.ExtensionClientInfo>;
            taskList?: Array<integrityService.vim.ExtensionTaskTypeInfo>;
            eventList?: Array<integrityService.vim.ExtensionEventTypeInfo>;
            faultList?: Array<integrityService.vim.ExtensionFaultTypeInfo>;
            privilegeList?: Array<integrityService.vim.ExtensionPrivilegeInfo>;
            resourceList?: Array<integrityService.vim.ExtensionResourceInfo>;
            lastHeartbeatTime: Date;
            healthInfo?: integrityService.vim.ExtensionHealthInfo;
            ovfConsumerInfo?: integrityService.vim.ExtensionOvfConsumerInfo;
            extendedProductInfo?: integrityService.vim.ExtExtendedProductInfo;
            managedEntityInfo?: Array<integrityService.vim.ExtManagedEntityInfo>;
            shownInSolutionManager?: boolean;
            solutionManagerInfo?: integrityService.vim.ExtSolutionManagerInfo;
         }
         interface ArrayOfExtension {
            Extension?: Array<integrityService.vim.Extension>;
         }
         interface ExtensionManagerIpAllocationUsage extends integrityService.vim.DynamicData {
            extensionKey: string;
            numAddresses: number;
         }
         interface ArrayOfExtensionManagerIpAllocationUsage {
            ExtensionManagerIpAllocationUsage?: Array<integrityService.vim.ExtensionManagerIpAllocationUsage>;
         }
         enum ReplicationVmState {
            "none",
            "paused",
            "syncing",
            "idle",
            "active",
            "error",
         }
         interface ReplicationVmProgressInfo extends integrityService.vim.DynamicData {
            progress: number;
            bytesTransferred: number;
            bytesToTransfer: number;
            checksumTotalBytes?: number;
            checksumComparedBytes?: number;
         }
         interface HbrManagerReplicationVmInfo extends integrityService.vim.DynamicData {
            state: string;
            progressInfo?: integrityService.vim.ReplicationVmProgressInfo;
            imageId?: string;
            lastError?: integrityService.vim.LocalizedMethodFault;
         }
         interface HostServiceTicket extends integrityService.vim.DynamicData {
            host?: string;
            port?: number;
            sslThumbprint?: string;
            service: string;
            serviceVersion: string;
            sessionId: string;
         }
         enum HostSystemConnectionState {
            "connected",
            "notResponding",
            "disconnected",
         }
         enum HostSystemPowerState {
            "poweredOn",
            "poweredOff",
            "standBy",
            "unknown",
         }
         enum HostStandbyMode {
            "entering",
            "exiting",
            "in",
            "none",
         }
         interface HostSystemReconnectSpec extends integrityService.vim.DynamicData {
            syncState?: boolean;
         }
         enum HttpNfcLeaseState {
            "initializing",
            "ready",
            "done",
            "error",
         }
         interface HttpNfcLeaseDatastoreLeaseInfo extends integrityService.vim.DynamicData {
            datastoreKey: string;
            hosts: Array<integrityService.vim.HttpNfcLeaseHostInfo>;
         }
         interface ArrayOfHttpNfcLeaseDatastoreLeaseInfo {
            HttpNfcLeaseDatastoreLeaseInfo?: Array<integrityService.vim.HttpNfcLeaseDatastoreLeaseInfo>;
         }
         interface HttpNfcLeaseHostInfo extends integrityService.vim.DynamicData {
            url: string;
            sslThumbprint: string;
         }
         interface ArrayOfHttpNfcLeaseHostInfo {
            HttpNfcLeaseHostInfo?: Array<integrityService.vim.HttpNfcLeaseHostInfo>;
         }
         interface HttpNfcLeaseInfo extends integrityService.vim.DynamicData {
            lease: integrityService.vim.ManagedObjectReference;
            entity: integrityService.vim.ManagedObjectReference;
            deviceUrl?: Array<integrityService.vim.HttpNfcLeaseDeviceUrl>;
            totalDiskCapacityInKB: number;
            leaseTimeout: number;
            hostMap?: Array<integrityService.vim.HttpNfcLeaseDatastoreLeaseInfo>;
         }
         interface HttpNfcLeaseDeviceUrl extends integrityService.vim.DynamicData {
            key: string;
            importKey: string;
            url: string;
            sslThumbprint: string;
            disk?: boolean;
            targetId?: string;
            datastoreKey?: string;
            fileSize?: number;
         }
         interface ArrayOfHttpNfcLeaseDeviceUrl {
            HttpNfcLeaseDeviceUrl?: Array<integrityService.vim.HttpNfcLeaseDeviceUrl>;
         }
         interface HttpNfcLeaseManifestEntry extends integrityService.vim.DynamicData {
            key: string;
            sha1: string;
            size: number;
            disk: boolean;
            capacity?: number;
            populatedSize?: number;
         }
         interface ArrayOfHttpNfcLeaseManifestEntry {
            HttpNfcLeaseManifestEntry?: Array<integrityService.vim.HttpNfcLeaseManifestEntry>;
         }
         interface ImportSpec extends integrityService.vim.DynamicData {
            entityConfig?: integrityService.vim.VAppEntityConfigInfo;
            instantiationOst?: integrityService.vim.OvfConsumerOstNode;
         }
         interface ArrayOfImportSpec {
            ImportSpec?: Array<integrityService.vim.ImportSpec>;
         }
         interface InheritablePolicy extends integrityService.vim.DynamicData {
            inherited: boolean;
         }
         interface IntExpression extends integrityService.vim.NegatableExpression {
            value?: number;
         }
         interface IntPolicy extends integrityService.vim.InheritablePolicy {
            value?: number;
         }
         interface IpAddress extends integrityService.vim.NegatableExpression {
         }
         interface IpPoolManagerIpAllocation extends integrityService.vim.DynamicData {
            ipAddress: string;
            allocationId: string;
         }
         interface ArrayOfIpPoolManagerIpAllocation {
            IpPoolManagerIpAllocation?: Array<integrityService.vim.IpPoolManagerIpAllocation>;
         }
         interface IpRange extends integrityService.vim.IpAddress {
            addressPrefix: string;
            prefixLength?: number;
         }
         interface KeyValue extends integrityService.vim.DynamicData {
            key: string;
            value: string;
         }
         interface ArrayOfKeyValue {
            KeyValue?: Array<integrityService.vim.KeyValue>;
         }
         enum LatencySensitivitySensitivityLevel {
            "low",
            "normal",
            "medium",
            "high",
            "custom",
         }
         interface LatencySensitivity extends integrityService.vim.DynamicData {
            level: integrityService.vim.LatencySensitivitySensitivityLevel;
            sensitivity?: number;
         }
         interface LicenseAssignmentManagerLicenseAssignment extends integrityService.vim.DynamicData {
            entityId: string;
            scope?: string;
            entityDisplayName?: string;
            assignedLicense: integrityService.vim.LicenseManagerLicenseInfo;
            properties?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface ArrayOfLicenseAssignmentManagerLicenseAssignment {
            LicenseAssignmentManagerLicenseAssignment?: Array<integrityService.vim.LicenseAssignmentManagerLicenseAssignment>;
         }
         enum LicenseManagerState {
            "initializing",
            "normal",
            "marginal",
            "fault",
         }
         enum LicenseManagerLicenseKey {
            "esxFull",
            "esxVmtn",
            "esxExpress",
            "san",
            "iscsi",
            "nas",
            "vsmp",
            "backup",
            "vc",
            "vcExpress",
            "esxHost",
            "gsxHost",
            "serverHost",
            "drsPower",
            "vmotion",
            "drs",
            "das",
         }
         interface LicenseSource extends integrityService.vim.DynamicData {
         }
         interface LicenseServerSource extends integrityService.vim.LicenseSource {
            licenseServer: string;
         }
         interface LocalLicenseSource extends integrityService.vim.LicenseSource {
            licenseKeys: string;
         }
         interface EvaluationLicenseSource extends integrityService.vim.LicenseSource {
            remainingHours?: number;
         }
         enum LicenseFeatureInfoUnit {
            "host",
            "cpuCore",
            "cpuPackage",
            "server",
            "vm",
         }
         enum LicenseFeatureInfoState {
            "enabled",
            "disabled",
            "optional",
         }
         enum LicenseFeatureInfoSourceRestriction {
            "unrestricted",
            "served",
            "file",
         }
         interface LicenseFeatureInfo extends integrityService.vim.DynamicData {
            key: string;
            featureName: string;
            featureDescription?: string;
            state?: integrityService.vim.LicenseFeatureInfoState;
            costUnit: string;
            sourceRestriction?: string;
            dependentKey?: Array<string>;
            edition?: boolean;
            expiresOn?: Date;
         }
         interface ArrayOfLicenseFeatureInfo {
            LicenseFeatureInfo?: Array<integrityService.vim.LicenseFeatureInfo>;
         }
         enum LicenseReservationInfoState {
            "notUsed",
            "noLicense",
            "unlicensedUse",
            "licensed",
         }
         interface LicenseReservationInfo extends integrityService.vim.DynamicData {
            key: string;
            state: integrityService.vim.LicenseReservationInfoState;
            required: number;
         }
         interface ArrayOfLicenseReservationInfo {
            LicenseReservationInfo?: Array<integrityService.vim.LicenseReservationInfo>;
         }
         interface LicenseAvailabilityInfo extends integrityService.vim.DynamicData {
            feature: integrityService.vim.LicenseFeatureInfo;
            total: number;
            available: number;
         }
         interface ArrayOfLicenseAvailabilityInfo {
            LicenseAvailabilityInfo?: Array<integrityService.vim.LicenseAvailabilityInfo>;
         }
         interface LicenseDiagnostics extends integrityService.vim.DynamicData {
            sourceLastChanged: Date;
            sourceLost: string;
            sourceLatency: number;
            licenseRequests: string;
            licenseRequestFailures: string;
            licenseFeatureUnknowns: string;
            opState: integrityService.vim.LicenseManagerState;
            lastStatusUpdate: Date;
            opFailureMessage: string;
         }
         interface LicenseUsageInfo extends integrityService.vim.DynamicData {
            source: integrityService.vim.LicenseSource;
            sourceAvailable: boolean;
            reservationInfo?: Array<integrityService.vim.LicenseReservationInfo>;
            featureInfo?: Array<integrityService.vim.LicenseFeatureInfo>;
         }
         interface LicenseManagerEvaluationInfo extends integrityService.vim.DynamicData {
            properties: Array<integrityService.vim.KeyAnyValue>;
         }
         enum HostLicensableResourceKey {
            "numCpuPackages",
            "numCpuCores",
            "memorySize",
            "memoryForVms",
            "numVmsStarted",
            "numVmsStarting",
         }
         interface HostLicensableResourceInfo extends integrityService.vim.DynamicData {
            resource: Array<integrityService.vim.KeyAnyValue>;
         }
         interface LicenseManagerLicenseInfo extends integrityService.vim.DynamicData {
            licenseKey: string;
            editionKey: string;
            name: string;
            total: number;
            used?: number;
            costUnit: string;
            properties?: Array<integrityService.vim.KeyAnyValue>;
            labels?: Array<integrityService.vim.KeyValue>;
         }
         interface ArrayOfLicenseManagerLicenseInfo {
            LicenseManagerLicenseInfo?: Array<integrityService.vim.LicenseManagerLicenseInfo>;
         }
         interface LocalizationManagerMessageCatalog extends integrityService.vim.DynamicData {
            moduleName: string;
            catalogName: string;
            locale: string;
            catalogUri: string;
            lastModified?: Date;
            md5sum?: string;
            version?: string;
         }
         interface ArrayOfLocalizationManagerMessageCatalog {
            LocalizationManagerMessageCatalog?: Array<integrityService.vim.LocalizationManagerMessageCatalog>;
         }
         interface LongPolicy extends integrityService.vim.InheritablePolicy {
            value?: number;
         }
         interface MacAddress extends integrityService.vim.NegatableExpression {
         }
         interface MacRange extends integrityService.vim.MacAddress {
            address: string;
            mask: string;
         }
         enum ManagedEntityStatus {
            "gray",
            "green",
            "yellow",
            "red",
         }
         interface MethodDescription extends integrityService.vim.Description {
            key: string;
         }
         interface NegatableExpression extends integrityService.vim.DynamicData {
            negate?: boolean;
         }
         interface NetworkSummary extends integrityService.vim.DynamicData {
            network?: integrityService.vim.ManagedObjectReference;
            name: string;
            accessible: boolean;
            ipPoolName?: string;
            ipPoolId?: number;
         }
         interface NumericRange extends integrityService.vim.DynamicData {
            start: number;
            end: number;
         }
         interface ArrayOfNumericRange {
            NumericRange?: Array<integrityService.vim.NumericRange>;
         }
         interface OpaqueNetworkSummary extends integrityService.vim.NetworkSummary {
            opaqueNetworkId: string;
            opaqueNetworkType: string;
         }
         interface OvfConsumerOvfSection extends integrityService.vim.DynamicData {
            lineNumber: number;
            xml: string;
         }
         interface ArrayOfOvfConsumerOvfSection {
            OvfConsumerOvfSection?: Array<integrityService.vim.OvfConsumerOvfSection>;
         }
         enum OvfConsumerOstNodeType {
            "envelope",
            "virtualSystem",
            "virtualSystemCollection",
         }
         interface OvfConsumerOstNode extends integrityService.vim.DynamicData {
            id: string;
            type: string;
            section?: Array<integrityService.vim.OvfConsumerOvfSection>;
            child?: Array<integrityService.vim.OvfConsumerOstNode>;
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfOvfConsumerOstNode {
            OvfConsumerOstNode?: Array<integrityService.vim.OvfConsumerOstNode>;
         }
         interface OvfOptionInfo extends integrityService.vim.DynamicData {
            option: string;
            description: integrityService.vim.LocalizableMessage;
         }
         interface ArrayOfOvfOptionInfo {
            OvfOptionInfo?: Array<integrityService.vim.OvfOptionInfo>;
         }
         interface OvfDeploymentOption extends integrityService.vim.DynamicData {
            key: string;
            label: string;
            description: string;
         }
         interface ArrayOfOvfDeploymentOption {
            OvfDeploymentOption?: Array<integrityService.vim.OvfDeploymentOption>;
         }
         interface OvfManagerCommonParams extends integrityService.vim.DynamicData {
            locale: string;
            deploymentOption: string;
            msgBundle?: Array<integrityService.vim.KeyValue>;
            importOption?: Array<string>;
         }
         interface OvfValidateHostParams extends integrityService.vim.OvfManagerCommonParams {
         }
         interface OvfValidateHostResult extends integrityService.vim.DynamicData {
            downloadSize?: number;
            flatDeploymentSize?: number;
            sparseDeploymentSize?: number;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
            warning?: Array<integrityService.vim.LocalizedMethodFault>;
            supportedDiskProvisioning?: Array<string>;
         }
         interface OvfParseDescriptorParams extends integrityService.vim.OvfManagerCommonParams {
         }
         interface OvfParseDescriptorResult extends integrityService.vim.DynamicData {
            eula?: Array<string>;
            network?: Array<integrityService.vim.OvfNetworkInfo>;
            ipAllocationScheme?: Array<string>;
            ipProtocols?: Array<string>;
            property?: Array<integrityService.vim.VAppPropertyInfo>;
            productInfo?: integrityService.vim.VAppProductInfo;
            annotation: string;
            approximateDownloadSize?: number;
            approximateFlatDeploymentSize?: number;
            approximateSparseDeploymentSize?: number;
            defaultEntityName: string;
            virtualApp: boolean;
            deploymentOption?: Array<integrityService.vim.OvfDeploymentOption>;
            defaultDeploymentOption: string;
            entityName?: Array<integrityService.vim.KeyValue>;
            annotatedOst?: integrityService.vim.OvfConsumerOstNode;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
            warning?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface OvfNetworkInfo extends integrityService.vim.DynamicData {
            name: string;
            description: string;
         }
         interface ArrayOfOvfNetworkInfo {
            OvfNetworkInfo?: Array<integrityService.vim.OvfNetworkInfo>;
         }
         enum OvfCreateImportSpecParamsDiskProvisioningType {
            "monolithicSparse",
            "monolithicFlat",
            "twoGbMaxExtentSparse",
            "twoGbMaxExtentFlat",
            "thin",
            "thick",
            "seSparse",
            "eagerZeroedThick",
            "sparse",
            "flat",
         }
         interface OvfCreateImportSpecParams extends integrityService.vim.OvfManagerCommonParams {
            entityName: string;
            hostSystem?: integrityService.vim.ManagedObjectReference;
            networkMapping?: Array<integrityService.vim.OvfNetworkMapping>;
            ipAllocationPolicy?: string;
            ipProtocol?: string;
            propertyMapping?: Array<integrityService.vim.KeyValue>;
            resourceMapping?: Array<integrityService.vim.OvfResourceMap>;
            diskProvisioning?: string;
            instantiationOst?: integrityService.vim.OvfConsumerOstNode;
         }
         interface OvfResourceMap extends integrityService.vim.DynamicData {
            source: string;
            parent?: integrityService.vim.ManagedObjectReference;
            resourceSpec?: integrityService.vim.ResourceConfigSpec;
            datastore?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfOvfResourceMap {
            OvfResourceMap?: Array<integrityService.vim.OvfResourceMap>;
         }
         interface OvfNetworkMapping extends integrityService.vim.DynamicData {
            name: string;
            network: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfOvfNetworkMapping {
            OvfNetworkMapping?: Array<integrityService.vim.OvfNetworkMapping>;
         }
         interface OvfCreateImportSpecResult extends integrityService.vim.DynamicData {
            importSpec?: integrityService.vim.ImportSpec;
            fileItem?: Array<integrityService.vim.OvfFileItem>;
            warning?: Array<integrityService.vim.LocalizedMethodFault>;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface OvfFileItem extends integrityService.vim.DynamicData {
            deviceId: string;
            path: string;
            compressionMethod?: string;
            chunkSize?: number;
            size?: number;
            cimType: number;
            create: boolean;
         }
         interface ArrayOfOvfFileItem {
            OvfFileItem?: Array<integrityService.vim.OvfFileItem>;
         }
         interface OvfCreateDescriptorParams extends integrityService.vim.DynamicData {
            ovfFiles?: Array<integrityService.vim.OvfFile>;
            name?: string;
            description?: string;
            includeImageFiles?: boolean;
            exportOption?: Array<string>;
            snapshot?: integrityService.vim.ManagedObjectReference;
         }
         interface OvfCreateDescriptorResult extends integrityService.vim.DynamicData {
            ovfDescriptor: string;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
            warning?: Array<integrityService.vim.LocalizedMethodFault>;
            includeImageFiles?: boolean;
         }
         interface OvfFile extends integrityService.vim.DynamicData {
            deviceId: string;
            path: string;
            compressionMethod?: string;
            chunkSize?: number;
            size: number;
            capacity?: number;
            populatedSize?: number;
         }
         interface ArrayOfOvfFile {
            OvfFile?: Array<integrityService.vim.OvfFile>;
         }
         interface PasswordField extends integrityService.vim.DynamicData {
            value: string;
         }
         interface PerformanceDescription extends integrityService.vim.DynamicData {
            counterType: Array<integrityService.vim.ElementDescription>;
            statsType: Array<integrityService.vim.ElementDescription>;
         }
         enum PerfFormat {
            "normal",
            "csv",
         }
         interface PerfProviderSummary extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            currentSupported: boolean;
            summarySupported: boolean;
            refreshRate?: number;
         }
         enum PerfSummaryType {
            "average",
            "maximum",
            "minimum",
            "latest",
            "summation",
            "none",
         }
         enum PerfStatsType {
            "absolute",
            "delta",
            "rate",
         }
         enum PerformanceManagerUnit {
            "percent",
            "kiloBytes",
            "megaBytes",
            "megaHertz",
            "number",
            "microsecond",
            "millisecond",
            "second",
            "kiloBytesPerSecond",
            "megaBytesPerSecond",
            "watt",
            "joule",
         }
         interface PerfCounterInfo extends integrityService.vim.DynamicData {
            key: number;
            nameInfo: integrityService.vim.ElementDescription;
            groupInfo: integrityService.vim.ElementDescription;
            unitInfo: integrityService.vim.ElementDescription;
            rollupType: integrityService.vim.PerfSummaryType;
            statsType: integrityService.vim.PerfStatsType;
            level?: number;
            perDeviceLevel?: number;
            associatedCounterId?: Array<number>;
         }
         interface ArrayOfPerfCounterInfo {
            PerfCounterInfo?: Array<integrityService.vim.PerfCounterInfo>;
         }
         interface PerfMetricId extends integrityService.vim.DynamicData {
            counterId: number;
            instance: string;
         }
         interface ArrayOfPerfMetricId {
            PerfMetricId?: Array<integrityService.vim.PerfMetricId>;
         }
         interface PerfQuerySpec extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            startTime?: Date;
            endTime?: Date;
            maxSample?: number;
            metricId?: Array<integrityService.vim.PerfMetricId>;
            intervalId?: number;
            format?: string;
         }
         interface ArrayOfPerfQuerySpec {
            PerfQuerySpec?: Array<integrityService.vim.PerfQuerySpec>;
         }
         interface PerfSampleInfo extends integrityService.vim.DynamicData {
            timestamp: Date;
            interval: number;
         }
         interface ArrayOfPerfSampleInfo {
            PerfSampleInfo?: Array<integrityService.vim.PerfSampleInfo>;
         }
         interface PerfMetricSeries extends integrityService.vim.DynamicData {
            id: integrityService.vim.PerfMetricId;
         }
         interface ArrayOfPerfMetricSeries {
            PerfMetricSeries?: Array<integrityService.vim.PerfMetricSeries>;
         }
         interface PerfMetricIntSeries extends integrityService.vim.PerfMetricSeries {
            value?: Array<number>;
         }
         interface PerfMetricSeriesCSV extends integrityService.vim.PerfMetricSeries {
            value?: string;
         }
         interface ArrayOfPerfMetricSeriesCSV {
            PerfMetricSeriesCSV?: Array<integrityService.vim.PerfMetricSeriesCSV>;
         }
         interface PerfEntityMetricBase extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfPerfEntityMetricBase {
            PerfEntityMetricBase?: Array<integrityService.vim.PerfEntityMetricBase>;
         }
         interface PerfEntityMetric extends integrityService.vim.PerfEntityMetricBase {
            sampleInfo?: Array<integrityService.vim.PerfSampleInfo>;
            value?: Array<integrityService.vim.PerfMetricSeries>;
         }
         interface PerfEntityMetricCSV extends integrityService.vim.PerfEntityMetricBase {
            sampleInfoCSV: string;
            value?: Array<integrityService.vim.PerfMetricSeriesCSV>;
         }
         interface PerfCompositeMetric extends integrityService.vim.DynamicData {
            entity?: integrityService.vim.PerfEntityMetricBase;
            childEntity?: Array<integrityService.vim.PerfEntityMetricBase>;
         }
         interface PerformanceManagerCounterLevelMapping extends integrityService.vim.DynamicData {
            counterId: number;
            aggregateLevel?: number;
            perDeviceLevel?: number;
         }
         interface ArrayOfPerformanceManagerCounterLevelMapping {
            PerformanceManagerCounterLevelMapping?: Array<integrityService.vim.PerformanceManagerCounterLevelMapping>;
         }
         interface PerfInterval extends integrityService.vim.DynamicData {
            key?: number;
            samplingPeriod: number;
            name: string;
            length: number;
            level?: number;
            enabled?: boolean;
         }
         interface ArrayOfPerfInterval {
            PerfInterval?: Array<integrityService.vim.PerfInterval>;
         }
         interface PosixUserSearchResult extends integrityService.vim.UserSearchResult {
            id: number;
            shellAccess?: boolean;
         }
         interface PrivilegePolicyDef extends integrityService.vim.DynamicData {
            createPrivilege: string;
            readPrivilege: string;
            updatePrivilege: string;
            deletePrivilege: string;
         }
         interface ResourceAllocationInfo extends integrityService.vim.DynamicData {
            reservation?: number;
            expandableReservation?: boolean;
            limit?: number;
            shares?: integrityService.vim.SharesInfo;
            overheadLimit?: number;
         }
         interface ResourceAllocationOption extends integrityService.vim.DynamicData {
            sharesOption: integrityService.vim.SharesOption;
         }
         interface ResourceConfigOption extends integrityService.vim.DynamicData {
            cpuAllocationOption: integrityService.vim.ResourceAllocationOption;
            memoryAllocationOption: integrityService.vim.ResourceAllocationOption;
         }
         interface ResourceConfigSpec extends integrityService.vim.DynamicData {
            entity?: integrityService.vim.ManagedObjectReference;
            changeVersion?: string;
            lastModified?: Date;
            cpuAllocation: integrityService.vim.ResourceAllocationInfo;
            memoryAllocation: integrityService.vim.ResourceAllocationInfo;
         }
         interface ArrayOfResourceConfigSpec {
            ResourceConfigSpec?: Array<integrityService.vim.ResourceConfigSpec>;
         }
         interface DatabaseSizeParam extends integrityService.vim.DynamicData {
            inventoryDesc: integrityService.vim.InventoryDescription;
            perfStatsDesc?: integrityService.vim.PerformanceStatisticsDescription;
         }
         interface InventoryDescription extends integrityService.vim.DynamicData {
            numHosts: number;
            numVirtualMachines: number;
            numResourcePools?: number;
            numClusters?: number;
            numCpuDev?: number;
            numNetDev?: number;
            numDiskDev?: number;
            numvCpuDev?: number;
            numvNetDev?: number;
            numvDiskDev?: number;
         }
         interface PerformanceStatisticsDescription extends integrityService.vim.DynamicData {
            intervals?: Array<integrityService.vim.PerfInterval>;
         }
         interface DatabaseSizeEstimate extends integrityService.vim.DynamicData {
            size: number;
         }
         interface ResourcePoolResourceUsage extends integrityService.vim.DynamicData {
            reservationUsed: number;
            reservationUsedForVm: number;
            unreservedForPool: number;
            unreservedForVm: number;
            overallUsage: number;
            maxUsage: number;
         }
         interface ResourcePoolRuntimeInfo extends integrityService.vim.DynamicData {
            memory: integrityService.vim.ResourcePoolResourceUsage;
            cpu: integrityService.vim.ResourcePoolResourceUsage;
            overallStatus: integrityService.vim.ManagedEntityStatus;
         }
         interface ResourcePoolQuickStats extends integrityService.vim.DynamicData {
            overallCpuUsage?: number;
            overallCpuDemand?: number;
            guestMemoryUsage?: number;
            hostMemoryUsage?: number;
            distributedCpuEntitlement?: number;
            distributedMemoryEntitlement?: number;
            staticCpuEntitlement?: number;
            staticMemoryEntitlement?: number;
            privateMemory?: number;
            sharedMemory?: number;
            swappedMemory?: number;
            balloonedMemory?: number;
            overheadMemory?: number;
            consumedOverheadMemory?: number;
            compressedMemory?: number;
         }
         interface ResourcePoolSummary extends integrityService.vim.DynamicData {
            name: string;
            config: integrityService.vim.ResourceConfigSpec;
            runtime: integrityService.vim.ResourcePoolRuntimeInfo;
            quickStats?: integrityService.vim.ResourcePoolQuickStats;
            configuredMemoryMB?: number;
         }
         interface SelectionSet extends integrityService.vim.DynamicData {
         }
         interface ArrayOfSelectionSet {
            SelectionSet?: Array<integrityService.vim.SelectionSet>;
         }
         enum ValidateMigrationTestType {
            "sourceTests",
            "compatibilityTests",
            "diskAccessibilityTests",
            "resourceTests",
         }
         enum VMotionCompatibilityType {
            "cpu",
            "software",
         }
         interface HostVMotionCompatibility extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            compatibility?: Array<string>;
         }
         interface ArrayOfHostVMotionCompatibility {
            HostVMotionCompatibility?: Array<integrityService.vim.HostVMotionCompatibility>;
         }
         interface ProductComponentInfo extends integrityService.vim.DynamicData {
            id: string;
            name: string;
            version: string;
            release: number;
         }
         interface ArrayOfProductComponentInfo {
            ProductComponentInfo?: Array<integrityService.vim.ProductComponentInfo>;
         }
         interface ServiceContent extends integrityService.vim.DynamicData {
            rootFolder: integrityService.vim.ManagedObjectReference;
            propertyCollector: integrityService.vim.ManagedObjectReference;
            viewManager?: integrityService.vim.ManagedObjectReference;
            about: integrityService.vim.AboutInfo;
            setting?: integrityService.vim.ManagedObjectReference;
            userDirectory?: integrityService.vim.ManagedObjectReference;
            sessionManager?: integrityService.vim.ManagedObjectReference;
            authorizationManager?: integrityService.vim.ManagedObjectReference;
            serviceManager?: integrityService.vim.ManagedObjectReference;
            perfManager?: integrityService.vim.ManagedObjectReference;
            scheduledTaskManager?: integrityService.vim.ManagedObjectReference;
            alarmManager?: integrityService.vim.ManagedObjectReference;
            eventManager?: integrityService.vim.ManagedObjectReference;
            taskManager?: integrityService.vim.ManagedObjectReference;
            extensionManager?: integrityService.vim.ManagedObjectReference;
            customizationSpecManager?: integrityService.vim.ManagedObjectReference;
            customFieldsManager?: integrityService.vim.ManagedObjectReference;
            accountManager?: integrityService.vim.ManagedObjectReference;
            diagnosticManager?: integrityService.vim.ManagedObjectReference;
            licenseManager?: integrityService.vim.ManagedObjectReference;
            searchIndex?: integrityService.vim.ManagedObjectReference;
            fileManager?: integrityService.vim.ManagedObjectReference;
            datastoreNamespaceManager?: integrityService.vim.ManagedObjectReference;
            virtualDiskManager?: integrityService.vim.ManagedObjectReference;
            virtualizationManager?: integrityService.vim.ManagedObjectReference;
            snmpSystem?: integrityService.vim.ManagedObjectReference;
            vmProvisioningChecker?: integrityService.vim.ManagedObjectReference;
            vmCompatibilityChecker?: integrityService.vim.ManagedObjectReference;
            ovfManager?: integrityService.vim.ManagedObjectReference;
            ipPoolManager?: integrityService.vim.ManagedObjectReference;
            dvSwitchManager?: integrityService.vim.ManagedObjectReference;
            hostProfileManager?: integrityService.vim.ManagedObjectReference;
            clusterProfileManager?: integrityService.vim.ManagedObjectReference;
            complianceManager?: integrityService.vim.ManagedObjectReference;
            localizationManager?: integrityService.vim.ManagedObjectReference;
            storageResourceManager?: integrityService.vim.ManagedObjectReference;
            guestOperationsManager?: integrityService.vim.ManagedObjectReference;
         }
         interface ServiceManagerServiceInfo extends integrityService.vim.DynamicData {
            serviceName: string;
            location?: Array<string>;
            service: integrityService.vim.ManagedObjectReference;
            description: string;
         }
         interface ArrayOfServiceManagerServiceInfo {
            ServiceManagerServiceInfo?: Array<integrityService.vim.ServiceManagerServiceInfo>;
         }
         interface SessionManagerLocalTicket extends integrityService.vim.DynamicData {
            userName: string;
            passwordFilePath: string;
         }
         interface SessionManagerGenericServiceTicket extends integrityService.vim.DynamicData {
            id: string;
            hostName?: string;
            sslThumbprint?: string;
         }
         interface SessionManagerServiceRequestSpec extends integrityService.vim.DynamicData {
         }
         interface SessionManagerVmomiServiceRequestSpec extends integrityService.vim.SessionManagerServiceRequestSpec {
            method: string;
         }
         enum SessionManagerHttpServiceRequestSpecMethod {
            "httpOptions",
            "httpGet",
            "httpHead",
            "httpPost",
            "httpPut",
            "httpDelete",
            "httpTrace",
            "httpConnect",
         }
         interface SessionManagerHttpServiceRequestSpec extends integrityService.vim.SessionManagerServiceRequestSpec {
            method?: string;
            url: string;
         }
         enum SharesLevel {
            "low",
            "normal",
            "high",
            "custom",
         }
         interface SharesInfo extends integrityService.vim.DynamicData {
            shares: number;
            level: integrityService.vim.SharesLevel;
         }
         interface SharesOption extends integrityService.vim.DynamicData {
            sharesOption: integrityService.vim.IntOption;
            defaultLevel: integrityService.vim.SharesLevel;
         }
         enum SimpleCommandEncoding {
            "CSV",
            "HEX",
            "STRING",
         }
         interface SingleIp extends integrityService.vim.IpAddress {
            address: string;
         }
         interface SingleMac extends integrityService.vim.MacAddress {
            address: string;
         }
         interface StoragePodSummary extends integrityService.vim.DynamicData {
            name: string;
            capacity: number;
            freeSpace: number;
         }
         interface StorageIOAllocationInfo extends integrityService.vim.DynamicData {
            limit?: number;
            shares?: integrityService.vim.SharesInfo;
            reservation?: number;
         }
         interface StorageIOAllocationOption extends integrityService.vim.DynamicData {
            limitOption: integrityService.vim.LongOption;
            sharesOption: integrityService.vim.SharesOption;
         }
         enum StorageIORMThresholdMode {
            "automatic",
            "manual",
         }
         interface StorageIORMInfo extends integrityService.vim.DynamicData {
            enabled: boolean;
            congestionThresholdMode?: string;
            congestionThreshold: number;
            percentOfPeakThroughput?: number;
            statsCollectionEnabled?: boolean;
            statsAggregationDisabled?: boolean;
         }
         interface StorageIORMConfigSpec extends integrityService.vim.DynamicData {
            enabled?: boolean;
            congestionThresholdMode?: string;
            congestionThreshold?: number;
            percentOfPeakThroughput?: number;
            statsCollectionEnabled?: boolean;
            statsAggregationDisabled?: boolean;
         }
         interface StorageIORMConfigOption extends integrityService.vim.DynamicData {
            enabledOption: integrityService.vim.BoolOption;
            congestionThresholdOption: integrityService.vim.IntOption;
            statsCollectionEnabledOption?: integrityService.vim.BoolOption;
         }
         interface StoragePerformanceSummary extends integrityService.vim.DynamicData {
            interval: number;
            percentile: Array<number>;
            datastoreReadLatency: Array<number>;
            datastoreWriteLatency: Array<number>;
            datastoreVmLatency: Array<number>;
            datastoreReadIops: Array<number>;
            datastoreWriteIops: Array<number>;
            siocActivityDuration: number;
         }
         interface ArrayOfStoragePerformanceSummary {
            StoragePerformanceSummary?: Array<integrityService.vim.StoragePerformanceSummary>;
         }
         interface PodStorageDrsEntry extends integrityService.vim.DynamicData {
            storageDrsConfig: integrityService.vim.StorageDrsConfigInfo;
            recommendation?: Array<integrityService.vim.ClusterRecommendation>;
            drsFault?: Array<integrityService.vim.ClusterDrsFaults>;
            actionHistory?: Array<integrityService.vim.ClusterActionHistory>;
         }
         interface StringExpression extends integrityService.vim.NegatableExpression {
            value?: string;
         }
         interface StringPolicy extends integrityService.vim.InheritablePolicy {
            value?: string;
         }
         interface Tag extends integrityService.vim.DynamicData {
            key: string;
         }
         interface ArrayOfTag {
            Tag?: Array<integrityService.vim.Tag>;
         }
         interface TaskDescription extends integrityService.vim.DynamicData {
            methodInfo: Array<integrityService.vim.ElementDescription>;
            state: Array<integrityService.vim.ElementDescription>;
            reason: Array<integrityService.vim.TypeDescription>;
         }
         enum TaskFilterSpecRecursionOption {
            "self",
            "children",
            "all",
         }
         enum TaskFilterSpecTimeOption {
            "queuedTime",
            "startedTime",
            "completedTime",
         }
         interface TaskFilterSpecByEntity extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            recursion: integrityService.vim.TaskFilterSpecRecursionOption;
         }
         interface TaskFilterSpecByTime extends integrityService.vim.DynamicData {
            timeType: integrityService.vim.TaskFilterSpecTimeOption;
            beginTime?: Date;
            endTime?: Date;
         }
         interface TaskFilterSpecByUsername extends integrityService.vim.DynamicData {
            systemUser: boolean;
            userList?: Array<string>;
         }
         interface TaskFilterSpec extends integrityService.vim.DynamicData {
            entity?: integrityService.vim.TaskFilterSpecByEntity;
            time?: integrityService.vim.TaskFilterSpecByTime;
            userName?: integrityService.vim.TaskFilterSpecByUsername;
            state?: Array<integrityService.vim.TaskInfoState>;
            alarm?: integrityService.vim.ManagedObjectReference;
            scheduledTask?: integrityService.vim.ManagedObjectReference;
            eventChainId?: Array<number>;
            tag?: Array<string>;
            parentTaskKey?: Array<string>;
            rootTaskKey?: Array<string>;
         }
         enum TaskInfoState {
            "queued",
            "running",
            "success",
            "error",
         }
         interface ArrayOfTaskInfoState {
            TaskInfoState?: Array<integrityService.vim.TaskInfoState>;
         }
         interface TaskInfo extends integrityService.vim.DynamicData {
            key: string;
            task: integrityService.vim.ManagedObjectReference;
            description?: integrityService.vim.LocalizableMessage;
            name?: string;
            descriptionId: string;
            entity?: integrityService.vim.ManagedObjectReference;
            entityName?: string;
            locked?: Array<integrityService.vim.ManagedObjectReference>;
            state: integrityService.vim.TaskInfoState;
            cancelled: boolean;
            cancelable: boolean;
            error?: integrityService.vim.LocalizedMethodFault;
            result?: any;
            progress?: number;
            reason: integrityService.vim.TaskReason;
            queueTime: Date;
            startTime?: Date;
            completeTime?: Date;
            eventChainId: number;
            changeTag?: string;
            parentTaskKey?: string;
            rootTaskKey?: string;
         }
         interface ArrayOfTaskInfo {
            TaskInfo?: Array<integrityService.vim.TaskInfo>;
         }
         interface TaskReason extends integrityService.vim.DynamicData {
         }
         interface TaskReasonSystem extends integrityService.vim.TaskReason {
         }
         interface TaskReasonUser extends integrityService.vim.TaskReason {
            userName: string;
         }
         interface TaskReasonAlarm extends integrityService.vim.TaskReason {
            alarmName: string;
            alarm: integrityService.vim.ManagedObjectReference;
            entityName: string;
            entity: integrityService.vim.ManagedObjectReference;
         }
         interface TaskReasonSchedule extends integrityService.vim.TaskReason {
            name: string;
            scheduledTask: integrityService.vim.ManagedObjectReference;
         }
         interface TypeDescription extends integrityService.vim.Description {
            key: string;
         }
         interface ArrayOfTypeDescription {
            TypeDescription?: Array<integrityService.vim.TypeDescription>;
         }
         interface UpdateVirtualMachineFilesResultFailedVmFileInfo extends integrityService.vim.DynamicData {
            vmFile: string;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo {
            UpdateVirtualMachineFilesResultFailedVmFileInfo?: Array<integrityService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo>;
         }
         interface UpdateVirtualMachineFilesResult extends integrityService.vim.DynamicData {
            failedVmFile?: Array<integrityService.vim.UpdateVirtualMachineFilesResultFailedVmFileInfo>;
         }
         interface UserSearchResult extends integrityService.vim.DynamicData {
            principal: string;
            fullName?: string;
            group: boolean;
         }
         interface ArrayOfUserSearchResult {
            UserSearchResult?: Array<integrityService.vim.UserSearchResult>;
         }
         interface UserSession extends integrityService.vim.DynamicData {
            key: string;
            userName: string;
            fullName: string;
            loginTime: Date;
            lastActiveTime: Date;
            locale: string;
            messageLocale: string;
            extensionSession?: boolean;
            ipAddress?: string;
            userAgent?: string;
            callCount?: number;
         }
         interface ArrayOfUserSession {
            UserSession?: Array<integrityService.vim.UserSession>;
         }
         enum VirtualAppVAppState {
            "started",
            "stopped",
            "starting",
            "stopping",
         }
         interface VirtualAppSummary extends integrityService.vim.ResourcePoolSummary {
            product?: integrityService.vim.VAppProductInfo;
            vAppState?: integrityService.vim.VirtualAppVAppState;
            suspended?: boolean;
            installBootRequired?: boolean;
            instanceUuid?: string;
         }
         interface VirtualAppLinkInfo extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            destroyWithParent?: boolean;
         }
         interface ArrayOfVirtualAppLinkInfo {
            VirtualAppLinkInfo?: Array<integrityService.vim.VirtualAppLinkInfo>;
         }
         enum VirtualDiskType {
            "preallocated",
            "thin",
            "seSparse",
            "rdm",
            "rdmp",
            "raw",
            "delta",
            "sparse2Gb",
            "thick2Gb",
            "eagerZeroedThick",
            "sparseMonolithic",
            "flatMonolithic",
            "thick",
         }
         enum VirtualDiskAdapterType {
            "ide",
            "busLogic",
            "lsiLogic",
         }
         interface VirtualDiskSpec extends integrityService.vim.DynamicData {
            diskType: string;
            adapterType: string;
         }
         interface FileBackedVirtualDiskSpec extends integrityService.vim.VirtualDiskSpec {
            capacityKb: number;
            profile?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface SeSparseVirtualDiskSpec extends integrityService.vim.FileBackedVirtualDiskSpec {
            grainSizeKb?: number;
         }
         interface DeviceBackedVirtualDiskSpec extends integrityService.vim.VirtualDiskSpec {
            device: string;
         }
         interface StorageRequirement extends integrityService.vim.DynamicData {
            datastore: integrityService.vim.ManagedObjectReference;
            freeSpaceRequiredInKb: number;
         }
         interface ArrayOfStorageRequirement {
            StorageRequirement?: Array<integrityService.vim.StorageRequirement>;
         }
         enum VirtualMachinePowerState {
            "poweredOff",
            "poweredOn",
            "suspended",
         }
         enum VirtualMachineAppHeartbeatStatusType {
            "appStatusGray",
            "appStatusGreen",
            "appStatusRed",
         }
         enum VirtualMachineConnectionState {
            "connected",
            "disconnected",
            "orphaned",
            "inaccessible",
            "invalid",
         }
         enum VirtualMachineMovePriority {
            "lowPriority",
            "highPriority",
            "defaultPriority",
         }
         interface VirtualMachineTicket extends integrityService.vim.DynamicData {
            ticket: string;
            cfgFile: string;
            host?: string;
            port?: number;
            sslThumbprint?: string;
         }
         interface VirtualMachineMksTicket extends integrityService.vim.DynamicData {
            ticket: string;
            cfgFile: string;
            host?: string;
            port?: number;
            sslThumbprint?: string;
         }
         enum VirtualMachineFaultToleranceState {
            "notConfigured",
            "disabled",
            "enabled",
            "needSecondary",
            "starting",
            "running",
         }
         enum VirtualMachineRecordReplayState {
            "recording",
            "replaying",
            "inactive",
         }
         enum VirtualMachineNeedSecondaryReason {
            "initializing",
            "divergence",
            "lostConnection",
            "partialHardwareFailure",
            "userAction",
            "other",
         }
         enum VirtualMachineTicketType {
            "mks",
            "device",
            "guestControl",
         }
         interface VirtualMachineDisplayTopology extends integrityService.vim.DynamicData {
            x: number;
            y: number;
            width: number;
            height: number;
         }
         interface ArrayOfVirtualMachineDisplayTopology {
            VirtualMachineDisplayTopology?: Array<integrityService.vim.VirtualMachineDisplayTopology>;
         }
         interface DiskChangeExtent extends integrityService.vim.DynamicData {
            start: number;
            length: number;
         }
         interface ArrayOfDiskChangeExtent {
            DiskChangeExtent?: Array<integrityService.vim.DiskChangeExtent>;
         }
         interface DiskChangeInfo extends integrityService.vim.DynamicData {
            startOffset: number;
            length: number;
            changedArea?: Array<integrityService.vim.DiskChangeExtent>;
         }
         interface VirtualMachineWipeResult extends integrityService.vim.DynamicData {
            diskId: number;
            shrinkableDiskSpace: number;
         }
         enum ActionParameter {
            "targetName",
            "alarmName",
            "oldStatus",
            "newStatus",
            "triggeringSummary",
            "declaringSummary",
            "eventDescription",
            "target",
            "alarm",
         }
         interface Action extends integrityService.vim.DynamicData {
         }
         interface MethodActionArgument extends integrityService.vim.DynamicData {
            value?: any;
         }
         interface ArrayOfMethodActionArgument {
            MethodActionArgument?: Array<integrityService.vim.MethodActionArgument>;
         }
         interface MethodAction extends integrityService.vim.Action {
            name: string;
            argument?: Array<integrityService.vim.MethodActionArgument>;
         }
         interface SendEmailAction extends integrityService.vim.Action {
            toList: string;
            ccList: string;
            subject: string;
            body: string;
         }
         interface SendSNMPAction extends integrityService.vim.Action {
         }
         interface RunScriptAction extends integrityService.vim.Action {
            script: string;
         }
         interface CreateTaskAction extends integrityService.vim.Action {
            taskTypeId: string;
            cancelable: boolean;
         }
         interface AlarmAction extends integrityService.vim.DynamicData {
         }
         interface ArrayOfAlarmAction {
            AlarmAction?: Array<integrityService.vim.AlarmAction>;
         }
         interface AlarmTriggeringActionTransitionSpec extends integrityService.vim.DynamicData {
            startState: integrityService.vim.ManagedEntityStatus;
            finalState: integrityService.vim.ManagedEntityStatus;
            repeats: boolean;
         }
         interface ArrayOfAlarmTriggeringActionTransitionSpec {
            AlarmTriggeringActionTransitionSpec?: Array<integrityService.vim.AlarmTriggeringActionTransitionSpec>;
         }
         interface AlarmTriggeringAction extends integrityService.vim.AlarmAction {
            action: integrityService.vim.Action;
            transitionSpecs?: Array<integrityService.vim.AlarmTriggeringActionTransitionSpec>;
            green2yellow: boolean;
            yellow2red: boolean;
            red2yellow: boolean;
            yellow2green: boolean;
         }
         interface GroupAlarmAction extends integrityService.vim.AlarmAction {
            action: Array<integrityService.vim.AlarmAction>;
         }
         interface AlarmDescription extends integrityService.vim.DynamicData {
            expr: Array<integrityService.vim.TypeDescription>;
            stateOperator: Array<integrityService.vim.ElementDescription>;
            metricOperator: Array<integrityService.vim.ElementDescription>;
            hostSystemConnectionState: Array<integrityService.vim.ElementDescription>;
            virtualMachinePowerState: Array<integrityService.vim.ElementDescription>;
            datastoreConnectionState?: Array<integrityService.vim.ElementDescription>;
            hostSystemPowerState?: Array<integrityService.vim.ElementDescription>;
            virtualMachineGuestHeartbeatStatus?: Array<integrityService.vim.ElementDescription>;
            entityStatus: Array<integrityService.vim.ElementDescription>;
            action: Array<integrityService.vim.TypeDescription>;
         }
         interface AlarmExpression extends integrityService.vim.DynamicData {
         }
         interface ArrayOfAlarmExpression {
            AlarmExpression?: Array<integrityService.vim.AlarmExpression>;
         }
         interface AndAlarmExpression extends integrityService.vim.AlarmExpression {
            expression: Array<integrityService.vim.AlarmExpression>;
         }
         interface OrAlarmExpression extends integrityService.vim.AlarmExpression {
            expression: Array<integrityService.vim.AlarmExpression>;
         }
         enum StateAlarmOperator {
            "isEqual",
            "isUnequal",
         }
         interface StateAlarmExpression extends integrityService.vim.AlarmExpression {
            operator: integrityService.vim.StateAlarmOperator;
            type: string;
            statePath: string;
            yellow?: string;
            red?: string;
         }
         enum EventAlarmExpressionComparisonOperator {
            "equals",
            "notEqualTo",
            "startsWith",
            "doesNotStartWith",
            "endsWith",
            "doesNotEndWith",
         }
         interface EventAlarmExpressionComparison extends integrityService.vim.DynamicData {
            attributeName: string;
            operator: string;
            value: string;
         }
         interface ArrayOfEventAlarmExpressionComparison {
            EventAlarmExpressionComparison?: Array<integrityService.vim.EventAlarmExpressionComparison>;
         }
         interface EventAlarmExpression extends integrityService.vim.AlarmExpression {
            comparisons?: Array<integrityService.vim.EventAlarmExpressionComparison>;
            eventType: string;
            eventTypeId?: string;
            objectType?: string;
            status?: integrityService.vim.ManagedEntityStatus;
         }
         enum MetricAlarmOperator {
            "isAbove",
            "isBelow",
         }
         interface MetricAlarmExpression extends integrityService.vim.AlarmExpression {
            operator: integrityService.vim.MetricAlarmOperator;
            type: string;
            metric: integrityService.vim.PerfMetricId;
            yellow?: number;
            yellowInterval?: number;
            red?: number;
            redInterval?: number;
         }
         interface AlarmInfo extends integrityService.vim.AlarmSpec {
            key: string;
            alarm: integrityService.vim.ManagedObjectReference;
            entity: integrityService.vim.ManagedObjectReference;
            lastModifiedTime: Date;
            lastModifiedUser: string;
            creationEventId: number;
         }
         interface AlarmSetting extends integrityService.vim.DynamicData {
            toleranceRange: number;
            reportingFrequency: number;
         }
         interface AlarmSpec extends integrityService.vim.DynamicData {
            name: string;
            systemName?: string;
            description: string;
            enabled: boolean;
            expression: integrityService.vim.AlarmExpression;
            action?: integrityService.vim.AlarmAction;
            actionFrequency?: number;
            setting?: integrityService.vim.AlarmSetting;
         }
         interface AlarmState extends integrityService.vim.DynamicData {
            key: string;
            entity: integrityService.vim.ManagedObjectReference;
            alarm: integrityService.vim.ManagedObjectReference;
            overallStatus: integrityService.vim.ManagedEntityStatus;
            time: Date;
            acknowledged?: boolean;
            acknowledgedByUser?: string;
            acknowledgedTime?: Date;
         }
         interface ArrayOfAlarmState {
            AlarmState?: Array<integrityService.vim.AlarmState>;
         }
         enum ActionType {
            "MigrationV1",
            "VmPowerV1",
            "HostPowerV1",
            "HostMaintenanceV1",
            "StorageMigrationV1",
            "StoragePlacementV1",
         }
         interface ClusterAction extends integrityService.vim.DynamicData {
            type: string;
            target?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfClusterAction {
            ClusterAction?: Array<integrityService.vim.ClusterAction>;
         }
         interface ClusterActionHistory extends integrityService.vim.DynamicData {
            action: integrityService.vim.ClusterAction;
            time: Date;
         }
         interface ArrayOfClusterActionHistory {
            ClusterActionHistory?: Array<integrityService.vim.ClusterActionHistory>;
         }
         interface ClusterAffinityRuleSpec extends integrityService.vim.ClusterRuleInfo {
            vm: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ClusterAntiAffinityRuleSpec extends integrityService.vim.ClusterRuleInfo {
            vm: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ClusterAttemptedVmInfo extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            task?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfClusterAttemptedVmInfo {
            ClusterAttemptedVmInfo?: Array<integrityService.vim.ClusterAttemptedVmInfo>;
         }
         interface ClusterConfigInfo extends integrityService.vim.DynamicData {
            dasConfig: integrityService.vim.ClusterDasConfigInfo;
            dasVmConfig?: Array<integrityService.vim.ClusterDasVmConfigInfo>;
            drsConfig: integrityService.vim.ClusterDrsConfigInfo;
            drsVmConfig?: Array<integrityService.vim.ClusterDrsVmConfigInfo>;
            rule?: Array<integrityService.vim.ClusterRuleInfo>;
         }
         enum DrsBehavior {
            "manual",
            "partiallyAutomated",
            "fullyAutomated",
         }
         interface ClusterDrsConfigInfo extends integrityService.vim.DynamicData {
            enabled?: boolean;
            enableVmBehaviorOverrides?: boolean;
            defaultVmBehavior?: integrityService.vim.DrsBehavior;
            vmotionRate?: number;
            option?: Array<integrityService.vim.OptionValue>;
         }
         interface ClusterDrsVmConfigInfo extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            enabled?: boolean;
            behavior?: integrityService.vim.DrsBehavior;
         }
         interface ArrayOfClusterDrsVmConfigInfo {
            ClusterDrsVmConfigInfo?: Array<integrityService.vim.ClusterDrsVmConfigInfo>;
         }
         interface ClusterConfigInfoEx extends integrityService.vim.ComputeResourceConfigInfo {
            dasConfig: integrityService.vim.ClusterDasConfigInfo;
            dasVmConfig?: Array<integrityService.vim.ClusterDasVmConfigInfo>;
            drsConfig: integrityService.vim.ClusterDrsConfigInfo;
            drsVmConfig?: Array<integrityService.vim.ClusterDrsVmConfigInfo>;
            rule?: Array<integrityService.vim.ClusterRuleInfo>;
            dpmConfigInfo?: integrityService.vim.ClusterDpmConfigInfo;
            dpmHostConfig?: Array<integrityService.vim.ClusterDpmHostConfigInfo>;
            vsanConfigInfo?: integrityService.vim.VsanClusterConfigInfo;
            vsanHostConfig?: Array<integrityService.vim.VsanHostConfigInfo>;
            group?: Array<integrityService.vim.ClusterGroupInfo>;
         }
         enum DpmBehavior {
            "manual",
            "automated",
         }
         interface ClusterDpmConfigInfo extends integrityService.vim.DynamicData {
            enabled?: boolean;
            defaultDpmBehavior?: integrityService.vim.DpmBehavior;
            hostPowerActionRate?: number;
            option?: Array<integrityService.vim.OptionValue>;
         }
         interface ClusterDpmHostConfigInfo extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            enabled?: boolean;
            behavior?: integrityService.vim.DpmBehavior;
         }
         interface ArrayOfClusterDpmHostConfigInfo {
            ClusterDpmHostConfigInfo?: Array<integrityService.vim.ClusterDpmHostConfigInfo>;
         }
         interface ClusterConfigSpec extends integrityService.vim.DynamicData {
            dasConfig?: integrityService.vim.ClusterDasConfigInfo;
            dasVmConfigSpec?: Array<integrityService.vim.ClusterDasVmConfigSpec>;
            drsConfig?: integrityService.vim.ClusterDrsConfigInfo;
            drsVmConfigSpec?: Array<integrityService.vim.ClusterDrsVmConfigSpec>;
            rulesSpec?: Array<integrityService.vim.ClusterRuleSpec>;
         }
         interface ClusterDasVmConfigSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.ClusterDasVmConfigInfo;
         }
         interface ArrayOfClusterDasVmConfigSpec {
            ClusterDasVmConfigSpec?: Array<integrityService.vim.ClusterDasVmConfigSpec>;
         }
         interface ClusterDrsVmConfigSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.ClusterDrsVmConfigInfo;
         }
         interface ArrayOfClusterDrsVmConfigSpec {
            ClusterDrsVmConfigSpec?: Array<integrityService.vim.ClusterDrsVmConfigSpec>;
         }
         interface ClusterConfigSpecEx extends integrityService.vim.ComputeResourceConfigSpec {
            dasConfig?: integrityService.vim.ClusterDasConfigInfo;
            dasVmConfigSpec?: Array<integrityService.vim.ClusterDasVmConfigSpec>;
            drsConfig?: integrityService.vim.ClusterDrsConfigInfo;
            drsVmConfigSpec?: Array<integrityService.vim.ClusterDrsVmConfigSpec>;
            rulesSpec?: Array<integrityService.vim.ClusterRuleSpec>;
            dpmConfig?: integrityService.vim.ClusterDpmConfigInfo;
            dpmHostConfigSpec?: Array<integrityService.vim.ClusterDpmHostConfigSpec>;
            vsanConfig?: integrityService.vim.VsanClusterConfigInfo;
            vsanHostConfigSpec?: Array<integrityService.vim.VsanHostConfigInfo>;
            groupSpec?: Array<integrityService.vim.ClusterGroupSpec>;
         }
         interface ClusterDpmHostConfigSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.ClusterDpmHostConfigInfo;
         }
         interface ArrayOfClusterDpmHostConfigSpec {
            ClusterDpmHostConfigSpec?: Array<integrityService.vim.ClusterDpmHostConfigSpec>;
         }
         interface ClusterGroupSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.ClusterGroupInfo;
         }
         interface ArrayOfClusterGroupSpec {
            ClusterGroupSpec?: Array<integrityService.vim.ClusterGroupSpec>;
         }
         interface ClusterDasAamHostInfo extends integrityService.vim.ClusterDasHostInfo {
            hostDasState?: Array<integrityService.vim.ClusterDasAamNodeState>;
            primaryHosts?: Array<string>;
         }
         enum ClusterDasAamNodeStateDasState {
            "uninitialized",
            "initialized",
            "configuring",
            "unconfiguring",
            "running",
            "error",
            "agentShutdown",
            "nodeFailed",
         }
         interface ClusterDasAamNodeState extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            name: string;
            configState: string;
            runtimeState: string;
         }
         interface ArrayOfClusterDasAamNodeState {
            ClusterDasAamNodeState?: Array<integrityService.vim.ClusterDasAamNodeState>;
         }
         interface ClusterDasAdmissionControlInfo extends integrityService.vim.DynamicData {
         }
         interface ClusterDasAdmissionControlPolicy extends integrityService.vim.DynamicData {
         }
         interface DasHeartbeatDatastoreInfo extends integrityService.vim.DynamicData {
            datastore: integrityService.vim.ManagedObjectReference;
            hosts: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ArrayOfDasHeartbeatDatastoreInfo {
            DasHeartbeatDatastoreInfo?: Array<integrityService.vim.DasHeartbeatDatastoreInfo>;
         }
         interface ClusterDasAdvancedRuntimeInfo extends integrityService.vim.DynamicData {
            dasHostInfo?: integrityService.vim.ClusterDasHostInfo;
            heartbeatDatastoreInfo?: Array<integrityService.vim.DasHeartbeatDatastoreInfo>;
         }
         enum ClusterDasConfigInfoServiceState {
            "disabled",
            "enabled",
         }
         enum ClusterDasConfigInfoVmMonitoringState {
            "vmMonitoringDisabled",
            "vmMonitoringOnly",
            "vmAndAppMonitoring",
         }
         enum ClusterDasConfigInfoHBDatastoreCandidate {
            "userSelectedDs",
            "allFeasibleDs",
            "allFeasibleDsWithUserPreference",
         }
         interface ClusterDasConfigInfo extends integrityService.vim.DynamicData {
            enabled?: boolean;
            vmMonitoring?: string;
            hostMonitoring?: string;
            failoverLevel?: number;
            admissionControlPolicy?: integrityService.vim.ClusterDasAdmissionControlPolicy;
            admissionControlEnabled?: boolean;
            defaultVmSettings?: integrityService.vim.ClusterDasVmSettings;
            option?: Array<integrityService.vim.OptionValue>;
            heartbeatDatastore?: Array<integrityService.vim.ManagedObjectReference>;
            hBDatastoreCandidatePolicy?: string;
         }
         interface ClusterDasData extends integrityService.vim.DynamicData {
         }
         interface ClusterDasDataSummary extends integrityService.vim.ClusterDasData {
            hostListVersion: number;
            clusterConfigVersion: number;
            compatListVersion: number;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo extends integrityService.vim.DynamicData {
            numVcpus: number;
            cpuMHz: number;
            memoryMB: number;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            slots: number;
         }
         interface ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots {
            ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots?: Array<integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots>;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            slots: number;
         }
         interface ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots {
            ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots?: Array<integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots>;
         }
         interface ClusterDasFailoverLevelAdvancedRuntimeInfo extends integrityService.vim.ClusterDasAdvancedRuntimeInfo {
            slotInfo: integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo;
            totalSlots: number;
            usedSlots: number;
            unreservedSlots: number;
            totalVms: number;
            totalHosts: number;
            totalGoodHosts: number;
            hostSlots?: Array<integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots>;
            vmsRequiringMultipleSlots?: Array<integrityService.vim.ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots>;
         }
         enum ClusterDasFdmAvailabilityState {
            "uninitialized",
            "election",
            "master",
            "connectedToMaster",
            "networkPartitionedFromMaster",
            "networkIsolated",
            "hostDown",
            "initializationError",
            "uninitializationError",
            "fdmUnreachable",
         }
         interface ClusterDasFdmHostState extends integrityService.vim.DynamicData {
            state: string;
            stateReporter?: integrityService.vim.ManagedObjectReference;
         }
         interface ClusterDasHostInfo extends integrityService.vim.DynamicData {
         }
         interface ClusterDasHostRecommendation extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            drsRating?: number;
         }
         enum DasVmPriority {
            "disabled",
            "low",
            "medium",
            "high",
         }
         interface ClusterDasVmConfigInfo extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            restartPriority?: integrityService.vim.DasVmPriority;
            powerOffOnIsolation?: boolean;
            dasSettings?: integrityService.vim.ClusterDasVmSettings;
         }
         interface ArrayOfClusterDasVmConfigInfo {
            ClusterDasVmConfigInfo?: Array<integrityService.vim.ClusterDasVmConfigInfo>;
         }
         enum ClusterDasVmSettingsRestartPriority {
            "disabled",
            "low",
            "medium",
            "high",
            "clusterRestartPriority",
         }
         enum ClusterDasVmSettingsIsolationResponse {
            "none",
            "powerOff",
            "shutdown",
            "clusterIsolationResponse",
         }
         interface ClusterDasVmSettings extends integrityService.vim.DynamicData {
            restartPriority?: string;
            isolationResponse?: string;
            vmToolsMonitoringSettings?: integrityService.vim.ClusterVmToolsMonitoringSettings;
         }
         interface ClusterDrsFaultsFaultsByVm extends integrityService.vim.DynamicData {
            vm?: integrityService.vim.ManagedObjectReference;
            fault: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfClusterDrsFaultsFaultsByVm {
            ClusterDrsFaultsFaultsByVm?: Array<integrityService.vim.ClusterDrsFaultsFaultsByVm>;
         }
         interface ClusterDrsFaultsFaultsByVirtualDisk extends integrityService.vim.ClusterDrsFaultsFaultsByVm {
            disk?: integrityService.vim.VirtualDiskId;
         }
         interface ClusterDrsFaults extends integrityService.vim.DynamicData {
            reason: string;
            faultsByVm: Array<integrityService.vim.ClusterDrsFaultsFaultsByVm>;
         }
         interface ArrayOfClusterDrsFaults {
            ClusterDrsFaults?: Array<integrityService.vim.ClusterDrsFaults>;
         }
         interface ClusterDrsMigration extends integrityService.vim.DynamicData {
            key: string;
            time: Date;
            vm: integrityService.vim.ManagedObjectReference;
            cpuLoad?: number;
            memoryLoad?: number;
            source: integrityService.vim.ManagedObjectReference;
            sourceCpuLoad?: number;
            sourceMemoryLoad?: number;
            destination: integrityService.vim.ManagedObjectReference;
            destinationCpuLoad?: number;
            destinationMemoryLoad?: number;
         }
         interface ArrayOfClusterDrsMigration {
            ClusterDrsMigration?: Array<integrityService.vim.ClusterDrsMigration>;
         }
         enum DrsRecommendationReasonCode {
            "fairnessCpuAvg",
            "fairnessMemAvg",
            "jointAffin",
            "antiAffin",
            "hostMaint",
         }
         interface ClusterDrsRecommendation extends integrityService.vim.DynamicData {
            key: string;
            rating: number;
            reason: string;
            reasonText: string;
            migrationList: Array<integrityService.vim.ClusterDrsMigration>;
         }
         interface ArrayOfClusterDrsRecommendation {
            ClusterDrsRecommendation?: Array<integrityService.vim.ClusterDrsRecommendation>;
         }
         interface ClusterEnterMaintenanceResult extends integrityService.vim.DynamicData {
            recommendations?: Array<integrityService.vim.ClusterRecommendation>;
            fault?: integrityService.vim.ClusterDrsFaults;
         }
         interface ClusterFailoverHostAdmissionControlInfoHostStatus extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            status: integrityService.vim.ManagedEntityStatus;
         }
         interface ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus {
            ClusterFailoverHostAdmissionControlInfoHostStatus?: Array<integrityService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus>;
         }
         interface ClusterFailoverHostAdmissionControlInfo extends integrityService.vim.ClusterDasAdmissionControlInfo {
            hostStatus?: Array<integrityService.vim.ClusterFailoverHostAdmissionControlInfoHostStatus>;
         }
         interface ClusterFailoverHostAdmissionControlPolicy extends integrityService.vim.ClusterDasAdmissionControlPolicy {
            failoverHosts?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ClusterFailoverLevelAdmissionControlInfo extends integrityService.vim.ClusterDasAdmissionControlInfo {
            currentFailoverLevel: number;
         }
         interface ClusterFailoverLevelAdmissionControlPolicy extends integrityService.vim.ClusterDasAdmissionControlPolicy {
            failoverLevel: number;
            slotPolicy?: integrityService.vim.ClusterSlotPolicy;
         }
         interface ClusterFailoverResourcesAdmissionControlInfo extends integrityService.vim.ClusterDasAdmissionControlInfo {
            currentCpuFailoverResourcesPercent: number;
            currentMemoryFailoverResourcesPercent: number;
         }
         interface ClusterFailoverResourcesAdmissionControlPolicy extends integrityService.vim.ClusterDasAdmissionControlPolicy {
            cpuFailoverResourcesPercent: number;
            memoryFailoverResourcesPercent: number;
         }
         interface ClusterGroupInfo extends integrityService.vim.DynamicData {
            name: string;
            userCreated?: boolean;
         }
         interface ArrayOfClusterGroupInfo {
            ClusterGroupInfo?: Array<integrityService.vim.ClusterGroupInfo>;
         }
         interface ClusterHostGroup extends integrityService.vim.ClusterGroupInfo {
            host?: Array<integrityService.vim.ManagedObjectReference>;
         }
         enum HostPowerOperationType {
            "powerOn",
            "powerOff",
         }
         interface ClusterHostPowerAction extends integrityService.vim.ClusterAction {
            operationType: integrityService.vim.HostPowerOperationType;
            powerConsumptionWatt?: number;
            cpuCapacityMHz?: number;
            memCapacityMB?: number;
         }
         interface ClusterHostRecommendation extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            rating: number;
         }
         interface ArrayOfClusterHostRecommendation {
            ClusterHostRecommendation?: Array<integrityService.vim.ClusterHostRecommendation>;
         }
         interface ClusterInitialPlacementAction extends integrityService.vim.ClusterAction {
            targetHost: integrityService.vim.ManagedObjectReference;
            pool?: integrityService.vim.ManagedObjectReference;
         }
         interface ClusterMigrationAction extends integrityService.vim.ClusterAction {
            drsMigration?: integrityService.vim.ClusterDrsMigration;
         }
         interface ClusterNotAttemptedVmInfo extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfClusterNotAttemptedVmInfo {
            ClusterNotAttemptedVmInfo?: Array<integrityService.vim.ClusterNotAttemptedVmInfo>;
         }
         enum ClusterPowerOnVmOption {
            "OverrideAutomationLevel",
            "ReserveResources",
         }
         interface ClusterPowerOnVmResult extends integrityService.vim.DynamicData {
            attempted?: Array<integrityService.vim.ClusterAttemptedVmInfo>;
            notAttempted?: Array<integrityService.vim.ClusterNotAttemptedVmInfo>;
            recommendations?: Array<integrityService.vim.ClusterRecommendation>;
         }
         enum RecommendationType {
            "V1",
         }
         enum RecommendationReasonCode {
            "fairnessCpuAvg",
            "fairnessMemAvg",
            "jointAffin",
            "antiAffin",
            "hostMaint",
            "enterStandby",
            "reservationCpu",
            "reservationMem",
            "powerOnVm",
            "powerSaving",
            "increaseCapacity",
            "checkResource",
            "unreservedCapacity",
            "vmHostHardAffinity",
            "vmHostSoftAffinity",
            "balanceDatastoreSpaceUsage",
            "balanceDatastoreIOLoad",
            "datastoreMaint",
            "virtualDiskJointAffin",
            "virtualDiskAntiAffin",
            "datastoreSpaceOutage",
            "storagePlacement",
            "iolbDisabledInternal",
         }
         interface ClusterRecommendation extends integrityService.vim.DynamicData {
            key: string;
            type: string;
            time: Date;
            rating: number;
            reason: string;
            reasonText: string;
            prerequisite?: Array<string>;
            action?: Array<integrityService.vim.ClusterAction>;
            target?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfClusterRecommendation {
            ClusterRecommendation?: Array<integrityService.vim.ClusterRecommendation>;
         }
         interface ClusterRuleInfo extends integrityService.vim.DynamicData {
            key?: number;
            status?: integrityService.vim.ManagedEntityStatus;
            enabled?: boolean;
            name?: string;
            mandatory?: boolean;
            userCreated?: boolean;
            inCompliance?: boolean;
         }
         interface ArrayOfClusterRuleInfo {
            ClusterRuleInfo?: Array<integrityService.vim.ClusterRuleInfo>;
         }
         interface ClusterRuleSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.ClusterRuleInfo;
         }
         interface ArrayOfClusterRuleSpec {
            ClusterRuleSpec?: Array<integrityService.vim.ClusterRuleSpec>;
         }
         interface ClusterSlotPolicy extends integrityService.vim.DynamicData {
         }
         interface ClusterFixedSizeSlotPolicy extends integrityService.vim.ClusterSlotPolicy {
            cpu: number;
            memory: number;
         }
         interface ClusterVmGroup extends integrityService.vim.ClusterGroupInfo {
            vm?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ClusterVmHostRuleInfo extends integrityService.vim.ClusterRuleInfo {
            vmGroupName?: string;
            affineHostGroupName?: string;
            antiAffineHostGroupName?: string;
         }
         interface ClusterVmToolsMonitoringSettings extends integrityService.vim.DynamicData {
            enabled?: boolean;
            vmMonitoring?: string;
            clusterSettings?: boolean;
            failureInterval?: number;
            minUpTime?: number;
            maxFailures?: number;
            maxFailureWindow?: number;
         }
         interface DVPortConfigSpec extends integrityService.vim.DynamicData {
            operation: string;
            key?: string;
            name?: string;
            scope?: Array<integrityService.vim.ManagedObjectReference>;
            description?: string;
            setting?: integrityService.vim.DVPortSetting;
            configVersion?: string;
         }
         interface ArrayOfDVPortConfigSpec {
            DVPortConfigSpec?: Array<integrityService.vim.DVPortConfigSpec>;
         }
         interface DVPortConfigInfo extends integrityService.vim.DynamicData {
            name?: string;
            scope?: Array<integrityService.vim.ManagedObjectReference>;
            description?: string;
            setting?: integrityService.vim.DVPortSetting;
            configVersion: string;
         }
         interface DVSTrafficShapingPolicy extends integrityService.vim.InheritablePolicy {
            enabled?: integrityService.vim.BoolPolicy;
            averageBandwidth?: integrityService.vim.LongPolicy;
            peakBandwidth?: integrityService.vim.LongPolicy;
            burstSize?: integrityService.vim.LongPolicy;
         }
         interface DVSHostLocalPortInfo extends integrityService.vim.DynamicData {
            switchUuid: string;
            portKey: string;
            setting: integrityService.vim.DVPortSetting;
            vnic: string;
         }
         interface DVSVendorSpecificConfig extends integrityService.vim.InheritablePolicy {
            keyValue?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface DvsFilterParameter extends integrityService.vim.DynamicData {
            parameters?: Array<string>;
         }
         enum DvsFilterOnFailure {
            "failOpen",
            "failClosed",
         }
         interface DvsFilterConfig extends integrityService.vim.InheritablePolicy {
            key?: string;
            agentName?: string;
            slotNumber?: string;
            parameters?: integrityService.vim.DvsFilterParameter;
            onFailure?: string;
         }
         interface ArrayOfDvsFilterConfig {
            DvsFilterConfig?: Array<integrityService.vim.DvsFilterConfig>;
         }
         interface DvsTrafficFilterConfig extends integrityService.vim.DvsFilterConfig {
            trafficRuleset?: integrityService.vim.DvsTrafficRuleset;
         }
         interface DvsFilterConfigSpec extends integrityService.vim.DvsFilterConfig {
            operation: string;
         }
         interface DvsTrafficFilterConfigSpec extends integrityService.vim.DvsTrafficFilterConfig {
            operation: string;
         }
         interface DvsFilterPolicy extends integrityService.vim.InheritablePolicy {
            filterConfig?: Array<integrityService.vim.DvsFilterConfig>;
         }
         interface DVPortSetting extends integrityService.vim.DynamicData {
            blocked?: integrityService.vim.BoolPolicy;
            vmDirectPathGen2Allowed?: integrityService.vim.BoolPolicy;
            inShapingPolicy?: integrityService.vim.DVSTrafficShapingPolicy;
            outShapingPolicy?: integrityService.vim.DVSTrafficShapingPolicy;
            vendorSpecificConfig?: integrityService.vim.DVSVendorSpecificConfig;
            networkResourcePoolKey?: integrityService.vim.StringPolicy;
            filterPolicy?: integrityService.vim.DvsFilterPolicy;
         }
         enum DVPortStatusVmDirectPathGen2InactiveReasonNetwork {
            "portNptIncompatibleDvs",
            "portNptNoCompatibleNics",
            "portNptNoVirtualFunctionsAvailable",
            "portNptDisabledForPort",
         }
         enum DVPortStatusVmDirectPathGen2InactiveReasonOther {
            "portNptIncompatibleHost",
            "portNptIncompatibleConnectee",
         }
         interface DVPortStatus extends integrityService.vim.DynamicData {
            linkUp: boolean;
            blocked: boolean;
            vlanIds?: Array<integrityService.vim.NumericRange>;
            trunkingMode?: boolean;
            mtu?: number;
            linkPeer?: string;
            macAddress?: string;
            statusDetail?: string;
            vmDirectPathGen2Active?: boolean;
            vmDirectPathGen2InactiveReasonNetwork?: Array<string>;
            vmDirectPathGen2InactiveReasonOther?: Array<string>;
            vmDirectPathGen2InactiveReasonExtended?: string;
         }
         interface DVPortState extends integrityService.vim.DynamicData {
            runtimeInfo?: integrityService.vim.DVPortStatus;
            stats: integrityService.vim.DistributedVirtualSwitchPortStatistics;
            vendorSpecificState?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface DistributedVirtualPort extends integrityService.vim.DynamicData {
            key: string;
            config: integrityService.vim.DVPortConfigInfo;
            dvsUuid: string;
            portgroupKey?: string;
            proxyHost?: integrityService.vim.ManagedObjectReference;
            connectee?: integrityService.vim.DistributedVirtualSwitchPortConnectee;
            conflict: boolean;
            conflictPortKey?: string;
            state?: integrityService.vim.DVPortState;
            connectionCookie?: number;
            lastStatusChange: Date;
            hostLocalPort?: boolean;
         }
         interface ArrayOfDistributedVirtualPort {
            DistributedVirtualPort?: Array<integrityService.vim.DistributedVirtualPort>;
         }
         enum DistributedVirtualPortgroupPortgroupType {
            "earlyBinding",
            "lateBinding",
            "ephemeral",
         }
         interface DVPortgroupPolicy extends integrityService.vim.DynamicData {
            blockOverrideAllowed: boolean;
            shapingOverrideAllowed: boolean;
            vendorConfigOverrideAllowed: boolean;
            livePortMovingAllowed: boolean;
            portConfigResetAtDisconnect: boolean;
            networkResourcePoolOverrideAllowed?: boolean;
            trafficFilterOverrideAllowed?: boolean;
         }
         enum DistributedVirtualPortgroupMetaTagName {
            "dvsName",
            "portgroupName",
            "portIndex",
         }
         interface DVPortgroupConfigSpec extends integrityService.vim.DynamicData {
            configVersion?: string;
            name?: string;
            numPorts?: number;
            portNameFormat?: string;
            defaultPortConfig?: integrityService.vim.DVPortSetting;
            description?: string;
            type?: string;
            scope?: Array<integrityService.vim.ManagedObjectReference>;
            policy?: integrityService.vim.DVPortgroupPolicy;
            vendorSpecificConfig?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            autoExpand?: boolean;
         }
         interface ArrayOfDVPortgroupConfigSpec {
            DVPortgroupConfigSpec?: Array<integrityService.vim.DVPortgroupConfigSpec>;
         }
         interface DVPortgroupConfigInfo extends integrityService.vim.DynamicData {
            key: string;
            name: string;
            numPorts: number;
            distributedVirtualSwitch?: integrityService.vim.ManagedObjectReference;
            defaultPortConfig?: integrityService.vim.DVPortSetting;
            description?: string;
            type: string;
            policy: integrityService.vim.DVPortgroupPolicy;
            portNameFormat?: string;
            scope?: Array<integrityService.vim.ManagedObjectReference>;
            vendorSpecificConfig?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            configVersion?: string;
            autoExpand?: boolean;
         }
         interface DistributedVirtualPortgroupInfo extends integrityService.vim.DynamicData {
            switchName: string;
            switchUuid: string;
            portgroupName: string;
            portgroupKey: string;
            portgroupType: string;
            uplinkPortgroup: boolean;
            portgroup: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfDistributedVirtualPortgroupInfo {
            DistributedVirtualPortgroupInfo?: Array<integrityService.vim.DistributedVirtualPortgroupInfo>;
         }
         interface DVPortgroupSelection extends integrityService.vim.SelectionSet {
            dvsUuid: string;
            portgroupKey: Array<string>;
         }
         interface DistributedVirtualSwitchInfo extends integrityService.vim.DynamicData {
            switchName: string;
            switchUuid: string;
            distributedVirtualSwitch: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfDistributedVirtualSwitchInfo {
            DistributedVirtualSwitchInfo?: Array<integrityService.vim.DistributedVirtualSwitchInfo>;
         }
         interface DVSManagerDvsConfigTarget extends integrityService.vim.DynamicData {
            distributedVirtualPortgroup?: Array<integrityService.vim.DistributedVirtualPortgroupInfo>;
            distributedVirtualSwitch?: Array<integrityService.vim.DistributedVirtualSwitchInfo>;
         }
         interface DistributedVirtualSwitchManagerCompatibilityResult extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfDistributedVirtualSwitchManagerCompatibilityResult {
            DistributedVirtualSwitchManagerCompatibilityResult?: Array<integrityService.vim.DistributedVirtualSwitchManagerCompatibilityResult>;
         }
         interface DistributedVirtualSwitchManagerHostContainer extends integrityService.vim.DynamicData {
            container: integrityService.vim.ManagedObjectReference;
            recursive: boolean;
         }
         interface DistributedVirtualSwitchManagerHostDvsFilterSpec extends integrityService.vim.DynamicData {
            inclusive: boolean;
         }
         interface ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec {
            DistributedVirtualSwitchManagerHostDvsFilterSpec?: Array<integrityService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec>;
         }
         interface DistributedVirtualSwitchManagerHostArrayFilter extends integrityService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec {
            host: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface DistributedVirtualSwitchManagerHostContainerFilter extends integrityService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec {
            hostContainer: integrityService.vim.DistributedVirtualSwitchManagerHostContainer;
         }
         interface DistributedVirtualSwitchManagerHostDvsMembershipFilter extends integrityService.vim.DistributedVirtualSwitchManagerHostDvsFilterSpec {
            distributedVirtualSwitch: integrityService.vim.ManagedObjectReference;
         }
         interface DistributedVirtualSwitchManagerDvsProductSpec extends integrityService.vim.DynamicData {
            newSwitchProductSpec?: integrityService.vim.DistributedVirtualSwitchProductSpec;
            distributedVirtualSwitch?: integrityService.vim.ManagedObjectReference;
         }
         interface DistributedVirtualSwitchManagerImportResult extends integrityService.vim.DynamicData {
            distributedVirtualSwitch?: Array<integrityService.vim.ManagedObjectReference>;
            distributedVirtualPortgroup?: Array<integrityService.vim.ManagedObjectReference>;
            importFault?: Array<integrityService.vim.ImportOperationBulkFaultFaultOnImport>;
         }
         interface DVSSelection extends integrityService.vim.SelectionSet {
            dvsUuid: string;
         }
         interface EntityBackupConfig extends integrityService.vim.DynamicData {
            entityType: string;
            configBlob: string;
            key?: string;
            name?: string;
            container?: integrityService.vim.ManagedObjectReference;
            configVersion?: string;
         }
         interface ArrayOfEntityBackupConfig {
            EntityBackupConfig?: Array<integrityService.vim.EntityBackupConfig>;
         }
         enum EntityType {
            "distributedVirtualSwitch",
            "distributedVirtualPortgroup",
         }
         enum EntityImportType {
            "createEntityWithNewIdentifier",
            "createEntityWithOriginalIdentifier",
            "applyToEntitySpecified",
         }
         interface EntityBackup extends integrityService.vim.DynamicData {
         }
         enum DistributedVirtualSwitchHostMemberHostComponentState {
            "up",
            "pending",
            "outOfSync",
            "warning",
            "disconnected",
            "down",
         }
         interface DistributedVirtualSwitchHostMemberConfigSpec extends integrityService.vim.DynamicData {
            operation: string;
            host: integrityService.vim.ManagedObjectReference;
            backing?: integrityService.vim.DistributedVirtualSwitchHostMemberBacking;
            maxProxySwitchPorts?: number;
            vendorSpecificConfig?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface ArrayOfDistributedVirtualSwitchHostMemberConfigSpec {
            DistributedVirtualSwitchHostMemberConfigSpec?: Array<integrityService.vim.DistributedVirtualSwitchHostMemberConfigSpec>;
         }
         interface DistributedVirtualSwitchHostMemberPnicSpec extends integrityService.vim.DynamicData {
            pnicDevice: string;
            uplinkPortKey?: string;
            uplinkPortgroupKey?: string;
            connectionCookie?: number;
         }
         interface ArrayOfDistributedVirtualSwitchHostMemberPnicSpec {
            DistributedVirtualSwitchHostMemberPnicSpec?: Array<integrityService.vim.DistributedVirtualSwitchHostMemberPnicSpec>;
         }
         interface DistributedVirtualSwitchHostMemberBacking extends integrityService.vim.DynamicData {
         }
         interface DistributedVirtualSwitchHostMemberPnicBacking extends integrityService.vim.DistributedVirtualSwitchHostMemberBacking {
            pnicSpec?: Array<integrityService.vim.DistributedVirtualSwitchHostMemberPnicSpec>;
         }
         interface DistributedVirtualSwitchHostMemberRuntimeState extends integrityService.vim.DynamicData {
            currentMaxProxySwitchPorts: number;
         }
         interface DistributedVirtualSwitchHostMemberConfigInfo extends integrityService.vim.DynamicData {
            host?: integrityService.vim.ManagedObjectReference;
            maxProxySwitchPorts: number;
            vendorSpecificConfig?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
            backing: integrityService.vim.DistributedVirtualSwitchHostMemberBacking;
         }
         interface HostMemberRuntimeInfo extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            status?: string;
            statusDetail?: string;
            healthCheckResult?: Array<integrityService.vim.HostMemberHealthCheckResult>;
         }
         interface ArrayOfHostMemberRuntimeInfo {
            HostMemberRuntimeInfo?: Array<integrityService.vim.HostMemberRuntimeInfo>;
         }
         interface HostMemberHealthCheckResult extends integrityService.vim.DynamicData {
            summary?: string;
         }
         interface ArrayOfHostMemberHealthCheckResult {
            HostMemberHealthCheckResult?: Array<integrityService.vim.HostMemberHealthCheckResult>;
         }
         interface HostMemberUplinkHealthCheckResult extends integrityService.vim.HostMemberHealthCheckResult {
            uplinkPortKey: string;
         }
         interface DistributedVirtualSwitchHostMember extends integrityService.vim.DynamicData {
            runtimeState?: integrityService.vim.DistributedVirtualSwitchHostMemberRuntimeState;
            config: integrityService.vim.DistributedVirtualSwitchHostMemberConfigInfo;
            productInfo?: integrityService.vim.DistributedVirtualSwitchProductSpec;
            uplinkPortKey?: Array<string>;
            status: string;
            statusDetail?: string;
         }
         interface ArrayOfDistributedVirtualSwitchHostMember {
            DistributedVirtualSwitchHostMember?: Array<integrityService.vim.DistributedVirtualSwitchHostMember>;
         }
         interface DistributedVirtualSwitchHostProductSpec extends integrityService.vim.DynamicData {
            productLineId?: string;
            version?: string;
         }
         interface ArrayOfDistributedVirtualSwitchHostProductSpec {
            DistributedVirtualSwitchHostProductSpec?: Array<integrityService.vim.DistributedVirtualSwitchHostProductSpec>;
         }
         interface DistributedVirtualSwitchKeyedOpaqueBlob extends integrityService.vim.DynamicData {
            key: string;
            opaqueData: string;
         }
         interface ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob {
            DistributedVirtualSwitchKeyedOpaqueBlob?: Array<integrityService.vim.DistributedVirtualSwitchKeyedOpaqueBlob>;
         }
         interface DVSNetworkResourcePoolAllocationInfo extends integrityService.vim.DynamicData {
            limit?: number;
            shares?: integrityService.vim.SharesInfo;
            priorityTag?: number;
         }
         interface DVSNetworkResourcePoolConfigSpec extends integrityService.vim.DynamicData {
            key: string;
            configVersion?: string;
            allocationInfo?: integrityService.vim.DVSNetworkResourcePoolAllocationInfo;
            name?: string;
            description?: string;
         }
         interface ArrayOfDVSNetworkResourcePoolConfigSpec {
            DVSNetworkResourcePoolConfigSpec?: Array<integrityService.vim.DVSNetworkResourcePoolConfigSpec>;
         }
         interface DVSNetworkResourcePool extends integrityService.vim.DynamicData {
            key: string;
            name?: string;
            description?: string;
            configVersion: string;
            allocationInfo: integrityService.vim.DVSNetworkResourcePoolAllocationInfo;
         }
         interface ArrayOfDVSNetworkResourcePool {
            DVSNetworkResourcePool?: Array<integrityService.vim.DVSNetworkResourcePool>;
         }
         enum DistributedVirtualSwitchPortConnecteeConnecteeType {
            "pnic",
            "vmVnic",
            "hostConsoleVnic",
            "hostVmkVnic",
         }
         interface DistributedVirtualSwitchPortConnectee extends integrityService.vim.DynamicData {
            connectedEntity?: integrityService.vim.ManagedObjectReference;
            nicKey?: string;
            type?: string;
            addressHint?: string;
         }
         interface DistributedVirtualSwitchPortConnection extends integrityService.vim.DynamicData {
            switchUuid: string;
            portgroupKey?: string;
            portKey?: string;
            connectionCookie?: number;
         }
         interface DistributedVirtualSwitchPortCriteria extends integrityService.vim.DynamicData {
            connected?: boolean;
            active?: boolean;
            uplinkPort?: boolean;
            scope?: integrityService.vim.ManagedObjectReference;
            portgroupKey?: Array<string>;
            inside?: boolean;
            portKey?: Array<string>;
         }
         interface DistributedVirtualSwitchPortStatistics extends integrityService.vim.DynamicData {
            packetsInMulticast: number;
            packetsOutMulticast: number;
            bytesInMulticast: number;
            bytesOutMulticast: number;
            packetsInUnicast: number;
            packetsOutUnicast: number;
            bytesInUnicast: number;
            bytesOutUnicast: number;
            packetsInBroadcast: number;
            packetsOutBroadcast: number;
            bytesInBroadcast: number;
            bytesOutBroadcast: number;
            packetsInDropped: number;
            packetsOutDropped: number;
            packetsInException: number;
            packetsOutException: number;
         }
         interface DistributedVirtualSwitchProductSpec extends integrityService.vim.DynamicData {
            name?: string;
            vendor?: string;
            version?: string;
            build?: string;
            forwardingClass?: string;
            bundleId?: string;
            bundleUrl?: string;
         }
         interface ArrayOfDistributedVirtualSwitchProductSpec {
            DistributedVirtualSwitchProductSpec?: Array<integrityService.vim.DistributedVirtualSwitchProductSpec>;
         }
         interface DvsNetworkRuleQualifier extends integrityService.vim.DynamicData {
            key?: string;
         }
         interface ArrayOfDvsNetworkRuleQualifier {
            DvsNetworkRuleQualifier?: Array<integrityService.vim.DvsNetworkRuleQualifier>;
         }
         interface DvsNetworkRuleAction extends integrityService.vim.DynamicData {
         }
         enum DvsNetworkRuleDirectionType {
            "incomingPackets",
            "outgoingPackets",
            "both",
         }
         interface DvsIpNetworkRuleQualifier extends integrityService.vim.DvsNetworkRuleQualifier {
            sourceAddress?: integrityService.vim.IpAddress;
            destinationAddress?: integrityService.vim.IpAddress;
            protocol?: integrityService.vim.IntExpression;
            sourceIpPort?: integrityService.vim.DvsIpPort;
            destinationIpPort?: integrityService.vim.DvsIpPort;
            tcpFlags?: integrityService.vim.IntExpression;
         }
         interface DvsIpPort extends integrityService.vim.NegatableExpression {
         }
         interface DvsSingleIpPort extends integrityService.vim.DvsIpPort {
            portNumber: number;
         }
         interface DvsIpPortRange extends integrityService.vim.DvsIpPort {
            startPortNumber: number;
            endPortNumber: number;
         }
         interface DvsMacNetworkRuleQualifier extends integrityService.vim.DvsNetworkRuleQualifier {
            sourceAddress?: integrityService.vim.MacAddress;
            destinationAddress?: integrityService.vim.MacAddress;
            protocol?: integrityService.vim.IntExpression;
            vlanId?: integrityService.vim.IntExpression;
         }
         interface DvsSystemTrafficNetworkRuleQualifier extends integrityService.vim.DvsNetworkRuleQualifier {
            typeOfSystemTraffic?: integrityService.vim.StringExpression;
         }
         interface DvsDropNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
         }
         interface DvsAcceptNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
         }
         interface DvsUpdateTagNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
            qosTag?: number;
            dscpTag?: number;
         }
         interface DvsRateLimitNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
            packetsPerSecond: number;
         }
         interface DvsLogNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
         }
         interface DvsGreEncapNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
            encapsulationIp: integrityService.vim.SingleIp;
         }
         interface DvsMacRewriteNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
            rewriteMac: string;
         }
         interface DvsPuntNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
         }
         interface DvsCopyNetworkRuleAction extends integrityService.vim.DvsNetworkRuleAction {
         }
         interface DvsTrafficRule extends integrityService.vim.DynamicData {
            key?: string;
            description?: string;
            sequence?: number;
            qualifier?: Array<integrityService.vim.DvsNetworkRuleQualifier>;
            action?: integrityService.vim.DvsNetworkRuleAction;
            direction?: string;
         }
         interface ArrayOfDvsTrafficRule {
            DvsTrafficRule?: Array<integrityService.vim.DvsTrafficRule>;
         }
         interface DvsTrafficRuleset extends integrityService.vim.DynamicData {
            key?: string;
            enabled?: boolean;
            precedence?: number;
            rules?: Array<integrityService.vim.DvsTrafficRule>;
         }
         interface VMwareDVSFeatureCapability extends integrityService.vim.DVSFeatureCapability {
            vspanSupported?: boolean;
            lldpSupported?: boolean;
            ipfixSupported?: boolean;
            vspanCapability?: integrityService.vim.VMwareDVSVspanCapability;
            lacpCapability?: integrityService.vim.VMwareDvsLacpCapability;
         }
         interface VMwareDvsLacpCapability extends integrityService.vim.DynamicData {
            lacpSupported?: boolean;
            multiLacpGroupSupported?: boolean;
         }
         interface VMwareDVSHealthCheckCapability extends integrityService.vim.DVSHealthCheckCapability {
            vlanMtuSupported: boolean;
            teamingSupported: boolean;
         }
         interface VMwareDVSVspanCapability extends integrityService.vim.DynamicData {
            mixedDestSupported: boolean;
            dvportSupported: boolean;
            remoteSourceSupported: boolean;
            remoteDestSupported: boolean;
            encapRemoteSourceSupported: boolean;
         }
         interface VMwareVspanPort extends integrityService.vim.DynamicData {
            portKey?: Array<string>;
            uplinkPortName?: Array<string>;
            wildcardPortConnecteeType?: Array<string>;
            vlans?: Array<number>;
            ipAddress?: Array<string>;
         }
         interface VMwareVspanSession extends integrityService.vim.DynamicData {
            key?: string;
            name?: string;
            description?: string;
            enabled: boolean;
            sourcePortTransmitted?: integrityService.vim.VMwareVspanPort;
            sourcePortReceived?: integrityService.vim.VMwareVspanPort;
            destinationPort?: integrityService.vim.VMwareVspanPort;
            encapsulationVlanId?: number;
            stripOriginalVlan: boolean;
            mirroredPacketLength?: number;
            normalTrafficAllowed: boolean;
            sessionType?: string;
            samplingRate?: number;
         }
         interface ArrayOfVMwareVspanSession {
            VMwareVspanSession?: Array<integrityService.vim.VMwareVspanSession>;
         }
         interface VMwareIpfixConfig extends integrityService.vim.DynamicData {
            collectorIpAddress?: string;
            collectorPort?: number;
            activeFlowTimeout: number;
            idleFlowTimeout: number;
            samplingRate: number;
            internalFlowsOnly: boolean;
         }
         interface VMwareDVSConfigInfo extends integrityService.vim.DVSConfigInfo {
            vspanSession?: Array<integrityService.vim.VMwareVspanSession>;
            pvlanConfig?: Array<integrityService.vim.VMwareDVSPvlanMapEntry>;
            maxMtu: number;
            linkDiscoveryProtocolConfig?: integrityService.vim.LinkDiscoveryProtocolConfig;
            ipfixConfig?: integrityService.vim.VMwareIpfixConfig;
            lacpGroupConfig?: Array<integrityService.vim.VMwareDvsLacpGroupConfig>;
            lacpApiVersion?: string;
         }
         interface VMwareDVSConfigSpec extends integrityService.vim.DVSConfigSpec {
            pvlanConfigSpec?: Array<integrityService.vim.VMwareDVSPvlanConfigSpec>;
            vspanConfigSpec?: Array<integrityService.vim.VMwareDVSVspanConfigSpec>;
            maxMtu?: number;
            linkDiscoveryProtocolConfig?: integrityService.vim.LinkDiscoveryProtocolConfig;
            ipfixConfig?: integrityService.vim.VMwareIpfixConfig;
            lacpApiVersion?: string;
         }
         interface VMwareUplinkPortOrderPolicy extends integrityService.vim.InheritablePolicy {
            activeUplinkPort?: Array<string>;
            standbyUplinkPort?: Array<string>;
         }
         interface DVSFailureCriteria extends integrityService.vim.InheritablePolicy {
            checkSpeed?: integrityService.vim.StringPolicy;
            speed?: integrityService.vim.IntPolicy;
            checkDuplex?: integrityService.vim.BoolPolicy;
            fullDuplex?: integrityService.vim.BoolPolicy;
            checkErrorPercent?: integrityService.vim.BoolPolicy;
            percentage?: integrityService.vim.IntPolicy;
            checkBeacon?: integrityService.vim.BoolPolicy;
         }
         interface VmwareUplinkPortTeamingPolicy extends integrityService.vim.InheritablePolicy {
            policy?: integrityService.vim.StringPolicy;
            reversePolicy?: integrityService.vim.BoolPolicy;
            notifySwitches?: integrityService.vim.BoolPolicy;
            rollingOrder?: integrityService.vim.BoolPolicy;
            failureCriteria?: integrityService.vim.DVSFailureCriteria;
            uplinkPortOrder?: integrityService.vim.VMwareUplinkPortOrderPolicy;
         }
         interface VmwareDistributedVirtualSwitchVlanSpec extends integrityService.vim.InheritablePolicy {
         }
         interface VmwareDistributedVirtualSwitchPvlanSpec extends integrityService.vim.VmwareDistributedVirtualSwitchVlanSpec {
            pvlanId: number;
         }
         interface VmwareDistributedVirtualSwitchVlanIdSpec extends integrityService.vim.VmwareDistributedVirtualSwitchVlanSpec {
            vlanId: number;
         }
         interface VmwareDistributedVirtualSwitchTrunkVlanSpec extends integrityService.vim.VmwareDistributedVirtualSwitchVlanSpec {
            vlanId: Array<integrityService.vim.NumericRange>;
         }
         interface DVSSecurityPolicy extends integrityService.vim.InheritablePolicy {
            allowPromiscuous?: integrityService.vim.BoolPolicy;
            macChanges?: integrityService.vim.BoolPolicy;
            forgedTransmits?: integrityService.vim.BoolPolicy;
         }
         interface VMwareDVSPortSetting extends integrityService.vim.DVPortSetting {
            vlan?: integrityService.vim.VmwareDistributedVirtualSwitchVlanSpec;
            qosTag?: integrityService.vim.IntPolicy;
            uplinkTeamingPolicy?: integrityService.vim.VmwareUplinkPortTeamingPolicy;
            securityPolicy?: integrityService.vim.DVSSecurityPolicy;
            ipfixEnabled?: integrityService.vim.BoolPolicy;
            txUplink?: integrityService.vim.BoolPolicy;
            lacpPolicy?: integrityService.vim.VMwareUplinkLacpPolicy;
         }
         interface VMwareDVSPortgroupPolicy extends integrityService.vim.DVPortgroupPolicy {
            vlanOverrideAllowed: boolean;
            uplinkTeamingOverrideAllowed: boolean;
            securityPolicyOverrideAllowed: boolean;
            ipfixOverrideAllowed?: boolean;
         }
         enum VmwareDistributedVirtualSwitchPvlanPortType {
            "promiscuous",
            "isolated",
            "community",
         }
         interface VMwareDVSPvlanConfigSpec extends integrityService.vim.DynamicData {
            pvlanEntry: integrityService.vim.VMwareDVSPvlanMapEntry;
            operation: string;
         }
         interface ArrayOfVMwareDVSPvlanConfigSpec {
            VMwareDVSPvlanConfigSpec?: Array<integrityService.vim.VMwareDVSPvlanConfigSpec>;
         }
         interface VMwareDVSPvlanMapEntry extends integrityService.vim.DynamicData {
            primaryVlanId: number;
            secondaryVlanId: number;
            pvlanType: string;
         }
         interface ArrayOfVMwareDVSPvlanMapEntry {
            VMwareDVSPvlanMapEntry?: Array<integrityService.vim.VMwareDVSPvlanMapEntry>;
         }
         interface VMwareDVSVspanConfigSpec extends integrityService.vim.DynamicData {
            vspanSession: integrityService.vim.VMwareVspanSession;
            operation: string;
         }
         interface ArrayOfVMwareDVSVspanConfigSpec {
            VMwareDVSVspanConfigSpec?: Array<integrityService.vim.VMwareDVSVspanConfigSpec>;
         }
         enum VMwareDVSVspanSessionType {
            "mixedDestMirror",
            "dvPortMirror",
            "remoteMirrorSource",
            "remoteMirrorDest",
            "encapsulatedRemoteMirrorSource",
         }
         interface VMwareDVSHealthCheckConfig extends integrityService.vim.DVSHealthCheckConfig {
         }
         interface VMwareDVSVlanMtuHealthCheckConfig extends integrityService.vim.VMwareDVSHealthCheckConfig {
         }
         interface VMwareDVSTeamingHealthCheckConfig extends integrityService.vim.VMwareDVSHealthCheckConfig {
         }
         interface VMwareDVSVlanHealthCheckResult extends integrityService.vim.HostMemberUplinkHealthCheckResult {
            trunkedVlan?: Array<integrityService.vim.NumericRange>;
            untrunkedVlan?: Array<integrityService.vim.NumericRange>;
         }
         interface VMwareDVSMtuHealthCheckResult extends integrityService.vim.HostMemberUplinkHealthCheckResult {
            mtuMismatch: boolean;
            vlanSupportSwitchMtu?: Array<integrityService.vim.NumericRange>;
            vlanNotSupportSwitchMtu?: Array<integrityService.vim.NumericRange>;
         }
         enum VMwareDVSTeamingMatchStatus {
            "iphashMatch",
            "nonIphashMatch",
            "iphashMismatch",
            "nonIphashMismatch",
         }
         interface VMwareDVSTeamingHealthCheckResult extends integrityService.vim.HostMemberHealthCheckResult {
            teamingStatus: string;
         }
         interface VMwareUplinkLacpPolicy extends integrityService.vim.InheritablePolicy {
            enable?: integrityService.vim.BoolPolicy;
            mode?: integrityService.vim.StringPolicy;
         }
         interface VMwareDvsLacpGroupConfig extends integrityService.vim.DynamicData {
            key?: string;
            name?: string;
            mode?: string;
            uplinkNum?: number;
            loadbalanceAlgorithm?: string;
            vlan?: integrityService.vim.VMwareDvsLagVlanConfig;
            ipfix?: integrityService.vim.VMwareDvsLagIpfixConfig;
            uplinkName?: Array<string>;
            uplinkPortKey?: Array<string>;
         }
         interface ArrayOfVMwareDvsLacpGroupConfig {
            VMwareDvsLacpGroupConfig?: Array<integrityService.vim.VMwareDvsLacpGroupConfig>;
         }
         interface VMwareDvsLagVlanConfig extends integrityService.vim.DynamicData {
            vlanId?: Array<integrityService.vim.NumericRange>;
         }
         interface VMwareDvsLagIpfixConfig extends integrityService.vim.DynamicData {
            ipfixEnabled?: boolean;
         }
         enum VMwareUplinkLacpMode {
            "active",
            "passive",
         }
         interface VMwareDvsLacpGroupSpec extends integrityService.vim.DynamicData {
            lacpGroupConfig: integrityService.vim.VMwareDvsLacpGroupConfig;
            operation: string;
         }
         interface ArrayOfVMwareDvsLacpGroupSpec {
            VMwareDvsLacpGroupSpec?: Array<integrityService.vim.VMwareDvsLacpGroupSpec>;
         }
         enum VMwareDvsLacpLoadBalanceAlgorithm {
            "srcMac",
            "destMac",
            "srcDestMac",
            "destIpVlan",
            "srcIpVlan",
            "srcDestIpVlan",
            "destTcpUdpPort",
            "srcTcpUdpPort",
            "srcDestTcpUdpPort",
            "destIpTcpUdpPort",
            "srcIpTcpUdpPort",
            "srcDestIpTcpUdpPort",
            "destIpTcpUdpPortVlan",
            "srcIpTcpUdpPortVlan",
            "srcDestIpTcpUdpPortVlan",
            "destIp",
            "srcIp",
            "srcDestIp",
            "vlan",
            "srcPortId",
         }
         enum VMwareDvsLacpApiVersion {
            "singleLag",
            "multipleLag",
         }
         enum EventEventSeverity {
            "error",
            "warning",
            "info",
            "user",
         }
         interface Event extends integrityService.vim.DynamicData {
            key: number;
            chainId: number;
            createdTime: Date;
            userName: string;
            datacenter?: integrityService.vim.DatacenterEventArgument;
            computeResource?: integrityService.vim.ComputeResourceEventArgument;
            host?: integrityService.vim.HostEventArgument;
            vm?: integrityService.vim.VmEventArgument;
            ds?: integrityService.vim.DatastoreEventArgument;
            net?: integrityService.vim.NetworkEventArgument;
            dvs?: integrityService.vim.DvsEventArgument;
            fullFormattedMessage?: string;
            changeTag?: string;
         }
         interface ArrayOfEvent {
            Event?: Array<integrityService.vim.Event>;
         }
         interface GeneralEvent extends integrityService.vim.Event {
            message: string;
         }
         interface GeneralHostInfoEvent extends integrityService.vim.GeneralEvent {
         }
         interface GeneralHostWarningEvent extends integrityService.vim.GeneralEvent {
         }
         interface GeneralHostErrorEvent extends integrityService.vim.GeneralEvent {
         }
         interface GeneralVmInfoEvent extends integrityService.vim.GeneralEvent {
         }
         interface GeneralVmWarningEvent extends integrityService.vim.GeneralEvent {
         }
         interface GeneralVmErrorEvent extends integrityService.vim.GeneralEvent {
         }
         interface GeneralUserEvent extends integrityService.vim.GeneralEvent {
            entity?: integrityService.vim.ManagedEntityEventArgument;
         }
         interface ExtendedEventPair extends integrityService.vim.DynamicData {
            key: string;
            value: string;
         }
         interface ArrayOfExtendedEventPair {
            ExtendedEventPair?: Array<integrityService.vim.ExtendedEventPair>;
         }
         interface ExtendedEvent extends integrityService.vim.GeneralEvent {
            eventTypeId: string;
            managedObject: integrityService.vim.ManagedObjectReference;
            data?: Array<integrityService.vim.ExtendedEventPair>;
         }
         interface HealthStatusChangedEvent extends integrityService.vim.Event {
            componentId: string;
            oldStatus: string;
            newStatus: string;
            componentName: string;
         }
         interface HostInventoryUnreadableEvent extends integrityService.vim.Event {
         }
         interface DatacenterEvent extends integrityService.vim.Event {
         }
         interface DatacenterCreatedEvent extends integrityService.vim.DatacenterEvent {
            parent: integrityService.vim.FolderEventArgument;
         }
         interface DatacenterRenamedEvent extends integrityService.vim.DatacenterEvent {
            oldName: string;
            newName: string;
         }
         interface SessionEvent extends integrityService.vim.Event {
         }
         interface ServerStartedSessionEvent extends integrityService.vim.SessionEvent {
         }
         interface UserLoginSessionEvent extends integrityService.vim.SessionEvent {
            ipAddress: string;
            userAgent?: string;
            locale: string;
            sessionId: string;
         }
         interface UserLogoutSessionEvent extends integrityService.vim.SessionEvent {
            ipAddress?: string;
            userAgent?: string;
            callCount?: number;
            sessionId?: string;
            loginTime?: Date;
         }
         interface BadUsernameSessionEvent extends integrityService.vim.SessionEvent {
            ipAddress: string;
         }
         interface AlreadyAuthenticatedSessionEvent extends integrityService.vim.SessionEvent {
         }
         interface NoAccessUserEvent extends integrityService.vim.SessionEvent {
            ipAddress: string;
         }
         interface SessionTerminatedEvent extends integrityService.vim.SessionEvent {
            sessionId: string;
            terminatedUsername: string;
         }
         interface GlobalMessageChangedEvent extends integrityService.vim.SessionEvent {
            message: string;
         }
         interface UpgradeEvent extends integrityService.vim.Event {
            message: string;
         }
         interface InfoUpgradeEvent extends integrityService.vim.UpgradeEvent {
         }
         interface WarningUpgradeEvent extends integrityService.vim.UpgradeEvent {
         }
         interface ErrorUpgradeEvent extends integrityService.vim.UpgradeEvent {
         }
         interface UserUpgradeEvent extends integrityService.vim.UpgradeEvent {
         }
         interface HostEvent extends integrityService.vim.Event {
         }
         interface HostDasEvent extends integrityService.vim.HostEvent {
         }
         interface HostConnectedEvent extends integrityService.vim.HostEvent {
         }
         enum HostDisconnectedEventReasonCode {
            "sslThumbprintVerifyFailed",
            "licenseExpired",
            "agentUpgrade",
            "userRequest",
            "insufficientLicenses",
            "agentOutOfDate",
            "passwordDecryptFailure",
            "unknown",
            "vcVRAMCapacityExceeded",
         }
         interface HostDisconnectedEvent extends integrityService.vim.HostEvent {
            reason?: string;
         }
         interface HostSyncFailedEvent extends integrityService.vim.HostEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface HostConnectionLostEvent extends integrityService.vim.HostEvent {
         }
         interface HostReconnectionFailedEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedNoConnectionEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedBadUsernameEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedBadVersionEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedAlreadyManagedEvent extends integrityService.vim.HostEvent {
            serverName: string;
         }
         interface HostCnxFailedNoLicenseEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedNetworkErrorEvent extends integrityService.vim.HostEvent {
         }
         interface HostRemovedEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedCcagentUpgradeEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedBadCcagentEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedAccountFailedEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedNoAccessEvent extends integrityService.vim.HostEvent {
         }
         interface HostShutdownEvent extends integrityService.vim.HostEvent {
            reason: string;
         }
         interface HostCnxFailedNotFoundEvent extends integrityService.vim.HostEvent {
         }
         interface HostCnxFailedTimeoutEvent extends integrityService.vim.HostEvent {
         }
         interface HostUpgradeFailedEvent extends integrityService.vim.HostEvent {
         }
         interface EnteringMaintenanceModeEvent extends integrityService.vim.HostEvent {
         }
         interface EnteredMaintenanceModeEvent extends integrityService.vim.HostEvent {
         }
         interface ExitMaintenanceModeEvent extends integrityService.vim.HostEvent {
         }
         interface CanceledHostOperationEvent extends integrityService.vim.HostEvent {
         }
         interface TimedOutHostOperationEvent extends integrityService.vim.HostEvent {
         }
         interface HostDasEnabledEvent extends integrityService.vim.HostEvent {
         }
         interface HostDasDisabledEvent extends integrityService.vim.HostEvent {
         }
         interface HostDasEnablingEvent extends integrityService.vim.HostEvent {
         }
         interface HostDasDisablingEvent extends integrityService.vim.HostEvent {
         }
         enum HostDasErrorEventHostDasErrorReason {
            "configFailed",
            "timeout",
            "communicationInitFailed",
            "healthCheckScriptFailed",
            "agentFailed",
            "agentShutdown",
            "isolationAddressUnpingable",
            "other",
         }
         interface HostDasErrorEvent extends integrityService.vim.HostEvent {
            message?: string;
            reason?: string;
         }
         interface HostDasOkEvent extends integrityService.vim.HostEvent {
         }
         interface VcAgentUpgradedEvent extends integrityService.vim.HostEvent {
         }
         interface VcAgentUninstalledEvent extends integrityService.vim.HostEvent {
         }
         interface VcAgentUpgradeFailedEvent extends integrityService.vim.HostEvent {
            reason?: string;
         }
         interface VcAgentUninstallFailedEvent extends integrityService.vim.HostEvent {
            reason?: string;
         }
         interface HostAddedEvent extends integrityService.vim.HostEvent {
         }
         interface HostAddFailedEvent extends integrityService.vim.HostEvent {
            hostname: string;
         }
         interface HostIpChangedEvent extends integrityService.vim.HostEvent {
            oldIP: string;
            newIP: string;
         }
         interface EnteringStandbyModeEvent extends integrityService.vim.HostEvent {
         }
         interface DrsEnteringStandbyModeEvent extends integrityService.vim.EnteringStandbyModeEvent {
         }
         interface EnteredStandbyModeEvent extends integrityService.vim.HostEvent {
         }
         interface DrsEnteredStandbyModeEvent extends integrityService.vim.EnteredStandbyModeEvent {
         }
         interface ExitingStandbyModeEvent extends integrityService.vim.HostEvent {
         }
         interface DrsExitingStandbyModeEvent extends integrityService.vim.ExitingStandbyModeEvent {
         }
         interface ExitedStandbyModeEvent extends integrityService.vim.HostEvent {
         }
         interface DrsExitedStandbyModeEvent extends integrityService.vim.ExitedStandbyModeEvent {
         }
         interface ExitStandbyModeFailedEvent extends integrityService.vim.HostEvent {
         }
         interface DrsExitStandbyModeFailedEvent extends integrityService.vim.ExitStandbyModeFailedEvent {
         }
         interface UpdatedAgentBeingRestartedEvent extends integrityService.vim.HostEvent {
         }
         interface AccountCreatedEvent extends integrityService.vim.HostEvent {
            spec: integrityService.vim.HostAccountSpec;
            group: boolean;
         }
         interface AccountRemovedEvent extends integrityService.vim.HostEvent {
            account: string;
            group: boolean;
         }
         interface UserPasswordChanged extends integrityService.vim.HostEvent {
            userLogin: string;
         }
         interface AccountUpdatedEvent extends integrityService.vim.HostEvent {
            spec: integrityService.vim.HostAccountSpec;
            group: boolean;
         }
         interface UserAssignedToGroup extends integrityService.vim.HostEvent {
            userLogin: string;
            group: string;
         }
         interface UserUnassignedFromGroup extends integrityService.vim.HostEvent {
            userLogin: string;
            group: string;
         }
         interface DatastorePrincipalConfigured extends integrityService.vim.HostEvent {
            datastorePrincipal: string;
         }
         interface VMFSDatastoreCreatedEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface NASDatastoreCreatedEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface LocalDatastoreCreatedEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface VMFSDatastoreExtendedEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface VMFSDatastoreExpandedEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface DatastoreRemovedOnHostEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface DatastoreRenamedOnHostEvent extends integrityService.vim.HostEvent {
            oldName: string;
            newName: string;
         }
         interface DuplicateIpDetectedEvent extends integrityService.vim.HostEvent {
            duplicateIP: string;
            macAddress: string;
         }
         interface DatastoreDiscoveredEvent extends integrityService.vim.HostEvent {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface DrsResourceConfigureFailedEvent extends integrityService.vim.HostEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface DrsResourceConfigureSyncedEvent extends integrityService.vim.HostEvent {
         }
         interface HostGetShortNameFailedEvent extends integrityService.vim.HostEvent {
         }
         interface HostShortNameToIpFailedEvent extends integrityService.vim.HostEvent {
            shortName: string;
         }
         interface HostIpToShortNameFailedEvent extends integrityService.vim.HostEvent {
         }
         interface HostPrimaryAgentNotShortNameEvent extends integrityService.vim.HostDasEvent {
            primaryAgent: string;
         }
         interface HostNotInClusterEvent extends integrityService.vim.HostDasEvent {
         }
         interface HostIsolationIpPingFailedEvent extends integrityService.vim.HostDasEvent {
            isolationIp: string;
         }
         interface HostIpInconsistentEvent extends integrityService.vim.HostEvent {
            ipAddress: string;
            ipAddress2: string;
         }
         interface HostUserWorldSwapNotEnabledEvent extends integrityService.vim.HostEvent {
         }
         interface HostNonCompliantEvent extends integrityService.vim.HostEvent {
         }
         interface HostCompliantEvent extends integrityService.vim.HostEvent {
         }
         interface HostComplianceCheckedEvent extends integrityService.vim.HostEvent {
            profile: integrityService.vim.ProfileEventArgument;
         }
         interface ClusterComplianceCheckedEvent extends integrityService.vim.ClusterEvent {
            profile: integrityService.vim.ProfileEventArgument;
         }
         interface ProfileEvent extends integrityService.vim.Event {
            profile: integrityService.vim.ProfileEventArgument;
         }
         interface ProfileCreatedEvent extends integrityService.vim.ProfileEvent {
         }
         interface ProfileRemovedEvent extends integrityService.vim.ProfileEvent {
         }
         interface ProfileAssociatedEvent extends integrityService.vim.ProfileEvent {
         }
         interface ProfileDissociatedEvent extends integrityService.vim.ProfileEvent {
         }
         interface HostConfigAppliedEvent extends integrityService.vim.HostEvent {
         }
         interface ProfileReferenceHostChangedEvent extends integrityService.vim.ProfileEvent {
            referenceHost?: integrityService.vim.ManagedObjectReference;
         }
         interface ProfileChangedEvent extends integrityService.vim.ProfileEvent {
         }
         interface HostProfileAppliedEvent extends integrityService.vim.HostEvent {
            profile: integrityService.vim.ProfileEventArgument;
         }
         interface HostShortNameInconsistentEvent extends integrityService.vim.HostDasEvent {
            shortName: string;
            shortName2: string;
         }
         interface HostNoRedundantManagementNetworkEvent extends integrityService.vim.HostDasEvent {
         }
         interface HostNoAvailableNetworksEvent extends integrityService.vim.HostDasEvent {
            ips?: string;
         }
         interface HostExtraNetworksEvent extends integrityService.vim.HostDasEvent {
            ips?: string;
         }
         interface HostNoHAEnabledPortGroupsEvent extends integrityService.vim.HostDasEvent {
         }
         interface HostMissingNetworksEvent extends integrityService.vim.HostDasEvent {
            ips?: string;
         }
         interface VnicPortArgument extends integrityService.vim.DynamicData {
            vnic: string;
            port: integrityService.vim.DistributedVirtualSwitchPortConnection;
         }
         interface ArrayOfVnicPortArgument {
            VnicPortArgument?: Array<integrityService.vim.VnicPortArgument>;
         }
         interface HostVnicConnectedToCustomizedDVPortEvent extends integrityService.vim.HostEvent {
            vnic: integrityService.vim.VnicPortArgument;
         }
         interface GhostDvsProxySwitchDetectedEvent extends integrityService.vim.HostEvent {
            switchUuid: Array<string>;
         }
         interface GhostDvsProxySwitchRemovedEvent extends integrityService.vim.HostEvent {
            switchUuid: Array<string>;
         }
         interface VmEvent extends integrityService.vim.Event {
            template: boolean;
         }
         interface VmPoweredOffEvent extends integrityService.vim.VmEvent {
         }
         interface VmPoweredOnEvent extends integrityService.vim.VmEvent {
         }
         interface VmSuspendedEvent extends integrityService.vim.VmEvent {
         }
         interface VmStartingEvent extends integrityService.vim.VmEvent {
         }
         interface VmStoppingEvent extends integrityService.vim.VmEvent {
         }
         interface VmSuspendingEvent extends integrityService.vim.VmEvent {
         }
         interface VmResumingEvent extends integrityService.vim.VmEvent {
         }
         interface VmDisconnectedEvent extends integrityService.vim.VmEvent {
         }
         interface VmRemoteConsoleConnectedEvent extends integrityService.vim.VmEvent {
         }
         interface VmRemoteConsoleDisconnectedEvent extends integrityService.vim.VmEvent {
         }
         interface VmDiscoveredEvent extends integrityService.vim.VmEvent {
         }
         interface VmOrphanedEvent extends integrityService.vim.VmEvent {
         }
         interface VmBeingCreatedEvent extends integrityService.vim.VmEvent {
            configSpec?: integrityService.vim.VirtualMachineConfigSpec;
         }
         interface VmCreatedEvent extends integrityService.vim.VmEvent {
         }
         interface VmStartRecordingEvent extends integrityService.vim.VmEvent {
         }
         interface VmEndRecordingEvent extends integrityService.vim.VmEvent {
         }
         interface VmStartReplayingEvent extends integrityService.vim.VmEvent {
         }
         interface VmEndReplayingEvent extends integrityService.vim.VmEvent {
         }
         interface VmRegisteredEvent extends integrityService.vim.VmEvent {
         }
         interface VmAutoRenameEvent extends integrityService.vim.VmEvent {
            oldName: string;
            newName: string;
         }
         interface VmBeingHotMigratedEvent extends integrityService.vim.VmEvent {
            destHost: integrityService.vim.HostEventArgument;
            destDatacenter?: integrityService.vim.DatacenterEventArgument;
            destDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmResettingEvent extends integrityService.vim.VmEvent {
         }
         interface VmStaticMacConflictEvent extends integrityService.vim.VmEvent {
            conflictedVm: integrityService.vim.VmEventArgument;
            mac: string;
         }
         interface VmMacConflictEvent extends integrityService.vim.VmEvent {
            conflictedVm: integrityService.vim.VmEventArgument;
            mac: string;
         }
         interface VmBeingDeployedEvent extends integrityService.vim.VmEvent {
            srcTemplate: integrityService.vim.VmEventArgument;
         }
         interface VmDeployFailedEvent extends integrityService.vim.VmEvent {
            destDatastore: integrityService.vim.EntityEventArgument;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmDeployedEvent extends integrityService.vim.VmEvent {
            srcTemplate: integrityService.vim.VmEventArgument;
         }
         interface VmMacChangedEvent extends integrityService.vim.VmEvent {
            adapter: string;
            oldMac: string;
            newMac: string;
         }
         interface VmMacAssignedEvent extends integrityService.vim.VmEvent {
            adapter: string;
            mac: string;
         }
         interface VmUuidConflictEvent extends integrityService.vim.VmEvent {
            conflictedVm: integrityService.vim.VmEventArgument;
            uuid: string;
         }
         interface VmInstanceUuidConflictEvent extends integrityService.vim.VmEvent {
            conflictedVm: integrityService.vim.VmEventArgument;
            instanceUuid: string;
         }
         interface VmBeingMigratedEvent extends integrityService.vim.VmEvent {
            destHost: integrityService.vim.HostEventArgument;
            destDatacenter?: integrityService.vim.DatacenterEventArgument;
            destDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmFailedMigrateEvent extends integrityService.vim.VmEvent {
            destHost: integrityService.vim.HostEventArgument;
            reason: integrityService.vim.LocalizedMethodFault;
            destDatacenter?: integrityService.vim.DatacenterEventArgument;
            destDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmMigratedEvent extends integrityService.vim.VmEvent {
            sourceHost: integrityService.vim.HostEventArgument;
            sourceDatacenter?: integrityService.vim.DatacenterEventArgument;
            sourceDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmUnsupportedStartingEvent extends integrityService.vim.VmStartingEvent {
            guestId: string;
         }
         interface DrsVmMigratedEvent extends integrityService.vim.VmMigratedEvent {
         }
         interface DrsVmPoweredOnEvent extends integrityService.vim.VmPoweredOnEvent {
         }
         interface DrsRuleViolationEvent extends integrityService.vim.VmEvent {
         }
         interface DrsRuleComplianceEvent extends integrityService.vim.VmEvent {
         }
         interface VmRelocateSpecEvent extends integrityService.vim.VmEvent {
         }
         interface VmBeingRelocatedEvent extends integrityService.vim.VmRelocateSpecEvent {
            destHost: integrityService.vim.HostEventArgument;
            destDatacenter?: integrityService.vim.DatacenterEventArgument;
            destDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmRelocatedEvent extends integrityService.vim.VmRelocateSpecEvent {
            sourceHost: integrityService.vim.HostEventArgument;
            sourceDatacenter?: integrityService.vim.DatacenterEventArgument;
            sourceDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmRelocateFailedEvent extends integrityService.vim.VmRelocateSpecEvent {
            destHost: integrityService.vim.HostEventArgument;
            reason: integrityService.vim.LocalizedMethodFault;
            destDatacenter?: integrityService.vim.DatacenterEventArgument;
            destDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface VmEmigratingEvent extends integrityService.vim.VmEvent {
         }
         interface VmCloneEvent extends integrityService.vim.VmEvent {
         }
         interface VmBeingClonedEvent extends integrityService.vim.VmCloneEvent {
            destFolder: integrityService.vim.FolderEventArgument;
            destName: string;
            destHost: integrityService.vim.HostEventArgument;
         }
         interface VmBeingClonedNoFolderEvent extends integrityService.vim.VmCloneEvent {
            destName: string;
            destHost: integrityService.vim.HostEventArgument;
         }
         interface VmCloneFailedEvent extends integrityService.vim.VmCloneEvent {
            destFolder: integrityService.vim.FolderEventArgument;
            destName: string;
            destHost: integrityService.vim.HostEventArgument;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmClonedEvent extends integrityService.vim.VmCloneEvent {
            sourceVm: integrityService.vim.VmEventArgument;
         }
         interface VmResourceReallocatedEvent extends integrityService.vim.VmEvent {
         }
         interface VmRenamedEvent extends integrityService.vim.VmEvent {
            oldName: string;
            newName: string;
         }
         interface VmDateRolledBackEvent extends integrityService.vim.VmEvent {
         }
         interface VmNoNetworkAccessEvent extends integrityService.vim.VmEvent {
            destHost: integrityService.vim.HostEventArgument;
         }
         interface VmDiskFailedEvent extends integrityService.vim.VmEvent {
            disk: string;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToPowerOnEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToPowerOffEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToSuspendEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToResetEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToShutdownGuestEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToRebootGuestEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmFailedToStandbyGuestEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmRemovedEvent extends integrityService.vim.VmEvent {
         }
         interface VmGuestShutdownEvent extends integrityService.vim.VmEvent {
         }
         interface VmGuestRebootEvent extends integrityService.vim.VmEvent {
         }
         interface VmGuestStandbyEvent extends integrityService.vim.VmEvent {
         }
         interface VmUpgradingEvent extends integrityService.vim.VmEvent {
            version: string;
         }
         interface VmUpgradeCompleteEvent extends integrityService.vim.VmEvent {
            version: string;
         }
         interface VmUpgradeFailedEvent extends integrityService.vim.VmEvent {
         }
         interface VmRestartedOnAlternateHostEvent extends integrityService.vim.VmPoweredOnEvent {
            sourceHost: integrityService.vim.HostEventArgument;
         }
         interface VmReconfiguredEvent extends integrityService.vim.VmEvent {
            configSpec: integrityService.vim.VirtualMachineConfigSpec;
         }
         interface VmMessageEvent extends integrityService.vim.VmEvent {
            message: string;
            messageInfo?: Array<integrityService.vim.VirtualMachineMessage>;
         }
         interface VmMessageWarningEvent extends integrityService.vim.VmEvent {
            message: string;
            messageInfo?: Array<integrityService.vim.VirtualMachineMessage>;
         }
         interface VmMessageErrorEvent extends integrityService.vim.VmEvent {
            message: string;
            messageInfo?: Array<integrityService.vim.VirtualMachineMessage>;
         }
         interface VmConfigMissingEvent extends integrityService.vim.VmEvent {
         }
         interface VmPowerOffOnIsolationEvent extends integrityService.vim.VmPoweredOffEvent {
            isolatedHost: integrityService.vim.HostEventArgument;
         }
         enum VmShutdownOnIsolationEventOperation {
            "shutdown",
            "poweredOff",
         }
         interface VmShutdownOnIsolationEvent extends integrityService.vim.VmPoweredOffEvent {
            isolatedHost: integrityService.vim.HostEventArgument;
            shutdownResult?: string;
         }
         interface VmFailoverFailed extends integrityService.vim.VmEvent {
            reason?: integrityService.vim.LocalizedMethodFault;
         }
         enum VmDasBeingResetEventReasonCode {
            "vmtoolsHeartbeatFailure",
            "appHeartbeatFailure",
            "appImmediateResetRequest",
         }
         interface VmDasBeingResetEvent extends integrityService.vim.VmEvent {
            reason?: string;
         }
         interface VmDasResetFailedEvent extends integrityService.vim.VmEvent {
         }
         interface VmMaxRestartCountReached extends integrityService.vim.VmEvent {
         }
         interface VmMaxFTRestartCountReached extends integrityService.vim.VmEvent {
         }
         interface VmDasBeingResetWithScreenshotEvent extends integrityService.vim.VmDasBeingResetEvent {
            screenshotFilePath: string;
         }
         interface NotEnoughResourcesToStartVmEvent extends integrityService.vim.VmEvent {
         }
         interface VmUuidAssignedEvent extends integrityService.vim.VmEvent {
            uuid: string;
         }
         interface VmInstanceUuidAssignedEvent extends integrityService.vim.VmEvent {
            instanceUuid: string;
         }
         interface VmUuidChangedEvent extends integrityService.vim.VmEvent {
            oldUuid: string;
            newUuid: string;
         }
         interface VmInstanceUuidChangedEvent extends integrityService.vim.VmEvent {
            oldInstanceUuid: string;
            newInstanceUuid: string;
         }
         interface VmWwnConflictEvent extends integrityService.vim.VmEvent {
            conflictedVms?: Array<integrityService.vim.VmEventArgument>;
            conflictedHosts?: Array<integrityService.vim.HostEventArgument>;
            wwn: number;
         }
         interface VmAcquiredMksTicketEvent extends integrityService.vim.VmEvent {
         }
         interface VmAcquiredTicketEvent extends integrityService.vim.VmEvent {
            ticketType: string;
         }
         interface HostWwnConflictEvent extends integrityService.vim.HostEvent {
            conflictedVms?: Array<integrityService.vim.VmEventArgument>;
            conflictedHosts?: Array<integrityService.vim.HostEventArgument>;
            wwn: number;
         }
         interface VmWwnAssignedEvent extends integrityService.vim.VmEvent {
            nodeWwns: Array<number>;
            portWwns: Array<number>;
         }
         interface VmWwnChangedEvent extends integrityService.vim.VmEvent {
            oldNodeWwns?: Array<number>;
            oldPortWwns?: Array<number>;
            newNodeWwns?: Array<number>;
            newPortWwns?: Array<number>;
         }
         interface VmSecondaryAddedEvent extends integrityService.vim.VmEvent {
         }
         interface VmFaultToleranceTurnedOffEvent extends integrityService.vim.VmEvent {
         }
         interface VmFaultToleranceStateChangedEvent extends integrityService.vim.VmEvent {
            oldState: integrityService.vim.VirtualMachineFaultToleranceState;
            newState: integrityService.vim.VirtualMachineFaultToleranceState;
         }
         interface VmSecondaryDisabledEvent extends integrityService.vim.VmEvent {
         }
         interface VmSecondaryDisabledBySystemEvent extends integrityService.vim.VmEvent {
            reason?: integrityService.vim.LocalizedMethodFault;
         }
         interface VmSecondaryEnabledEvent extends integrityService.vim.VmEvent {
         }
         interface VmStartingSecondaryEvent extends integrityService.vim.VmEvent {
         }
         interface VmSecondaryStartedEvent extends integrityService.vim.VmEvent {
         }
         interface VmFailedUpdatingSecondaryConfig extends integrityService.vim.VmEvent {
         }
         enum VmFailedStartingSecondaryEventFailureReason {
            "incompatibleHost",
            "loginFailed",
            "registerVmFailed",
            "migrateFailed",
         }
         interface VmFailedStartingSecondaryEvent extends integrityService.vim.VmEvent {
            reason?: string;
         }
         interface VmTimedoutStartingSecondaryEvent extends integrityService.vim.VmEvent {
            timeout?: number;
         }
         interface VmNoCompatibleHostForSecondaryEvent extends integrityService.vim.VmEvent {
         }
         interface VmPrimaryFailoverEvent extends integrityService.vim.VmEvent {
            reason?: string;
         }
         interface VmFaultToleranceVmTerminatedEvent extends integrityService.vim.VmEvent {
            reason?: string;
         }
         interface HostWwnChangedEvent extends integrityService.vim.HostEvent {
            oldNodeWwns?: Array<number>;
            oldPortWwns?: Array<number>;
            newNodeWwns?: Array<number>;
            newPortWwns?: Array<number>;
         }
         interface HostAdminDisableEvent extends integrityService.vim.HostEvent {
         }
         interface HostAdminEnableEvent extends integrityService.vim.HostEvent {
         }
         interface HostEnableAdminFailedEvent extends integrityService.vim.HostEvent {
            permissions: Array<integrityService.vim.Permission>;
         }
         interface VmFailedRelayoutOnVmfs2DatastoreEvent extends integrityService.vim.VmEvent {
         }
         interface VmFailedRelayoutEvent extends integrityService.vim.VmEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface VmRelayoutSuccessfulEvent extends integrityService.vim.VmEvent {
         }
         interface VmRelayoutUpToDateEvent extends integrityService.vim.VmEvent {
         }
         interface VmConnectedEvent extends integrityService.vim.VmEvent {
         }
         interface VmPoweringOnWithCustomizedDVPortEvent extends integrityService.vim.VmEvent {
            vnic: Array<integrityService.vim.VnicPortArgument>;
         }
         interface VmDasUpdateErrorEvent extends integrityService.vim.VmEvent {
         }
         interface NoMaintenanceModeDrsRecommendationForVM extends integrityService.vim.VmEvent {
         }
         interface VmDasUpdateOkEvent extends integrityService.vim.VmEvent {
         }
         interface ScheduledTaskEvent extends integrityService.vim.Event {
            scheduledTask: integrityService.vim.ScheduledTaskEventArgument;
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface ScheduledTaskCreatedEvent extends integrityService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskStartedEvent extends integrityService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskRemovedEvent extends integrityService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskReconfiguredEvent extends integrityService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskCompletedEvent extends integrityService.vim.ScheduledTaskEvent {
         }
         interface ScheduledTaskFailedEvent extends integrityService.vim.ScheduledTaskEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface ScheduledTaskEmailCompletedEvent extends integrityService.vim.ScheduledTaskEvent {
            to: string;
         }
         interface ScheduledTaskEmailFailedEvent extends integrityService.vim.ScheduledTaskEvent {
            to: string;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface AlarmEvent extends integrityService.vim.Event {
            alarm: integrityService.vim.AlarmEventArgument;
         }
         interface AlarmCreatedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface AlarmStatusChangedEvent extends integrityService.vim.AlarmEvent {
            source: integrityService.vim.ManagedEntityEventArgument;
            entity: integrityService.vim.ManagedEntityEventArgument;
            from: string;
            to: string;
         }
         interface AlarmActionTriggeredEvent extends integrityService.vim.AlarmEvent {
            source: integrityService.vim.ManagedEntityEventArgument;
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface AlarmEmailCompletedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            to: string;
         }
         interface AlarmEmailFailedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            to: string;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface AlarmSnmpCompletedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface AlarmSnmpFailedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface AlarmScriptCompleteEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            script: string;
         }
         interface AlarmScriptFailedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            script: string;
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface AlarmRemovedEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface AlarmReconfiguredEvent extends integrityService.vim.AlarmEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface AlarmAcknowledgedEvent extends integrityService.vim.AlarmEvent {
            source: integrityService.vim.ManagedEntityEventArgument;
            entity: integrityService.vim.ManagedEntityEventArgument;
         }
         interface AlarmClearedEvent extends integrityService.vim.AlarmEvent {
            source: integrityService.vim.ManagedEntityEventArgument;
            entity: integrityService.vim.ManagedEntityEventArgument;
            from: string;
         }
         interface CustomFieldEvent extends integrityService.vim.Event {
         }
         interface CustomFieldDefEvent extends integrityService.vim.CustomFieldEvent {
            fieldKey: number;
            name: string;
         }
         interface CustomFieldDefAddedEvent extends integrityService.vim.CustomFieldDefEvent {
         }
         interface CustomFieldDefRemovedEvent extends integrityService.vim.CustomFieldDefEvent {
         }
         interface CustomFieldDefRenamedEvent extends integrityService.vim.CustomFieldDefEvent {
            newName: string;
         }
         interface CustomFieldValueChangedEvent extends integrityService.vim.CustomFieldEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            fieldKey: number;
            name: string;
            value: string;
         }
         interface AuthorizationEvent extends integrityService.vim.Event {
         }
         interface PermissionEvent extends integrityService.vim.AuthorizationEvent {
            entity: integrityService.vim.ManagedEntityEventArgument;
            principal: string;
            group: boolean;
         }
         interface PermissionAddedEvent extends integrityService.vim.PermissionEvent {
            role: integrityService.vim.RoleEventArgument;
            propagate: boolean;
         }
         interface PermissionUpdatedEvent extends integrityService.vim.PermissionEvent {
            role: integrityService.vim.RoleEventArgument;
            propagate: boolean;
         }
         interface PermissionRemovedEvent extends integrityService.vim.PermissionEvent {
         }
         interface RoleEvent extends integrityService.vim.AuthorizationEvent {
            role: integrityService.vim.RoleEventArgument;
         }
         interface RoleAddedEvent extends integrityService.vim.RoleEvent {
            privilegeList?: Array<string>;
         }
         interface RoleUpdatedEvent extends integrityService.vim.RoleEvent {
            privilegeList?: Array<string>;
         }
         interface RoleRemovedEvent extends integrityService.vim.RoleEvent {
         }
         interface DatastoreEvent extends integrityService.vim.Event {
            datastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface DatastoreDestroyedEvent extends integrityService.vim.DatastoreEvent {
         }
         interface DatastoreRenamedEvent extends integrityService.vim.DatastoreEvent {
            oldName: string;
            newName: string;
         }
         interface DatastoreCapacityIncreasedEvent extends integrityService.vim.DatastoreEvent {
            oldCapacity: number;
            newCapacity: number;
         }
         interface DatastoreDuplicatedEvent extends integrityService.vim.DatastoreEvent {
         }
         interface DatastoreFileEvent extends integrityService.vim.DatastoreEvent {
            targetFile: string;
         }
         interface DatastoreFileCopiedEvent extends integrityService.vim.DatastoreFileEvent {
            sourceDatastore: integrityService.vim.DatastoreEventArgument;
            sourceFile: string;
         }
         interface DatastoreFileMovedEvent extends integrityService.vim.DatastoreFileEvent {
            sourceDatastore: integrityService.vim.DatastoreEventArgument;
            sourceFile: string;
         }
         interface DatastoreFileDeletedEvent extends integrityService.vim.DatastoreFileEvent {
         }
         interface NonVIWorkloadDetectedOnDatastoreEvent extends integrityService.vim.DatastoreEvent {
         }
         interface DatastoreIORMReconfiguredEvent extends integrityService.vim.DatastoreEvent {
         }
         interface TaskEvent extends integrityService.vim.Event {
            info: integrityService.vim.TaskInfo;
         }
         interface TaskTimeoutEvent extends integrityService.vim.TaskEvent {
         }
         interface LicenseEvent extends integrityService.vim.Event {
         }
         interface ServerLicenseExpiredEvent extends integrityService.vim.LicenseEvent {
            product: string;
         }
         interface HostLicenseExpiredEvent extends integrityService.vim.LicenseEvent {
         }
         interface VMotionLicenseExpiredEvent extends integrityService.vim.LicenseEvent {
         }
         interface NoLicenseEvent extends integrityService.vim.LicenseEvent {
            feature: integrityService.vim.LicenseFeatureInfo;
         }
         interface LicenseServerUnavailableEvent extends integrityService.vim.LicenseEvent {
            licenseServer: string;
         }
         interface LicenseServerAvailableEvent extends integrityService.vim.LicenseEvent {
            licenseServer: string;
         }
         interface LicenseExpiredEvent extends integrityService.vim.Event {
            feature: integrityService.vim.LicenseFeatureInfo;
         }
         interface InvalidEditionEvent extends integrityService.vim.LicenseEvent {
            feature: string;
         }
         interface HostInventoryFullEvent extends integrityService.vim.LicenseEvent {
            capacity: number;
         }
         interface LicenseRestrictedEvent extends integrityService.vim.LicenseEvent {
         }
         interface IncorrectHostInformationEvent extends integrityService.vim.LicenseEvent {
         }
         interface UnlicensedVirtualMachinesEvent extends integrityService.vim.LicenseEvent {
            unlicensed: number;
            available: number;
         }
         interface UnlicensedVirtualMachinesFoundEvent extends integrityService.vim.LicenseEvent {
            available: number;
         }
         interface AllVirtualMachinesLicensedEvent extends integrityService.vim.LicenseEvent {
         }
         interface LicenseNonComplianceEvent extends integrityService.vim.LicenseEvent {
            url: string;
         }
         interface MigrationEvent extends integrityService.vim.VmEvent {
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface MigrationWarningEvent extends integrityService.vim.MigrationEvent {
         }
         interface MigrationErrorEvent extends integrityService.vim.MigrationEvent {
         }
         interface MigrationHostWarningEvent extends integrityService.vim.MigrationEvent {
            dstHost: integrityService.vim.HostEventArgument;
         }
         interface MigrationHostErrorEvent extends integrityService.vim.MigrationEvent {
            dstHost: integrityService.vim.HostEventArgument;
         }
         interface MigrationResourceWarningEvent extends integrityService.vim.MigrationEvent {
            dstPool: integrityService.vim.ResourcePoolEventArgument;
            dstHost: integrityService.vim.HostEventArgument;
         }
         interface MigrationResourceErrorEvent extends integrityService.vim.MigrationEvent {
            dstPool: integrityService.vim.ResourcePoolEventArgument;
            dstHost: integrityService.vim.HostEventArgument;
         }
         interface ClusterEvent extends integrityService.vim.Event {
         }
         interface DasEnabledEvent extends integrityService.vim.ClusterEvent {
         }
         interface DasDisabledEvent extends integrityService.vim.ClusterEvent {
         }
         interface DasAdmissionControlDisabledEvent extends integrityService.vim.ClusterEvent {
         }
         interface DasAdmissionControlEnabledEvent extends integrityService.vim.ClusterEvent {
         }
         interface DasHostFailedEvent extends integrityService.vim.ClusterEvent {
            failedHost: integrityService.vim.HostEventArgument;
         }
         interface DasHostIsolatedEvent extends integrityService.vim.ClusterEvent {
            isolatedHost: integrityService.vim.HostEventArgument;
         }
         interface DasClusterIsolatedEvent extends integrityService.vim.ClusterEvent {
         }
         interface DasAgentUnavailableEvent extends integrityService.vim.ClusterEvent {
         }
         interface DasAgentFoundEvent extends integrityService.vim.ClusterEvent {
         }
         interface InsufficientFailoverResourcesEvent extends integrityService.vim.ClusterEvent {
         }
         interface FailoverLevelRestored extends integrityService.vim.ClusterEvent {
         }
         interface ClusterOvercommittedEvent extends integrityService.vim.ClusterEvent {
         }
         interface HostOvercommittedEvent extends integrityService.vim.ClusterOvercommittedEvent {
         }
         interface ClusterStatusChangedEvent extends integrityService.vim.ClusterEvent {
            oldStatus: string;
            newStatus: string;
         }
         interface HostStatusChangedEvent extends integrityService.vim.ClusterStatusChangedEvent {
         }
         interface ClusterCreatedEvent extends integrityService.vim.ClusterEvent {
            parent: integrityService.vim.FolderEventArgument;
         }
         interface ClusterDestroyedEvent extends integrityService.vim.ClusterEvent {
         }
         interface DrsEnabledEvent extends integrityService.vim.ClusterEvent {
            behavior: string;
         }
         interface DrsDisabledEvent extends integrityService.vim.ClusterEvent {
         }
         interface ClusterReconfiguredEvent extends integrityService.vim.ClusterEvent {
         }
         interface HostMonitoringStateChangedEvent extends integrityService.vim.ClusterEvent {
            state: string;
         }
         interface VmHealthMonitoringStateChangedEvent extends integrityService.vim.ClusterEvent {
            state: string;
         }
         interface ResourcePoolEvent extends integrityService.vim.Event {
            resourcePool: integrityService.vim.ResourcePoolEventArgument;
         }
         interface ResourcePoolCreatedEvent extends integrityService.vim.ResourcePoolEvent {
            parent: integrityService.vim.ResourcePoolEventArgument;
         }
         interface ResourcePoolDestroyedEvent extends integrityService.vim.ResourcePoolEvent {
         }
         interface ResourcePoolMovedEvent extends integrityService.vim.ResourcePoolEvent {
            oldParent: integrityService.vim.ResourcePoolEventArgument;
            newParent: integrityService.vim.ResourcePoolEventArgument;
         }
         interface ResourcePoolReconfiguredEvent extends integrityService.vim.ResourcePoolEvent {
         }
         interface ResourceViolatedEvent extends integrityService.vim.ResourcePoolEvent {
         }
         interface VmResourcePoolMovedEvent extends integrityService.vim.VmEvent {
            oldParent: integrityService.vim.ResourcePoolEventArgument;
            newParent: integrityService.vim.ResourcePoolEventArgument;
         }
         interface TemplateUpgradeEvent extends integrityService.vim.Event {
            legacyTemplate: string;
         }
         interface TemplateBeingUpgradedEvent extends integrityService.vim.TemplateUpgradeEvent {
         }
         interface TemplateUpgradeFailedEvent extends integrityService.vim.TemplateUpgradeEvent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface TemplateUpgradedEvent extends integrityService.vim.TemplateUpgradeEvent {
         }
         interface CustomizationEvent extends integrityService.vim.VmEvent {
            logLocation?: string;
         }
         interface CustomizationStartedEvent extends integrityService.vim.CustomizationEvent {
         }
         interface CustomizationSucceeded extends integrityService.vim.CustomizationEvent {
         }
         interface CustomizationFailed extends integrityService.vim.CustomizationEvent {
         }
         interface CustomizationUnknownFailure extends integrityService.vim.CustomizationFailed {
         }
         interface CustomizationSysprepFailed extends integrityService.vim.CustomizationFailed {
            sysprepVersion: string;
            systemVersion: string;
         }
         interface CustomizationLinuxIdentityFailed extends integrityService.vim.CustomizationFailed {
         }
         interface CustomizationNetworkSetupFailed extends integrityService.vim.CustomizationFailed {
         }
         interface LockerMisconfiguredEvent extends integrityService.vim.Event {
            datastore: integrityService.vim.DatastoreEventArgument;
         }
         interface LockerReconfiguredEvent extends integrityService.vim.Event {
            oldDatastore?: integrityService.vim.DatastoreEventArgument;
            newDatastore?: integrityService.vim.DatastoreEventArgument;
         }
         interface NoDatastoresConfiguredEvent extends integrityService.vim.HostEvent {
         }
         interface AdminPasswordNotChangedEvent extends integrityService.vim.HostEvent {
         }
         interface HostInAuditModeEvent extends integrityService.vim.HostEvent {
         }
         interface LocalTSMEnabledEvent extends integrityService.vim.HostEvent {
         }
         interface RemoteTSMEnabledEvent extends integrityService.vim.HostEvent {
         }
         interface VimAccountPasswordChangedEvent extends integrityService.vim.HostEvent {
         }
         interface IScsiBootFailureEvent extends integrityService.vim.HostEvent {
         }
         interface DvsHealthStatusChangeEvent extends integrityService.vim.HostEvent {
            switchUuid: string;
            healthResult?: integrityService.vim.HostMemberHealthCheckResult;
         }
         interface NetworkRollbackEvent extends integrityService.vim.Event {
            methodName: string;
            transactionId: string;
         }
         interface UplinkPortVlanTrunkedEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface UplinkPortVlanUntrunkedEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface MtuMatchEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface MtuMismatchEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface UplinkPortMtuNotSupportEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface UplinkPortMtuSupportEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface TeamingMatchEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface TeamingMisMatchEvent extends integrityService.vim.DvsHealthStatusChangeEvent {
         }
         interface DvsEvent extends integrityService.vim.Event {
         }
         interface DvsCreatedEvent extends integrityService.vim.DvsEvent {
            parent: integrityService.vim.FolderEventArgument;
         }
         interface DvsRenamedEvent extends integrityService.vim.DvsEvent {
            oldName: string;
            newName: string;
         }
         interface DvsReconfiguredEvent extends integrityService.vim.DvsEvent {
            configSpec: integrityService.vim.DVSConfigSpec;
         }
         interface DvsUpgradeAvailableEvent extends integrityService.vim.DvsEvent {
            productInfo: integrityService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsUpgradeInProgressEvent extends integrityService.vim.DvsEvent {
            productInfo: integrityService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsUpgradeRejectedEvent extends integrityService.vim.DvsEvent {
            productInfo: integrityService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsUpgradedEvent extends integrityService.vim.DvsEvent {
            productInfo: integrityService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface DvsHostJoinedEvent extends integrityService.vim.DvsEvent {
            hostJoined: integrityService.vim.HostEventArgument;
         }
         interface DvsHostLeftEvent extends integrityService.vim.DvsEvent {
            hostLeft: integrityService.vim.HostEventArgument;
         }
         interface DvsOutOfSyncHostArgument extends integrityService.vim.DynamicData {
            outOfSyncHost: integrityService.vim.HostEventArgument;
            configParamters: Array<string>;
         }
         interface ArrayOfDvsOutOfSyncHostArgument {
            DvsOutOfSyncHostArgument?: Array<integrityService.vim.DvsOutOfSyncHostArgument>;
         }
         interface OutOfSyncDvsHost extends integrityService.vim.DvsEvent {
            hostOutOfSync: Array<integrityService.vim.DvsOutOfSyncHostArgument>;
         }
         interface DvsHostWentOutOfSyncEvent extends integrityService.vim.DvsEvent {
            hostOutOfSync: integrityService.vim.DvsOutOfSyncHostArgument;
         }
         interface DvsHostBackInSyncEvent extends integrityService.vim.DvsEvent {
            hostBackInSync: integrityService.vim.HostEventArgument;
         }
         interface DvsHostStatusUpdated extends integrityService.vim.DvsEvent {
            hostMember: integrityService.vim.HostEventArgument;
            oldStatus?: string;
            newStatus?: string;
            oldStatusDetail?: string;
            newStatusDetail?: string;
         }
         interface DvsPortCreatedEvent extends integrityService.vim.DvsEvent {
            portKey: Array<string>;
         }
         interface DvsPortReconfiguredEvent extends integrityService.vim.DvsEvent {
            portKey: Array<string>;
         }
         interface DvsPortDeletedEvent extends integrityService.vim.DvsEvent {
            portKey: Array<string>;
         }
         interface DvsPortConnectedEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            connectee?: integrityService.vim.DistributedVirtualSwitchPortConnectee;
         }
         interface DvsPortDisconnectedEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            connectee?: integrityService.vim.DistributedVirtualSwitchPortConnectee;
         }
         interface DvsPortVendorSpecificStateChangeEvent extends integrityService.vim.DvsEvent {
            portKey: string;
         }
         interface DvsPortRuntimeChangeEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            runtimeInfo: integrityService.vim.DVPortStatus;
         }
         interface DvsPortLinkUpEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: integrityService.vim.DVPortStatus;
         }
         interface DvsPortLinkDownEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: integrityService.vim.DVPortStatus;
         }
         interface DvsPortJoinPortgroupEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            portgroupKey: string;
            portgroupName: string;
         }
         interface DvsPortLeavePortgroupEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            portgroupKey: string;
            portgroupName: string;
         }
         interface DvsPortBlockedEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            statusDetail?: string;
            runtimeInfo?: integrityService.vim.DVPortStatus;
         }
         interface DvsPortUnblockedEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: integrityService.vim.DVPortStatus;
         }
         interface DvsPortEnteredPassthruEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: integrityService.vim.DVPortStatus;
         }
         interface DvsPortExitedPassthruEvent extends integrityService.vim.DvsEvent {
            portKey: string;
            runtimeInfo?: integrityService.vim.DVPortStatus;
         }
         interface DvsDestroyedEvent extends integrityService.vim.DvsEvent {
         }
         interface DvsMergedEvent extends integrityService.vim.DvsEvent {
            sourceDvs: integrityService.vim.DvsEventArgument;
            destinationDvs: integrityService.vim.DvsEventArgument;
         }
         interface HostLocalPortCreatedEvent extends integrityService.vim.DvsEvent {
            hostLocalPort: integrityService.vim.DVSHostLocalPortInfo;
         }
         interface RollbackEvent extends integrityService.vim.DvsEvent {
            hostName: string;
            methodName?: string;
         }
         interface RecoveryEvent extends integrityService.vim.DvsEvent {
            hostName: string;
            portKey: string;
            dvsUuid?: string;
            vnic?: string;
         }
         interface DvsImportEvent extends integrityService.vim.DvsEvent {
            importType: string;
         }
         interface DvsRestoreEvent extends integrityService.vim.DvsEvent {
         }
         interface DVPortgroupEvent extends integrityService.vim.Event {
         }
         interface DVPortgroupCreatedEvent extends integrityService.vim.DVPortgroupEvent {
         }
         interface DVPortgroupRenamedEvent extends integrityService.vim.DVPortgroupEvent {
            oldName: string;
            newName: string;
         }
         interface DVPortgroupReconfiguredEvent extends integrityService.vim.DVPortgroupEvent {
            configSpec: integrityService.vim.DVPortgroupConfigSpec;
         }
         interface DVPortgroupDestroyedEvent extends integrityService.vim.DVPortgroupEvent {
         }
         interface DvpgImportEvent extends integrityService.vim.DVPortgroupEvent {
            importType: string;
         }
         interface DvpgRestoreEvent extends integrityService.vim.DVPortgroupEvent {
         }
         interface DrsInvocationFailedEvent extends integrityService.vim.ClusterEvent {
         }
         interface DrsRecoveredFromFailureEvent extends integrityService.vim.ClusterEvent {
         }
         interface VmReloadFromPathEvent extends integrityService.vim.VmEvent {
            configPath: string;
         }
         interface VmReloadFromPathFailedEvent extends integrityService.vim.VmEvent {
            configPath: string;
         }
         interface VmRequirementsExceedCurrentEVCModeEvent extends integrityService.vim.VmEvent {
         }
         interface EventArgument extends integrityService.vim.DynamicData {
         }
         interface RoleEventArgument extends integrityService.vim.EventArgument {
            roleId: number;
            name: string;
         }
         interface EntityEventArgument extends integrityService.vim.EventArgument {
            name: string;
         }
         interface ManagedEntityEventArgument extends integrityService.vim.EntityEventArgument {
            entity: integrityService.vim.ManagedObjectReference;
         }
         interface FolderEventArgument extends integrityService.vim.EntityEventArgument {
            folder: integrityService.vim.ManagedObjectReference;
         }
         interface DatacenterEventArgument extends integrityService.vim.EntityEventArgument {
            datacenter: integrityService.vim.ManagedObjectReference;
         }
         interface ComputeResourceEventArgument extends integrityService.vim.EntityEventArgument {
            computeResource: integrityService.vim.ManagedObjectReference;
         }
         interface ResourcePoolEventArgument extends integrityService.vim.EntityEventArgument {
            resourcePool: integrityService.vim.ManagedObjectReference;
         }
         interface HostEventArgument extends integrityService.vim.EntityEventArgument {
            host: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfHostEventArgument {
            HostEventArgument?: Array<integrityService.vim.HostEventArgument>;
         }
         interface VmEventArgument extends integrityService.vim.EntityEventArgument {
            vm: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfVmEventArgument {
            VmEventArgument?: Array<integrityService.vim.VmEventArgument>;
         }
         interface DatastoreEventArgument extends integrityService.vim.EntityEventArgument {
            datastore: integrityService.vim.ManagedObjectReference;
         }
         interface NetworkEventArgument extends integrityService.vim.EntityEventArgument {
            network: integrityService.vim.ManagedObjectReference;
         }
         interface AlarmEventArgument extends integrityService.vim.EntityEventArgument {
            alarm: integrityService.vim.ManagedObjectReference;
         }
         interface ScheduledTaskEventArgument extends integrityService.vim.EntityEventArgument {
            scheduledTask: integrityService.vim.ManagedObjectReference;
         }
         interface ProfileEventArgument extends integrityService.vim.EventArgument {
            profile: integrityService.vim.ManagedObjectReference;
            name: string;
         }
         interface DvsEventArgument extends integrityService.vim.EntityEventArgument {
            dvs: integrityService.vim.ManagedObjectReference;
         }
         enum EventCategory {
            "info",
            "warning",
            "error",
            "user",
         }
         interface EventArgDesc extends integrityService.vim.DynamicData {
            name: string;
            type: string;
            description?: integrityService.vim.ElementDescription;
         }
         interface ArrayOfEventArgDesc {
            EventArgDesc?: Array<integrityService.vim.EventArgDesc>;
         }
         interface EventDescriptionEventDetail extends integrityService.vim.DynamicData {
            key: string;
            description?: string;
            category: string;
            formatOnDatacenter: string;
            formatOnComputeResource: string;
            formatOnHost: string;
            formatOnVm: string;
            fullFormat: string;
            longDescription?: string;
         }
         interface ArrayOfEventDescriptionEventDetail {
            EventDescriptionEventDetail?: Array<integrityService.vim.EventDescriptionEventDetail>;
         }
         interface EventDescription extends integrityService.vim.DynamicData {
            category: Array<integrityService.vim.ElementDescription>;
            eventInfo: Array<integrityService.vim.EventDescriptionEventDetail>;
            enumeratedTypes?: Array<integrityService.vim.EnumDescription>;
         }
         interface EventEx extends integrityService.vim.Event {
            eventTypeId: string;
            severity?: string;
            message?: string;
            arguments?: Array<integrityService.vim.KeyAnyValue>;
            objectId?: string;
            objectType?: string;
            objectName?: string;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         enum EventFilterSpecRecursionOption {
            "self",
            "children",
            "all",
         }
         interface EventFilterSpecByEntity extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            recursion: integrityService.vim.EventFilterSpecRecursionOption;
         }
         interface EventFilterSpecByTime extends integrityService.vim.DynamicData {
            beginTime?: Date;
            endTime?: Date;
         }
         interface EventFilterSpecByUsername extends integrityService.vim.DynamicData {
            systemUser: boolean;
            userList?: Array<string>;
         }
         interface EventFilterSpec extends integrityService.vim.DynamicData {
            entity?: integrityService.vim.EventFilterSpecByEntity;
            time?: integrityService.vim.EventFilterSpecByTime;
            userName?: integrityService.vim.EventFilterSpecByUsername;
            eventChainId?: number;
            alarm?: integrityService.vim.ManagedObjectReference;
            scheduledTask?: integrityService.vim.ManagedObjectReference;
            disableFullMessage?: boolean;
            category?: Array<string>;
            type?: Array<string>;
            tag?: Array<string>;
            eventTypeId?: Array<string>;
         }
         interface ExtExtendedProductInfo extends integrityService.vim.DynamicData {
            companyUrl?: string;
            productUrl?: string;
            managementUrl?: string;
            self?: integrityService.vim.ManagedObjectReference;
         }
         interface ManagedByInfo extends integrityService.vim.DynamicData {
            extensionKey: string;
            type: string;
         }
         interface ExtManagedEntityInfo extends integrityService.vim.DynamicData {
            type: string;
            smallIconUrl?: string;
            iconUrl?: string;
            description?: string;
         }
         interface ArrayOfExtManagedEntityInfo {
            ExtManagedEntityInfo?: Array<integrityService.vim.ExtManagedEntityInfo>;
         }
         interface ExtSolutionManagerInfoTabInfo extends integrityService.vim.DynamicData {
            label: string;
            url: string;
         }
         interface ArrayOfExtSolutionManagerInfoTabInfo {
            ExtSolutionManagerInfoTabInfo?: Array<integrityService.vim.ExtSolutionManagerInfoTabInfo>;
         }
         interface ExtSolutionManagerInfo extends integrityService.vim.DynamicData {
            tab?: Array<integrityService.vim.ExtSolutionManagerInfoTabInfo>;
            smallIconUrl?: string;
         }
         interface ActiveDirectoryFault extends integrityService.vim.VimFault {
            errorCode?: number;
         }
         interface AdminDisabled extends integrityService.vim.HostConfigFault {
         }
         interface AdminNotDisabled extends integrityService.vim.HostConfigFault {
         }
         enum AffinityType {
            "memory",
            "cpu",
         }
         interface AffinityConfigured extends integrityService.vim.MigrationFault {
            configuredAffinity: Array<string>;
         }
         enum AgentInstallFailedReason {
            "NotEnoughSpaceOnDevice",
            "PrepareToUpgradeFailed",
            "AgentNotRunning",
            "AgentNotReachable",
            "InstallTimedout",
            "SignatureVerificationFailed",
            "AgentUploadFailed",
            "AgentUploadTimedout",
            "UnknownInstallerError",
         }
         interface AgentInstallFailed extends integrityService.vim.HostConnectFault {
            reason?: string;
            statusCode?: number;
            installerOutput?: string;
         }
         interface AlreadyBeingManaged extends integrityService.vim.HostConnectFault {
            ipAddress: string;
         }
         interface AlreadyConnected extends integrityService.vim.HostConnectFault {
            name: string;
         }
         interface AlreadyExists extends integrityService.vim.VimFault {
            name?: string;
         }
         interface AlreadyUpgraded extends integrityService.vim.VimFault {
         }
         interface AnswerFileUpdateFailure extends integrityService.vim.DynamicData {
            userInputPath: integrityService.vim.ProfilePropertyPath;
            errMsg: integrityService.vim.LocalizableMessage;
         }
         interface ArrayOfAnswerFileUpdateFailure {
            AnswerFileUpdateFailure?: Array<integrityService.vim.AnswerFileUpdateFailure>;
         }
         interface AnswerFileUpdateFailed extends integrityService.vim.VimFault {
            failure: Array<integrityService.vim.AnswerFileUpdateFailure>;
         }
         interface ApplicationQuiesceFault extends integrityService.vim.SnapshotFault {
         }
         interface AuthMinimumAdminPermission extends integrityService.vim.VimFault {
         }
         interface BackupBlobReadFailure extends integrityService.vim.DvsFault {
            entityName: string;
            entityType: string;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface BackupBlobWriteFailure extends integrityService.vim.DvsFault {
            entityName: string;
            entityType: string;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface BlockedByFirewall extends integrityService.vim.HostConfigFault {
         }
         interface CAMServerRefusedConnection extends integrityService.vim.InvalidCAMServer {
         }
         interface CannotAccessFile extends integrityService.vim.FileFault {
         }
         interface CannotAccessLocalSource extends integrityService.vim.VimFault {
         }
         interface CannotAccessNetwork extends integrityService.vim.CannotAccessVmDevice {
         }
         interface CannotAccessVmComponent extends integrityService.vim.VmConfigFault {
         }
         interface CannotAccessVmConfig extends integrityService.vim.CannotAccessVmComponent {
            reason: integrityService.vim.LocalizedMethodFault;
         }
         interface CannotAccessVmDevice extends integrityService.vim.CannotAccessVmComponent {
            device: string;
            backing: string;
            connected: boolean;
         }
         interface CannotAccessVmDisk extends integrityService.vim.CannotAccessVmDevice {
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface CannotAddHostWithFTVmAsStandalone extends integrityService.vim.HostConnectFault {
         }
         interface CannotAddHostWithFTVmToDifferentCluster extends integrityService.vim.HostConnectFault {
         }
         interface CannotAddHostWithFTVmToNonHACluster extends integrityService.vim.HostConnectFault {
         }
         interface CannotChangeDrsBehaviorForFtSecondary extends integrityService.vim.VmFaultToleranceIssue {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotChangeHaSettingsForFtSecondary extends integrityService.vim.VmFaultToleranceIssue {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotChangeVsanClusterUuid extends integrityService.vim.VsanFault {
         }
         interface CannotChangeVsanNodeUuid extends integrityService.vim.VsanFault {
         }
         interface CannotCreateFile extends integrityService.vim.FileFault {
         }
         interface CannotDecryptPasswords extends integrityService.vim.CustomizationFault {
         }
         interface CannotDeleteFile extends integrityService.vim.FileFault {
         }
         interface CannotDisableDrsOnClustersWithVApps extends integrityService.vim.RuntimeFault {
         }
         interface CannotDisableSnapshot extends integrityService.vim.VmConfigFault {
         }
         interface CannotDisconnectHostWithFaultToleranceVm extends integrityService.vim.VimFault {
            hostName: string;
         }
         interface CannotModifyConfigCpuRequirements extends integrityService.vim.MigrationFault {
         }
         enum CannotMoveFaultToleranceVmMoveType {
            "resourcePool",
            "cluster",
         }
         interface CannotMoveFaultToleranceVm extends integrityService.vim.VimFault {
            moveType: string;
            vmName: string;
         }
         interface CannotMoveHostWithFaultToleranceVm extends integrityService.vim.VimFault {
         }
         interface CannotMoveVmWithDeltaDisk extends integrityService.vim.MigrationFault {
            device: string;
         }
         interface CannotMoveVmWithNativeDeltaDisk extends integrityService.vim.MigrationFault {
         }
         interface CannotMoveVsanEnabledHost extends integrityService.vim.VsanFault {
         }
         interface CannotPlaceWithoutPrerequisiteMoves extends integrityService.vim.VimFault {
         }
         enum CannotPowerOffVmInClusterOperation {
            "suspend",
            "powerOff",
            "guestShutdown",
            "guestSuspend",
         }
         interface CannotPowerOffVmInCluster extends integrityService.vim.InvalidState {
            operation: string;
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface CannotReconfigureVsanWhenHaEnabled extends integrityService.vim.VsanFault {
         }
         enum CannotUseNetworkReason {
            "NetworkReservationNotSupported",
            "MismatchedNetworkPolicies",
            "MismatchedDvsVersionOrVendor",
            "VMotionToUnsupportedNetworkType",
         }
         interface CannotUseNetwork extends integrityService.vim.VmConfigFault {
            device: string;
            backing: string;
            connected: boolean;
            reason: string;
         }
         interface ClockSkew extends integrityService.vim.HostConfigFault {
         }
         interface CloneFromSnapshotNotSupported extends integrityService.vim.MigrationFault {
         }
         interface CollectorAddressUnset extends integrityService.vim.DvsFault {
         }
         interface ConcurrentAccess extends integrityService.vim.VimFault {
         }
         interface ConflictingConfigurationConfig extends integrityService.vim.DynamicData {
            entity?: integrityService.vim.ManagedObjectReference;
            propertyPath: string;
         }
         interface ArrayOfConflictingConfigurationConfig {
            ConflictingConfigurationConfig?: Array<integrityService.vim.ConflictingConfigurationConfig>;
         }
         interface ConflictingConfiguration extends integrityService.vim.DvsFault {
            configInConflict: Array<integrityService.vim.ConflictingConfigurationConfig>;
         }
         interface ConflictingDatastoreFound extends integrityService.vim.RuntimeFault {
            name: string;
            url: string;
         }
         interface ConnectedIso extends integrityService.vim.OvfExport {
            cdrom: integrityService.vim.VirtualCdrom;
            filename: string;
         }
         interface CpuCompatibilityUnknown extends integrityService.vim.CpuIncompatible {
         }
         interface CpuHotPlugNotSupported extends integrityService.vim.VmConfigFault {
         }
         interface CpuIncompatible extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            level: number;
            registerName: string;
            registerBits?: string;
            desiredBits?: string;
            host?: integrityService.vim.ManagedObjectReference;
         }
         interface CpuIncompatible1ECX extends integrityService.vim.CpuIncompatible {
            sse3: boolean;
            pclmulqdq?: boolean;
            ssse3: boolean;
            sse41: boolean;
            sse42: boolean;
            aes?: boolean;
            other: boolean;
            otherOnly: boolean;
         }
         interface CpuIncompatible81EDX extends integrityService.vim.CpuIncompatible {
            nx: boolean;
            ffxsr: boolean;
            rdtscp: boolean;
            lm: boolean;
            other: boolean;
            otherOnly: boolean;
         }
         interface CustomizationFault extends integrityService.vim.VimFault {
         }
         interface CustomizationPending extends integrityService.vim.CustomizationFault {
         }
         interface DVPortNotSupported extends integrityService.vim.DeviceBackingNotSupported {
         }
         enum DasConfigFaultDasConfigFaultReason {
            "HostNetworkMisconfiguration",
            "HostMisconfiguration",
            "InsufficientPrivileges",
            "NoPrimaryAgentAvailable",
            "Other",
            "NoDatastoresConfigured",
            "VSanNotSupportedOnHost",
         }
         interface DasConfigFault extends integrityService.vim.VimFault {
            reason?: string;
            output?: string;
            event?: Array<integrityService.vim.Event>;
         }
         interface DatabaseError extends integrityService.vim.RuntimeFault {
         }
         interface DatacenterMismatchArgument extends integrityService.vim.DynamicData {
            entity: integrityService.vim.ManagedObjectReference;
            inputDatacenter?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfDatacenterMismatchArgument {
            DatacenterMismatchArgument?: Array<integrityService.vim.DatacenterMismatchArgument>;
         }
         interface DatacenterMismatch extends integrityService.vim.MigrationFault {
            invalidArgument: Array<integrityService.vim.DatacenterMismatchArgument>;
            expectedDatacenter: integrityService.vim.ManagedObjectReference;
         }
         interface DatastoreNotWritableOnHost extends integrityService.vim.InvalidDatastore {
            host: integrityService.vim.ManagedObjectReference;
         }
         interface DeltaDiskFormatNotSupported extends integrityService.vim.VmConfigFault {
            datastore?: Array<integrityService.vim.ManagedObjectReference>;
            deltaDiskFormat: string;
         }
         interface DestinationSwitchFull extends integrityService.vim.CannotAccessNetwork {
         }
         interface DestinationVsanDisabled extends integrityService.vim.CannotMoveVsanEnabledHost {
            destinationCluster: string;
         }
         interface DeviceBackingNotSupported extends integrityService.vim.DeviceNotSupported {
            backing: string;
         }
         interface DeviceControllerNotSupported extends integrityService.vim.DeviceNotSupported {
            controller: string;
         }
         interface DeviceHotPlugNotSupported extends integrityService.vim.InvalidDeviceSpec {
         }
         interface DeviceNotFound extends integrityService.vim.InvalidDeviceSpec {
         }
         enum DeviceNotSupportedReason {
            "host",
            "guest",
         }
         interface DeviceNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            device: string;
            reason?: string;
         }
         interface DeviceUnsupportedForVmPlatform extends integrityService.vim.InvalidDeviceSpec {
         }
         interface DeviceUnsupportedForVmVersion extends integrityService.vim.InvalidDeviceSpec {
            currentVersion: string;
            expectedVersion: string;
         }
         interface DirectoryNotEmpty extends integrityService.vim.FileFault {
         }
         interface DisableAdminNotSupported extends integrityService.vim.HostConfigFault {
         }
         enum DisallowedChangeByServiceDisallowedChange {
            "hotExtendDisk",
         }
         interface DisallowedChangeByService extends integrityService.vim.RuntimeFault {
            serviceName: string;
            disallowedChange?: string;
         }
         interface DisallowedDiskModeChange extends integrityService.vim.InvalidDeviceSpec {
         }
         interface DisallowedMigrationDeviceAttached extends integrityService.vim.MigrationFault {
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface DisallowedOperationOnFailoverHost extends integrityService.vim.RuntimeFault {
            host: integrityService.vim.ManagedObjectReference;
            hostname: string;
         }
         interface DiskHasPartitions extends integrityService.vim.VsanDiskFault {
         }
         interface DiskIsLastRemainingNonSSD extends integrityService.vim.VsanDiskFault {
         }
         interface DiskIsNonLocal extends integrityService.vim.VsanDiskFault {
         }
         interface DiskIsUSB extends integrityService.vim.VsanDiskFault {
         }
         interface DiskMoveTypeNotSupported extends integrityService.vim.MigrationFault {
         }
         interface DiskNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            disk: number;
         }
         interface DiskTooSmall extends integrityService.vim.VsanDiskFault {
         }
         interface DomainNotFound extends integrityService.vim.ActiveDirectoryFault {
            domainName: string;
         }
         interface DrsDisabledOnVm extends integrityService.vim.VimFault {
         }
         interface DrsVmotionIncompatibleFault extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            host: integrityService.vim.ManagedObjectReference;
         }
         interface DuplicateDisks extends integrityService.vim.VsanDiskFault {
         }
         interface DuplicateName extends integrityService.vim.VimFault {
            name: string;
            object: integrityService.vim.ManagedObjectReference;
         }
         interface DuplicateVsanNetworkInterface extends integrityService.vim.VsanFault {
            device: string;
         }
         interface DvsApplyOperationFaultFaultOnObject extends integrityService.vim.DynamicData {
            objectId: string;
            type: string;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfDvsApplyOperationFaultFaultOnObject {
            DvsApplyOperationFaultFaultOnObject?: Array<integrityService.vim.DvsApplyOperationFaultFaultOnObject>;
         }
         interface DvsApplyOperationFault extends integrityService.vim.DvsFault {
            objectFault: Array<integrityService.vim.DvsApplyOperationFaultFaultOnObject>;
         }
         interface DvsFault extends integrityService.vim.VimFault {
         }
         interface DvsNotAuthorized extends integrityService.vim.DvsFault {
            sessionExtensionKey?: string;
            dvsExtensionKey?: string;
         }
         interface DvsOperationBulkFaultFaultOnHost extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfDvsOperationBulkFaultFaultOnHost {
            DvsOperationBulkFaultFaultOnHost?: Array<integrityService.vim.DvsOperationBulkFaultFaultOnHost>;
         }
         interface DvsOperationBulkFault extends integrityService.vim.DvsFault {
            hostFault: Array<integrityService.vim.DvsOperationBulkFaultFaultOnHost>;
         }
         interface DvsScopeViolated extends integrityService.vim.DvsFault {
            scope: Array<integrityService.vim.ManagedObjectReference>;
            entity: integrityService.vim.ManagedObjectReference;
         }
         interface EVCAdmissionFailed extends integrityService.vim.NotSupportedHostInCluster {
            faults?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface EVCAdmissionFailedCPUFeaturesForMode extends integrityService.vim.EVCAdmissionFailed {
            currentEVCModeKey: string;
         }
         interface EVCAdmissionFailedCPUModel extends integrityService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedCPUModelForMode extends integrityService.vim.EVCAdmissionFailed {
            currentEVCModeKey: string;
         }
         interface EVCAdmissionFailedCPUVendor extends integrityService.vim.EVCAdmissionFailed {
            clusterCPUVendor: string;
            hostCPUVendor: string;
         }
         interface EVCAdmissionFailedCPUVendorUnknown extends integrityService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedHostDisconnected extends integrityService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedHostSoftware extends integrityService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedHostSoftwareForMode extends integrityService.vim.EVCAdmissionFailed {
         }
         interface EVCAdmissionFailedVmActive extends integrityService.vim.EVCAdmissionFailed {
         }
         interface EightHostLimitViolated extends integrityService.vim.VmConfigFault {
         }
         interface ExpiredAddonLicense extends integrityService.vim.ExpiredFeatureLicense {
         }
         interface ExpiredEditionLicense extends integrityService.vim.ExpiredFeatureLicense {
         }
         interface ExpiredFeatureLicense extends integrityService.vim.NotEnoughLicenses {
            feature: string;
            count: number;
            expirationDate: Date;
         }
         interface ExtendedFault extends integrityService.vim.VimFault {
            faultTypeId: string;
            data?: Array<integrityService.vim.KeyValue>;
         }
         interface FailToEnableSPBM extends integrityService.vim.NotEnoughLicenses {
            cs: integrityService.vim.ManagedObjectReference;
            csName: string;
            hostLicenseStates: Array<integrityService.vim.ComputeResourceHostSPBMLicenseInfo>;
         }
         interface FailToLockFaultToleranceVMs extends integrityService.vim.RuntimeFault {
            vmName: string;
            vm: integrityService.vim.ManagedObjectReference;
            alreadyLockedVm: integrityService.vim.ManagedObjectReference;
         }
         interface FaultToleranceAntiAffinityViolated extends integrityService.vim.MigrationFault {
            hostName: string;
            host: integrityService.vim.ManagedObjectReference;
         }
         interface FaultToleranceCannotEditMem extends integrityService.vim.VmConfigFault {
            vmName: string;
            vm: integrityService.vim.ManagedObjectReference;
         }
         interface FaultToleranceCpuIncompatible extends integrityService.vim.CpuIncompatible {
            model: boolean;
            family: boolean;
            stepping: boolean;
         }
         interface FaultToleranceNeedsThickDisk extends integrityService.vim.MigrationFault {
            vmName: string;
         }
         interface FaultToleranceNotLicensed extends integrityService.vim.VmFaultToleranceIssue {
            hostName?: string;
         }
         interface FaultToleranceNotSameBuild extends integrityService.vim.MigrationFault {
            build: string;
         }
         interface FaultTolerancePrimaryPowerOnNotAttempted extends integrityService.vim.VmFaultToleranceIssue {
            secondaryVm: integrityService.vim.ManagedObjectReference;
            primaryVm: integrityService.vim.ManagedObjectReference;
         }
         interface FaultToleranceVmNotDasProtected extends integrityService.vim.VimFault {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface FcoeFault extends integrityService.vim.VimFault {
         }
         interface FcoeFaultPnicHasNoPortSet extends integrityService.vim.FcoeFault {
            nicDevice: string;
         }
         interface FeatureRequirementsNotMet extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            featureRequirement?: Array<integrityService.vim.VirtualMachineFeatureRequirement>;
            vm?: integrityService.vim.ManagedObjectReference;
            host?: integrityService.vim.ManagedObjectReference;
         }
         interface FileAlreadyExists extends integrityService.vim.FileFault {
         }
         interface FileBackedPortNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface FileFault extends integrityService.vim.VimFault {
            file: string;
         }
         interface FileLocked extends integrityService.vim.FileFault {
         }
         interface FileNameTooLong extends integrityService.vim.FileFault {
         }
         interface FileNotFound extends integrityService.vim.FileFault {
         }
         interface FileNotWritable extends integrityService.vim.FileFault {
         }
         interface FileTooLarge extends integrityService.vim.FileFault {
            datastore: string;
            fileSize: number;
            maxFileSize?: number;
         }
         interface FilesystemQuiesceFault extends integrityService.vim.SnapshotFault {
         }
         enum FtIssuesOnHostHostSelectionType {
            "user",
            "vc",
            "drs",
         }
         interface FtIssuesOnHost extends integrityService.vim.VmFaultToleranceIssue {
            host: integrityService.vim.ManagedObjectReference;
            hostName: string;
            errors?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface FullStorageVMotionNotSupported extends integrityService.vim.MigrationFeatureNotSupported {
         }
         interface GenericDrsFault extends integrityService.vim.VimFault {
            hostFaults?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface GenericVmConfigFault extends integrityService.vim.VmConfigFault {
            reason: string;
         }
         interface GuestAuthenticationChallenge extends integrityService.vim.GuestOperationsFault {
            serverChallenge: integrityService.vim.GuestAuthentication;
            sessionID: number;
         }
         interface GuestComponentsOutOfDate extends integrityService.vim.GuestOperationsFault {
         }
         interface GuestOperationsFault extends integrityService.vim.VimFault {
         }
         interface GuestOperationsUnavailable extends integrityService.vim.GuestOperationsFault {
         }
         interface GuestPermissionDenied extends integrityService.vim.GuestOperationsFault {
         }
         interface GuestProcessNotFound extends integrityService.vim.GuestOperationsFault {
            pid: number;
         }
         interface HAErrorsAtDest extends integrityService.vim.MigrationFault {
         }
         interface HostAccessRestrictedToManagementServer extends integrityService.vim.NotSupported {
            managementServer: string;
         }
         interface HostConfigFailed extends integrityService.vim.HostConfigFault {
            failure: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface HostConfigFault extends integrityService.vim.VimFault {
         }
         interface HostConnectFault extends integrityService.vim.VimFault {
         }
         interface HostInDomain extends integrityService.vim.HostConfigFault {
         }
         enum HostIncompatibleForFaultToleranceReason {
            "product",
            "processor",
         }
         interface HostIncompatibleForFaultTolerance extends integrityService.vim.VmFaultToleranceIssue {
            hostName?: string;
            reason?: string;
         }
         enum HostIncompatibleForRecordReplayReason {
            "product",
            "processor",
         }
         interface HostIncompatibleForRecordReplay extends integrityService.vim.VimFault {
            hostName?: string;
            reason?: string;
         }
         interface HostInventoryFull extends integrityService.vim.NotEnoughLicenses {
            capacity: number;
         }
         interface HostPowerOpFailed extends integrityService.vim.VimFault {
         }
         interface HotSnapshotMoveNotSupported extends integrityService.vim.SnapshotCopyNotSupported {
         }
         interface IDEDiskNotSupported extends integrityService.vim.DiskNotSupported {
         }
         interface IORMNotSupportedHostOnDatastore extends integrityService.vim.VimFault {
            datastore: integrityService.vim.ManagedObjectReference;
            datastoreName: string;
            host?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ImportHostAddFailure extends integrityService.vim.DvsFault {
            hostIp: Array<string>;
         }
         interface ImportOperationBulkFaultFaultOnImport extends integrityService.vim.DynamicData {
            entityType?: string;
            key?: string;
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfImportOperationBulkFaultFaultOnImport {
            ImportOperationBulkFaultFaultOnImport?: Array<integrityService.vim.ImportOperationBulkFaultFaultOnImport>;
         }
         interface ImportOperationBulkFault extends integrityService.vim.DvsFault {
            importFaults: Array<integrityService.vim.ImportOperationBulkFaultFaultOnImport>;
         }
         interface InUseFeatureManipulationDisallowed extends integrityService.vim.NotEnoughLicenses {
         }
         interface InaccessibleDatastore extends integrityService.vim.InvalidDatastore {
            detail?: string;
         }
         interface InaccessibleVFlashSource extends integrityService.vim.VimFault {
            hostName: string;
         }
         interface IncompatibleDefaultDevice extends integrityService.vim.MigrationFault {
            device: string;
         }
         interface IncompatibleHostForFtSecondary extends integrityService.vim.VmFaultToleranceIssue {
            host: integrityService.vim.ManagedObjectReference;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface IncompatibleSetting extends integrityService.vim.InvalidArgument {
            conflictingProperty: string;
         }
         interface IncorrectFileType extends integrityService.vim.FileFault {
         }
         interface IncorrectHostInformation extends integrityService.vim.NotEnoughLicenses {
         }
         interface IndependentDiskVMotionNotSupported extends integrityService.vim.MigrationFeatureNotSupported {
         }
         interface InsufficientAgentVmsDeployed extends integrityService.vim.InsufficientResourcesFault {
            hostName: string;
            requiredNumAgentVms: number;
            currentNumAgentVms: number;
         }
         interface InsufficientCpuResourcesFault extends integrityService.vim.InsufficientResourcesFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientDisks extends integrityService.vim.VsanDiskFault {
         }
         interface InsufficientFailoverResourcesFault extends integrityService.vim.InsufficientResourcesFault {
         }
         interface InsufficientHostCapacityFault extends integrityService.vim.InsufficientResourcesFault {
            host?: integrityService.vim.ManagedObjectReference;
         }
         interface InsufficientHostCpuCapacityFault extends integrityService.vim.InsufficientHostCapacityFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientHostMemoryCapacityFault extends integrityService.vim.InsufficientHostCapacityFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientMemoryResourcesFault extends integrityService.vim.InsufficientResourcesFault {
            unreserved: number;
            requested: number;
         }
         interface InsufficientPerCpuCapacity extends integrityService.vim.InsufficientHostCapacityFault {
         }
         interface InsufficientResourcesFault extends integrityService.vim.VimFault {
         }
         interface InsufficientStandbyCpuResource extends integrityService.vim.InsufficientStandbyResource {
            available: number;
            requested: number;
         }
         interface InsufficientStandbyMemoryResource extends integrityService.vim.InsufficientStandbyResource {
            available: number;
            requested: number;
         }
         interface InsufficientStandbyResource extends integrityService.vim.InsufficientResourcesFault {
         }
         interface InsufficientStorageSpace extends integrityService.vim.InsufficientResourcesFault {
         }
         interface InsufficientVFlashResourcesFault extends integrityService.vim.InsufficientResourcesFault {
            freeSpace: number;
            requestedSpace: number;
         }
         interface InvalidAffinitySettingFault extends integrityService.vim.VimFault {
         }
         interface InvalidBmcRole extends integrityService.vim.VimFault {
         }
         interface InvalidBundle extends integrityService.vim.PlatformConfigFault {
         }
         interface InvalidCAMCertificate extends integrityService.vim.InvalidCAMServer {
         }
         interface InvalidCAMServer extends integrityService.vim.ActiveDirectoryFault {
            camServer: string;
         }
         interface InvalidClientCertificate extends integrityService.vim.InvalidLogin {
         }
         interface InvalidController extends integrityService.vim.InvalidDeviceSpec {
            controllerKey: number;
         }
         enum InvalidDasConfigArgumentEntryForInvalidArgument {
            "admissionControl",
            "userHeartbeatDs",
            "vmConfig",
         }
         interface InvalidDasConfigArgument extends integrityService.vim.InvalidArgument {
            entry?: string;
            clusterName?: string;
         }
         interface InvalidDasRestartPriorityForFtVm extends integrityService.vim.InvalidArgument {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface InvalidDatastore extends integrityService.vim.VimFault {
            datastore?: integrityService.vim.ManagedObjectReference;
            name?: string;
         }
         interface InvalidDatastorePath extends integrityService.vim.InvalidDatastore {
            datastorePath: string;
         }
         interface InvalidDatastoreState extends integrityService.vim.InvalidState {
            datastoreName?: string;
         }
         interface InvalidDeviceBacking extends integrityService.vim.InvalidDeviceSpec {
         }
         interface InvalidDeviceOperation extends integrityService.vim.InvalidDeviceSpec {
            badOp?: integrityService.vim.VirtualDeviceConfigSpecOperation;
            badFileOp?: integrityService.vim.VirtualDeviceConfigSpecFileOperation;
         }
         interface InvalidDeviceSpec extends integrityService.vim.InvalidVmConfig {
            deviceIndex: number;
         }
         interface InvalidDiskFormat extends integrityService.vim.InvalidFormat {
         }
         interface InvalidDrsBehaviorForFtVm extends integrityService.vim.InvalidArgument {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface InvalidEditionLicense extends integrityService.vim.NotEnoughLicenses {
            feature: string;
         }
         interface InvalidEvent extends integrityService.vim.VimFault {
         }
         interface InvalidFolder extends integrityService.vim.VimFault {
            target: integrityService.vim.ManagedObjectReference;
         }
         interface InvalidFormat extends integrityService.vim.VmConfigFault {
         }
         interface InvalidGuestLogin extends integrityService.vim.GuestOperationsFault {
         }
         interface InvalidHostConnectionState extends integrityService.vim.InvalidHostState {
         }
         interface InvalidHostName extends integrityService.vim.HostConfigFault {
         }
         interface InvalidHostState extends integrityService.vim.InvalidState {
            host?: integrityService.vim.ManagedObjectReference;
         }
         interface InvalidIndexArgument extends integrityService.vim.InvalidArgument {
            key: string;
         }
         interface InvalidIpfixConfig extends integrityService.vim.DvsFault {
            property?: string;
         }
         interface InvalidIpmiLoginInfo extends integrityService.vim.VimFault {
         }
         interface InvalidIpmiMacAddress extends integrityService.vim.VimFault {
            userProvidedMacAddress: string;
            observedMacAddress: string;
         }
         interface InvalidLicense extends integrityService.vim.VimFault {
            licenseContent: string;
         }
         interface InvalidLocale extends integrityService.vim.VimFault {
         }
         interface InvalidLogin extends integrityService.vim.VimFault {
         }
         interface InvalidName extends integrityService.vim.VimFault {
            name: string;
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface InvalidNasCredentials extends integrityService.vim.NasConfigFault {
            userName: string;
         }
         interface InvalidNetworkInType extends integrityService.vim.VAppPropertyFault {
         }
         interface InvalidNetworkResource extends integrityService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
         }
         interface InvalidOperationOnSecondaryVm extends integrityService.vim.VmFaultToleranceIssue {
            instanceUuid?: string;
         }
         interface InvalidPowerState extends integrityService.vim.InvalidState {
            requestedState?: integrityService.vim.VirtualMachinePowerState;
            existingState: integrityService.vim.VirtualMachinePowerState;
         }
         interface InvalidPrivilege extends integrityService.vim.VimFault {
            privilege: string;
         }
         enum InvalidProfileReferenceHostReason {
            "incompatibleVersion",
            "missingReferenceHost",
         }
         interface InvalidProfileReferenceHost extends integrityService.vim.RuntimeFault {
            reason?: string;
            host?: integrityService.vim.ManagedObjectReference;
            profile?: integrityService.vim.ManagedObjectReference;
         }
         interface InvalidPropertyType extends integrityService.vim.VAppPropertyFault {
         }
         interface InvalidPropertyValue extends integrityService.vim.VAppPropertyFault {
         }
         interface InvalidResourcePoolStructureFault extends integrityService.vim.InsufficientResourcesFault {
         }
         interface InvalidSnapshotFormat extends integrityService.vim.InvalidFormat {
         }
         interface InvalidState extends integrityService.vim.VimFault {
         }
         interface InvalidVmConfig extends integrityService.vim.VmConfigFault {
            property?: string;
         }
         interface InventoryHasStandardAloneHosts extends integrityService.vim.NotEnoughLicenses {
            hosts: Array<string>;
         }
         interface IpHostnameGeneratorError extends integrityService.vim.CustomizationFault {
         }
         interface IscsiFault extends integrityService.vim.VimFault {
         }
         interface IscsiFaultInvalidVnic extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultPnicInUse extends integrityService.vim.IscsiFault {
            pnicDevice: string;
         }
         interface IscsiFaultVnicAlreadyBound extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasActivePaths extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasMultipleUplinks extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasNoUplinks extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicHasWrongUplink extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicInUse extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicIsLastPath extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicNotBound extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface IscsiFaultVnicNotFound extends integrityService.vim.IscsiFault {
            vnicDevice: string;
         }
         interface LargeRDMConversionNotSupported extends integrityService.vim.MigrationFault {
            device: string;
         }
         interface LargeRDMNotSupportedOnDatastore extends integrityService.vim.VmConfigFault {
            device: string;
            datastore: integrityService.vim.ManagedObjectReference;
            datastoreName: string;
         }
         interface LegacyNetworkInterfaceInUse extends integrityService.vim.CannotAccessNetwork {
         }
         enum LicenseAssignmentFailedReason {
            "keyEntityMismatch",
            "downgradeDisallowed",
            "inventoryNotManageableByVirtualCenter",
            "hostsUnmanageableByVirtualCenterWithoutLicenseServer",
         }
         interface LicenseAssignmentFailed extends integrityService.vim.RuntimeFault {
            reason?: string;
         }
         interface LicenseDowngradeDisallowed extends integrityService.vim.NotEnoughLicenses {
            edition: string;
            entityId: string;
            features: Array<integrityService.vim.KeyAnyValue>;
         }
         interface LicenseEntityNotFound extends integrityService.vim.VimFault {
            entityId: string;
         }
         interface LicenseExpired extends integrityService.vim.NotEnoughLicenses {
            licenseKey: string;
         }
         interface LicenseKeyEntityMismatch extends integrityService.vim.NotEnoughLicenses {
         }
         interface LicenseRestricted extends integrityService.vim.NotEnoughLicenses {
         }
         interface LicenseServerUnavailable extends integrityService.vim.VimFault {
            licenseServer: string;
         }
         interface LicenseSourceUnavailable extends integrityService.vim.NotEnoughLicenses {
            licenseSource: integrityService.vim.LicenseSource;
         }
         interface LimitExceeded extends integrityService.vim.VimFault {
            property?: string;
            limit?: number;
         }
         interface LinuxVolumeNotClean extends integrityService.vim.CustomizationFault {
         }
         interface LogBundlingFailed extends integrityService.vim.VimFault {
         }
         interface MaintenanceModeFileMove extends integrityService.vim.MigrationFault {
         }
         interface MemoryHotPlugNotSupported extends integrityService.vim.VmConfigFault {
         }
         interface MemorySizeNotRecommended extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            memorySizeMB: number;
            minMemorySizeMB: number;
            maxMemorySizeMB: number;
         }
         interface MemorySizeNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            memorySizeMB: number;
            minMemorySizeMB: number;
            maxMemorySizeMB: number;
         }
         interface MemorySizeNotSupportedByDatastore extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            datastore: integrityService.vim.ManagedObjectReference;
            memorySizeMB: number;
            maxMemorySizeMB: number;
         }
         interface MemorySnapshotOnIndependentDisk extends integrityService.vim.SnapshotFault {
         }
         interface MethodAlreadyDisabledFault extends integrityService.vim.RuntimeFault {
            sourceId: string;
         }
         interface MethodDisabled extends integrityService.vim.RuntimeFault {
            source?: string;
         }
         interface MigrationDisabled extends integrityService.vim.MigrationFault {
         }
         interface MigrationFault extends integrityService.vim.VimFault {
         }
         interface MigrationFeatureNotSupported extends integrityService.vim.MigrationFault {
            atSourceHost: boolean;
            failedHostName: string;
            failedHost: integrityService.vim.ManagedObjectReference;
         }
         interface MigrationNotReady extends integrityService.vim.MigrationFault {
            reason: string;
         }
         interface MismatchedBundle extends integrityService.vim.VimFault {
            bundleUuid: string;
            hostUuid: string;
            bundleBuildNumber: number;
            hostBuildNumber: number;
         }
         interface MismatchedNetworkPolicies extends integrityService.vim.MigrationFault {
            device: string;
            backing: string;
            connected: boolean;
         }
         interface MismatchedVMotionNetworkNames extends integrityService.vim.MigrationFault {
            sourceNetwork: string;
            destNetwork: string;
         }
         interface MissingBmcSupport extends integrityService.vim.VimFault {
         }
         interface MissingController extends integrityService.vim.InvalidDeviceSpec {
         }
         interface MissingIpPool extends integrityService.vim.VAppPropertyFault {
         }
         interface MissingLinuxCustResources extends integrityService.vim.CustomizationFault {
         }
         interface MissingNetworkIpConfig extends integrityService.vim.VAppPropertyFault {
         }
         interface MissingPowerOffConfiguration extends integrityService.vim.VAppConfigFault {
         }
         interface MissingPowerOnConfiguration extends integrityService.vim.VAppConfigFault {
         }
         interface MissingWindowsCustResources extends integrityService.vim.CustomizationFault {
         }
         interface MksConnectionLimitReached extends integrityService.vim.InvalidState {
            connectionLimit: number;
         }
         interface MountError extends integrityService.vim.CustomizationFault {
            vm: integrityService.vim.ManagedObjectReference;
            diskIndex: number;
         }
         interface MultipleCertificatesVerifyFaultThumbprintData extends integrityService.vim.DynamicData {
            port: number;
            thumbprint: string;
         }
         interface ArrayOfMultipleCertificatesVerifyFaultThumbprintData {
            MultipleCertificatesVerifyFaultThumbprintData?: Array<integrityService.vim.MultipleCertificatesVerifyFaultThumbprintData>;
         }
         interface MultipleCertificatesVerifyFault extends integrityService.vim.HostConnectFault {
            thumbprintData: Array<integrityService.vim.MultipleCertificatesVerifyFaultThumbprintData>;
         }
         interface MultipleSnapshotsNotSupported extends integrityService.vim.SnapshotFault {
         }
         interface NamespaceFull extends integrityService.vim.VimFault {
            name: string;
            currentMaxSize: number;
            requiredSize?: number;
         }
         interface NamespaceLimitReached extends integrityService.vim.VimFault {
            limit?: number;
         }
         interface NamespaceWriteProtected extends integrityService.vim.VimFault {
            name: string;
         }
         interface NasConfigFault extends integrityService.vim.HostConfigFault {
            name: string;
         }
         interface NasConnectionLimitReached extends integrityService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
         }
         interface NasSessionCredentialConflict extends integrityService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
            userName: string;
         }
         interface NasVolumeNotMounted extends integrityService.vim.NasConfigFault {
            remoteHost: string;
            remotePath: string;
         }
         interface NetworkCopyFault extends integrityService.vim.FileFault {
         }
         interface NetworkDisruptedAndConfigRolledBack extends integrityService.vim.VimFault {
            host: string;
         }
         interface NetworkInaccessible extends integrityService.vim.NasConfigFault {
         }
         interface NetworksMayNotBeTheSame extends integrityService.vim.MigrationFault {
            name?: string;
         }
         interface NicSettingMismatch extends integrityService.vim.CustomizationFault {
            numberOfNicsInSpec: number;
            numberOfNicsInVM: number;
         }
         interface NoActiveHostInCluster extends integrityService.vim.InvalidState {
            computeResource: integrityService.vim.ManagedObjectReference;
         }
         interface NoAvailableIp extends integrityService.vim.VAppPropertyFault {
            network: integrityService.vim.ManagedObjectReference;
         }
         interface NoClientCertificate extends integrityService.vim.VimFault {
         }
         interface NoCompatibleDatastore extends integrityService.vim.VimFault {
         }
         interface NoCompatibleHardAffinityHost extends integrityService.vim.VmConfigFault {
            vmName: string;
         }
         interface NoCompatibleHost extends integrityService.vim.VimFault {
            host?: Array<integrityService.vim.ManagedObjectReference>;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface NoCompatibleHostWithAccessToDevice extends integrityService.vim.NoCompatibleHost {
         }
         interface NoCompatibleSoftAffinityHost extends integrityService.vim.VmConfigFault {
            vmName: string;
         }
         interface NoConnectedDatastore extends integrityService.vim.VimFault {
         }
         interface NoDiskFound extends integrityService.vim.VimFault {
         }
         interface NoDiskSpace extends integrityService.vim.FileFault {
            datastore: string;
         }
         interface NoDisksToCustomize extends integrityService.vim.CustomizationFault {
         }
         interface NoGateway extends integrityService.vim.HostConfigFault {
         }
         interface NoGuestHeartbeat extends integrityService.vim.MigrationFault {
         }
         interface NoHost extends integrityService.vim.HostConnectFault {
            name?: string;
         }
         interface NoHostSuitableForFtSecondary extends integrityService.vim.VmFaultToleranceIssue {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
         }
         interface NoLicenseServerConfigured extends integrityService.vim.NotEnoughLicenses {
         }
         interface NoPeerHostFound extends integrityService.vim.HostPowerOpFailed {
         }
         interface NoPermission extends integrityService.vim.SecurityError {
            object: integrityService.vim.ManagedObjectReference;
            privilegeId: string;
         }
         interface NoPermissionOnAD extends integrityService.vim.ActiveDirectoryFault {
         }
         interface NoPermissionOnHost extends integrityService.vim.HostConnectFault {
         }
         interface NoPermissionOnNasVolume extends integrityService.vim.NasConfigFault {
            userName?: string;
         }
         interface NoSubjectName extends integrityService.vim.VimFault {
         }
         interface NoVcManagedIpConfigured extends integrityService.vim.VAppPropertyFault {
         }
         interface NoVirtualNic extends integrityService.vim.HostConfigFault {
         }
         interface NoVmInVApp extends integrityService.vim.VAppConfigFault {
         }
         interface NonADUserRequired extends integrityService.vim.ActiveDirectoryFault {
         }
         interface NonHomeRDMVMotionNotSupported extends integrityService.vim.MigrationFeatureNotSupported {
            device: string;
         }
         interface NonPersistentDisksNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface NonVmwareOuiMacNotSupportedHost extends integrityService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotADirectory extends integrityService.vim.FileFault {
         }
         interface NotAFile extends integrityService.vim.FileFault {
         }
         interface NotAuthenticated extends integrityService.vim.NoPermission {
         }
         interface NotEnoughCpus extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            numCpuDest: number;
            numCpuVm: number;
         }
         interface NotEnoughLogicalCpus extends integrityService.vim.NotEnoughCpus {
            host?: integrityService.vim.ManagedObjectReference;
         }
         interface NotFound extends integrityService.vim.VimFault {
         }
         enum NotSupportedDeviceForFTDeviceType {
            "virtualVmxnet3",
            "paraVirtualSCSIController",
         }
         interface NotSupportedDeviceForFT extends integrityService.vim.VmFaultToleranceIssue {
            host: integrityService.vim.ManagedObjectReference;
            hostName?: string;
            vm: integrityService.vim.ManagedObjectReference;
            vmName?: string;
            deviceType: string;
            deviceLabel?: string;
         }
         interface NotSupportedHost extends integrityService.vim.HostConnectFault {
            productName?: string;
            productVersion?: string;
         }
         interface NotSupportedHostForVFlash extends integrityService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotSupportedHostForVsan extends integrityService.vim.NotSupportedHost {
            hostName: string;
         }
         interface NotSupportedHostInCluster extends integrityService.vim.NotSupportedHost {
         }
         interface NotSupportedHostInDvs extends integrityService.vim.NotSupportedHost {
            switchProductSpec: integrityService.vim.DistributedVirtualSwitchProductSpec;
         }
         interface NotSupportedHostInHACluster extends integrityService.vim.NotSupportedHost {
            hostName: string;
            build: string;
         }
         interface NotUserConfigurableProperty extends integrityService.vim.VAppPropertyFault {
         }
         interface NumVirtualCoresPerSocketNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            maxSupportedCoresPerSocketDest: number;
            numCoresPerSocketVm: number;
         }
         interface NumVirtualCpusExceedsLimit extends integrityService.vim.InsufficientResourcesFault {
            maxSupportedVcpus: number;
         }
         enum NumVirtualCpusIncompatibleReason {
            "recordReplay",
            "faultTolerance",
         }
         interface NumVirtualCpusIncompatible extends integrityService.vim.VmConfigFault {
            reason: string;
            numCpu: number;
         }
         interface NumVirtualCpusNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            maxSupportedVcpusDest: number;
            numCpuVm: number;
         }
         interface OperationDisabledByGuest extends integrityService.vim.GuestOperationsFault {
         }
         interface OperationDisallowedOnHost extends integrityService.vim.RuntimeFault {
         }
         interface OperationNotSupportedByGuest extends integrityService.vim.GuestOperationsFault {
         }
         interface OutOfBounds extends integrityService.vim.VimFault {
            argumentName: string;
         }
         interface OvfAttribute extends integrityService.vim.OvfInvalidPackage {
            elementName: string;
            attributeName: string;
         }
         interface OvfConnectedDevice extends integrityService.vim.OvfHardwareExport {
         }
         interface OvfConnectedDeviceFloppy extends integrityService.vim.OvfConnectedDevice {
            filename: string;
         }
         interface OvfConnectedDeviceIso extends integrityService.vim.OvfConnectedDevice {
            filename: string;
         }
         interface OvfConstraint extends integrityService.vim.OvfInvalidPackage {
            name: string;
         }
         interface OvfConsumerCallbackFault extends integrityService.vim.OvfFault {
            extensionKey: string;
            extensionName: string;
         }
         interface OvfConsumerCommunicationError extends integrityService.vim.OvfConsumerCallbackFault {
            description: string;
         }
         interface OvfConsumerFault extends integrityService.vim.OvfConsumerCallbackFault {
            errorKey: string;
            message: string;
            params?: Array<integrityService.vim.KeyValue>;
         }
         interface OvfConsumerInvalidSection extends integrityService.vim.OvfConsumerCallbackFault {
            lineNumber: number;
            description: string;
         }
         interface OvfConsumerPowerOnFault extends integrityService.vim.InvalidState {
            extensionKey: string;
            extensionName: string;
            description: string;
         }
         interface OvfConsumerUndeclaredSection extends integrityService.vim.OvfConsumerCallbackFault {
            qualifiedSectionType: string;
         }
         interface OvfConsumerUndefinedPrefix extends integrityService.vim.OvfConsumerCallbackFault {
            prefix: string;
         }
         interface OvfConsumerValidationFault extends integrityService.vim.VmConfigFault {
            extensionKey: string;
            extensionName: string;
            message: string;
         }
         interface OvfCpuCompatibility extends integrityService.vim.OvfImport {
            registerName: string;
            level: number;
            registerValue: string;
            desiredRegisterValue: string;
         }
         interface OvfCpuCompatibilityCheckNotSupported extends integrityService.vim.OvfImport {
         }
         interface OvfDiskMappingNotFound extends integrityService.vim.OvfSystemFault {
            diskName: string;
            vmName: string;
         }
         interface OvfDiskOrderConstraint extends integrityService.vim.OvfConstraint {
         }
         interface OvfDuplicateElement extends integrityService.vim.OvfElement {
         }
         interface OvfDuplicatedElementBoundary extends integrityService.vim.OvfElement {
            boundary: string;
         }
         interface OvfDuplicatedPropertyIdExport extends integrityService.vim.OvfExport {
            fqid: string;
         }
         interface OvfDuplicatedPropertyIdImport extends integrityService.vim.OvfExport {
         }
         interface OvfElement extends integrityService.vim.OvfInvalidPackage {
            name: string;
         }
         interface OvfElementInvalidValue extends integrityService.vim.OvfElement {
            value: string;
         }
         interface OvfExport extends integrityService.vim.OvfFault {
         }
         interface OvfExportFailed extends integrityService.vim.OvfExport {
         }
         interface OvfFault extends integrityService.vim.VimFault {
         }
         interface OvfHardwareCheck extends integrityService.vim.OvfImport {
         }
         interface OvfHardwareExport extends integrityService.vim.OvfExport {
            device?: integrityService.vim.VirtualDevice;
            vmPath: string;
         }
         interface OvfHostResourceConstraint extends integrityService.vim.OvfConstraint {
            value: string;
         }
         interface OvfHostValueNotParsed extends integrityService.vim.OvfSystemFault {
            property: string;
            value: string;
         }
         interface OvfImport extends integrityService.vim.OvfFault {
         }
         interface OvfImportFailed extends integrityService.vim.OvfImport {
         }
         interface OvfInternalError extends integrityService.vim.OvfSystemFault {
         }
         interface OvfInvalidPackage extends integrityService.vim.OvfFault {
            lineNumber: number;
         }
         interface OvfInvalidValue extends integrityService.vim.OvfAttribute {
            value: string;
         }
         interface OvfInvalidValueConfiguration extends integrityService.vim.OvfInvalidValue {
         }
         interface OvfInvalidValueEmpty extends integrityService.vim.OvfInvalidValue {
         }
         interface OvfInvalidValueFormatMalformed extends integrityService.vim.OvfInvalidValue {
         }
         interface OvfInvalidValueReference extends integrityService.vim.OvfInvalidValue {
         }
         interface OvfInvalidVmName extends integrityService.vim.OvfUnsupportedPackage {
            name: string;
         }
         interface OvfMappedOsId extends integrityService.vim.OvfImport {
            ovfId: number;
            ovfDescription: string;
            targetDescription: string;
         }
         interface OvfMissingAttribute extends integrityService.vim.OvfAttribute {
         }
         interface OvfMissingElement extends integrityService.vim.OvfElement {
         }
         interface OvfMissingElementNormalBoundary extends integrityService.vim.OvfMissingElement {
            boundary: string;
         }
         interface OvfMissingHardware extends integrityService.vim.OvfImport {
            name: string;
            resourceType: number;
         }
         interface OvfNetworkMappingNotSupported extends integrityService.vim.OvfImport {
         }
         interface OvfNoHostNic extends integrityService.vim.OvfUnsupportedPackage {
         }
         interface OvfNoSpaceOnController extends integrityService.vim.OvfUnsupportedElement {
            parent: string;
         }
         interface OvfNoSupportedHardwareFamily extends integrityService.vim.OvfUnsupportedPackage {
            version: string;
         }
         interface OvfProperty extends integrityService.vim.OvfInvalidPackage {
            type: string;
            value: string;
         }
         interface OvfPropertyExport extends integrityService.vim.OvfExport {
            type: string;
            value: string;
         }
         interface OvfPropertyNetwork extends integrityService.vim.OvfProperty {
         }
         interface OvfPropertyNetworkExport extends integrityService.vim.OvfExport {
            network: string;
         }
         interface OvfPropertyQualifier extends integrityService.vim.OvfProperty {
            qualifier: string;
         }
         interface OvfPropertyQualifierDuplicate extends integrityService.vim.OvfProperty {
            qualifier: string;
         }
         interface OvfPropertyQualifierIgnored extends integrityService.vim.OvfProperty {
            qualifier: string;
         }
         interface OvfPropertyType extends integrityService.vim.OvfProperty {
         }
         interface OvfPropertyValue extends integrityService.vim.OvfProperty {
         }
         interface OvfSystemFault extends integrityService.vim.OvfFault {
         }
         interface OvfToXmlUnsupportedElement extends integrityService.vim.OvfSystemFault {
            name?: string;
         }
         interface OvfUnableToExportDisk extends integrityService.vim.OvfHardwareExport {
            diskName: string;
         }
         interface OvfUnexpectedElement extends integrityService.vim.OvfElement {
         }
         interface OvfUnknownDevice extends integrityService.vim.OvfSystemFault {
            device?: integrityService.vim.VirtualDevice;
            vmName: string;
         }
         interface OvfUnknownDeviceBacking extends integrityService.vim.OvfHardwareExport {
            backing: integrityService.vim.VirtualDeviceBackingInfo;
         }
         interface OvfUnknownEntity extends integrityService.vim.OvfSystemFault {
            lineNumber: number;
         }
         interface OvfUnsupportedAttribute extends integrityService.vim.OvfUnsupportedPackage {
            elementName: string;
            attributeName: string;
         }
         interface OvfUnsupportedAttributeValue extends integrityService.vim.OvfUnsupportedAttribute {
            value: string;
         }
         interface OvfUnsupportedDeviceBackingInfo extends integrityService.vim.OvfSystemFault {
            elementName?: string;
            instanceId?: string;
            deviceName: string;
            backingName?: string;
         }
         interface OvfUnsupportedDeviceBackingOption extends integrityService.vim.OvfSystemFault {
            elementName?: string;
            instanceId?: string;
            deviceName: string;
            backingName?: string;
         }
         interface OvfUnsupportedDeviceExport extends integrityService.vim.OvfHardwareExport {
         }
         interface OvfUnsupportedDiskProvisioning extends integrityService.vim.OvfImport {
            diskProvisioning: string;
            supportedDiskProvisioning: string;
         }
         interface OvfUnsupportedElement extends integrityService.vim.OvfUnsupportedPackage {
            name: string;
         }
         interface OvfUnsupportedElementValue extends integrityService.vim.OvfUnsupportedElement {
            value: string;
         }
         interface OvfUnsupportedPackage extends integrityService.vim.OvfFault {
            lineNumber?: number;
         }
         interface OvfUnsupportedSection extends integrityService.vim.OvfUnsupportedElement {
            info: string;
         }
         interface OvfUnsupportedSubType extends integrityService.vim.OvfUnsupportedPackage {
            elementName: string;
            instanceId: string;
            deviceType: number;
            deviceSubType: string;
         }
         interface OvfUnsupportedType extends integrityService.vim.OvfUnsupportedPackage {
            name: string;
            instanceId: string;
            deviceType: number;
         }
         interface OvfWrongElement extends integrityService.vim.OvfElement {
         }
         interface OvfWrongNamespace extends integrityService.vim.OvfInvalidPackage {
            namespaceName: string;
         }
         interface OvfXmlFormat extends integrityService.vim.OvfInvalidPackage {
            description: string;
         }
         interface PatchAlreadyInstalled extends integrityService.vim.PatchNotApplicable {
         }
         interface PatchBinariesNotFound extends integrityService.vim.VimFault {
            patchID: string;
            binary?: Array<string>;
         }
         interface PatchInstallFailed extends integrityService.vim.PlatformConfigFault {
            rolledBack: boolean;
         }
         interface PatchIntegrityError extends integrityService.vim.PlatformConfigFault {
         }
         interface PatchMetadataCorrupted extends integrityService.vim.PatchMetadataInvalid {
         }
         interface PatchMetadataInvalid extends integrityService.vim.VimFault {
            patchID: string;
            metaData?: Array<string>;
         }
         interface PatchMetadataNotFound extends integrityService.vim.PatchMetadataInvalid {
         }
         interface PatchMissingDependencies extends integrityService.vim.PatchNotApplicable {
            prerequisitePatch?: Array<string>;
            prerequisiteLib?: Array<string>;
         }
         interface PatchNotApplicable extends integrityService.vim.VimFault {
            patchID: string;
         }
         interface PatchSuperseded extends integrityService.vim.PatchNotApplicable {
            supersede?: Array<string>;
         }
         interface PhysCompatRDMNotSupported extends integrityService.vim.RDMNotSupported {
         }
         interface PlatformConfigFault extends integrityService.vim.HostConfigFault {
            text: string;
         }
         interface PowerOnFtSecondaryFailed extends integrityService.vim.VmFaultToleranceIssue {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
            hostSelectionBy: integrityService.vim.FtIssuesOnHostHostSelectionType;
            hostErrors?: Array<integrityService.vim.LocalizedMethodFault>;
            rootCause: integrityService.vim.LocalizedMethodFault;
         }
         interface PowerOnFtSecondaryTimedout extends integrityService.vim.Timedout {
            vm: integrityService.vim.ManagedObjectReference;
            vmName: string;
            timeout: number;
         }
         interface ProfileUpdateFailedUpdateFailure extends integrityService.vim.DynamicData {
            profilePath: integrityService.vim.ProfilePropertyPath;
            errMsg: integrityService.vim.LocalizableMessage;
         }
         interface ArrayOfProfileUpdateFailedUpdateFailure {
            ProfileUpdateFailedUpdateFailure?: Array<integrityService.vim.ProfileUpdateFailedUpdateFailure>;
         }
         interface ProfileUpdateFailed extends integrityService.vim.VimFault {
            failure: Array<integrityService.vim.ProfileUpdateFailedUpdateFailure>;
         }
         interface QuestionPending extends integrityService.vim.InvalidState {
            text: string;
         }
         interface QuiesceDatastoreIOForHAFailed extends integrityService.vim.ResourceInUse {
            host: integrityService.vim.ManagedObjectReference;
            hostName: string;
            ds: integrityService.vim.ManagedObjectReference;
            dsName: string;
         }
         interface RDMConversionNotSupported extends integrityService.vim.MigrationFault {
            device: string;
         }
         interface RDMNotPreserved extends integrityService.vim.MigrationFault {
            device: string;
         }
         interface RDMNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface RDMNotSupportedOnDatastore extends integrityService.vim.VmConfigFault {
            device: string;
            datastore: integrityService.vim.ManagedObjectReference;
            datastoreName: string;
         }
         interface RDMPointsToInaccessibleDisk extends integrityService.vim.CannotAccessVmDisk {
         }
         interface RawDiskNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface ReadHostResourcePoolTreeFailed extends integrityService.vim.HostConnectFault {
         }
         interface ReadOnlyDisksWithLegacyDestination extends integrityService.vim.MigrationFault {
            roDiskCount: number;
            timeoutDanger: boolean;
         }
         interface RebootRequired extends integrityService.vim.VimFault {
            patch?: string;
         }
         interface RecordReplayDisabled extends integrityService.vim.VimFault {
         }
         interface RemoteDeviceNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface RemoveFailed extends integrityService.vim.VimFault {
         }
         interface ReplicationConfigFault extends integrityService.vim.ReplicationFault {
         }
         enum ReplicationDiskConfigFaultReasonForFault {
            "diskNotFound",
            "diskTypeNotSupported",
            "invalidDiskKey",
            "invalidDiskReplicationId",
            "duplicateDiskReplicationId",
            "invalidPersistentFilePath",
            "reconfigureDiskReplicationIdNotAllowed",
         }
         interface ReplicationDiskConfigFault extends integrityService.vim.ReplicationConfigFault {
            reason?: string;
            vmRef?: integrityService.vim.ManagedObjectReference;
            key?: number;
         }
         interface ReplicationFault extends integrityService.vim.VimFault {
         }
         interface ReplicationIncompatibleWithFT extends integrityService.vim.ReplicationFault {
         }
         interface ReplicationInvalidOptions extends integrityService.vim.ReplicationFault {
            options: string;
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface ReplicationNotSupportedOnHost extends integrityService.vim.ReplicationFault {
         }
         enum ReplicationVmConfigFaultReasonForFault {
            "incompatibleHwVersion",
            "invalidVmReplicationId",
            "invalidGenerationNumber",
            "outOfBoundsRpoValue",
            "invalidDestinationIpAddress",
            "invalidDestinationPort",
            "invalidExtraVmOptions",
            "staleGenerationNumber",
            "reconfigureVmReplicationIdNotAllowed",
            "cannotRetrieveVmReplicationConfiguration",
            "replicationAlreadyEnabled",
            "invalidPriorConfiguration",
            "replicationNotEnabled",
            "replicationConfigurationFailed",
         }
         interface ReplicationVmConfigFault extends integrityService.vim.ReplicationConfigFault {
            reason?: string;
            vmRef?: integrityService.vim.ManagedObjectReference;
         }
         enum ReplicationVmFaultReasonForFault {
            "notConfigured",
            "poweredOff",
            "suspended",
            "poweredOn",
            "offlineReplicating",
            "invalidState",
            "invalidInstanceId",
         }
         interface ReplicationVmFault extends integrityService.vim.ReplicationFault {
            reason?: string;
            state?: string;
            instanceId?: string;
            vm?: integrityService.vim.ManagedObjectReference;
         }
         interface ResourceInUse extends integrityService.vim.VimFault {
            type?: string;
            name?: string;
         }
         interface ResourceNotAvailable extends integrityService.vim.VimFault {
            containerType?: string;
            containerName?: string;
            type?: string;
         }
         interface RestrictedVersion extends integrityService.vim.SecurityError {
         }
         interface RollbackFailure extends integrityService.vim.DvsFault {
            entityName: string;
            entityType: string;
         }
         interface RuleViolation extends integrityService.vim.VmConfigFault {
            host?: integrityService.vim.ManagedObjectReference;
            rule?: integrityService.vim.ClusterRuleInfo;
         }
         interface SSLDisabledFault extends integrityService.vim.HostConnectFault {
         }
         interface SSLVerifyFault extends integrityService.vim.HostConnectFault {
            selfSigned: boolean;
            thumbprint: string;
         }
         interface SSPIChallenge extends integrityService.vim.VimFault {
            base64Token: string;
         }
         interface SecondaryVmAlreadyDisabled extends integrityService.vim.VmFaultToleranceIssue {
            instanceUuid: string;
         }
         interface SecondaryVmAlreadyEnabled extends integrityService.vim.VmFaultToleranceIssue {
            instanceUuid: string;
         }
         interface SecondaryVmAlreadyRegistered extends integrityService.vim.VmFaultToleranceIssue {
            instanceUuid?: string;
         }
         interface SecondaryVmNotRegistered extends integrityService.vim.VmFaultToleranceIssue {
            instanceUuid?: string;
         }
         interface SharedBusControllerNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface ShrinkDiskFault extends integrityService.vim.VimFault {
            diskId?: number;
         }
         interface SnapshotCloneNotSupported extends integrityService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotCopyNotSupported extends integrityService.vim.MigrationFault {
         }
         interface SnapshotDisabled extends integrityService.vim.SnapshotFault {
         }
         interface SnapshotFault extends integrityService.vim.VimFault {
         }
         interface SnapshotIncompatibleDeviceInVm extends integrityService.vim.SnapshotFault {
            fault: integrityService.vim.LocalizedMethodFault;
         }
         interface SnapshotLocked extends integrityService.vim.SnapshotFault {
         }
         interface SnapshotMoveFromNonHomeNotSupported extends integrityService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotMoveNotSupported extends integrityService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotMoveToNonHomeNotSupported extends integrityService.vim.SnapshotCopyNotSupported {
         }
         interface SnapshotNoChange extends integrityService.vim.SnapshotFault {
         }
         interface SnapshotRevertIssue extends integrityService.vim.MigrationFault {
            snapshotName?: string;
            event?: Array<integrityService.vim.Event>;
            errors: boolean;
         }
         interface SoftRuleVioCorrectionDisallowed extends integrityService.vim.VmConfigFault {
            vmName: string;
         }
         interface SoftRuleVioCorrectionImpact extends integrityService.vim.VmConfigFault {
            vmName: string;
         }
         interface SsdDiskNotAvailable extends integrityService.vim.VimFault {
            devicePath: string;
         }
         interface StorageDrsCannotMoveDiskInMultiWriterMode extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveFTVm extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveIndependentDisk extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveManuallyPlacedSwapFile extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveManuallyPlacedVm extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveSharedDisk extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveTemplate extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveVmInUserFolder extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveVmWithMountedCDROM extends integrityService.vim.VimFault {
         }
         interface StorageDrsCannotMoveVmWithNoFilesInLayout extends integrityService.vim.VimFault {
         }
         interface StorageDrsDatacentersCannotShareDatastore extends integrityService.vim.VimFault {
         }
         interface StorageDrsDisabledOnVm extends integrityService.vim.VimFault {
         }
         interface StorageDrsIolbDisabledInternally extends integrityService.vim.VimFault {
         }
         interface StorageDrsUnableToMoveFiles extends integrityService.vim.VimFault {
         }
         interface StorageVMotionNotSupported extends integrityService.vim.MigrationFeatureNotSupported {
         }
         interface StorageVmotionIncompatible extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            datastore?: integrityService.vim.ManagedObjectReference;
         }
         interface SuspendedRelocateNotSupported extends integrityService.vim.MigrationFault {
         }
         interface SwapDatastoreNotWritableOnHost extends integrityService.vim.DatastoreNotWritableOnHost {
         }
         interface SwapDatastoreUnset extends integrityService.vim.VimFault {
         }
         interface SwapPlacementOverrideNotSupported extends integrityService.vim.InvalidVmConfig {
         }
         interface SwitchIpUnset extends integrityService.vim.DvsFault {
         }
         interface SwitchNotInUpgradeMode extends integrityService.vim.DvsFault {
         }
         interface TaskInProgress extends integrityService.vim.VimFault {
            task: integrityService.vim.ManagedObjectReference;
         }
         enum ThirdPartyLicenseAssignmentFailedReason {
            "licenseAssignmentFailed",
            "moduleNotInstalled",
         }
         interface ThirdPartyLicenseAssignmentFailed extends integrityService.vim.RuntimeFault {
            host: integrityService.vim.ManagedObjectReference;
            module: string;
            reason?: string;
         }
         interface Timedout extends integrityService.vim.VimFault {
         }
         interface TooManyConcurrentNativeClones extends integrityService.vim.FileFault {
         }
         interface TooManyConsecutiveOverrides extends integrityService.vim.VimFault {
         }
         interface TooManyDevices extends integrityService.vim.InvalidVmConfig {
         }
         interface TooManyDisksOnLegacyHost extends integrityService.vim.MigrationFault {
            diskCount: number;
            timeoutDanger: boolean;
         }
         interface TooManyGuestLogons extends integrityService.vim.GuestOperationsFault {
         }
         interface TooManyHosts extends integrityService.vim.HostConnectFault {
         }
         interface TooManyNativeCloneLevels extends integrityService.vim.FileFault {
         }
         interface TooManyNativeClonesOnFile extends integrityService.vim.FileFault {
         }
         interface TooManySnapshotLevels extends integrityService.vim.SnapshotFault {
         }
         interface ToolsAlreadyUpgraded extends integrityService.vim.VmToolsUpgradeFault {
         }
         interface ToolsAutoUpgradeNotSupported extends integrityService.vim.VmToolsUpgradeFault {
         }
         interface ToolsImageCopyFailed extends integrityService.vim.VmToolsUpgradeFault {
         }
         interface ToolsImageNotAvailable extends integrityService.vim.VmToolsUpgradeFault {
         }
         interface ToolsImageSignatureCheckFailed extends integrityService.vim.VmToolsUpgradeFault {
         }
         interface ToolsInstallationInProgress extends integrityService.vim.MigrationFault {
         }
         interface ToolsUnavailable extends integrityService.vim.VimFault {
         }
         interface ToolsUpgradeCancelled extends integrityService.vim.VmToolsUpgradeFault {
         }
         interface UnSupportedDatastoreForVFlash extends integrityService.vim.UnsupportedDatastore {
            datastoreName: string;
            type: string;
         }
         interface UncommittedUndoableDisk extends integrityService.vim.MigrationFault {
         }
         interface UnconfiguredPropertyValue extends integrityService.vim.InvalidPropertyValue {
         }
         interface UncustomizableGuest extends integrityService.vim.CustomizationFault {
            uncustomizableGuestOS: string;
         }
         interface UnexpectedCustomizationFault extends integrityService.vim.CustomizationFault {
         }
         interface UnrecognizedHost extends integrityService.vim.VimFault {
            hostName: string;
         }
         interface UnsharedSwapVMotionNotSupported extends integrityService.vim.MigrationFeatureNotSupported {
         }
         interface UnsupportedDatastore extends integrityService.vim.VmConfigFault {
            datastore?: integrityService.vim.ManagedObjectReference;
         }
         interface UnsupportedGuest extends integrityService.vim.InvalidVmConfig {
            unsupportedGuestOS: string;
         }
         interface UnsupportedVimApiVersion extends integrityService.vim.VimFault {
            version?: string;
         }
         interface UnsupportedVmxLocation extends integrityService.vim.VmConfigFault {
         }
         interface UnusedVirtualDiskBlocksNotScrubbed extends integrityService.vim.DeviceBackingNotSupported {
         }
         interface UserNotFound extends integrityService.vim.VimFault {
            principal: string;
            unresolved: boolean;
         }
         interface VAppConfigFault extends integrityService.vim.VimFault {
         }
         interface VAppNotRunning extends integrityService.vim.VmConfigFault {
         }
         interface VAppOperationInProgress extends integrityService.vim.RuntimeFault {
         }
         interface VAppPropertyFault extends integrityService.vim.VmConfigFault {
            id: string;
            category: string;
            label: string;
            type: string;
            value: string;
         }
         interface VAppTaskInProgress extends integrityService.vim.TaskInProgress {
         }
         enum VFlashModuleNotSupportedReason {
            "CacheModeNotSupported",
            "CacheConsistencyTypeNotSupported",
            "CacheBlockSizeNotSupported",
            "CacheReservationNotSupported",
            "DiskSizeNotSupported",
         }
         interface VFlashModuleNotSupported extends integrityService.vim.VmConfigFault {
            vmName: string;
            moduleName: string;
            reason: string;
            hostName: string;
         }
         interface VFlashModuleVersionIncompatible extends integrityService.vim.VimFault {
            moduleName: string;
            vmRequestModuleVersion: string;
            hostMinSupportedVerson: string;
            hostModuleVersion: string;
         }
         interface VMINotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface VMOnConflictDVPort extends integrityService.vim.CannotAccessNetwork {
         }
         interface VMOnVirtualIntranet extends integrityService.vim.CannotAccessNetwork {
         }
         interface VMotionAcrossNetworkNotSupported extends integrityService.vim.MigrationFeatureNotSupported {
         }
         interface VMotionInterfaceIssue extends integrityService.vim.MigrationFault {
            atSourceHost: boolean;
            failedHost: string;
            failedHostEntity?: integrityService.vim.ManagedObjectReference;
         }
         interface VMotionLinkCapacityLow extends integrityService.vim.VMotionInterfaceIssue {
            network: string;
         }
         interface VMotionLinkDown extends integrityService.vim.VMotionInterfaceIssue {
            network: string;
         }
         interface VMotionNotConfigured extends integrityService.vim.VMotionInterfaceIssue {
         }
         interface VMotionNotLicensed extends integrityService.vim.VMotionInterfaceIssue {
         }
         interface VMotionNotSupported extends integrityService.vim.VMotionInterfaceIssue {
         }
         interface VMotionProtocolIncompatible extends integrityService.vim.MigrationFault {
         }
         interface VimFault extends integrityService.vim.MethodFault {
         }
         interface VirtualDiskBlocksNotFullyProvisioned extends integrityService.vim.DeviceBackingNotSupported {
         }
         interface VirtualDiskModeNotSupported extends integrityService.vim.DeviceNotSupported {
            mode: string;
         }
         interface VirtualEthernetCardNotSupported extends integrityService.vim.DeviceNotSupported {
         }
         interface VirtualHardwareCompatibilityIssue extends integrityService.vim.VmConfigFault {
         }
         interface VirtualHardwareVersionNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
            hostName?: string;
            host?: integrityService.vim.ManagedObjectReference;
         }
         interface VmAlreadyExistsInDatacenter extends integrityService.vim.InvalidFolder {
            host: integrityService.vim.ManagedObjectReference;
            hostname: string;
            vm: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface VmConfigFault extends integrityService.vim.VimFault {
         }
         interface VmConfigIncompatibleForFaultTolerance extends integrityService.vim.VmConfigFault {
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface VmConfigIncompatibleForRecordReplay extends integrityService.vim.VmConfigFault {
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         enum VmFaultToleranceConfigIssueReasonForIssue {
            "haNotEnabled",
            "moreThanOneSecondary",
            "recordReplayNotSupported",
            "replayNotSupported",
            "templateVm",
            "multipleVCPU",
            "hostInactive",
            "ftUnsupportedHardware",
            "ftUnsupportedProduct",
            "missingVMotionNic",
            "missingFTLoggingNic",
            "thinDisk",
            "verifySSLCertificateFlagNotSet",
            "hasSnapshots",
            "noConfig",
            "ftSecondaryVm",
            "hasLocalDisk",
            "esxAgentVm",
            "video3dEnabled",
            "hasUnsupportedDisk",
            "hasNestedHVConfiguration",
            "hasVFlashConfiguration",
         }
         interface VmFaultToleranceConfigIssue extends integrityService.vim.VmFaultToleranceIssue {
            reason?: string;
            entityName?: string;
            entity?: integrityService.vim.ManagedObjectReference;
         }
         interface VmFaultToleranceConfigIssueWrapper extends integrityService.vim.VmFaultToleranceIssue {
            entityName?: string;
            entity?: integrityService.vim.ManagedObjectReference;
            error?: integrityService.vim.LocalizedMethodFault;
         }
         enum VmFaultToleranceInvalidFileBackingDeviceType {
            "virtualFloppy",
            "virtualCdrom",
            "virtualSerialPort",
            "virtualParallelPort",
            "virtualDisk",
         }
         interface VmFaultToleranceInvalidFileBacking extends integrityService.vim.VmFaultToleranceIssue {
            backingType?: string;
            backingFilename?: string;
         }
         interface VmFaultToleranceIssue extends integrityService.vim.VimFault {
         }
         interface VmFaultToleranceOpIssuesList extends integrityService.vim.VmFaultToleranceIssue {
            errors?: Array<integrityService.vim.LocalizedMethodFault>;
            warnings?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface VmFaultToleranceTooManyVMsOnHost extends integrityService.vim.InsufficientResourcesFault {
            hostName?: string;
            maxNumFtVms: number;
         }
         interface VmHostAffinityRuleViolation extends integrityService.vim.VmConfigFault {
            vmName: string;
            hostName: string;
         }
         interface VmLimitLicense extends integrityService.vim.NotEnoughLicenses {
            limit: number;
         }
         interface VmMetadataManagerFault extends integrityService.vim.VimFault {
         }
         interface VmMonitorIncompatibleForFaultTolerance extends integrityService.vim.VimFault {
         }
         interface VmPowerOnDisabled extends integrityService.vim.InvalidState {
         }
         interface VmToolsUpgradeFault extends integrityService.vim.VimFault {
         }
         interface VmValidateMaxDevice extends integrityService.vim.VimFault {
            device: string;
            max: number;
            count: number;
         }
         interface VmWwnConflict extends integrityService.vim.InvalidVmConfig {
            vm?: integrityService.vim.ManagedObjectReference;
            host?: integrityService.vim.ManagedObjectReference;
            name?: string;
            wwn?: number;
         }
         interface VmfsAlreadyMounted extends integrityService.vim.VmfsMountFault {
         }
         interface VmfsAmbiguousMount extends integrityService.vim.VmfsMountFault {
         }
         interface VmfsMountFault extends integrityService.vim.HostConfigFault {
            uuid: string;
         }
         interface VmotionInterfaceNotEnabled extends integrityService.vim.HostPowerOpFailed {
         }
         interface VolumeEditorError extends integrityService.vim.CustomizationFault {
         }
         interface VramLimitLicense extends integrityService.vim.NotEnoughLicenses {
            limit: number;
         }
         interface VsanClusterUuidMismatch extends integrityService.vim.CannotMoveVsanEnabledHost {
            hostClusterUuid: string;
            destinationClusterUuid: string;
         }
         interface VsanDiskFault extends integrityService.vim.VsanFault {
            device?: string;
         }
         interface VsanFault extends integrityService.vim.VimFault {
         }
         interface VspanDestPortConflict extends integrityService.vim.DvsFault {
            vspanSessionKey1: string;
            vspanSessionKey2: string;
            portKey: string;
         }
         interface VspanPortConflict extends integrityService.vim.DvsFault {
            vspanSessionKey1: string;
            vspanSessionKey2: string;
            portKey: string;
         }
         interface VspanPortMoveFault extends integrityService.vim.DvsFault {
            srcPortgroupName: string;
            destPortgroupName: string;
            portKey: string;
         }
         interface VspanPortPromiscChangeFault extends integrityService.vim.DvsFault {
            portKey: string;
         }
         interface VspanPortgroupPromiscChangeFault extends integrityService.vim.DvsFault {
            portgroupName: string;
         }
         interface VspanPortgroupTypeChangeFault extends integrityService.vim.DvsFault {
            portgroupName: string;
         }
         interface VspanPromiscuousPortNotSupported extends integrityService.vim.DvsFault {
            vspanSessionKey: string;
            portKey: string;
         }
         interface VspanSameSessionPortConflict extends integrityService.vim.DvsFault {
            vspanSessionKey: string;
            portKey: string;
         }
         interface WakeOnLanNotSupported extends integrityService.vim.VirtualHardwareCompatibilityIssue {
         }
         interface WakeOnLanNotSupportedByVmotionNIC extends integrityService.vim.HostPowerOpFailed {
         }
         enum WillLoseHAProtectionResolution {
            "svmotion",
            "relocate",
         }
         interface WillLoseHAProtection extends integrityService.vim.MigrationFault {
            resolution: string;
         }
         interface WillModifyConfigCpuRequirements extends integrityService.vim.MigrationFault {
         }
         interface WillResetSnapshotDirectory extends integrityService.vim.MigrationFault {
         }
         interface WipeDiskFault extends integrityService.vim.VimFault {
         }
         enum HostActiveDirectoryInfoDomainMembershipStatus {
            "unknown",
            "ok",
            "noServers",
            "clientTrustBroken",
            "serverTrustBroken",
            "inconsistentTrust",
            "otherProblem",
         }
         interface HostActiveDirectoryInfo extends integrityService.vim.HostDirectoryStoreInfo {
            joinedDomain?: string;
            trustedDomain?: Array<string>;
            domainMembershipStatus?: string;
         }
         interface HostActiveDirectorySpec extends integrityService.vim.DynamicData {
            domainName?: string;
            userName?: string;
            password?: string;
            camServer?: string;
            thumbprint?: string;
         }
         interface HostActiveDirectory extends integrityService.vim.DynamicData {
            changeOperation: string;
            spec?: integrityService.vim.HostActiveDirectorySpec;
         }
         interface ArrayOfHostActiveDirectory {
            HostActiveDirectory?: Array<integrityService.vim.HostActiveDirectory>;
         }
         interface HostAuthenticationManagerInfo extends integrityService.vim.DynamicData {
            authConfig: Array<integrityService.vim.HostAuthenticationStoreInfo>;
         }
         interface HostAuthenticationStoreInfo extends integrityService.vim.DynamicData {
            enabled: boolean;
         }
         interface ArrayOfHostAuthenticationStoreInfo {
            HostAuthenticationStoreInfo?: Array<integrityService.vim.HostAuthenticationStoreInfo>;
         }
         enum AutoStartAction {
            "none",
            "systemDefault",
            "powerOn",
            "powerOff",
            "guestShutdown",
            "suspend",
         }
         interface AutoStartDefaults extends integrityService.vim.DynamicData {
            enabled?: boolean;
            startDelay?: number;
            stopDelay?: number;
            waitForHeartbeat?: boolean;
            stopAction?: string;
         }
         enum AutoStartWaitHeartbeatSetting {
            "yes",
            "no",
            "systemDefault",
         }
         interface AutoStartPowerInfo extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            startOrder: number;
            startDelay: number;
            waitForHeartbeat: integrityService.vim.AutoStartWaitHeartbeatSetting;
            startAction: string;
            stopDelay: number;
            stopAction: string;
         }
         interface ArrayOfAutoStartPowerInfo {
            AutoStartPowerInfo?: Array<integrityService.vim.AutoStartPowerInfo>;
         }
         interface HostAutoStartManagerConfig extends integrityService.vim.DynamicData {
            defaults?: integrityService.vim.AutoStartDefaults;
            powerInfo?: Array<integrityService.vim.AutoStartPowerInfo>;
         }
         interface HostBootDeviceInfo extends integrityService.vim.DynamicData {
            bootDevices?: Array<integrityService.vim.HostBootDevice>;
            currentBootDeviceKey?: string;
         }
         interface HostBootDevice extends integrityService.vim.DynamicData {
            key: string;
            description: string;
         }
         interface ArrayOfHostBootDevice {
            HostBootDevice?: Array<integrityService.vim.HostBootDevice>;
         }
         interface HostCacheConfigurationSpec extends integrityService.vim.DynamicData {
            datastore: integrityService.vim.ManagedObjectReference;
            swapSize: number;
         }
         interface HostCacheConfigurationInfo extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            swapSize: number;
         }
         interface ArrayOfHostCacheConfigurationInfo {
            HostCacheConfigurationInfo?: Array<integrityService.vim.HostCacheConfigurationInfo>;
         }
         enum HostReplayUnsupportedReason {
            "incompatibleProduct",
            "incompatibleCpu",
            "hvDisabled",
            "cpuidLimitSet",
            "oldBIOS",
            "unknown",
         }
         enum HostCapabilityFtUnsupportedReason {
            "vMotionNotLicensed",
            "missingVMotionNic",
            "missingFTLoggingNic",
            "ftNotLicensed",
            "haAgentIssue",
         }
         enum HostCapabilityVmDirectPathGen2UnsupportedReason {
            "hostNptIncompatibleProduct",
            "hostNptIncompatibleHardware",
            "hostNptDisabled",
         }
         interface HostCapability extends integrityService.vim.DynamicData {
            recursiveResourcePoolsSupported: boolean;
            cpuMemoryResourceConfigurationSupported?: boolean;
            rebootSupported: boolean;
            shutdownSupported: boolean;
            vmotionSupported: boolean;
            standbySupported?: boolean;
            ipmiSupported?: boolean;
            maxSupportedVMs?: number;
            maxRunningVMs?: number;
            maxSupportedVcpus?: number;
            maxRegisteredVMs?: number;
            datastorePrincipalSupported: boolean;
            sanSupported: boolean;
            nfsSupported: boolean;
            iscsiSupported: boolean;
            vlanTaggingSupported: boolean;
            nicTeamingSupported: boolean;
            highGuestMemSupported: boolean;
            maintenanceModeSupported: boolean;
            suspendedRelocateSupported: boolean;
            restrictedSnapshotRelocateSupported?: boolean;
            perVmSwapFiles?: boolean;
            localSwapDatastoreSupported?: boolean;
            unsharedSwapVMotionSupported?: boolean;
            backgroundSnapshotsSupported?: boolean;
            preAssignedPCIUnitNumbersSupported?: boolean;
            screenshotSupported?: boolean;
            scaledScreenshotSupported?: boolean;
            storageVMotionSupported?: boolean;
            vmotionWithStorageVMotionSupported?: boolean;
            vmotionAcrossNetworkSupported?: boolean;
            hbrNicSelectionSupported?: boolean;
            recordReplaySupported?: boolean;
            ftSupported?: boolean;
            replayUnsupportedReason?: string;
            replayCompatibilityIssues?: Array<string>;
            ftCompatibilityIssues?: Array<string>;
            loginBySSLThumbprintSupported?: boolean;
            cloneFromSnapshotSupported?: boolean;
            deltaDiskBackingsSupported?: boolean;
            perVMNetworkTrafficShapingSupported?: boolean;
            tpmSupported?: boolean;
            supportedCpuFeature?: Array<integrityService.vim.HostCpuIdInfo>;
            virtualExecUsageSupported?: boolean;
            storageIORMSupported?: boolean;
            vmDirectPathGen2Supported?: boolean;
            vmDirectPathGen2UnsupportedReason?: Array<string>;
            vmDirectPathGen2UnsupportedReasonExtended?: string;
            supportedVmfsMajorVersion?: Array<number>;
            vStorageCapable?: boolean;
            snapshotRelayoutSupported?: boolean;
            firewallIpRulesSupported?: boolean;
            servicePackageInfoSupported?: boolean;
            maxHostRunningVms?: number;
            maxHostSupportedVcpus?: number;
            vmfsDatastoreMountCapable?: boolean;
            eightPlusHostVmfsSharedAccessSupported?: boolean;
            nestedHVSupported?: boolean;
            vPMCSupported?: boolean;
            interVMCommunicationThroughVMCISupported?: boolean;
            scheduledHardwareUpgradeSupported?: boolean;
            featureCapabilitiesSupported?: boolean;
            latencySensitivitySupported?: boolean;
            storagePolicySupported?: boolean;
            accel3dSupported?: boolean;
            reliableMemoryAware?: boolean;
            multipleNetworkStackInstanceSupported?: boolean;
            vsanSupported?: boolean;
            vFlashSupported?: boolean;
         }
         enum HostConfigChangeMode {
            "modify",
            "replace",
         }
         enum HostConfigChangeOperation {
            "add",
            "remove",
            "edit",
            "ignore",
         }
         interface HostConfigChange extends integrityService.vim.DynamicData {
         }
         interface HostConfigInfo extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            product: integrityService.vim.AboutInfo;
            hyperThread?: integrityService.vim.HostHyperThreadScheduleInfo;
            consoleReservation?: integrityService.vim.ServiceConsoleReservationInfo;
            virtualMachineReservation?: integrityService.vim.VirtualMachineMemoryReservationInfo;
            storageDevice?: integrityService.vim.HostStorageDeviceInfo;
            multipathState?: integrityService.vim.HostMultipathStateInfo;
            fileSystemVolume?: integrityService.vim.HostFileSystemVolumeInfo;
            systemFile?: Array<string>;
            network?: integrityService.vim.HostNetworkInfo;
            vmotion?: integrityService.vim.HostVMotionInfo;
            virtualNicManagerInfo?: integrityService.vim.HostVirtualNicManagerInfo;
            capabilities?: integrityService.vim.HostNetCapabilities;
            datastoreCapabilities?: integrityService.vim.HostDatastoreSystemCapabilities;
            offloadCapabilities?: integrityService.vim.HostNetOffloadCapabilities;
            service?: integrityService.vim.HostServiceInfo;
            firewall?: integrityService.vim.HostFirewallInfo;
            autoStart?: integrityService.vim.HostAutoStartManagerConfig;
            activeDiagnosticPartition?: integrityService.vim.HostDiagnosticPartition;
            option?: Array<integrityService.vim.OptionValue>;
            optionDef?: Array<integrityService.vim.OptionDef>;
            datastorePrincipal?: string;
            localSwapDatastore?: integrityService.vim.ManagedObjectReference;
            systemSwapConfiguration?: integrityService.vim.HostSystemSwapConfiguration;
            systemResources?: integrityService.vim.HostSystemResourceInfo;
            dateTimeInfo?: integrityService.vim.HostDateTimeInfo;
            flags?: integrityService.vim.HostFlagInfo;
            adminDisabled?: boolean;
            ipmi?: integrityService.vim.HostIpmiInfo;
            sslThumbprintInfo?: integrityService.vim.HostSslThumbprintInfo;
            sslThumbprintData?: Array<integrityService.vim.HostSslThumbprintInfo>;
            certificate?: Array<number>;
            pciPassthruInfo?: Array<integrityService.vim.HostPciPassthruInfo>;
            authenticationManagerInfo?: integrityService.vim.HostAuthenticationManagerInfo;
            featureVersion?: Array<integrityService.vim.HostFeatureVersionInfo>;
            powerSystemCapability?: integrityService.vim.PowerSystemCapability;
            powerSystemInfo?: integrityService.vim.PowerSystemInfo;
            cacheConfigurationInfo?: Array<integrityService.vim.HostCacheConfigurationInfo>;
            wakeOnLanCapable?: boolean;
            featureCapability?: Array<integrityService.vim.HostFeatureCapability>;
            maskedFeatureCapability?: Array<integrityService.vim.HostFeatureCapability>;
            vFlashConfigInfo?: integrityService.vim.HostVFlashManagerVFlashConfigInfo;
            vsanHostConfig?: integrityService.vim.VsanHostConfigInfo;
            graphicsInfo?: Array<integrityService.vim.HostGraphicsInfo>;
         }
         interface HostConfigManager extends integrityService.vim.DynamicData {
            cpuScheduler?: integrityService.vim.ManagedObjectReference;
            datastoreSystem?: integrityService.vim.ManagedObjectReference;
            memoryManager?: integrityService.vim.ManagedObjectReference;
            storageSystem?: integrityService.vim.ManagedObjectReference;
            networkSystem?: integrityService.vim.ManagedObjectReference;
            vmotionSystem?: integrityService.vim.ManagedObjectReference;
            virtualNicManager?: integrityService.vim.ManagedObjectReference;
            serviceSystem?: integrityService.vim.ManagedObjectReference;
            firewallSystem?: integrityService.vim.ManagedObjectReference;
            advancedOption?: integrityService.vim.ManagedObjectReference;
            diagnosticSystem?: integrityService.vim.ManagedObjectReference;
            autoStartManager?: integrityService.vim.ManagedObjectReference;
            snmpSystem?: integrityService.vim.ManagedObjectReference;
            dateTimeSystem?: integrityService.vim.ManagedObjectReference;
            patchManager?: integrityService.vim.ManagedObjectReference;
            imageConfigManager?: integrityService.vim.ManagedObjectReference;
            bootDeviceSystem?: integrityService.vim.ManagedObjectReference;
            firmwareSystem?: integrityService.vim.ManagedObjectReference;
            healthStatusSystem?: integrityService.vim.ManagedObjectReference;
            pciPassthruSystem?: integrityService.vim.ManagedObjectReference;
            licenseManager?: integrityService.vim.ManagedObjectReference;
            kernelModuleSystem?: integrityService.vim.ManagedObjectReference;
            authenticationManager?: integrityService.vim.ManagedObjectReference;
            powerSystem?: integrityService.vim.ManagedObjectReference;
            cacheConfigurationManager?: integrityService.vim.ManagedObjectReference;
            esxAgentHostManager?: integrityService.vim.ManagedObjectReference;
            iscsiManager?: integrityService.vim.ManagedObjectReference;
            vFlashManager?: integrityService.vim.ManagedObjectReference;
            vsanSystem?: integrityService.vim.ManagedObjectReference;
            graphicsManager?: integrityService.vim.ManagedObjectReference;
            vsanInternalSystem?: integrityService.vim.ManagedObjectReference;
         }
         interface HostConfigSpec extends integrityService.vim.DynamicData {
            nasDatastore?: Array<integrityService.vim.HostNasVolumeConfig>;
            network?: integrityService.vim.HostNetworkConfig;
            nicTypeSelection?: Array<integrityService.vim.HostVirtualNicManagerNicTypeSelection>;
            service?: Array<integrityService.vim.HostServiceConfig>;
            firewall?: integrityService.vim.HostFirewallConfig;
            option?: Array<integrityService.vim.OptionValue>;
            datastorePrincipal?: string;
            datastorePrincipalPasswd?: string;
            datetime?: integrityService.vim.HostDateTimeConfig;
            storageDevice?: integrityService.vim.HostStorageDeviceInfo;
            license?: integrityService.vim.HostLicenseSpec;
            security?: integrityService.vim.HostSecuritySpec;
            userAccount?: Array<integrityService.vim.HostAccountSpec>;
            usergroupAccount?: Array<integrityService.vim.HostAccountSpec>;
            memory?: integrityService.vim.HostMemorySpec;
            activeDirectory?: Array<integrityService.vim.HostActiveDirectory>;
            genericConfig?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface HostConnectInfoNetworkInfo extends integrityService.vim.DynamicData {
            summary: integrityService.vim.NetworkSummary;
         }
         interface ArrayOfHostConnectInfoNetworkInfo {
            HostConnectInfoNetworkInfo?: Array<integrityService.vim.HostConnectInfoNetworkInfo>;
         }
         interface HostNewNetworkConnectInfo extends integrityService.vim.HostConnectInfoNetworkInfo {
         }
         interface HostDatastoreConnectInfo extends integrityService.vim.DynamicData {
            summary: integrityService.vim.DatastoreSummary;
         }
         interface ArrayOfHostDatastoreConnectInfo {
            HostDatastoreConnectInfo?: Array<integrityService.vim.HostDatastoreConnectInfo>;
         }
         interface HostDatastoreExistsConnectInfo extends integrityService.vim.HostDatastoreConnectInfo {
            newDatastoreName: string;
         }
         interface HostDatastoreNameConflictConnectInfo extends integrityService.vim.HostDatastoreConnectInfo {
            newDatastoreName: string;
         }
         interface HostLicenseConnectInfo extends integrityService.vim.DynamicData {
            license: integrityService.vim.LicenseManagerLicenseInfo;
            evaluation: integrityService.vim.LicenseManagerEvaluationInfo;
            resource?: integrityService.vim.HostLicensableResourceInfo;
         }
         interface HostConnectInfo extends integrityService.vim.DynamicData {
            serverIp?: string;
            inDasCluster?: boolean;
            host: integrityService.vim.HostListSummary;
            vm?: Array<integrityService.vim.VirtualMachineSummary>;
            vimAccountNameRequired?: boolean;
            clusterSupported?: boolean;
            network?: Array<integrityService.vim.HostConnectInfoNetworkInfo>;
            datastore?: Array<integrityService.vim.HostDatastoreConnectInfo>;
            license?: integrityService.vim.HostLicenseConnectInfo;
         }
         interface HostConnectSpec extends integrityService.vim.DynamicData {
            hostName?: string;
            port?: number;
            sslThumbprint?: string;
            userName?: string;
            password?: string;
            vmFolder?: integrityService.vim.ManagedObjectReference;
            force: boolean;
            vimAccountName?: string;
            vimAccountPassword?: string;
            managementIp?: string;
         }
         interface HostCpuIdInfo extends integrityService.vim.DynamicData {
            level: number;
            vendor?: string;
            eax?: string;
            ebx?: string;
            ecx?: string;
            edx?: string;
         }
         interface ArrayOfHostCpuIdInfo {
            HostCpuIdInfo?: Array<integrityService.vim.HostCpuIdInfo>;
         }
         interface HostHyperThreadScheduleInfo extends integrityService.vim.DynamicData {
            available: boolean;
            active: boolean;
            config: boolean;
         }
         interface FileQueryFlags extends integrityService.vim.DynamicData {
            fileType: boolean;
            fileSize: boolean;
            modification: boolean;
            fileOwner?: boolean;
         }
         interface FileInfo extends integrityService.vim.DynamicData {
            path: string;
            fileSize?: number;
            modification?: Date;
            owner?: string;
         }
         interface ArrayOfFileInfo {
            FileInfo?: Array<integrityService.vim.FileInfo>;
         }
         interface FileQuery extends integrityService.vim.DynamicData {
         }
         interface ArrayOfFileQuery {
            FileQuery?: Array<integrityService.vim.FileQuery>;
         }
         interface VmConfigFileQueryFilter extends integrityService.vim.DynamicData {
            matchConfigVersion?: Array<number>;
         }
         interface VmConfigFileQueryFlags extends integrityService.vim.DynamicData {
            configVersion: boolean;
         }
         interface VmConfigFileQuery extends integrityService.vim.FileQuery {
            filter?: integrityService.vim.VmConfigFileQueryFilter;
            details?: integrityService.vim.VmConfigFileQueryFlags;
         }
         interface TemplateConfigFileQuery extends integrityService.vim.VmConfigFileQuery {
         }
         interface VmDiskFileQueryFilter extends integrityService.vim.DynamicData {
            diskType?: Array<string>;
            matchHardwareVersion?: Array<number>;
            controllerType?: Array<string>;
            thin?: boolean;
         }
         interface VmDiskFileQueryFlags extends integrityService.vim.DynamicData {
            diskType: boolean;
            capacityKb: boolean;
            hardwareVersion: boolean;
            controllerType?: boolean;
            diskExtents?: boolean;
            thin?: boolean;
         }
         interface VmDiskFileQuery extends integrityService.vim.FileQuery {
            filter?: integrityService.vim.VmDiskFileQueryFilter;
            details?: integrityService.vim.VmDiskFileQueryFlags;
         }
         interface FolderFileQuery extends integrityService.vim.FileQuery {
         }
         interface VmSnapshotFileQuery extends integrityService.vim.FileQuery {
         }
         interface IsoImageFileQuery extends integrityService.vim.FileQuery {
         }
         interface FloppyImageFileQuery extends integrityService.vim.FileQuery {
         }
         interface VmNvramFileQuery extends integrityService.vim.FileQuery {
         }
         interface VmLogFileQuery extends integrityService.vim.FileQuery {
         }
         interface VmConfigFileInfo extends integrityService.vim.FileInfo {
            configVersion?: number;
         }
         interface TemplateConfigFileInfo extends integrityService.vim.VmConfigFileInfo {
         }
         interface VmDiskFileInfo extends integrityService.vim.FileInfo {
            diskType?: string;
            capacityKb?: number;
            hardwareVersion?: number;
            controllerType?: string;
            diskExtents?: Array<string>;
            thin?: boolean;
         }
         interface FolderFileInfo extends integrityService.vim.FileInfo {
         }
         interface VmSnapshotFileInfo extends integrityService.vim.FileInfo {
         }
         interface IsoImageFileInfo extends integrityService.vim.FileInfo {
         }
         interface FloppyImageFileInfo extends integrityService.vim.FileInfo {
         }
         interface VmNvramFileInfo extends integrityService.vim.FileInfo {
         }
         interface VmLogFileInfo extends integrityService.vim.FileInfo {
         }
         interface HostDatastoreBrowserSearchSpec extends integrityService.vim.DynamicData {
            query?: Array<integrityService.vim.FileQuery>;
            details?: integrityService.vim.FileQueryFlags;
            searchCaseInsensitive?: boolean;
            matchPattern?: Array<string>;
            sortFoldersFirst?: boolean;
         }
         interface HostDatastoreBrowserSearchResults extends integrityService.vim.DynamicData {
            datastore?: integrityService.vim.ManagedObjectReference;
            folderPath?: string;
            file?: Array<integrityService.vim.FileInfo>;
         }
         interface ArrayOfHostDatastoreBrowserSearchResults {
            HostDatastoreBrowserSearchResults?: Array<integrityService.vim.HostDatastoreBrowserSearchResults>;
         }
         interface HostDatastoreSystemCapabilities extends integrityService.vim.DynamicData {
            nfsMountCreationRequired: boolean;
            nfsMountCreationSupported: boolean;
            localDatastoreSupported: boolean;
            vmfsExtentExpansionSupported?: boolean;
         }
         interface VmfsDatastoreInfo extends integrityService.vim.DatastoreInfo {
            maxPhysicalRDMFileSize?: number;
            maxVirtualRDMFileSize?: number;
            vmfs?: integrityService.vim.HostVmfsVolume;
         }
         interface NasDatastoreInfo extends integrityService.vim.DatastoreInfo {
            nas?: integrityService.vim.HostNasVolume;
         }
         interface LocalDatastoreInfo extends integrityService.vim.DatastoreInfo {
            path?: string;
         }
         interface VmfsDatastoreSpec extends integrityService.vim.DynamicData {
            diskUuid: string;
         }
         interface VmfsDatastoreCreateSpec extends integrityService.vim.VmfsDatastoreSpec {
            partition: integrityService.vim.HostDiskPartitionSpec;
            vmfs: integrityService.vim.HostVmfsSpec;
            extent?: Array<integrityService.vim.HostScsiDiskPartition>;
         }
         interface VmfsDatastoreExtendSpec extends integrityService.vim.VmfsDatastoreSpec {
            partition: integrityService.vim.HostDiskPartitionSpec;
            extent: Array<integrityService.vim.HostScsiDiskPartition>;
         }
         interface VmfsDatastoreExpandSpec extends integrityService.vim.VmfsDatastoreSpec {
            partition: integrityService.vim.HostDiskPartitionSpec;
            extent: integrityService.vim.HostScsiDiskPartition;
         }
         interface VmfsDatastoreBaseOption extends integrityService.vim.DynamicData {
            layout: integrityService.vim.HostDiskPartitionLayout;
            partitionFormatChange?: boolean;
         }
         interface VmfsDatastoreSingleExtentOption extends integrityService.vim.VmfsDatastoreBaseOption {
            vmfsExtent: integrityService.vim.HostDiskPartitionBlockRange;
         }
         interface VmfsDatastoreAllExtentOption extends integrityService.vim.VmfsDatastoreSingleExtentOption {
         }
         interface VmfsDatastoreMultipleExtentOption extends integrityService.vim.VmfsDatastoreBaseOption {
            vmfsExtent: Array<integrityService.vim.HostDiskPartitionBlockRange>;
         }
         interface VmfsDatastoreOption extends integrityService.vim.DynamicData {
            info: integrityService.vim.VmfsDatastoreBaseOption;
            spec: integrityService.vim.VmfsDatastoreSpec;
         }
         interface ArrayOfVmfsDatastoreOption {
            VmfsDatastoreOption?: Array<integrityService.vim.VmfsDatastoreOption>;
         }
         interface HostDateTimeConfig extends integrityService.vim.DynamicData {
            timeZone?: string;
            ntpConfig?: integrityService.vim.HostNtpConfig;
         }
         interface HostDateTimeInfo extends integrityService.vim.DynamicData {
            timeZone: integrityService.vim.HostDateTimeSystemTimeZone;
            ntpConfig?: integrityService.vim.HostNtpConfig;
         }
         interface HostDateTimeSystemTimeZone extends integrityService.vim.DynamicData {
            key: string;
            name: string;
            description: string;
            gmtOffset: number;
         }
         interface ArrayOfHostDateTimeSystemTimeZone {
            HostDateTimeSystemTimeZone?: Array<integrityService.vim.HostDateTimeSystemTimeZone>;
         }
         interface HostDevice extends integrityService.vim.DynamicData {
            deviceName: string;
            deviceType: string;
         }
         interface HostDhcpServiceSpec extends integrityService.vim.DynamicData {
            virtualSwitch: string;
            defaultLeaseDuration: number;
            leaseBeginIp: string;
            leaseEndIp: string;
            maxLeaseDuration: number;
            unlimitedLease: boolean;
            ipSubnetAddr: string;
            ipSubnetMask: string;
         }
         interface HostDhcpServiceConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            key: string;
            spec: integrityService.vim.HostDhcpServiceSpec;
         }
         interface ArrayOfHostDhcpServiceConfig {
            HostDhcpServiceConfig?: Array<integrityService.vim.HostDhcpServiceConfig>;
         }
         interface HostDhcpService extends integrityService.vim.DynamicData {
            key: string;
            spec: integrityService.vim.HostDhcpServiceSpec;
         }
         interface ArrayOfHostDhcpService {
            HostDhcpService?: Array<integrityService.vim.HostDhcpService>;
         }
         enum DiagnosticPartitionStorageType {
            "directAttached",
            "networkAttached",
         }
         enum DiagnosticPartitionType {
            "singleHost",
            "multiHost",
         }
         interface HostDiagnosticPartitionCreateOption extends integrityService.vim.DynamicData {
            storageType: string;
            diagnosticType: string;
            disk: integrityService.vim.HostScsiDisk;
         }
         interface ArrayOfHostDiagnosticPartitionCreateOption {
            HostDiagnosticPartitionCreateOption?: Array<integrityService.vim.HostDiagnosticPartitionCreateOption>;
         }
         interface HostDiagnosticPartitionCreateSpec extends integrityService.vim.DynamicData {
            storageType: string;
            diagnosticType: string;
            id: integrityService.vim.HostScsiDiskPartition;
            partition: integrityService.vim.HostDiskPartitionSpec;
            active?: boolean;
         }
         interface HostDiagnosticPartitionCreateDescription extends integrityService.vim.DynamicData {
            layout: integrityService.vim.HostDiskPartitionLayout;
            diskUuid: string;
            spec: integrityService.vim.HostDiagnosticPartitionCreateSpec;
         }
         interface HostDiagnosticPartition extends integrityService.vim.DynamicData {
            storageType: string;
            diagnosticType: string;
            slots: number;
            id: integrityService.vim.HostScsiDiskPartition;
         }
         interface ArrayOfHostDiagnosticPartition {
            HostDiagnosticPartition?: Array<integrityService.vim.HostDiagnosticPartition>;
         }
         interface HostDirectoryStoreInfo extends integrityService.vim.HostAuthenticationStoreInfo {
         }
         interface HostDiskConfigurationResult extends integrityService.vim.DynamicData {
            devicePath?: string;
            success?: boolean;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostDiskConfigurationResult {
            HostDiskConfigurationResult?: Array<integrityService.vim.HostDiskConfigurationResult>;
         }
         interface HostDiskDimensionsChs extends integrityService.vim.DynamicData {
            cylinder: number;
            head: number;
            sector: number;
         }
         interface HostDiskDimensionsLba extends integrityService.vim.DynamicData {
            blockSize: number;
            block: number;
         }
         interface HostDiskDimensions extends integrityService.vim.DynamicData {
         }
         enum HostDiskPartitionInfoPartitionFormat {
            "gpt",
            "mbr",
            "unknown",
         }
         enum HostDiskPartitionInfoType {
            "none",
            "vmfs",
            "linuxNative",
            "linuxSwap",
            "extended",
            "ntfs",
            "vmkDiagnostic",
            "vffs",
         }
         interface HostDiskPartitionAttributes extends integrityService.vim.DynamicData {
            partition: number;
            startSector: number;
            endSector: number;
            type: string;
            guid?: string;
            logical: boolean;
            attributes: number;
            partitionAlignment?: number;
         }
         interface ArrayOfHostDiskPartitionAttributes {
            HostDiskPartitionAttributes?: Array<integrityService.vim.HostDiskPartitionAttributes>;
         }
         interface HostDiskPartitionBlockRange extends integrityService.vim.DynamicData {
            partition?: number;
            type: string;
            start: integrityService.vim.HostDiskDimensionsLba;
            end: integrityService.vim.HostDiskDimensionsLba;
         }
         interface ArrayOfHostDiskPartitionBlockRange {
            HostDiskPartitionBlockRange?: Array<integrityService.vim.HostDiskPartitionBlockRange>;
         }
         interface HostDiskPartitionSpec extends integrityService.vim.DynamicData {
            partitionFormat?: string;
            chs?: integrityService.vim.HostDiskDimensionsChs;
            totalSectors?: number;
            partition?: Array<integrityService.vim.HostDiskPartitionAttributes>;
         }
         interface HostDiskPartitionLayout extends integrityService.vim.DynamicData {
            total?: integrityService.vim.HostDiskDimensionsLba;
            partition: Array<integrityService.vim.HostDiskPartitionBlockRange>;
         }
         interface HostDiskPartitionInfo extends integrityService.vim.DynamicData {
            deviceName: string;
            spec: integrityService.vim.HostDiskPartitionSpec;
            layout: integrityService.vim.HostDiskPartitionLayout;
         }
         interface ArrayOfHostDiskPartitionInfo {
            HostDiskPartitionInfo?: Array<integrityService.vim.HostDiskPartitionInfo>;
         }
         interface HostDnsConfig extends integrityService.vim.DynamicData {
            dhcp: boolean;
            virtualNicDevice?: string;
            hostName: string;
            domainName: string;
            address?: Array<string>;
            searchDomain?: Array<string>;
         }
         interface HostDnsConfigSpec extends integrityService.vim.HostDnsConfig {
            virtualNicConnection?: integrityService.vim.HostVirtualNicConnection;
         }
         interface HostEsxAgentHostManagerConfigInfo extends integrityService.vim.DynamicData {
            agentVmDatastore?: integrityService.vim.ManagedObjectReference;
            agentVmNetwork?: integrityService.vim.ManagedObjectReference;
         }
         interface FcoeConfigVlanRange extends integrityService.vim.DynamicData {
            vlanLow: number;
            vlanHigh: number;
         }
         interface ArrayOfFcoeConfigVlanRange {
            FcoeConfigVlanRange?: Array<integrityService.vim.FcoeConfigVlanRange>;
         }
         interface FcoeConfigFcoeCapabilities extends integrityService.vim.DynamicData {
            priorityClass: boolean;
            sourceMacAddress: boolean;
            vlanRange: boolean;
         }
         interface FcoeConfigFcoeSpecification extends integrityService.vim.DynamicData {
            underlyingPnic: string;
            priorityClass?: number;
            sourceMac?: string;
            vlanRange?: Array<integrityService.vim.FcoeConfigVlanRange>;
         }
         interface FcoeConfig extends integrityService.vim.DynamicData {
            priorityClass: number;
            sourceMac: string;
            vlanRange: Array<integrityService.vim.FcoeConfigVlanRange>;
            capabilities: integrityService.vim.FcoeConfigFcoeCapabilities;
            fcoeActive: boolean;
         }
         interface HostFeatureCapability extends integrityService.vim.DynamicData {
            key: string;
            featureName: string;
            value: string;
         }
         interface ArrayOfHostFeatureCapability {
            HostFeatureCapability?: Array<integrityService.vim.HostFeatureCapability>;
         }
         interface HostFeatureMask extends integrityService.vim.DynamicData {
            key: string;
            featureName: string;
            value: string;
         }
         interface ArrayOfHostFeatureMask {
            HostFeatureMask?: Array<integrityService.vim.HostFeatureMask>;
         }
         enum HostFeatureVersionKey {
            "faultTolerance",
         }
         interface HostFeatureVersionInfo extends integrityService.vim.DynamicData {
            key: string;
            value: string;
         }
         interface ArrayOfHostFeatureVersionInfo {
            HostFeatureVersionInfo?: Array<integrityService.vim.HostFeatureVersionInfo>;
         }
         interface ModeInfo extends integrityService.vim.DynamicData {
            browse?: string;
            read: string;
            modify: string;
            use: string;
            admin?: string;
            full: string;
         }
         interface HostFileAccess extends integrityService.vim.DynamicData {
            who: string;
            what: string;
         }
         interface HostFileSystemVolumeInfo extends integrityService.vim.DynamicData {
            volumeTypeList?: Array<string>;
            mountInfo?: Array<integrityService.vim.HostFileSystemMountInfo>;
         }
         enum FileSystemMountInfoVStorageSupportStatus {
            "vStorageSupported",
            "vStorageUnsupported",
            "vStorageUnknown",
         }
         interface HostFileSystemMountInfo extends integrityService.vim.DynamicData {
            mountInfo: integrityService.vim.HostMountInfo;
            volume: integrityService.vim.HostFileSystemVolume;
            vStorageSupport?: string;
         }
         interface ArrayOfHostFileSystemMountInfo {
            HostFileSystemMountInfo?: Array<integrityService.vim.HostFileSystemMountInfo>;
         }
         interface HostFileSystemVolume extends integrityService.vim.DynamicData {
            type: string;
            name: string;
            capacity: number;
         }
         interface HostNasVolumeSpec extends integrityService.vim.DynamicData {
            remoteHost: string;
            remotePath: string;
            localPath: string;
            accessMode: string;
            type?: string;
            userName?: string;
            password?: string;
         }
         interface HostNasVolumeConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            spec?: integrityService.vim.HostNasVolumeSpec;
         }
         interface ArrayOfHostNasVolumeConfig {
            HostNasVolumeConfig?: Array<integrityService.vim.HostNasVolumeConfig>;
         }
         interface HostNasVolume extends integrityService.vim.HostFileSystemVolume {
            remoteHost: string;
            remotePath: string;
            userName?: string;
         }
         interface HostLocalFileSystemVolumeSpec extends integrityService.vim.DynamicData {
            device: string;
            localPath: string;
         }
         interface HostLocalFileSystemVolume extends integrityService.vim.HostFileSystemVolume {
            device: string;
         }
         interface HostVfatVolume extends integrityService.vim.HostFileSystemVolume {
         }
         interface HostFirewallConfigRuleSetConfig extends integrityService.vim.DynamicData {
            rulesetId: string;
            enabled: boolean;
            allowedHosts?: integrityService.vim.HostFirewallRulesetIpList;
         }
         interface ArrayOfHostFirewallConfigRuleSetConfig {
            HostFirewallConfigRuleSetConfig?: Array<integrityService.vim.HostFirewallConfigRuleSetConfig>;
         }
         interface HostFirewallConfig extends integrityService.vim.DynamicData {
            rule?: Array<integrityService.vim.HostFirewallConfigRuleSetConfig>;
            defaultBlockingPolicy: integrityService.vim.HostFirewallDefaultPolicy;
         }
         interface HostFirewallDefaultPolicy extends integrityService.vim.DynamicData {
            incomingBlocked?: boolean;
            outgoingBlocked?: boolean;
         }
         interface HostFirewallInfo extends integrityService.vim.DynamicData {
            defaultPolicy: integrityService.vim.HostFirewallDefaultPolicy;
            ruleset?: Array<integrityService.vim.HostFirewallRuleset>;
         }
         interface HostFlagInfo extends integrityService.vim.DynamicData {
            backgroundSnapshotsEnabled?: boolean;
         }
         interface HostForceMountedInfo extends integrityService.vim.DynamicData {
            persist: boolean;
            mounted: boolean;
         }
         enum HostGraphicsInfoGraphicsType {
            "basic",
            "shared",
            "direct",
         }
         interface HostGraphicsInfo extends integrityService.vim.DynamicData {
            deviceName: string;
            vendorName: string;
            pciId: string;
            graphicsType: string;
            memorySizeInKB: number;
            vm?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface ArrayOfHostGraphicsInfo {
            HostGraphicsInfo?: Array<integrityService.vim.HostGraphicsInfo>;
         }
         interface HostHardwareInfo extends integrityService.vim.DynamicData {
            systemInfo: integrityService.vim.HostSystemInfo;
            cpuPowerManagementInfo?: integrityService.vim.HostCpuPowerManagementInfo;
            cpuInfo: integrityService.vim.HostCpuInfo;
            cpuPkg: Array<integrityService.vim.HostCpuPackage>;
            memorySize: number;
            numaInfo?: integrityService.vim.HostNumaInfo;
            smcPresent?: boolean;
            pciDevice?: Array<integrityService.vim.HostPciDevice>;
            cpuFeature?: Array<integrityService.vim.HostCpuIdInfo>;
            biosInfo?: integrityService.vim.HostBIOSInfo;
            reliableMemoryInfo?: integrityService.vim.HostReliableMemoryInfo;
         }
         interface HostSystemInfo extends integrityService.vim.DynamicData {
            vendor: string;
            model: string;
            uuid: string;
            otherIdentifyingInfo?: Array<integrityService.vim.HostSystemIdentificationInfo>;
         }
         enum HostCpuPowerManagementInfoPolicyType {
            "off",
            "staticPolicy",
            "dynamicPolicy",
         }
         interface HostCpuPowerManagementInfo extends integrityService.vim.DynamicData {
            currentPolicy?: string;
            hardwareSupport?: string;
         }
         interface HostCpuInfo extends integrityService.vim.DynamicData {
            numCpuPackages: number;
            numCpuCores: number;
            numCpuThreads: number;
            hz: number;
         }
         enum HostCpuPackageVendor {
            "unknown",
            "intel",
            "amd",
         }
         interface HostCpuPackage extends integrityService.vim.DynamicData {
            index: number;
            vendor: string;
            hz: number;
            busHz: number;
            description: string;
            threadId: Array<number>;
            cpuFeature?: Array<integrityService.vim.HostCpuIdInfo>;
         }
         interface ArrayOfHostCpuPackage {
            HostCpuPackage?: Array<integrityService.vim.HostCpuPackage>;
         }
         interface HostNumaInfo extends integrityService.vim.DynamicData {
            type: string;
            numNodes: number;
            numaNode?: Array<integrityService.vim.HostNumaNode>;
         }
         interface HostNumaNode extends integrityService.vim.DynamicData {
            typeId: number;
            cpuID: Array<number>;
            memoryRangeBegin: number;
            memoryRangeLength: number;
         }
         interface ArrayOfHostNumaNode {
            HostNumaNode?: Array<integrityService.vim.HostNumaNode>;
         }
         interface HostBIOSInfo extends integrityService.vim.DynamicData {
            biosVersion?: string;
            releaseDate?: Date;
         }
         interface HostReliableMemoryInfo extends integrityService.vim.DynamicData {
            memorySize: number;
         }
         enum HostHardwareElementStatus {
            "Unknown",
            "Green",
            "Yellow",
            "Red",
         }
         interface HostHardwareElementInfo extends integrityService.vim.DynamicData {
            name: string;
            status: integrityService.vim.ElementDescription;
         }
         interface ArrayOfHostHardwareElementInfo {
            HostHardwareElementInfo?: Array<integrityService.vim.HostHardwareElementInfo>;
         }
         interface HostStorageOperationalInfo extends integrityService.vim.DynamicData {
            property: string;
            value: string;
         }
         interface ArrayOfHostStorageOperationalInfo {
            HostStorageOperationalInfo?: Array<integrityService.vim.HostStorageOperationalInfo>;
         }
         interface HostStorageElementInfo extends integrityService.vim.HostHardwareElementInfo {
            operationalInfo?: Array<integrityService.vim.HostStorageOperationalInfo>;
         }
         interface ArrayOfHostStorageElementInfo {
            HostStorageElementInfo?: Array<integrityService.vim.HostStorageElementInfo>;
         }
         interface HostHardwareStatusInfo extends integrityService.vim.DynamicData {
            memoryStatusInfo?: Array<integrityService.vim.HostHardwareElementInfo>;
            cpuStatusInfo?: Array<integrityService.vim.HostHardwareElementInfo>;
            storageStatusInfo?: Array<integrityService.vim.HostStorageElementInfo>;
         }
         interface HealthSystemRuntime extends integrityService.vim.DynamicData {
            systemHealthInfo?: integrityService.vim.HostSystemHealthInfo;
            hardwareStatusInfo?: integrityService.vim.HostHardwareStatusInfo;
         }
         interface HostHostBusAdapter extends integrityService.vim.DynamicData {
            key?: string;
            device: string;
            bus: number;
            status: string;
            model: string;
            driver?: string;
            pci?: string;
         }
         interface ArrayOfHostHostBusAdapter {
            HostHostBusAdapter?: Array<integrityService.vim.HostHostBusAdapter>;
         }
         interface HostParallelScsiHba extends integrityService.vim.HostHostBusAdapter {
         }
         interface HostBlockHba extends integrityService.vim.HostHostBusAdapter {
         }
         enum FibreChannelPortType {
            "fabric",
            "loop",
            "pointToPoint",
            "unknown",
         }
         interface HostFibreChannelHba extends integrityService.vim.HostHostBusAdapter {
            portWorldWideName: number;
            nodeWorldWideName: number;
            portType: integrityService.vim.FibreChannelPortType;
            speed: number;
         }
         interface HostInternetScsiHbaParamValue extends integrityService.vim.OptionValue {
            isInherited?: boolean;
         }
         interface ArrayOfHostInternetScsiHbaParamValue {
            HostInternetScsiHbaParamValue?: Array<integrityService.vim.HostInternetScsiHbaParamValue>;
         }
         interface HostInternetScsiHbaDiscoveryCapabilities extends integrityService.vim.DynamicData {
            iSnsDiscoverySettable: boolean;
            slpDiscoverySettable: boolean;
            staticTargetDiscoverySettable: boolean;
            sendTargetsDiscoverySettable: boolean;
         }
         enum InternetScsiSnsDiscoveryMethod {
            "isnsStatic",
            "isnsDhcp",
            "isnsSlp",
         }
         enum SlpDiscoveryMethod {
            "slpDhcp",
            "slpAutoUnicast",
            "slpAutoMulticast",
            "slpManual",
         }
         interface HostInternetScsiHbaDiscoveryProperties extends integrityService.vim.DynamicData {
            iSnsDiscoveryEnabled: boolean;
            iSnsDiscoveryMethod?: string;
            iSnsHost?: string;
            slpDiscoveryEnabled: boolean;
            slpDiscoveryMethod?: string;
            slpHost?: string;
            staticTargetDiscoveryEnabled: boolean;
            sendTargetsDiscoveryEnabled: boolean;
         }
         enum HostInternetScsiHbaChapAuthenticationType {
            "chapProhibited",
            "chapDiscouraged",
            "chapPreferred",
            "chapRequired",
         }
         interface HostInternetScsiHbaAuthenticationCapabilities extends integrityService.vim.DynamicData {
            chapAuthSettable: boolean;
            krb5AuthSettable: boolean;
            srpAuthSettable: boolean;
            spkmAuthSettable: boolean;
            mutualChapSettable?: boolean;
            targetChapSettable?: boolean;
            targetMutualChapSettable?: boolean;
         }
         interface HostInternetScsiHbaAuthenticationProperties extends integrityService.vim.DynamicData {
            chapAuthEnabled: boolean;
            chapName?: string;
            chapSecret?: string;
            chapAuthenticationType?: string;
            chapInherited?: boolean;
            mutualChapName?: string;
            mutualChapSecret?: string;
            mutualChapAuthenticationType?: string;
            mutualChapInherited?: boolean;
         }
         enum HostInternetScsiHbaDigestType {
            "digestProhibited",
            "digestDiscouraged",
            "digestPreferred",
            "digestRequired",
         }
         interface HostInternetScsiHbaDigestCapabilities extends integrityService.vim.DynamicData {
            headerDigestSettable?: boolean;
            dataDigestSettable?: boolean;
            targetHeaderDigestSettable?: boolean;
            targetDataDigestSettable?: boolean;
         }
         interface HostInternetScsiHbaDigestProperties extends integrityService.vim.DynamicData {
            headerDigestType?: string;
            headerDigestInherited?: boolean;
            dataDigestType?: string;
            dataDigestInherited?: boolean;
         }
         interface HostInternetScsiHbaIPCapabilities extends integrityService.vim.DynamicData {
            addressSettable: boolean;
            ipConfigurationMethodSettable: boolean;
            subnetMaskSettable: boolean;
            defaultGatewaySettable: boolean;
            primaryDnsServerAddressSettable: boolean;
            alternateDnsServerAddressSettable: boolean;
            ipv6Supported?: boolean;
            arpRedirectSettable?: boolean;
            mtuSettable?: boolean;
            hostNameAsTargetAddress?: boolean;
            nameAliasSettable?: boolean;
         }
         interface HostInternetScsiHbaIPProperties extends integrityService.vim.DynamicData {
            mac?: string;
            address?: string;
            dhcpConfigurationEnabled: boolean;
            subnetMask?: string;
            defaultGateway?: string;
            primaryDnsServerAddress?: string;
            alternateDnsServerAddress?: string;
            ipv6Address?: string;
            ipv6SubnetMask?: string;
            ipv6DefaultGateway?: string;
            arpRedirectEnabled?: boolean;
            mtu?: number;
            jumboFramesEnabled?: boolean;
         }
         interface HostInternetScsiHbaSendTarget extends integrityService.vim.DynamicData {
            address: string;
            port?: number;
            authenticationProperties?: integrityService.vim.HostInternetScsiHbaAuthenticationProperties;
            digestProperties?: integrityService.vim.HostInternetScsiHbaDigestProperties;
            supportedAdvancedOptions?: Array<integrityService.vim.OptionDef>;
            advancedOptions?: Array<integrityService.vim.HostInternetScsiHbaParamValue>;
            parent?: string;
         }
         interface ArrayOfHostInternetScsiHbaSendTarget {
            HostInternetScsiHbaSendTarget?: Array<integrityService.vim.HostInternetScsiHbaSendTarget>;
         }
         enum HostInternetScsiHbaStaticTargetTargetDiscoveryMethod {
            "staticMethod",
            "sendTargetMethod",
            "slpMethod",
            "isnsMethod",
            "unknownMethod",
         }
         interface HostInternetScsiHbaStaticTarget extends integrityService.vim.DynamicData {
            address: string;
            port?: number;
            iScsiName: string;
            discoveryMethod?: string;
            authenticationProperties?: integrityService.vim.HostInternetScsiHbaAuthenticationProperties;
            digestProperties?: integrityService.vim.HostInternetScsiHbaDigestProperties;
            supportedAdvancedOptions?: Array<integrityService.vim.OptionDef>;
            advancedOptions?: Array<integrityService.vim.HostInternetScsiHbaParamValue>;
            parent?: string;
         }
         interface ArrayOfHostInternetScsiHbaStaticTarget {
            HostInternetScsiHbaStaticTarget?: Array<integrityService.vim.HostInternetScsiHbaStaticTarget>;
         }
         interface HostInternetScsiHbaTargetSet extends integrityService.vim.DynamicData {
            staticTargets?: Array<integrityService.vim.HostInternetScsiHbaStaticTarget>;
            sendTargets?: Array<integrityService.vim.HostInternetScsiHbaSendTarget>;
         }
         enum HostInternetScsiHbaNetworkBindingSupportType {
            "notsupported",
            "optional",
            "required",
         }
         interface HostInternetScsiHba extends integrityService.vim.HostHostBusAdapter {
            isSoftwareBased: boolean;
            canBeDisabled?: boolean;
            networkBindingSupport?: integrityService.vim.HostInternetScsiHbaNetworkBindingSupportType;
            discoveryCapabilities: integrityService.vim.HostInternetScsiHbaDiscoveryCapabilities;
            discoveryProperties: integrityService.vim.HostInternetScsiHbaDiscoveryProperties;
            authenticationCapabilities: integrityService.vim.HostInternetScsiHbaAuthenticationCapabilities;
            authenticationProperties: integrityService.vim.HostInternetScsiHbaAuthenticationProperties;
            digestCapabilities?: integrityService.vim.HostInternetScsiHbaDigestCapabilities;
            digestProperties?: integrityService.vim.HostInternetScsiHbaDigestProperties;
            ipCapabilities: integrityService.vim.HostInternetScsiHbaIPCapabilities;
            ipProperties: integrityService.vim.HostInternetScsiHbaIPProperties;
            supportedAdvancedOptions?: Array<integrityService.vim.OptionDef>;
            advancedOptions?: Array<integrityService.vim.HostInternetScsiHbaParamValue>;
            iScsiName: string;
            iScsiAlias?: string;
            configuredSendTarget?: Array<integrityService.vim.HostInternetScsiHbaSendTarget>;
            configuredStaticTarget?: Array<integrityService.vim.HostInternetScsiHbaStaticTarget>;
            maxSpeedMb?: number;
            currentSpeedMb?: number;
         }
         interface HostFibreChannelOverEthernetHbaLinkInfo extends integrityService.vim.DynamicData {
            vnportMac: string;
            fcfMac: string;
            vlanId: number;
         }
         interface HostFibreChannelOverEthernetHba extends integrityService.vim.HostFibreChannelHba {
            underlyingNic: string;
            linkInfo: integrityService.vim.HostFibreChannelOverEthernetHbaLinkInfo;
            isSoftwareFcoe: boolean;
            markedForRemoval: boolean;
         }
         interface HostProxySwitchSpec extends integrityService.vim.DynamicData {
            backing?: integrityService.vim.DistributedVirtualSwitchHostMemberBacking;
         }
         interface HostProxySwitchConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            uuid: string;
            spec?: integrityService.vim.HostProxySwitchSpec;
         }
         interface ArrayOfHostProxySwitchConfig {
            HostProxySwitchConfig?: Array<integrityService.vim.HostProxySwitchConfig>;
         }
         interface HostProxySwitchHostLagConfig extends integrityService.vim.DynamicData {
            lagKey: string;
            lagName?: string;
            uplinkPort?: Array<integrityService.vim.KeyValue>;
         }
         interface ArrayOfHostProxySwitchHostLagConfig {
            HostProxySwitchHostLagConfig?: Array<integrityService.vim.HostProxySwitchHostLagConfig>;
         }
         interface HostProxySwitch extends integrityService.vim.DynamicData {
            dvsUuid: string;
            dvsName: string;
            key: string;
            numPorts: number;
            configNumPorts?: number;
            numPortsAvailable: number;
            uplinkPort?: Array<integrityService.vim.KeyValue>;
            mtu?: number;
            pnic?: Array<string>;
            spec: integrityService.vim.HostProxySwitchSpec;
            hostLag?: Array<integrityService.vim.HostProxySwitchHostLagConfig>;
            networkReservationSupported?: boolean;
         }
         interface ArrayOfHostProxySwitch {
            HostProxySwitch?: Array<integrityService.vim.HostProxySwitch>;
         }
         enum HostImageAcceptanceLevel {
            "vmware_certified",
            "vmware_accepted",
            "partner",
            "community",
         }
         interface HostImageProfileSummary extends integrityService.vim.DynamicData {
            name: string;
            vendor: string;
         }
         enum HostIpConfigIpV6AddressConfigType {
            "other",
            "manual",
            "dhcp",
            "linklayer",
            "random",
         }
         enum HostIpConfigIpV6AddressStatus {
            "preferred",
            "deprecated",
            "invalid",
            "inaccessible",
            "unknown",
            "tentative",
            "duplicate",
         }
         interface HostIpConfigIpV6Address extends integrityService.vim.DynamicData {
            ipAddress: string;
            prefixLength: number;
            origin?: string;
            dadState?: string;
            lifetime?: Date;
            operation?: string;
         }
         interface ArrayOfHostIpConfigIpV6Address {
            HostIpConfigIpV6Address?: Array<integrityService.vim.HostIpConfigIpV6Address>;
         }
         interface HostIpConfigIpV6AddressConfiguration extends integrityService.vim.DynamicData {
            ipV6Address?: Array<integrityService.vim.HostIpConfigIpV6Address>;
            autoConfigurationEnabled?: boolean;
            dhcpV6Enabled?: boolean;
         }
         interface HostIpConfig extends integrityService.vim.DynamicData {
            dhcp: boolean;
            ipAddress?: string;
            subnetMask?: string;
            ipV6Config?: integrityService.vim.HostIpConfigIpV6AddressConfiguration;
         }
         interface HostIpRouteConfig extends integrityService.vim.DynamicData {
            defaultGateway?: string;
            gatewayDevice?: string;
            ipV6DefaultGateway?: string;
            ipV6GatewayDevice?: string;
         }
         interface HostIpRouteConfigSpec extends integrityService.vim.HostIpRouteConfig {
            gatewayDeviceConnection?: integrityService.vim.HostVirtualNicConnection;
            ipV6GatewayDeviceConnection?: integrityService.vim.HostVirtualNicConnection;
         }
         interface HostIpRouteEntry extends integrityService.vim.DynamicData {
            network: string;
            prefixLength: number;
            gateway: string;
            deviceName?: string;
         }
         interface ArrayOfHostIpRouteEntry {
            HostIpRouteEntry?: Array<integrityService.vim.HostIpRouteEntry>;
         }
         interface HostIpRouteOp extends integrityService.vim.DynamicData {
            changeOperation: string;
            route: integrityService.vim.HostIpRouteEntry;
         }
         interface ArrayOfHostIpRouteOp {
            HostIpRouteOp?: Array<integrityService.vim.HostIpRouteOp>;
         }
         interface HostIpRouteTableConfig extends integrityService.vim.DynamicData {
            ipRoute?: Array<integrityService.vim.HostIpRouteOp>;
            ipv6Route?: Array<integrityService.vim.HostIpRouteOp>;
         }
         interface HostIpRouteTableInfo extends integrityService.vim.DynamicData {
            ipRoute?: Array<integrityService.vim.HostIpRouteEntry>;
            ipv6Route?: Array<integrityService.vim.HostIpRouteEntry>;
         }
         interface HostIpmiInfo extends integrityService.vim.DynamicData {
            bmcIpAddress?: string;
            bmcMacAddress?: string;
            login?: string;
            password?: string;
         }
         interface IscsiStatus extends integrityService.vim.DynamicData {
            reason?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         enum IscsiPortInfoPathStatus {
            "notUsed",
            "active",
            "standBy",
            "lastActive",
         }
         interface IscsiPortInfo extends integrityService.vim.DynamicData {
            vnicDevice?: string;
            vnic?: integrityService.vim.HostVirtualNic;
            pnicDevice?: string;
            pnic?: integrityService.vim.PhysicalNic;
            switchName?: string;
            switchUuid?: string;
            portgroupName?: string;
            portgroupKey?: string;
            portKey?: string;
            complianceStatus?: integrityService.vim.IscsiStatus;
            pathStatus?: string;
         }
         interface ArrayOfIscsiPortInfo {
            IscsiPortInfo?: Array<integrityService.vim.IscsiPortInfo>;
         }
         interface IscsiDependencyEntity extends integrityService.vim.DynamicData {
            pnicDevice: string;
            vnicDevice: string;
            vmhbaName: string;
         }
         interface ArrayOfIscsiDependencyEntity {
            IscsiDependencyEntity?: Array<integrityService.vim.IscsiDependencyEntity>;
         }
         interface IscsiMigrationDependency extends integrityService.vim.DynamicData {
            migrationAllowed: boolean;
            disallowReason?: integrityService.vim.IscsiStatus;
            dependency?: Array<integrityService.vim.IscsiDependencyEntity>;
         }
         interface KernelModuleSectionInfo extends integrityService.vim.DynamicData {
            address: number;
            length?: number;
         }
         interface KernelModuleInfo extends integrityService.vim.DynamicData {
            id: number;
            name: string;
            version: string;
            filename: string;
            optionString: string;
            loaded: boolean;
            enabled: boolean;
            useCount: number;
            readOnlySection: integrityService.vim.KernelModuleSectionInfo;
            writableSection: integrityService.vim.KernelModuleSectionInfo;
            textSection: integrityService.vim.KernelModuleSectionInfo;
            dataSection: integrityService.vim.KernelModuleSectionInfo;
            bssSection: integrityService.vim.KernelModuleSectionInfo;
         }
         interface ArrayOfKernelModuleInfo {
            KernelModuleInfo?: Array<integrityService.vim.KernelModuleInfo>;
         }
         interface HostLicenseSpec extends integrityService.vim.DynamicData {
            source?: integrityService.vim.LicenseSource;
            editionKey?: string;
            disabledFeatureKey?: Array<string>;
            enabledFeatureKey?: Array<string>;
         }
         enum LinkDiscoveryProtocolConfigProtocolType {
            "cdp",
            "lldp",
         }
         enum LinkDiscoveryProtocolConfigOperationType {
            "none",
            "listen",
            "advertise",
            "both",
         }
         interface LinkDiscoveryProtocolConfig extends integrityService.vim.DynamicData {
            protocol: string;
            operation: string;
         }
         interface HostAccountSpec extends integrityService.vim.DynamicData {
            id: string;
            password?: string;
            description?: string;
         }
         interface ArrayOfHostAccountSpec {
            HostAccountSpec?: Array<integrityService.vim.HostAccountSpec>;
         }
         interface HostPosixAccountSpec extends integrityService.vim.HostAccountSpec {
            posixId?: number;
            shellAccess?: boolean;
         }
         interface HostLocalAuthenticationInfo extends integrityService.vim.HostAuthenticationStoreInfo {
         }
         interface HostLowLevelProvisioningManagerVmRecoveryInfo extends integrityService.vim.DynamicData {
            version: string;
            biosUUID: string;
            instanceUUID: string;
            ftInfo?: integrityService.vim.FaultToleranceConfigInfo;
         }
         interface HostLowLevelProvisioningManagerVmMigrationStatus extends integrityService.vim.DynamicData {
            migrationId: number;
            type: string;
            source: boolean;
            consideredSuccessful: boolean;
         }
         enum HostLowLevelProvisioningManagerReloadTarget {
            "currentConfig",
            "snapshotConfig",
         }
         interface HostLowLevelProvisioningManagerDiskLayoutSpec extends integrityService.vim.DynamicData {
            controllerType: string;
            busNumber: number;
            unitNumber: number;
            srcFilename: string;
            dstFilename: string;
         }
         interface ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec {
            HostLowLevelProvisioningManagerDiskLayoutSpec?: Array<integrityService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec>;
         }
         interface HostLowLevelProvisioningManagerSnapshotLayoutSpec extends integrityService.vim.DynamicData {
            id: number;
            srcFilename: string;
            dstFilename: string;
            disk?: Array<integrityService.vim.HostLowLevelProvisioningManagerDiskLayoutSpec>;
         }
         interface ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec {
            HostLowLevelProvisioningManagerSnapshotLayoutSpec?: Array<integrityService.vim.HostLowLevelProvisioningManagerSnapshotLayoutSpec>;
         }
         interface HostMaintenanceSpec extends integrityService.vim.DynamicData {
            vsanMode?: integrityService.vim.VsanHostDecommissionMode;
         }
         interface ServiceConsoleReservationInfo extends integrityService.vim.DynamicData {
            serviceConsoleReservedCfg: number;
            serviceConsoleReserved: number;
            unreserved: number;
         }
         enum VirtualMachineMemoryAllocationPolicy {
            "swapNone",
            "swapSome",
            "swapMost",
         }
         interface VirtualMachineMemoryReservationInfo extends integrityService.vim.DynamicData {
            virtualMachineMin: number;
            virtualMachineMax: number;
            virtualMachineReserved: number;
            allocationPolicy: string;
         }
         interface VirtualMachineMemoryReservationSpec extends integrityService.vim.DynamicData {
            virtualMachineReserved?: number;
            allocationPolicy?: string;
         }
         interface HostMemorySpec extends integrityService.vim.DynamicData {
            serviceConsoleReservation?: number;
         }
         enum HostMountMode {
            "readWrite",
            "readOnly",
         }
         enum HostMountInfoInaccessibleReason {
            "AllPathsDown_Start",
            "AllPathsDown_Timeout",
            "PermanentDeviceLoss",
         }
         interface HostMountInfo extends integrityService.vim.DynamicData {
            path?: string;
            accessMode: string;
            mounted?: boolean;
            accessible?: boolean;
            inaccessibleReason?: string;
         }
         enum MultipathState {
            "standby",
            "active",
            "disabled",
            "dead",
            "unknown",
         }
         interface HostMultipathInfoLogicalUnitPolicy extends integrityService.vim.DynamicData {
            policy: string;
         }
         interface HostMultipathInfoLogicalUnitStorageArrayTypePolicy extends integrityService.vim.DynamicData {
            policy: string;
         }
         interface HostMultipathInfoFixedLogicalUnitPolicy extends integrityService.vim.HostMultipathInfoLogicalUnitPolicy {
            prefer: string;
         }
         interface HostMultipathInfoLogicalUnit extends integrityService.vim.DynamicData {
            key: string;
            id: string;
            lun: string;
            path: Array<integrityService.vim.HostMultipathInfoPath>;
            policy: integrityService.vim.HostMultipathInfoLogicalUnitPolicy;
            storageArrayTypePolicy?: integrityService.vim.HostMultipathInfoLogicalUnitStorageArrayTypePolicy;
         }
         interface ArrayOfHostMultipathInfoLogicalUnit {
            HostMultipathInfoLogicalUnit?: Array<integrityService.vim.HostMultipathInfoLogicalUnit>;
         }
         interface HostMultipathInfoPath extends integrityService.vim.DynamicData {
            key: string;
            name: string;
            pathState: string;
            state?: string;
            isWorkingPath?: boolean;
            adapter: string;
            lun: string;
            transport?: integrityService.vim.HostTargetTransport;
         }
         interface ArrayOfHostMultipathInfoPath {
            HostMultipathInfoPath?: Array<integrityService.vim.HostMultipathInfoPath>;
         }
         interface HostMultipathInfo extends integrityService.vim.DynamicData {
            lun?: Array<integrityService.vim.HostMultipathInfoLogicalUnit>;
         }
         interface HostMultipathStateInfoPath extends integrityService.vim.DynamicData {
            name: string;
            pathState: string;
         }
         interface ArrayOfHostMultipathStateInfoPath {
            HostMultipathStateInfoPath?: Array<integrityService.vim.HostMultipathStateInfoPath>;
         }
         interface HostMultipathStateInfo extends integrityService.vim.DynamicData {
            path?: Array<integrityService.vim.HostMultipathStateInfoPath>;
         }
         interface HostNatServicePortForwardSpec extends integrityService.vim.DynamicData {
            type: string;
            name: string;
            hostPort: number;
            guestPort: number;
            guestIpAddress: string;
         }
         interface ArrayOfHostNatServicePortForwardSpec {
            HostNatServicePortForwardSpec?: Array<integrityService.vim.HostNatServicePortForwardSpec>;
         }
         interface HostNatServiceNameServiceSpec extends integrityService.vim.DynamicData {
            dnsAutoDetect: boolean;
            dnsPolicy: string;
            dnsRetries: number;
            dnsTimeout: number;
            dnsNameServer?: Array<string>;
            nbdsTimeout: number;
            nbnsRetries: number;
            nbnsTimeout: number;
         }
         interface HostNatServiceSpec extends integrityService.vim.DynamicData {
            virtualSwitch: string;
            activeFtp: boolean;
            allowAnyOui: boolean;
            configPort: boolean;
            ipGatewayAddress: string;
            udpTimeout: number;
            portForward?: Array<integrityService.vim.HostNatServicePortForwardSpec>;
            nameService?: integrityService.vim.HostNatServiceNameServiceSpec;
         }
         interface HostNatServiceConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            key: string;
            spec: integrityService.vim.HostNatServiceSpec;
         }
         interface ArrayOfHostNatServiceConfig {
            HostNatServiceConfig?: Array<integrityService.vim.HostNatServiceConfig>;
         }
         interface HostNatService extends integrityService.vim.DynamicData {
            key: string;
            spec: integrityService.vim.HostNatServiceSpec;
         }
         interface ArrayOfHostNatService {
            HostNatService?: Array<integrityService.vim.HostNatService>;
         }
         interface HostNetCapabilities extends integrityService.vim.DynamicData {
            canSetPhysicalNicLinkSpeed: boolean;
            supportsNicTeaming: boolean;
            nicTeamingPolicy?: Array<string>;
            supportsVlan: boolean;
            usesServiceConsoleNic: boolean;
            supportsNetworkHints: boolean;
            maxPortGroupsPerVswitch?: number;
            vswitchConfigSupported?: boolean;
            vnicConfigSupported?: boolean;
            ipRouteConfigSupported?: boolean;
            dnsConfigSupported?: boolean;
            dhcpOnVnicSupported?: boolean;
            ipV6Supported?: boolean;
         }
         interface HostNetOffloadCapabilities extends integrityService.vim.DynamicData {
            csumOffload?: boolean;
            tcpSegmentation?: boolean;
            zeroCopyXmit?: boolean;
         }
         enum HostNetStackInstanceSystemStackKey {
            "defaultTcpipStack",
         }
         enum HostNetStackInstanceCongestionControlAlgorithmType {
            "newreno",
            "cubic",
         }
         interface HostNetStackInstance extends integrityService.vim.DynamicData {
            key?: string;
            name?: string;
            dnsConfig?: integrityService.vim.HostDnsConfig;
            ipRouteConfig?: integrityService.vim.HostIpRouteConfig;
            requestedMaxNumberOfConnections?: number;
            congestionControlAlgorithm?: string;
            ipV6Enabled?: boolean;
            routeTableConfig?: integrityService.vim.HostIpRouteTableConfig;
         }
         interface ArrayOfHostNetStackInstance {
            HostNetStackInstance?: Array<integrityService.vim.HostNetStackInstance>;
         }
         interface HostNetworkConfigResult extends integrityService.vim.DynamicData {
            vnicDevice?: Array<string>;
            consoleVnicDevice?: Array<string>;
         }
         interface HostNetworkConfigNetStackSpec extends integrityService.vim.DynamicData {
            netStackInstance: integrityService.vim.HostNetStackInstance;
            operation?: string;
         }
         interface ArrayOfHostNetworkConfigNetStackSpec {
            HostNetworkConfigNetStackSpec?: Array<integrityService.vim.HostNetworkConfigNetStackSpec>;
         }
         interface HostNetworkConfig extends integrityService.vim.DynamicData {
            vswitch?: Array<integrityService.vim.HostVirtualSwitchConfig>;
            proxySwitch?: Array<integrityService.vim.HostProxySwitchConfig>;
            portgroup?: Array<integrityService.vim.HostPortGroupConfig>;
            pnic?: Array<integrityService.vim.PhysicalNicConfig>;
            vnic?: Array<integrityService.vim.HostVirtualNicConfig>;
            consoleVnic?: Array<integrityService.vim.HostVirtualNicConfig>;
            dnsConfig?: integrityService.vim.HostDnsConfig;
            ipRouteConfig?: integrityService.vim.HostIpRouteConfig;
            consoleIpRouteConfig?: integrityService.vim.HostIpRouteConfig;
            routeTableConfig?: integrityService.vim.HostIpRouteTableConfig;
            dhcp?: Array<integrityService.vim.HostDhcpServiceConfig>;
            nat?: Array<integrityService.vim.HostNatServiceConfig>;
            ipV6Enabled?: boolean;
            netStackSpec?: Array<integrityService.vim.HostNetworkConfigNetStackSpec>;
         }
         interface HostNetworkInfo extends integrityService.vim.DynamicData {
            vswitch?: Array<integrityService.vim.HostVirtualSwitch>;
            proxySwitch?: Array<integrityService.vim.HostProxySwitch>;
            portgroup?: Array<integrityService.vim.HostPortGroup>;
            pnic?: Array<integrityService.vim.PhysicalNic>;
            vnic?: Array<integrityService.vim.HostVirtualNic>;
            consoleVnic?: Array<integrityService.vim.HostVirtualNic>;
            dnsConfig?: integrityService.vim.HostDnsConfig;
            ipRouteConfig?: integrityService.vim.HostIpRouteConfig;
            consoleIpRouteConfig?: integrityService.vim.HostIpRouteConfig;
            routeTableInfo?: integrityService.vim.HostIpRouteTableInfo;
            dhcp?: Array<integrityService.vim.HostDhcpService>;
            nat?: Array<integrityService.vim.HostNatService>;
            ipV6Enabled?: boolean;
            atBootIpV6Enabled?: boolean;
            netStackInstance?: Array<integrityService.vim.HostNetStackInstance>;
            opaqueSwitch?: Array<integrityService.vim.HostOpaqueSwitch>;
            opaqueNetwork?: Array<integrityService.vim.HostOpaqueNetworkInfo>;
         }
         interface HostNetworkSecurityPolicy extends integrityService.vim.DynamicData {
            allowPromiscuous?: boolean;
            macChanges?: boolean;
            forgedTransmits?: boolean;
         }
         interface HostNetworkTrafficShapingPolicy extends integrityService.vim.DynamicData {
            enabled?: boolean;
            averageBandwidth?: number;
            peakBandwidth?: number;
            burstSize?: number;
         }
         interface HostNicFailureCriteria extends integrityService.vim.DynamicData {
            checkSpeed?: string;
            speed?: number;
            checkDuplex?: boolean;
            fullDuplex?: boolean;
            checkErrorPercent?: boolean;
            percentage?: number;
            checkBeacon?: boolean;
         }
         interface HostNicOrderPolicy extends integrityService.vim.DynamicData {
            activeNic?: Array<string>;
            standbyNic?: Array<string>;
         }
         interface HostNicTeamingPolicy extends integrityService.vim.DynamicData {
            policy?: string;
            reversePolicy?: boolean;
            notifySwitches?: boolean;
            rollingOrder?: boolean;
            failureCriteria?: integrityService.vim.HostNicFailureCriteria;
            nicOrder?: integrityService.vim.HostNicOrderPolicy;
         }
         interface HostNetworkPolicy extends integrityService.vim.DynamicData {
            security?: integrityService.vim.HostNetworkSecurityPolicy;
            nicTeaming?: integrityService.vim.HostNicTeamingPolicy;
            offloadPolicy?: integrityService.vim.HostNetOffloadCapabilities;
            shapingPolicy?: integrityService.vim.HostNetworkTrafficShapingPolicy;
         }
         interface HostNtpConfig extends integrityService.vim.DynamicData {
            server?: Array<string>;
         }
         enum HostNumericSensorHealthState {
            "unknown",
            "green",
            "yellow",
            "red",
         }
         enum HostNumericSensorType {
            "fan",
            "power",
            "temperature",
            "voltage",
            "other",
         }
         interface HostNumericSensorInfo extends integrityService.vim.DynamicData {
            name: string;
            healthState?: integrityService.vim.ElementDescription;
            currentReading: number;
            unitModifier: number;
            baseUnits: string;
            rateUnits?: string;
            sensorType?: string;
         }
         interface ArrayOfHostNumericSensorInfo {
            HostNumericSensorInfo?: Array<integrityService.vim.HostNumericSensorInfo>;
         }
         interface HostOpaqueNetworkInfo extends integrityService.vim.DynamicData {
            opaqueNetworkId: string;
            opaqueNetworkName: string;
            opaqueNetworkType: string;
         }
         interface ArrayOfHostOpaqueNetworkInfo {
            HostOpaqueNetworkInfo?: Array<integrityService.vim.HostOpaqueNetworkInfo>;
         }
         interface HostOpaqueSwitch extends integrityService.vim.DynamicData {
            key: string;
            name?: string;
            pnic?: Array<string>;
         }
         interface ArrayOfHostOpaqueSwitch {
            HostOpaqueSwitch?: Array<integrityService.vim.HostOpaqueSwitch>;
         }
         interface HostPatchManagerResult extends integrityService.vim.DynamicData {
            version: string;
            status?: Array<integrityService.vim.HostPatchManagerStatus>;
            xmlResult?: string;
         }
         enum HostPatchManagerReason {
            "obsoleted",
            "missingPatch",
            "missingLib",
            "hasDependentPatch",
            "conflictPatch",
            "conflictLib",
         }
         enum HostPatchManagerIntegrityStatus {
            "validated",
            "keyNotFound",
            "keyRevoked",
            "keyExpired",
            "digestMismatch",
            "notEnoughSignatures",
            "validationError",
         }
         enum HostPatchManagerInstallState {
            "hostRestarted",
            "imageActive",
         }
         interface HostPatchManagerStatusPrerequisitePatch extends integrityService.vim.DynamicData {
            id: string;
            installState?: Array<string>;
         }
         interface ArrayOfHostPatchManagerStatusPrerequisitePatch {
            HostPatchManagerStatusPrerequisitePatch?: Array<integrityService.vim.HostPatchManagerStatusPrerequisitePatch>;
         }
         interface HostPatchManagerStatus extends integrityService.vim.DynamicData {
            id: string;
            applicable: boolean;
            reason?: Array<string>;
            integrity?: string;
            installed: boolean;
            installState?: Array<string>;
            prerequisitePatch?: Array<integrityService.vim.HostPatchManagerStatusPrerequisitePatch>;
            restartRequired: boolean;
            reconnectRequired: boolean;
            vmOffRequired: boolean;
            supersededPatchIds?: Array<string>;
         }
         interface ArrayOfHostPatchManagerStatus {
            HostPatchManagerStatus?: Array<integrityService.vim.HostPatchManagerStatus>;
         }
         interface HostPatchManagerLocator extends integrityService.vim.DynamicData {
            url: string;
            proxy?: string;
         }
         interface HostPatchManagerPatchManagerOperationSpec extends integrityService.vim.DynamicData {
            proxy?: string;
            port?: number;
            userName?: string;
            password?: string;
            cmdOption?: string;
         }
         interface HostPathSelectionPolicyOption extends integrityService.vim.DynamicData {
            policy: integrityService.vim.ElementDescription;
         }
         interface ArrayOfHostPathSelectionPolicyOption {
            HostPathSelectionPolicyOption?: Array<integrityService.vim.HostPathSelectionPolicyOption>;
         }
         interface HostPciDevice extends integrityService.vim.DynamicData {
            id: string;
            classId: number;
            bus: number;
            slot: number;
            function: number;
            vendorId: number;
            subVendorId: number;
            vendorName: string;
            deviceId: number;
            subDeviceId: number;
            parentBridge?: string;
            deviceName: string;
         }
         interface ArrayOfHostPciDevice {
            HostPciDevice?: Array<integrityService.vim.HostPciDevice>;
         }
         interface HostPciPassthruConfig extends integrityService.vim.DynamicData {
            id: string;
            passthruEnabled: boolean;
         }
         interface ArrayOfHostPciPassthruConfig {
            HostPciPassthruConfig?: Array<integrityService.vim.HostPciPassthruConfig>;
         }
         interface HostPciPassthruInfo extends integrityService.vim.DynamicData {
            id: string;
            dependentDevice: string;
            passthruEnabled: boolean;
            passthruCapable: boolean;
            passthruActive: boolean;
         }
         interface ArrayOfHostPciPassthruInfo {
            HostPciPassthruInfo?: Array<integrityService.vim.HostPciPassthruInfo>;
         }
         interface PhysicalNicSpec extends integrityService.vim.DynamicData {
            ip?: integrityService.vim.HostIpConfig;
            linkSpeed?: integrityService.vim.PhysicalNicLinkInfo;
         }
         interface PhysicalNicConfig extends integrityService.vim.DynamicData {
            device: string;
            spec: integrityService.vim.PhysicalNicSpec;
         }
         interface ArrayOfPhysicalNicConfig {
            PhysicalNicConfig?: Array<integrityService.vim.PhysicalNicConfig>;
         }
         interface PhysicalNicLinkInfo extends integrityService.vim.DynamicData {
            speedMb: number;
            duplex: boolean;
         }
         interface ArrayOfPhysicalNicLinkInfo {
            PhysicalNicLinkInfo?: Array<integrityService.vim.PhysicalNicLinkInfo>;
         }
         interface PhysicalNicHint extends integrityService.vim.DynamicData {
            vlanId?: number;
         }
         interface PhysicalNicIpHint extends integrityService.vim.PhysicalNicHint {
            ipSubnet: string;
         }
         interface ArrayOfPhysicalNicIpHint {
            PhysicalNicIpHint?: Array<integrityService.vim.PhysicalNicIpHint>;
         }
         interface PhysicalNicNameHint extends integrityService.vim.PhysicalNicHint {
            network: string;
         }
         interface ArrayOfPhysicalNicNameHint {
            PhysicalNicNameHint?: Array<integrityService.vim.PhysicalNicNameHint>;
         }
         interface PhysicalNicHintInfo extends integrityService.vim.DynamicData {
            device: string;
            subnet?: Array<integrityService.vim.PhysicalNicIpHint>;
            network?: Array<integrityService.vim.PhysicalNicNameHint>;
            connectedSwitchPort?: integrityService.vim.PhysicalNicCdpInfo;
            lldpInfo?: integrityService.vim.LinkLayerDiscoveryProtocolInfo;
         }
         interface ArrayOfPhysicalNicHintInfo {
            PhysicalNicHintInfo?: Array<integrityService.vim.PhysicalNicHintInfo>;
         }
         interface PhysicalNicCdpDeviceCapability extends integrityService.vim.DynamicData {
            router: boolean;
            transparentBridge: boolean;
            sourceRouteBridge: boolean;
            networkSwitch: boolean;
            host: boolean;
            igmpEnabled: boolean;
            repeater: boolean;
         }
         interface PhysicalNicCdpInfo extends integrityService.vim.DynamicData {
            cdpVersion?: number;
            timeout?: number;
            ttl?: number;
            samples?: number;
            devId?: string;
            address?: string;
            portId?: string;
            deviceCapability?: integrityService.vim.PhysicalNicCdpDeviceCapability;
            softwareVersion?: string;
            hardwarePlatform?: string;
            ipPrefix?: string;
            ipPrefixLen?: number;
            vlan?: number;
            fullDuplex?: boolean;
            mtu?: number;
            systemName?: string;
            systemOID?: string;
            mgmtAddr?: string;
            location?: string;
         }
         interface LinkLayerDiscoveryProtocolInfo extends integrityService.vim.DynamicData {
            chassisId: string;
            portId: string;
            timeToLive: number;
            parameter?: Array<integrityService.vim.KeyAnyValue>;
         }
         enum PhysicalNicVmDirectPathGen2SupportedMode {
            "upt",
         }
         enum PhysicalNicResourcePoolSchedulerDisallowedReason {
            "userOptOut",
            "hardwareUnsupported",
         }
         interface PhysicalNic extends integrityService.vim.DynamicData {
            key?: string;
            device: string;
            pci: string;
            driver?: string;
            linkSpeed?: integrityService.vim.PhysicalNicLinkInfo;
            validLinkSpecification?: Array<integrityService.vim.PhysicalNicLinkInfo>;
            spec: integrityService.vim.PhysicalNicSpec;
            wakeOnLanSupported?: boolean;
            mac?: string;
            fcoeConfiguration?: integrityService.vim.FcoeConfig;
            vmDirectPathGen2Supported?: boolean;
            vmDirectPathGen2SupportedMode?: string;
            resourcePoolSchedulerAllowed?: boolean;
            resourcePoolSchedulerDisallowedReason?: Array<string>;
            autoNegotiateSupported?: boolean;
         }
         interface ArrayOfPhysicalNic {
            PhysicalNic?: Array<integrityService.vim.PhysicalNic>;
         }
         interface HostPlugStoreTopologyAdapter extends integrityService.vim.DynamicData {
            key: string;
            adapter: string;
            path?: Array<string>;
         }
         interface ArrayOfHostPlugStoreTopologyAdapter {
            HostPlugStoreTopologyAdapter?: Array<integrityService.vim.HostPlugStoreTopologyAdapter>;
         }
         interface HostPlugStoreTopologyPath extends integrityService.vim.DynamicData {
            key: string;
            name: string;
            channelNumber?: number;
            targetNumber?: number;
            lunNumber?: number;
            adapter?: string;
            target?: string;
            device?: string;
         }
         interface ArrayOfHostPlugStoreTopologyPath {
            HostPlugStoreTopologyPath?: Array<integrityService.vim.HostPlugStoreTopologyPath>;
         }
         interface HostPlugStoreTopologyDevice extends integrityService.vim.DynamicData {
            key: string;
            lun: string;
            path?: Array<string>;
         }
         interface ArrayOfHostPlugStoreTopologyDevice {
            HostPlugStoreTopologyDevice?: Array<integrityService.vim.HostPlugStoreTopologyDevice>;
         }
         interface HostPlugStoreTopologyPlugin extends integrityService.vim.DynamicData {
            key: string;
            name: string;
            device?: Array<string>;
            claimedPath?: Array<string>;
         }
         interface ArrayOfHostPlugStoreTopologyPlugin {
            HostPlugStoreTopologyPlugin?: Array<integrityService.vim.HostPlugStoreTopologyPlugin>;
         }
         interface HostPlugStoreTopologyTarget extends integrityService.vim.DynamicData {
            key: string;
            transport?: integrityService.vim.HostTargetTransport;
         }
         interface ArrayOfHostPlugStoreTopologyTarget {
            HostPlugStoreTopologyTarget?: Array<integrityService.vim.HostPlugStoreTopologyTarget>;
         }
         interface HostPlugStoreTopology extends integrityService.vim.DynamicData {
            adapter?: Array<integrityService.vim.HostPlugStoreTopologyAdapter>;
            path?: Array<integrityService.vim.HostPlugStoreTopologyPath>;
            target?: Array<integrityService.vim.HostPlugStoreTopologyTarget>;
            device?: Array<integrityService.vim.HostPlugStoreTopologyDevice>;
            plugin?: Array<integrityService.vim.HostPlugStoreTopologyPlugin>;
         }
         enum PortGroupConnecteeType {
            "virtualMachine",
            "systemManagement",
            "host",
            "unknown",
         }
         interface HostPortGroupSpec extends integrityService.vim.DynamicData {
            name: string;
            vlanId: number;
            vswitchName: string;
            policy: integrityService.vim.HostNetworkPolicy;
         }
         interface HostPortGroupConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            spec?: integrityService.vim.HostPortGroupSpec;
         }
         interface ArrayOfHostPortGroupConfig {
            HostPortGroupConfig?: Array<integrityService.vim.HostPortGroupConfig>;
         }
         interface HostPortGroupPort extends integrityService.vim.DynamicData {
            key?: string;
            mac?: Array<string>;
            type: string;
         }
         interface ArrayOfHostPortGroupPort {
            HostPortGroupPort?: Array<integrityService.vim.HostPortGroupPort>;
         }
         interface HostPortGroup extends integrityService.vim.DynamicData {
            key?: string;
            port?: Array<integrityService.vim.HostPortGroupPort>;
            vswitch?: string;
            computedPolicy: integrityService.vim.HostNetworkPolicy;
            spec: integrityService.vim.HostPortGroupSpec;
         }
         interface ArrayOfHostPortGroup {
            HostPortGroup?: Array<integrityService.vim.HostPortGroup>;
         }
         interface HostPowerPolicy extends integrityService.vim.DynamicData {
            key: number;
            name: string;
            shortName: string;
            description: string;
         }
         interface ArrayOfHostPowerPolicy {
            HostPowerPolicy?: Array<integrityService.vim.HostPowerPolicy>;
         }
         interface PowerSystemCapability extends integrityService.vim.DynamicData {
            availablePolicy: Array<integrityService.vim.HostPowerPolicy>;
         }
         interface PowerSystemInfo extends integrityService.vim.DynamicData {
            currentPolicy: integrityService.vim.HostPowerPolicy;
         }
         interface HostResignatureRescanResult extends integrityService.vim.DynamicData {
            rescan?: Array<integrityService.vim.HostVmfsRescanResult>;
            result: integrityService.vim.ManagedObjectReference;
         }
         interface HostFirewallRulesetIpNetwork extends integrityService.vim.DynamicData {
            network: string;
            prefixLength: number;
         }
         interface ArrayOfHostFirewallRulesetIpNetwork {
            HostFirewallRulesetIpNetwork?: Array<integrityService.vim.HostFirewallRulesetIpNetwork>;
         }
         interface HostFirewallRulesetIpList extends integrityService.vim.DynamicData {
            ipAddress?: Array<string>;
            ipNetwork?: Array<integrityService.vim.HostFirewallRulesetIpNetwork>;
            allIp: boolean;
         }
         interface HostFirewallRulesetRulesetSpec extends integrityService.vim.DynamicData {
            allowedHosts: integrityService.vim.HostFirewallRulesetIpList;
         }
         enum HostFirewallRuleDirection {
            "inbound",
            "outbound",
         }
         enum HostFirewallRulePortType {
            "src",
            "dst",
         }
         enum HostFirewallRuleProtocol {
            "tcp",
            "udp",
         }
         interface HostFirewallRule extends integrityService.vim.DynamicData {
            port: number;
            endPort?: number;
            direction: integrityService.vim.HostFirewallRuleDirection;
            portType?: integrityService.vim.HostFirewallRulePortType;
            protocol: string;
         }
         interface ArrayOfHostFirewallRule {
            HostFirewallRule?: Array<integrityService.vim.HostFirewallRule>;
         }
         interface HostFirewallRuleset extends integrityService.vim.DynamicData {
            key: string;
            label: string;
            required: boolean;
            rule: Array<integrityService.vim.HostFirewallRule>;
            service?: string;
            enabled: boolean;
            allowedHosts?: integrityService.vim.HostFirewallRulesetIpList;
         }
         interface ArrayOfHostFirewallRuleset {
            HostFirewallRuleset?: Array<integrityService.vim.HostFirewallRuleset>;
         }
         enum HostRuntimeInfoNetStackInstanceRuntimeInfoState {
            "inactive",
            "active",
            "deactivating",
            "activating",
         }
         interface HostRuntimeInfoNetStackInstanceRuntimeInfo extends integrityService.vim.DynamicData {
            netStackInstanceKey: string;
            state?: string;
            vmknicKeys?: Array<string>;
            maxNumberOfConnections?: number;
            currentIpV6Enabled?: boolean;
         }
         interface ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo {
            HostRuntimeInfoNetStackInstanceRuntimeInfo?: Array<integrityService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo>;
         }
         interface HostRuntimeInfoNetworkRuntimeInfo extends integrityService.vim.DynamicData {
            netStackInstanceRuntimeInfo?: Array<integrityService.vim.HostRuntimeInfoNetStackInstanceRuntimeInfo>;
         }
         interface HostRuntimeInfo extends integrityService.vim.DynamicData {
            connectionState: integrityService.vim.HostSystemConnectionState;
            powerState?: integrityService.vim.HostSystemPowerState;
            standbyMode?: string;
            inMaintenanceMode: boolean;
            bootTime?: Date;
            healthSystemRuntime?: integrityService.vim.HealthSystemRuntime;
            dasHostState?: integrityService.vim.ClusterDasFdmHostState;
            tpmPcrValues?: Array<integrityService.vim.HostTpmDigestInfo>;
            vsanRuntimeInfo?: integrityService.vim.VsanHostRuntimeInfo;
            networkRuntimeInfo?: integrityService.vim.HostRuntimeInfoNetworkRuntimeInfo;
            vFlashResourceRuntimeInfo?: integrityService.vim.HostVFlashManagerVFlashResourceRunTimeInfo;
            hostMaxVirtualDiskCapacity?: number;
         }
         interface HostScsiDiskPartition extends integrityService.vim.DynamicData {
            diskName: string;
            partition: number;
         }
         interface ArrayOfHostScsiDiskPartition {
            HostScsiDiskPartition?: Array<integrityService.vim.HostScsiDiskPartition>;
         }
         interface HostScsiDisk extends integrityService.vim.ScsiLun {
            capacity: integrityService.vim.HostDiskDimensionsLba;
            devicePath: string;
            ssd?: boolean;
         }
         interface ArrayOfHostScsiDisk {
            HostScsiDisk?: Array<integrityService.vim.HostScsiDisk>;
         }
         enum ScsiLunType {
            "disk",
            "tape",
            "printer",
            "processor",
            "worm",
            "cdrom",
            "scanner",
            "opticalDevice",
            "mediaChanger",
            "communications",
            "storageArrayController",
            "enclosure",
            "unknown",
         }
         interface ScsiLunCapabilities extends integrityService.vim.DynamicData {
            updateDisplayNameSupported: boolean;
         }
         interface ScsiLunDurableName extends integrityService.vim.DynamicData {
            namespace: string;
            namespaceId: number;
            data?: Array<number>;
         }
         interface ArrayOfScsiLunDurableName {
            ScsiLunDurableName?: Array<integrityService.vim.ScsiLunDurableName>;
         }
         enum ScsiLunState {
            "unknownState",
            "ok",
            "error",
            "off",
            "quiesced",
            "degraded",
            "lostCommunication",
            "timeout",
         }
         enum ScsiLunDescriptorQuality {
            "highQuality",
            "mediumQuality",
            "lowQuality",
            "unknownQuality",
         }
         interface ScsiLunDescriptor extends integrityService.vim.DynamicData {
            quality: string;
            id: string;
         }
         interface ArrayOfScsiLunDescriptor {
            ScsiLunDescriptor?: Array<integrityService.vim.ScsiLunDescriptor>;
         }
         enum ScsiLunVStorageSupportStatus {
            "vStorageSupported",
            "vStorageUnsupported",
            "vStorageUnknown",
         }
         interface ScsiLun extends integrityService.vim.HostDevice {
            key?: string;
            uuid: string;
            descriptor?: Array<integrityService.vim.ScsiLunDescriptor>;
            canonicalName?: string;
            displayName?: string;
            lunType: string;
            vendor?: string;
            model?: string;
            revision?: string;
            scsiLevel?: number;
            serialNumber?: string;
            durableName?: integrityService.vim.ScsiLunDurableName;
            alternateName?: Array<integrityService.vim.ScsiLunDurableName>;
            standardInquiry?: Array<number>;
            queueDepth?: number;
            operationalState: Array<string>;
            capabilities?: integrityService.vim.ScsiLunCapabilities;
            vStorageSupport?: string;
         }
         interface ArrayOfScsiLun {
            ScsiLun?: Array<integrityService.vim.ScsiLun>;
         }
         interface HostScsiTopologyInterface extends integrityService.vim.DynamicData {
            key: string;
            adapter: string;
            target?: Array<integrityService.vim.HostScsiTopologyTarget>;
         }
         interface ArrayOfHostScsiTopologyInterface {
            HostScsiTopologyInterface?: Array<integrityService.vim.HostScsiTopologyInterface>;
         }
         interface HostScsiTopologyTarget extends integrityService.vim.DynamicData {
            key: string;
            target: number;
            lun?: Array<integrityService.vim.HostScsiTopologyLun>;
            transport?: integrityService.vim.HostTargetTransport;
         }
         interface ArrayOfHostScsiTopologyTarget {
            HostScsiTopologyTarget?: Array<integrityService.vim.HostScsiTopologyTarget>;
         }
         interface HostScsiTopologyLun extends integrityService.vim.DynamicData {
            key: string;
            lun: number;
            scsiLun: string;
         }
         interface ArrayOfHostScsiTopologyLun {
            HostScsiTopologyLun?: Array<integrityService.vim.HostScsiTopologyLun>;
         }
         interface HostScsiTopology extends integrityService.vim.DynamicData {
            adapter?: Array<integrityService.vim.HostScsiTopologyInterface>;
         }
         interface HostSecuritySpec extends integrityService.vim.DynamicData {
            adminPassword?: string;
            removePermission?: Array<integrityService.vim.Permission>;
            addPermission?: Array<integrityService.vim.Permission>;
         }
         enum HostServicePolicy {
            "on",
            "automatic",
            "off",
         }
         interface HostServiceSourcePackage extends integrityService.vim.DynamicData {
            sourcePackageName: string;
            description: string;
         }
         interface HostService extends integrityService.vim.DynamicData {
            key: string;
            label: string;
            required: boolean;
            uninstallable: boolean;
            running: boolean;
            ruleset?: Array<string>;
            policy: string;
            sourcePackage?: integrityService.vim.HostServiceSourcePackage;
         }
         interface ArrayOfHostService {
            HostService?: Array<integrityService.vim.HostService>;
         }
         interface HostServiceConfig extends integrityService.vim.DynamicData {
            serviceId: string;
            startupPolicy: string;
         }
         interface ArrayOfHostServiceConfig {
            HostServiceConfig?: Array<integrityService.vim.HostServiceConfig>;
         }
         interface HostServiceInfo extends integrityService.vim.DynamicData {
            service?: Array<integrityService.vim.HostService>;
         }
         interface HostSnmpDestination extends integrityService.vim.DynamicData {
            hostName: string;
            port: number;
            community: string;
         }
         interface ArrayOfHostSnmpDestination {
            HostSnmpDestination?: Array<integrityService.vim.HostSnmpDestination>;
         }
         interface HostSnmpConfigSpec extends integrityService.vim.DynamicData {
            enabled?: boolean;
            port?: number;
            readOnlyCommunities?: Array<string>;
            trapTargets?: Array<integrityService.vim.HostSnmpDestination>;
            option?: Array<integrityService.vim.KeyValue>;
         }
         enum HostSnmpAgentCapability {
            "COMPLETE",
            "DIAGNOSTICS",
            "CONFIGURATION",
         }
         interface HostSnmpSystemAgentLimits extends integrityService.vim.DynamicData {
            maxReadOnlyCommunities: number;
            maxTrapDestinations: number;
            maxCommunityLength: number;
            maxBufferSize: number;
            capability?: integrityService.vim.HostSnmpAgentCapability;
         }
         interface HostSriovConfig extends integrityService.vim.HostPciPassthruConfig {
            sriovEnabled: boolean;
            numVirtualFunction: number;
         }
         interface HostSriovInfo extends integrityService.vim.HostPciPassthruInfo {
            sriovEnabled: boolean;
            sriovCapable: boolean;
            sriovActive: boolean;
            numVirtualFunctionRequested: number;
            numVirtualFunction: number;
            maxVirtualFunctionSupported: number;
         }
         interface HostSslThumbprintInfo extends integrityService.vim.DynamicData {
            principal: string;
            ownerTag?: string;
            sslThumbprints?: Array<string>;
         }
         interface ArrayOfHostSslThumbprintInfo {
            HostSslThumbprintInfo?: Array<integrityService.vim.HostSslThumbprintInfo>;
         }
         interface HostStorageArrayTypePolicyOption extends integrityService.vim.DynamicData {
            policy: integrityService.vim.ElementDescription;
         }
         interface ArrayOfHostStorageArrayTypePolicyOption {
            HostStorageArrayTypePolicyOption?: Array<integrityService.vim.HostStorageArrayTypePolicyOption>;
         }
         interface HostStorageDeviceInfo extends integrityService.vim.DynamicData {
            hostBusAdapter?: Array<integrityService.vim.HostHostBusAdapter>;
            scsiLun?: Array<integrityService.vim.ScsiLun>;
            scsiTopology?: integrityService.vim.HostScsiTopology;
            multipathInfo?: integrityService.vim.HostMultipathInfo;
            plugStoreTopology?: integrityService.vim.HostPlugStoreTopology;
            softwareInternetScsiEnabled: boolean;
         }
         interface HostHardwareSummary extends integrityService.vim.DynamicData {
            vendor: string;
            model: string;
            uuid: string;
            otherIdentifyingInfo?: Array<integrityService.vim.HostSystemIdentificationInfo>;
            memorySize: number;
            cpuModel: string;
            cpuMhz: number;
            numCpuPkgs: number;
            numCpuCores: number;
            numCpuThreads: number;
            numNics: number;
            numHBAs: number;
         }
         interface HostListSummaryQuickStats extends integrityService.vim.DynamicData {
            overallCpuUsage?: number;
            overallMemoryUsage?: number;
            distributedCpuFairness?: number;
            distributedMemoryFairness?: number;
            uptime?: number;
         }
         interface HostConfigSummary extends integrityService.vim.DynamicData {
            name: string;
            port: number;
            sslThumbprint?: string;
            product?: integrityService.vim.AboutInfo;
            vmotionEnabled: boolean;
            faultToleranceEnabled?: boolean;
            featureVersion?: Array<integrityService.vim.HostFeatureVersionInfo>;
            agentVmDatastore?: integrityService.vim.ManagedObjectReference;
            agentVmNetwork?: integrityService.vim.ManagedObjectReference;
         }
         interface HostListSummary extends integrityService.vim.DynamicData {
            host?: integrityService.vim.ManagedObjectReference;
            hardware?: integrityService.vim.HostHardwareSummary;
            runtime?: integrityService.vim.HostRuntimeInfo;
            config: integrityService.vim.HostConfigSummary;
            quickStats: integrityService.vim.HostListSummaryQuickStats;
            overallStatus: integrityService.vim.ManagedEntityStatus;
            rebootRequired: boolean;
            customValue?: Array<integrityService.vim.CustomFieldValue>;
            managementServerIp?: string;
            maxEVCModeKey?: string;
            currentEVCModeKey?: string;
         }
         interface HostSystemHealthInfo extends integrityService.vim.DynamicData {
            numericSensorInfo?: Array<integrityService.vim.HostNumericSensorInfo>;
         }
         enum HostSystemIdentificationInfoIdentifier {
            "AssetTag",
            "ServiceTag",
            "OemSpecificString",
         }
         interface HostSystemIdentificationInfo extends integrityService.vim.DynamicData {
            identifierValue: string;
            identifierType: integrityService.vim.ElementDescription;
         }
         interface ArrayOfHostSystemIdentificationInfo {
            HostSystemIdentificationInfo?: Array<integrityService.vim.HostSystemIdentificationInfo>;
         }
         interface HostSystemResourceInfo extends integrityService.vim.DynamicData {
            key: string;
            config?: integrityService.vim.ResourceConfigSpec;
            child?: Array<integrityService.vim.HostSystemResourceInfo>;
         }
         interface ArrayOfHostSystemResourceInfo {
            HostSystemResourceInfo?: Array<integrityService.vim.HostSystemResourceInfo>;
         }
         interface HostSystemSwapConfigurationSystemSwapOption extends integrityService.vim.DynamicData {
            key: number;
         }
         interface ArrayOfHostSystemSwapConfigurationSystemSwapOption {
            HostSystemSwapConfigurationSystemSwapOption?: Array<integrityService.vim.HostSystemSwapConfigurationSystemSwapOption>;
         }
         interface HostSystemSwapConfigurationDisabledOption extends integrityService.vim.HostSystemSwapConfigurationSystemSwapOption {
         }
         interface HostSystemSwapConfigurationHostCacheOption extends integrityService.vim.HostSystemSwapConfigurationSystemSwapOption {
         }
         interface HostSystemSwapConfigurationHostLocalSwapOption extends integrityService.vim.HostSystemSwapConfigurationSystemSwapOption {
         }
         interface HostSystemSwapConfigurationDatastoreOption extends integrityService.vim.HostSystemSwapConfigurationSystemSwapOption {
            datastore: string;
         }
         interface HostSystemSwapConfiguration extends integrityService.vim.DynamicData {
            option?: Array<integrityService.vim.HostSystemSwapConfigurationSystemSwapOption>;
         }
         interface HostTargetTransport extends integrityService.vim.DynamicData {
         }
         interface HostParallelScsiTargetTransport extends integrityService.vim.HostTargetTransport {
         }
         interface HostBlockAdapterTargetTransport extends integrityService.vim.HostTargetTransport {
         }
         interface HostFibreChannelTargetTransport extends integrityService.vim.HostTargetTransport {
            portWorldWideName: number;
            nodeWorldWideName: number;
         }
         interface HostInternetScsiTargetTransport extends integrityService.vim.HostTargetTransport {
            iScsiName: string;
            iScsiAlias: string;
            address?: Array<string>;
         }
         interface HostFibreChannelOverEthernetTargetTransport extends integrityService.vim.HostFibreChannelTargetTransport {
            vnportMac: string;
            fcfMac: string;
            vlanId: number;
         }
         interface HostTpmAttestationReport extends integrityService.vim.DynamicData {
            tpmPcrValues: Array<integrityService.vim.HostTpmDigestInfo>;
            tpmEvents: Array<integrityService.vim.HostTpmEventLogEntry>;
            tpmLogReliable: boolean;
         }
         interface HostTpmBootSecurityOptionEventDetails extends integrityService.vim.HostTpmEventDetails {
            bootSecurityOption: string;
         }
         interface HostTpmCommandEventDetails extends integrityService.vim.HostTpmEventDetails {
            commandLine: string;
         }
         enum HostDigestInfoDigestMethodType {
            "SHA1",
            "MD5",
         }
         interface HostDigestInfo extends integrityService.vim.DynamicData {
            digestMethod: string;
            digestValue: Array<number>;
            objectName?: string;
         }
         interface HostTpmDigestInfo extends integrityService.vim.HostDigestInfo {
            pcrNumber: number;
         }
         interface ArrayOfHostTpmDigestInfo {
            HostTpmDigestInfo?: Array<integrityService.vim.HostTpmDigestInfo>;
         }
         interface HostTpmEventDetails extends integrityService.vim.DynamicData {
            dataHash: Array<number>;
         }
         interface HostTpmEventLogEntry extends integrityService.vim.DynamicData {
            pcrIndex: number;
            eventDetails: integrityService.vim.HostTpmEventDetails;
         }
         interface ArrayOfHostTpmEventLogEntry {
            HostTpmEventLogEntry?: Array<integrityService.vim.HostTpmEventLogEntry>;
         }
         interface HostTpmOptionEventDetails extends integrityService.vim.HostTpmEventDetails {
            optionsFileName: string;
            bootOptions?: Array<number>;
         }
         interface HostTpmSoftwareComponentEventDetails extends integrityService.vim.HostTpmEventDetails {
            componentName: string;
            vibName: string;
            vibVersion: string;
            vibVendor: string;
         }
         enum HostUnresolvedVmfsExtentUnresolvedReason {
            "diskIdMismatch",
            "uuidConflict",
         }
         interface HostUnresolvedVmfsExtent extends integrityService.vim.DynamicData {
            device: integrityService.vim.HostScsiDiskPartition;
            devicePath: string;
            vmfsUuid: string;
            isHeadExtent: boolean;
            ordinal: number;
            startBlock: number;
            endBlock: number;
            reason: string;
         }
         interface ArrayOfHostUnresolvedVmfsExtent {
            HostUnresolvedVmfsExtent?: Array<integrityService.vim.HostUnresolvedVmfsExtent>;
         }
         interface HostUnresolvedVmfsResignatureSpec extends integrityService.vim.DynamicData {
            extentDevicePath: Array<string>;
         }
         interface HostUnresolvedVmfsResolutionResult extends integrityService.vim.DynamicData {
            spec: integrityService.vim.HostUnresolvedVmfsResolutionSpec;
            vmfs?: integrityService.vim.HostVmfsVolume;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostUnresolvedVmfsResolutionResult {
            HostUnresolvedVmfsResolutionResult?: Array<integrityService.vim.HostUnresolvedVmfsResolutionResult>;
         }
         enum HostUnresolvedVmfsResolutionSpecVmfsUuidResolution {
            "resignature",
            "forceMount",
         }
         interface HostUnresolvedVmfsResolutionSpec extends integrityService.vim.DynamicData {
            extentDevicePath: Array<string>;
            uuidResolution: string;
         }
         interface ArrayOfHostUnresolvedVmfsResolutionSpec {
            HostUnresolvedVmfsResolutionSpec?: Array<integrityService.vim.HostUnresolvedVmfsResolutionSpec>;
         }
         interface HostUnresolvedVmfsVolumeResolveStatus extends integrityService.vim.DynamicData {
            resolvable: boolean;
            incompleteExtents?: boolean;
            multipleCopies?: boolean;
         }
         interface HostUnresolvedVmfsVolume extends integrityService.vim.DynamicData {
            extent: Array<integrityService.vim.HostUnresolvedVmfsExtent>;
            vmfsLabel: string;
            vmfsUuid: string;
            totalBlocks: number;
            resolveStatus: integrityService.vim.HostUnresolvedVmfsVolumeResolveStatus;
         }
         interface ArrayOfHostUnresolvedVmfsVolume {
            HostUnresolvedVmfsVolume?: Array<integrityService.vim.HostUnresolvedVmfsVolume>;
         }
         interface HostVFlashManagerVFlashResourceConfigSpec extends integrityService.vim.DynamicData {
            vffsUuid: string;
         }
         interface HostVFlashManagerVFlashResourceConfigInfo extends integrityService.vim.DynamicData {
            vffs?: integrityService.vim.HostVffsVolume;
            capacity: number;
         }
         interface HostVFlashManagerVFlashResourceRunTimeInfo extends integrityService.vim.DynamicData {
            usage: number;
            capacity: number;
            accessible: boolean;
            capacityForVmCache: number;
            freeForVmCache: number;
         }
         interface HostVFlashManagerVFlashCacheConfigSpec extends integrityService.vim.DynamicData {
            defaultVFlashModule: string;
            swapCacheReservationInGB: number;
         }
         interface HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption extends integrityService.vim.DynamicData {
            vFlashModule: string;
            vFlashModuleVersion: string;
            minSupportedModuleVersion: string;
            cacheConsistencyType: integrityService.vim.ChoiceOption;
            cacheMode: integrityService.vim.ChoiceOption;
            blockSizeInKBOption: integrityService.vim.LongOption;
            reservationInMBOption: integrityService.vim.LongOption;
            maxDiskSizeInKB: number;
         }
         interface ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption {
            HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption?: Array<integrityService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption>;
         }
         interface HostVFlashManagerVFlashCacheConfigInfo extends integrityService.vim.DynamicData {
            vFlashModuleConfigOption?: Array<integrityService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption>;
            defaultVFlashModule?: string;
            swapCacheReservationInGB?: number;
         }
         interface HostVFlashManagerVFlashConfigInfo extends integrityService.vim.DynamicData {
            vFlashResourceConfigInfo?: integrityService.vim.HostVFlashManagerVFlashResourceConfigInfo;
            vFlashCacheConfigInfo?: integrityService.vim.HostVFlashManagerVFlashCacheConfigInfo;
         }
         interface HostVFlashResourceConfigurationResult extends integrityService.vim.DynamicData {
            devicePath?: Array<string>;
            vffs?: integrityService.vim.HostVffsVolume;
            diskConfigurationResult?: Array<integrityService.vim.HostDiskConfigurationResult>;
         }
         interface HostVMotionConfig extends integrityService.vim.DynamicData {
            vmotionNicKey?: string;
            enabled: boolean;
         }
         interface HostVMotionInfo extends integrityService.vim.DynamicData {
            netConfig?: integrityService.vim.HostVMotionNetConfig;
            ipConfig?: integrityService.vim.HostIpConfig;
         }
         interface HostVMotionNetConfig extends integrityService.vim.DynamicData {
            candidateVnic?: Array<integrityService.vim.HostVirtualNic>;
            selectedVnic?: string;
         }
         interface HostVffsSpec extends integrityService.vim.DynamicData {
            devicePath: string;
            partition?: integrityService.vim.HostDiskPartitionSpec;
            majorVersion: number;
            volumeName: string;
         }
         interface HostVffsVolume extends integrityService.vim.HostFileSystemVolume {
            majorVersion: number;
            version: string;
            uuid: string;
            extent: Array<integrityService.vim.HostScsiDiskPartition>;
         }
         interface HostVirtualNicSpec extends integrityService.vim.DynamicData {
            ip?: integrityService.vim.HostIpConfig;
            mac?: string;
            distributedVirtualPort?: integrityService.vim.DistributedVirtualSwitchPortConnection;
            portgroup?: string;
            mtu?: number;
            tsoEnabled?: boolean;
            netStackInstanceKey?: string;
         }
         interface HostVirtualNicConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            device?: string;
            portgroup: string;
            spec?: integrityService.vim.HostVirtualNicSpec;
         }
         interface ArrayOfHostVirtualNicConfig {
            HostVirtualNicConfig?: Array<integrityService.vim.HostVirtualNicConfig>;
         }
         interface HostVirtualNic extends integrityService.vim.DynamicData {
            device: string;
            key: string;
            portgroup: string;
            spec: integrityService.vim.HostVirtualNicSpec;
            port?: string;
         }
         interface ArrayOfHostVirtualNic {
            HostVirtualNic?: Array<integrityService.vim.HostVirtualNic>;
         }
         interface HostVirtualNicConnection extends integrityService.vim.DynamicData {
            portgroup?: string;
            dvPort?: integrityService.vim.DistributedVirtualSwitchPortConnection;
         }
         enum HostVirtualNicManagerNicType {
            "vmotion",
            "faultToleranceLogging",
            "vSphereReplication",
            "management",
            "vsan",
         }
         interface HostVirtualNicManagerNicTypeSelection extends integrityService.vim.DynamicData {
            vnic: integrityService.vim.HostVirtualNicConnection;
            nicType?: Array<string>;
         }
         interface ArrayOfHostVirtualNicManagerNicTypeSelection {
            HostVirtualNicManagerNicTypeSelection?: Array<integrityService.vim.HostVirtualNicManagerNicTypeSelection>;
         }
         interface VirtualNicManagerNetConfig extends integrityService.vim.DynamicData {
            nicType: string;
            multiSelectAllowed: boolean;
            candidateVnic?: Array<integrityService.vim.HostVirtualNic>;
            selectedVnic?: Array<string>;
         }
         interface ArrayOfVirtualNicManagerNetConfig {
            VirtualNicManagerNetConfig?: Array<integrityService.vim.VirtualNicManagerNetConfig>;
         }
         interface HostVirtualNicManagerInfo extends integrityService.vim.DynamicData {
            netConfig?: Array<integrityService.vim.VirtualNicManagerNetConfig>;
         }
         interface HostVirtualSwitchBridge extends integrityService.vim.DynamicData {
         }
         interface HostVirtualSwitchAutoBridge extends integrityService.vim.HostVirtualSwitchBridge {
            excludedNicDevice?: Array<string>;
         }
         interface HostVirtualSwitchSimpleBridge extends integrityService.vim.HostVirtualSwitchBridge {
            nicDevice: string;
         }
         interface HostVirtualSwitchBondBridge extends integrityService.vim.HostVirtualSwitchBridge {
            nicDevice: Array<string>;
            beacon?: integrityService.vim.HostVirtualSwitchBeaconConfig;
            linkDiscoveryProtocolConfig?: integrityService.vim.LinkDiscoveryProtocolConfig;
         }
         interface HostVirtualSwitchBeaconConfig extends integrityService.vim.DynamicData {
            interval: number;
         }
         interface HostVirtualSwitchSpec extends integrityService.vim.DynamicData {
            numPorts: number;
            bridge?: integrityService.vim.HostVirtualSwitchBridge;
            policy?: integrityService.vim.HostNetworkPolicy;
            mtu?: number;
         }
         interface HostVirtualSwitchConfig extends integrityService.vim.DynamicData {
            changeOperation?: string;
            name: string;
            spec?: integrityService.vim.HostVirtualSwitchSpec;
         }
         interface ArrayOfHostVirtualSwitchConfig {
            HostVirtualSwitchConfig?: Array<integrityService.vim.HostVirtualSwitchConfig>;
         }
         interface HostVirtualSwitch extends integrityService.vim.DynamicData {
            name: string;
            key: string;
            numPorts: number;
            numPortsAvailable: number;
            mtu?: number;
            portgroup?: Array<string>;
            pnic?: Array<string>;
            spec: integrityService.vim.HostVirtualSwitchSpec;
         }
         interface ArrayOfHostVirtualSwitch {
            HostVirtualSwitch?: Array<integrityService.vim.HostVirtualSwitch>;
         }
         enum HostVmciAccessManagerMode {
            "grant",
            "replace",
            "revoke",
         }
         interface HostVmciAccessManagerAccessSpec extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            services?: Array<string>;
            mode: string;
         }
         interface ArrayOfHostVmciAccessManagerAccessSpec {
            HostVmciAccessManagerAccessSpec?: Array<integrityService.vim.HostVmciAccessManagerAccessSpec>;
         }
         interface HostVmfsRescanResult extends integrityService.vim.DynamicData {
            host: integrityService.vim.ManagedObjectReference;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfHostVmfsRescanResult {
            HostVmfsRescanResult?: Array<integrityService.vim.HostVmfsRescanResult>;
         }
         interface HostVmfsSpec extends integrityService.vim.DynamicData {
            extent: integrityService.vim.HostScsiDiskPartition;
            blockSizeMb?: number;
            majorVersion: number;
            volumeName: string;
         }
         interface HostVmfsVolume extends integrityService.vim.HostFileSystemVolume {
            blockSizeMb: number;
            maxBlocks: number;
            majorVersion: number;
            version: string;
            uuid: string;
            extent: Array<integrityService.vim.HostScsiDiskPartition>;
            vmfsUpgradable: boolean;
            forceMountedInfo?: integrityService.vim.HostForceMountedInfo;
            ssd?: boolean;
            local?: boolean;
         }
         interface HostVsanInternalSystemCmmdsQuery extends integrityService.vim.DynamicData {
            type?: string;
            uuid?: string;
            owner?: string;
         }
         interface ArrayOfHostVsanInternalSystemCmmdsQuery {
            HostVsanInternalSystemCmmdsQuery?: Array<integrityService.vim.HostVsanInternalSystemCmmdsQuery>;
         }
         interface NetDhcpConfigInfoDhcpOptions extends integrityService.vim.DynamicData {
            enable: boolean;
            config?: Array<integrityService.vim.KeyValue>;
         }
         interface NetDhcpConfigInfo extends integrityService.vim.DynamicData {
            ipv6?: integrityService.vim.NetDhcpConfigInfoDhcpOptions;
            ipv4?: integrityService.vim.NetDhcpConfigInfoDhcpOptions;
         }
         interface NetDhcpConfigSpecDhcpOptionsSpec extends integrityService.vim.DynamicData {
            enable?: boolean;
            config: Array<integrityService.vim.KeyValue>;
            operation: string;
         }
         interface NetDhcpConfigSpec extends integrityService.vim.DynamicData {
            ipv6?: integrityService.vim.NetDhcpConfigSpecDhcpOptionsSpec;
            ipv4?: integrityService.vim.NetDhcpConfigSpecDhcpOptionsSpec;
         }
         interface NetDnsConfigInfo extends integrityService.vim.DynamicData {
            dhcp: boolean;
            hostName: string;
            domainName: string;
            ipAddress?: Array<string>;
            searchDomain?: Array<string>;
         }
         interface NetDnsConfigSpec extends integrityService.vim.DynamicData {
            dhcp?: boolean;
            hostName?: string;
            domainName?: string;
            ipAddress?: Array<string>;
            searchDomain?: Array<string>;
         }
         enum NetIpConfigInfoIpAddressOrigin {
            "other",
            "manual",
            "dhcp",
            "linklayer",
            "random",
         }
         enum NetIpConfigInfoIpAddressStatus {
            "preferred",
            "deprecated",
            "invalid",
            "inaccessible",
            "unknown",
            "tentative",
            "duplicate",
         }
         interface NetIpConfigInfoIpAddress extends integrityService.vim.DynamicData {
            ipAddress: string;
            prefixLength: number;
            origin?: string;
            state?: string;
            lifetime?: Date;
         }
         interface ArrayOfNetIpConfigInfoIpAddress {
            NetIpConfigInfoIpAddress?: Array<integrityService.vim.NetIpConfigInfoIpAddress>;
         }
         interface NetIpConfigInfo extends integrityService.vim.DynamicData {
            ipAddress?: Array<integrityService.vim.NetIpConfigInfoIpAddress>;
            dhcp?: integrityService.vim.NetDhcpConfigInfo;
            autoConfigurationEnabled?: boolean;
         }
         interface NetIpConfigSpecIpAddressSpec extends integrityService.vim.DynamicData {
            ipAddress: string;
            prefixLength: number;
            operation: string;
         }
         interface ArrayOfNetIpConfigSpecIpAddressSpec {
            NetIpConfigSpecIpAddressSpec?: Array<integrityService.vim.NetIpConfigSpecIpAddressSpec>;
         }
         interface NetIpConfigSpec extends integrityService.vim.DynamicData {
            ipAddress?: Array<integrityService.vim.NetIpConfigSpecIpAddressSpec>;
            dhcp?: integrityService.vim.NetDhcpConfigSpec;
            autoConfigurationEnabled?: boolean;
         }
         interface NetIpRouteConfigInfoGateway extends integrityService.vim.DynamicData {
            ipAddress?: string;
            device?: string;
         }
         interface NetIpRouteConfigInfoIpRoute extends integrityService.vim.DynamicData {
            network: string;
            prefixLength: number;
            gateway: integrityService.vim.NetIpRouteConfigInfoGateway;
         }
         interface ArrayOfNetIpRouteConfigInfoIpRoute {
            NetIpRouteConfigInfoIpRoute?: Array<integrityService.vim.NetIpRouteConfigInfoIpRoute>;
         }
         interface NetIpRouteConfigInfo extends integrityService.vim.DynamicData {
            ipRoute?: Array<integrityService.vim.NetIpRouteConfigInfoIpRoute>;
         }
         interface NetIpRouteConfigSpecGatewaySpec extends integrityService.vim.DynamicData {
            ipAddress?: string;
            device?: string;
         }
         interface NetIpRouteConfigSpecIpRouteSpec extends integrityService.vim.DynamicData {
            network: string;
            prefixLength: number;
            gateway: integrityService.vim.NetIpRouteConfigSpecGatewaySpec;
            operation: string;
         }
         interface ArrayOfNetIpRouteConfigSpecIpRouteSpec {
            NetIpRouteConfigSpecIpRouteSpec?: Array<integrityService.vim.NetIpRouteConfigSpecIpRouteSpec>;
         }
         interface NetIpRouteConfigSpec extends integrityService.vim.DynamicData {
            ipRoute?: Array<integrityService.vim.NetIpRouteConfigSpecIpRouteSpec>;
         }
         enum NetIpStackInfoEntryType {
            "other",
            "invalid",
            "dynamic",
            "manual",
         }
         enum NetIpStackInfoPreference {
            "reserved",
            "low",
            "medium",
            "high",
         }
         interface NetIpStackInfoNetToMedia extends integrityService.vim.DynamicData {
            ipAddress: string;
            physicalAddress: string;
            device: string;
            type: string;
         }
         interface ArrayOfNetIpStackInfoNetToMedia {
            NetIpStackInfoNetToMedia?: Array<integrityService.vim.NetIpStackInfoNetToMedia>;
         }
         interface NetIpStackInfoDefaultRouter extends integrityService.vim.DynamicData {
            ipAddress: string;
            device: string;
            lifetime: Date;
            preference: string;
         }
         interface ArrayOfNetIpStackInfoDefaultRouter {
            NetIpStackInfoDefaultRouter?: Array<integrityService.vim.NetIpStackInfoDefaultRouter>;
         }
         interface NetIpStackInfo extends integrityService.vim.DynamicData {
            neighbor?: Array<integrityService.vim.NetIpStackInfoNetToMedia>;
            defaultRouter?: Array<integrityService.vim.NetIpStackInfoDefaultRouter>;
         }
         enum NetBIOSConfigInfoMode {
            "unknown",
            "enabled",
            "disabled",
            "enabledViaDHCP",
         }
         interface NetBIOSConfigInfo extends integrityService.vim.DynamicData {
            mode: string;
         }
         interface WinNetBIOSConfigInfo extends integrityService.vim.NetBIOSConfigInfo {
            primaryWINS: string;
            secondaryWINS?: string;
         }
         enum ArrayUpdateOperation {
            "add",
            "remove",
            "edit",
         }
         interface ArrayUpdateSpec extends integrityService.vim.DynamicData {
            operation: integrityService.vim.ArrayUpdateOperation;
            removeKey?: any;
         }
         interface BoolOption extends integrityService.vim.OptionType {
            supported: boolean;
            defaultValue: boolean;
         }
         interface ChoiceOption extends integrityService.vim.OptionType {
            choiceInfo: Array<integrityService.vim.ElementDescription>;
            defaultIndex?: number;
         }
         interface FloatOption extends integrityService.vim.OptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface IntOption extends integrityService.vim.OptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface LongOption extends integrityService.vim.OptionType {
            min: number;
            max: number;
            defaultValue: number;
         }
         interface OptionDef extends integrityService.vim.ElementDescription {
            optionType: integrityService.vim.OptionType;
         }
         interface ArrayOfOptionDef {
            OptionDef?: Array<integrityService.vim.OptionDef>;
         }
         interface OptionType extends integrityService.vim.DynamicData {
            valueIsReadonly?: boolean;
         }
         interface OptionValue extends integrityService.vim.DynamicData {
            key: string;
            value?: any;
         }
         interface ArrayOfOptionValue {
            OptionValue?: Array<integrityService.vim.OptionValue>;
         }
         interface StringOption extends integrityService.vim.OptionType {
            defaultValue: string;
            validCharacters?: string;
         }
         interface ApplyProfile extends integrityService.vim.DynamicData {
            enabled: boolean;
            policy?: Array<integrityService.vim.ProfilePolicy>;
            profileTypeName?: string;
            profileVersion?: string;
            property?: Array<integrityService.vim.ProfileApplyProfileProperty>;
         }
         interface ArrayOfApplyProfile {
            ApplyProfile?: Array<integrityService.vim.ApplyProfile>;
         }
         interface ProfileApplyProfileElement extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ProfileApplyProfileProperty extends integrityService.vim.DynamicData {
            propertyName: string;
            array: boolean;
            profile?: Array<integrityService.vim.ApplyProfile>;
         }
         interface ArrayOfProfileApplyProfileProperty {
            ProfileApplyProfileProperty?: Array<integrityService.vim.ProfileApplyProfileProperty>;
         }
         interface ComplianceLocator extends integrityService.vim.DynamicData {
            expressionName: string;
            applyPath: integrityService.vim.ProfilePropertyPath;
         }
         interface ArrayOfComplianceLocator {
            ComplianceLocator?: Array<integrityService.vim.ComplianceLocator>;
         }
         interface ComplianceProfile extends integrityService.vim.DynamicData {
            expression: Array<integrityService.vim.ProfileExpression>;
            rootExpression: string;
         }
         enum ComplianceResultStatus {
            "compliant",
            "nonCompliant",
            "unknown",
         }
         interface ComplianceFailure extends integrityService.vim.DynamicData {
            failureType: string;
            message: integrityService.vim.LocalizableMessage;
            expressionName?: string;
         }
         interface ArrayOfComplianceFailure {
            ComplianceFailure?: Array<integrityService.vim.ComplianceFailure>;
         }
         interface ComplianceResult extends integrityService.vim.DynamicData {
            profile?: integrityService.vim.ManagedObjectReference;
            complianceStatus: string;
            entity?: integrityService.vim.ManagedObjectReference;
            checkTime?: Date;
            failure?: Array<integrityService.vim.ComplianceFailure>;
         }
         interface ArrayOfComplianceResult {
            ComplianceResult?: Array<integrityService.vim.ComplianceResult>;
         }
         interface ProfileDeferredPolicyOptionParameter extends integrityService.vim.DynamicData {
            inputPath: integrityService.vim.ProfilePropertyPath;
            parameter?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface ArrayOfProfileDeferredPolicyOptionParameter {
            ProfileDeferredPolicyOptionParameter?: Array<integrityService.vim.ProfileDeferredPolicyOptionParameter>;
         }
         interface ProfileExpression extends integrityService.vim.DynamicData {
            id: string;
            displayName: string;
            negated: boolean;
         }
         interface ArrayOfProfileExpression {
            ProfileExpression?: Array<integrityService.vim.ProfileExpression>;
         }
         interface ProfileSimpleExpression extends integrityService.vim.ProfileExpression {
            expressionType: string;
            parameter?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface ProfileCompositeExpression extends integrityService.vim.ProfileExpression {
            operator: string;
            expressionName: Array<string>;
         }
         interface ProfileExpressionMetadata extends integrityService.vim.DynamicData {
            expressionId: integrityService.vim.ExtendedElementDescription;
            parameter?: Array<integrityService.vim.ProfileParameterMetadata>;
         }
         interface ArrayOfProfileExpressionMetadata {
            ProfileExpressionMetadata?: Array<integrityService.vim.ProfileExpressionMetadata>;
         }
         enum ProfileNumericComparator {
            "lessThan",
            "lessThanEqual",
            "equal",
            "notEqual",
            "greaterThanEqual",
            "greaterThan",
         }
         interface ProfileParameterMetadata extends integrityService.vim.DynamicData {
            id: integrityService.vim.ExtendedElementDescription;
            type: string;
            optional: boolean;
            defaultValue?: any;
         }
         interface ArrayOfProfileParameterMetadata {
            ProfileParameterMetadata?: Array<integrityService.vim.ProfileParameterMetadata>;
         }
         interface ProfilePolicy extends integrityService.vim.DynamicData {
            id: string;
            policyOption: integrityService.vim.PolicyOption;
         }
         interface ArrayOfProfilePolicy {
            ProfilePolicy?: Array<integrityService.vim.ProfilePolicy>;
         }
         interface ProfilePolicyOptionMetadata extends integrityService.vim.DynamicData {
            id: integrityService.vim.ExtendedElementDescription;
            parameter?: Array<integrityService.vim.ProfileParameterMetadata>;
         }
         interface ArrayOfProfilePolicyOptionMetadata {
            ProfilePolicyOptionMetadata?: Array<integrityService.vim.ProfilePolicyOptionMetadata>;
         }
         interface ProfileCompositePolicyOptionMetadata extends integrityService.vim.ProfilePolicyOptionMetadata {
            option: Array<string>;
         }
         interface UserInputRequiredParameterMetadata extends integrityService.vim.ProfilePolicyOptionMetadata {
            userInputParameter?: Array<integrityService.vim.ProfileParameterMetadata>;
         }
         interface ProfilePolicyMetadata extends integrityService.vim.DynamicData {
            id: integrityService.vim.ExtendedElementDescription;
            possibleOption: Array<integrityService.vim.ProfilePolicyOptionMetadata>;
         }
         interface ArrayOfProfilePolicyMetadata {
            ProfilePolicyMetadata?: Array<integrityService.vim.ProfilePolicyMetadata>;
         }
         interface PolicyOption extends integrityService.vim.DynamicData {
            id: string;
            parameter?: Array<integrityService.vim.KeyAnyValue>;
         }
         interface ArrayOfPolicyOption {
            PolicyOption?: Array<integrityService.vim.PolicyOption>;
         }
         interface CompositePolicyOption extends integrityService.vim.PolicyOption {
            option?: Array<integrityService.vim.PolicyOption>;
         }
         interface ProfileCreateSpec extends integrityService.vim.DynamicData {
            name?: string;
            annotation?: string;
            enabled?: boolean;
         }
         interface ProfileSerializedCreateSpec extends integrityService.vim.ProfileCreateSpec {
            profileConfigString: string;
         }
         interface ProfileConfigInfo extends integrityService.vim.DynamicData {
            name: string;
            annotation?: string;
            enabled: boolean;
         }
         interface ProfileDescriptionSection extends integrityService.vim.DynamicData {
            description: integrityService.vim.ExtendedElementDescription;
            message?: Array<integrityService.vim.LocalizableMessage>;
         }
         interface ArrayOfProfileDescriptionSection {
            ProfileDescriptionSection?: Array<integrityService.vim.ProfileDescriptionSection>;
         }
         interface ProfileDescription extends integrityService.vim.DynamicData {
            section: Array<integrityService.vim.ProfileDescriptionSection>;
         }
         interface ProfileMetadataProfileSortSpec extends integrityService.vim.DynamicData {
            policyId: string;
            parameter: string;
         }
         interface ArrayOfProfileMetadataProfileSortSpec {
            ProfileMetadataProfileSortSpec?: Array<integrityService.vim.ProfileMetadataProfileSortSpec>;
         }
         interface ProfileMetadata extends integrityService.vim.DynamicData {
            key: string;
            profileTypeName?: string;
            description?: integrityService.vim.ExtendedDescription;
            sortSpec?: Array<integrityService.vim.ProfileMetadataProfileSortSpec>;
            profileCategory?: string;
            profileComponent?: string;
         }
         interface ArrayOfProfileMetadata {
            ProfileMetadata?: Array<integrityService.vim.ProfileMetadata>;
         }
         interface ProfilePropertyPath extends integrityService.vim.DynamicData {
            profilePath: string;
            policyId?: string;
            parameterId?: string;
         }
         interface ArrayOfProfilePropertyPath {
            ProfilePropertyPath?: Array<integrityService.vim.ProfilePropertyPath>;
         }
         interface ProfileProfileStructure extends integrityService.vim.DynamicData {
            profileTypeName: string;
            child?: Array<integrityService.vim.ProfileProfileStructureProperty>;
         }
         interface ProfileProfileStructureProperty extends integrityService.vim.DynamicData {
            propertyName: string;
            array: boolean;
            element: integrityService.vim.ProfileProfileStructure;
         }
         interface ArrayOfProfileProfileStructureProperty {
            ProfileProfileStructureProperty?: Array<integrityService.vim.ProfileProfileStructureProperty>;
         }
         interface ClusterProfileConfigInfo extends integrityService.vim.ProfileConfigInfo {
            complyProfile?: integrityService.vim.ComplianceProfile;
         }
         interface ClusterProfileCreateSpec extends integrityService.vim.ProfileCreateSpec {
         }
         interface ClusterProfileConfigSpec extends integrityService.vim.ClusterProfileCreateSpec {
         }
         interface ClusterProfileCompleteConfigSpec extends integrityService.vim.ClusterProfileConfigSpec {
            complyProfile?: integrityService.vim.ComplianceProfile;
         }
         enum ClusterProfileServiceType {
            "DRS",
            "HA",
            "DPM",
            "FT",
         }
         interface ClusterProfileConfigServiceCreateSpec extends integrityService.vim.ClusterProfileConfigSpec {
            serviceType?: Array<string>;
         }
         interface AnswerFile extends integrityService.vim.DynamicData {
            userInput?: Array<integrityService.vim.ProfileDeferredPolicyOptionParameter>;
            createdTime: Date;
            modifiedTime: Date;
         }
         interface AnswerFileStatusError extends integrityService.vim.DynamicData {
            userInputPath: integrityService.vim.ProfilePropertyPath;
            errMsg: integrityService.vim.LocalizableMessage;
         }
         interface ArrayOfAnswerFileStatusError {
            AnswerFileStatusError?: Array<integrityService.vim.AnswerFileStatusError>;
         }
         interface AnswerFileStatusResult extends integrityService.vim.DynamicData {
            checkedTime: Date;
            host: integrityService.vim.ManagedObjectReference;
            status: string;
            error?: Array<integrityService.vim.AnswerFileStatusError>;
         }
         interface ArrayOfAnswerFileStatusResult {
            AnswerFileStatusResult?: Array<integrityService.vim.AnswerFileStatusResult>;
         }
         enum ProfileExecuteResultStatus {
            "success",
            "needInput",
            "error",
         }
         interface ProfileExecuteError extends integrityService.vim.DynamicData {
            path?: integrityService.vim.ProfilePropertyPath;
            message: integrityService.vim.LocalizableMessage;
         }
         interface ArrayOfProfileExecuteError {
            ProfileExecuteError?: Array<integrityService.vim.ProfileExecuteError>;
         }
         interface ProfileExecuteResult extends integrityService.vim.DynamicData {
            status: string;
            configSpec?: integrityService.vim.HostConfigSpec;
            inapplicablePath?: Array<string>;
            requireInput?: Array<integrityService.vim.ProfileDeferredPolicyOptionParameter>;
            error?: Array<integrityService.vim.ProfileExecuteError>;
         }
         interface HostApplyProfile extends integrityService.vim.ApplyProfile {
            memory?: integrityService.vim.HostMemoryProfile;
            storage?: integrityService.vim.StorageProfile;
            network?: integrityService.vim.NetworkProfile;
            datetime?: integrityService.vim.DateTimeProfile;
            firewall?: integrityService.vim.FirewallProfile;
            security?: integrityService.vim.SecurityProfile;
            service?: Array<integrityService.vim.ServiceProfile>;
            option?: Array<integrityService.vim.OptionProfile>;
            userAccount?: Array<integrityService.vim.UserProfile>;
            usergroupAccount?: Array<integrityService.vim.UserGroupProfile>;
            authentication?: integrityService.vim.AuthenticationProfile;
         }
         interface PhysicalNicProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfPhysicalNicProfile {
            PhysicalNicProfile?: Array<integrityService.vim.PhysicalNicProfile>;
         }
         interface HostMemoryProfile extends integrityService.vim.ApplyProfile {
         }
         interface UserProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfUserProfile {
            UserProfile?: Array<integrityService.vim.UserProfile>;
         }
         interface UserGroupProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfUserGroupProfile {
            UserGroupProfile?: Array<integrityService.vim.UserGroupProfile>;
         }
         interface SecurityProfile extends integrityService.vim.ApplyProfile {
            permission?: Array<integrityService.vim.PermissionProfile>;
         }
         interface OptionProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfOptionProfile {
            OptionProfile?: Array<integrityService.vim.OptionProfile>;
         }
         interface DateTimeProfile extends integrityService.vim.ApplyProfile {
         }
         interface ServiceProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfServiceProfile {
            ServiceProfile?: Array<integrityService.vim.ServiceProfile>;
         }
         interface FirewallProfileRulesetProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfFirewallProfileRulesetProfile {
            FirewallProfileRulesetProfile?: Array<integrityService.vim.FirewallProfileRulesetProfile>;
         }
         interface FirewallProfile extends integrityService.vim.ApplyProfile {
            ruleset?: Array<integrityService.vim.FirewallProfileRulesetProfile>;
         }
         interface NasStorageProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfNasStorageProfile {
            NasStorageProfile?: Array<integrityService.vim.NasStorageProfile>;
         }
         interface StorageProfile extends integrityService.vim.ApplyProfile {
            nasStorage?: Array<integrityService.vim.NasStorageProfile>;
         }
         interface NetworkProfileDnsConfigProfile extends integrityService.vim.ApplyProfile {
         }
         interface NetworkProfile extends integrityService.vim.ApplyProfile {
            vswitch?: Array<integrityService.vim.VirtualSwitchProfile>;
            vmPortGroup?: Array<integrityService.vim.VmPortGroupProfile>;
            hostPortGroup?: Array<integrityService.vim.HostPortGroupProfile>;
            serviceConsolePortGroup?: Array<integrityService.vim.ServiceConsolePortGroupProfile>;
            dnsConfig?: integrityService.vim.NetworkProfileDnsConfigProfile;
            ipRouteConfig?: integrityService.vim.IpRouteProfile;
            consoleIpRouteConfig?: integrityService.vim.IpRouteProfile;
            pnic?: Array<integrityService.vim.PhysicalNicProfile>;
            dvswitch?: Array<integrityService.vim.DvsProfile>;
            dvsServiceConsoleNic?: Array<integrityService.vim.DvsServiceConsoleVNicProfile>;
            dvsHostNic?: Array<integrityService.vim.DvsHostVNicProfile>;
            netStackInstance?: Array<integrityService.vim.NetStackInstanceProfile>;
         }
         interface DvsVNicProfile extends integrityService.vim.ApplyProfile {
            key: string;
            ipConfig: integrityService.vim.IpAddressProfile;
         }
         interface DvsServiceConsoleVNicProfile extends integrityService.vim.DvsVNicProfile {
         }
         interface ArrayOfDvsServiceConsoleVNicProfile {
            DvsServiceConsoleVNicProfile?: Array<integrityService.vim.DvsServiceConsoleVNicProfile>;
         }
         interface DvsHostVNicProfile extends integrityService.vim.DvsVNicProfile {
         }
         interface ArrayOfDvsHostVNicProfile {
            DvsHostVNicProfile?: Array<integrityService.vim.DvsHostVNicProfile>;
         }
         interface DvsProfile extends integrityService.vim.ApplyProfile {
            key: string;
            name: string;
            uplink?: Array<integrityService.vim.PnicUplinkProfile>;
         }
         interface ArrayOfDvsProfile {
            DvsProfile?: Array<integrityService.vim.DvsProfile>;
         }
         interface PnicUplinkProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfPnicUplinkProfile {
            PnicUplinkProfile?: Array<integrityService.vim.PnicUplinkProfile>;
         }
         interface IpRouteProfile extends integrityService.vim.ApplyProfile {
            staticRoute?: Array<integrityService.vim.StaticRouteProfile>;
         }
         interface StaticRouteProfile extends integrityService.vim.ApplyProfile {
            key?: string;
         }
         interface ArrayOfStaticRouteProfile {
            StaticRouteProfile?: Array<integrityService.vim.StaticRouteProfile>;
         }
         interface LinkProfile extends integrityService.vim.ApplyProfile {
         }
         interface NumPortsProfile extends integrityService.vim.ApplyProfile {
         }
         interface VirtualSwitchProfile extends integrityService.vim.ApplyProfile {
            key: string;
            name: string;
            link: integrityService.vim.LinkProfile;
            numPorts: integrityService.vim.NumPortsProfile;
            networkPolicy: integrityService.vim.NetworkPolicyProfile;
         }
         interface ArrayOfVirtualSwitchProfile {
            VirtualSwitchProfile?: Array<integrityService.vim.VirtualSwitchProfile>;
         }
         interface NetStackInstanceProfile extends integrityService.vim.ApplyProfile {
            key: string;
            dnsConfig: integrityService.vim.NetworkProfileDnsConfigProfile;
            ipRouteConfig: integrityService.vim.IpRouteProfile;
         }
         interface ArrayOfNetStackInstanceProfile {
            NetStackInstanceProfile?: Array<integrityService.vim.NetStackInstanceProfile>;
         }
         interface VlanProfile extends integrityService.vim.ApplyProfile {
         }
         interface VirtualSwitchSelectionProfile extends integrityService.vim.ApplyProfile {
         }
         interface PortGroupProfile extends integrityService.vim.ApplyProfile {
            key: string;
            name: string;
            vlan: integrityService.vim.VlanProfile;
            vswitch: integrityService.vim.VirtualSwitchSelectionProfile;
            networkPolicy: integrityService.vim.NetworkPolicyProfile;
         }
         interface VmPortGroupProfile extends integrityService.vim.PortGroupProfile {
         }
         interface ArrayOfVmPortGroupProfile {
            VmPortGroupProfile?: Array<integrityService.vim.VmPortGroupProfile>;
         }
         interface HostPortGroupProfile extends integrityService.vim.PortGroupProfile {
            ipConfig: integrityService.vim.IpAddressProfile;
         }
         interface ArrayOfHostPortGroupProfile {
            HostPortGroupProfile?: Array<integrityService.vim.HostPortGroupProfile>;
         }
         interface ServiceConsolePortGroupProfile extends integrityService.vim.PortGroupProfile {
            ipConfig: integrityService.vim.IpAddressProfile;
         }
         interface ArrayOfServiceConsolePortGroupProfile {
            ServiceConsolePortGroupProfile?: Array<integrityService.vim.ServiceConsolePortGroupProfile>;
         }
         interface NetworkPolicyProfile extends integrityService.vim.ApplyProfile {
         }
         interface IpAddressProfile extends integrityService.vim.ApplyProfile {
         }
         interface AuthenticationProfile extends integrityService.vim.ApplyProfile {
            activeDirectory?: integrityService.vim.ActiveDirectoryProfile;
         }
         interface ActiveDirectoryProfile extends integrityService.vim.ApplyProfile {
         }
         interface PermissionProfile extends integrityService.vim.ApplyProfile {
            key: string;
         }
         interface ArrayOfPermissionProfile {
            PermissionProfile?: Array<integrityService.vim.PermissionProfile>;
         }
         interface HostProfileConfigInfo extends integrityService.vim.ProfileConfigInfo {
            applyProfile?: integrityService.vim.HostApplyProfile;
            defaultComplyProfile?: integrityService.vim.ComplianceProfile;
            defaultComplyLocator?: Array<integrityService.vim.ComplianceLocator>;
            customComplyProfile?: integrityService.vim.ComplianceProfile;
            disabledExpressionList?: Array<string>;
         }
         interface HostProfileConfigSpec extends integrityService.vim.ProfileCreateSpec {
         }
         interface HostProfileSerializedHostProfileSpec extends integrityService.vim.ProfileSerializedCreateSpec {
            validatorHost?: integrityService.vim.ManagedObjectReference;
         }
         interface HostProfileCompleteConfigSpec extends integrityService.vim.HostProfileConfigSpec {
            applyProfile?: integrityService.vim.HostApplyProfile;
            customComplyProfile?: integrityService.vim.ComplianceProfile;
            disabledExpressionListChanged: boolean;
            disabledExpressionList?: Array<string>;
            validatorHost?: integrityService.vim.ManagedObjectReference;
         }
         interface HostProfileHostBasedConfigSpec extends integrityService.vim.HostProfileConfigSpec {
            host: integrityService.vim.ManagedObjectReference;
            useHostProfileEngine?: boolean;
         }
         interface HostProfileManagerConfigTaskList extends integrityService.vim.DynamicData {
            configSpec?: integrityService.vim.HostConfigSpec;
            taskDescription?: Array<integrityService.vim.LocalizableMessage>;
         }
         interface AnswerFileCreateSpec extends integrityService.vim.DynamicData {
         }
         interface AnswerFileOptionsCreateSpec extends integrityService.vim.AnswerFileCreateSpec {
            userInput?: Array<integrityService.vim.ProfileDeferredPolicyOptionParameter>;
         }
         interface AnswerFileSerializedCreateSpec extends integrityService.vim.AnswerFileCreateSpec {
            answerFileConfigString: string;
         }
         enum HostProfileManagerAnswerFileStatus {
            "valid",
            "invalid",
            "unknown",
         }
         interface ScheduledTaskDetail extends integrityService.vim.TypeDescription {
            frequency: string;
         }
         interface ArrayOfScheduledTaskDetail {
            ScheduledTaskDetail?: Array<integrityService.vim.ScheduledTaskDetail>;
         }
         interface ScheduledTaskDescription extends integrityService.vim.DynamicData {
            action: Array<integrityService.vim.TypeDescription>;
            schedulerInfo: Array<integrityService.vim.ScheduledTaskDetail>;
            state: Array<integrityService.vim.ElementDescription>;
            dayOfWeek: Array<integrityService.vim.ElementDescription>;
            weekOfMonth: Array<integrityService.vim.ElementDescription>;
         }
         interface ScheduledTaskInfo extends integrityService.vim.ScheduledTaskSpec {
            scheduledTask: integrityService.vim.ManagedObjectReference;
            entity: integrityService.vim.ManagedObjectReference;
            lastModifiedTime: Date;
            lastModifiedUser: string;
            nextRunTime?: Date;
            prevRunTime?: Date;
            state: integrityService.vim.TaskInfoState;
            error?: integrityService.vim.LocalizedMethodFault;
            result?: any;
            progress?: number;
            activeTask?: integrityService.vim.ManagedObjectReference;
            taskObject?: integrityService.vim.ManagedObjectReference;
         }
         interface TaskScheduler extends integrityService.vim.DynamicData {
            activeTime?: Date;
            expireTime?: Date;
         }
         interface AfterStartupTaskScheduler extends integrityService.vim.TaskScheduler {
            minute: number;
         }
         interface OnceTaskScheduler extends integrityService.vim.TaskScheduler {
            runAt?: Date;
         }
         interface RecurrentTaskScheduler extends integrityService.vim.TaskScheduler {
            interval: number;
         }
         interface HourlyTaskScheduler extends integrityService.vim.RecurrentTaskScheduler {
            minute: number;
         }
         interface DailyTaskScheduler extends integrityService.vim.HourlyTaskScheduler {
            hour: number;
         }
         interface WeeklyTaskScheduler extends integrityService.vim.DailyTaskScheduler {
            sunday: boolean;
            monday: boolean;
            tuesday: boolean;
            wednesday: boolean;
            thursday: boolean;
            friday: boolean;
            saturday: boolean;
         }
         interface MonthlyTaskScheduler extends integrityService.vim.DailyTaskScheduler {
         }
         interface MonthlyByDayTaskScheduler extends integrityService.vim.MonthlyTaskScheduler {
            day: number;
         }
         enum DayOfWeek {
            "sunday",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
         }
         enum WeekOfMonth {
            "first",
            "second",
            "third",
            "fourth",
            "last",
         }
         interface MonthlyByWeekdayTaskScheduler extends integrityService.vim.MonthlyTaskScheduler {
            offset: integrityService.vim.WeekOfMonth;
            weekday: integrityService.vim.DayOfWeek;
         }
         interface ScheduledTaskSpec extends integrityService.vim.DynamicData {
            name: string;
            description: string;
            enabled: boolean;
            scheduler: integrityService.vim.TaskScheduler;
            action: integrityService.vim.Action;
            notification?: string;
         }
         interface ApplyStorageRecommendationResult extends integrityService.vim.DynamicData {
            vm?: integrityService.vim.ManagedObjectReference;
         }
         interface StorageDrsConfigInfo extends integrityService.vim.DynamicData {
            podConfig: integrityService.vim.StorageDrsPodConfigInfo;
            vmConfig?: Array<integrityService.vim.StorageDrsVmConfigInfo>;
         }
         interface StorageDrsConfigSpec extends integrityService.vim.DynamicData {
            podConfigSpec?: integrityService.vim.StorageDrsPodConfigSpec;
            vmConfigSpec?: Array<integrityService.vim.StorageDrsVmConfigSpec>;
         }
         interface StorageDrsVmConfigSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.StorageDrsVmConfigInfo;
         }
         interface ArrayOfStorageDrsVmConfigSpec {
            StorageDrsVmConfigSpec?: Array<integrityService.vim.StorageDrsVmConfigSpec>;
         }
         enum StorageDrsPodConfigInfoBehavior {
            "manual",
            "automated",
         }
         interface StorageDrsPodConfigInfo extends integrityService.vim.DynamicData {
            enabled: boolean;
            ioLoadBalanceEnabled: boolean;
            defaultVmBehavior: string;
            loadBalanceInterval?: number;
            defaultIntraVmAffinity?: boolean;
            spaceLoadBalanceConfig?: integrityService.vim.StorageDrsSpaceLoadBalanceConfig;
            ioLoadBalanceConfig?: integrityService.vim.StorageDrsIoLoadBalanceConfig;
            rule?: Array<integrityService.vim.ClusterRuleInfo>;
            option?: Array<integrityService.vim.OptionValue>;
         }
         interface StorageDrsSpaceLoadBalanceConfig extends integrityService.vim.DynamicData {
            spaceUtilizationThreshold?: number;
            minSpaceUtilizationDifference?: number;
         }
         interface StorageDrsIoLoadBalanceConfig extends integrityService.vim.DynamicData {
            ioLatencyThreshold?: number;
            ioLoadImbalanceThreshold?: number;
         }
         interface StorageDrsPodConfigSpec extends integrityService.vim.DynamicData {
            enabled?: boolean;
            ioLoadBalanceEnabled?: boolean;
            defaultVmBehavior?: string;
            loadBalanceInterval?: number;
            defaultIntraVmAffinity?: boolean;
            spaceLoadBalanceConfig?: integrityService.vim.StorageDrsSpaceLoadBalanceConfig;
            ioLoadBalanceConfig?: integrityService.vim.StorageDrsIoLoadBalanceConfig;
            rule?: Array<integrityService.vim.ClusterRuleSpec>;
            option?: Array<integrityService.vim.StorageDrsOptionSpec>;
         }
         interface StorageDrsOptionSpec extends integrityService.vim.ArrayUpdateSpec {
            option?: integrityService.vim.OptionValue;
         }
         interface ArrayOfStorageDrsOptionSpec {
            StorageDrsOptionSpec?: Array<integrityService.vim.StorageDrsOptionSpec>;
         }
         interface VmPodConfigForPlacement extends integrityService.vim.DynamicData {
            storagePod: integrityService.vim.ManagedObjectReference;
            disk?: Array<integrityService.vim.PodDiskLocator>;
            vmConfig?: integrityService.vim.StorageDrsVmConfigInfo;
            interVmRule?: Array<integrityService.vim.ClusterRuleInfo>;
         }
         interface ArrayOfVmPodConfigForPlacement {
            VmPodConfigForPlacement?: Array<integrityService.vim.VmPodConfigForPlacement>;
         }
         interface PodDiskLocator extends integrityService.vim.DynamicData {
            diskId: number;
            diskMoveType?: string;
            diskBackingInfo?: integrityService.vim.VirtualDeviceBackingInfo;
            profile?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface ArrayOfPodDiskLocator {
            PodDiskLocator?: Array<integrityService.vim.PodDiskLocator>;
         }
         interface StorageDrsPodSelectionSpec extends integrityService.vim.DynamicData {
            initialVmConfig?: Array<integrityService.vim.VmPodConfigForPlacement>;
            storagePod?: integrityService.vim.ManagedObjectReference;
         }
         interface StorageMigrationAction extends integrityService.vim.ClusterAction {
            vm: integrityService.vim.ManagedObjectReference;
            relocateSpec: integrityService.vim.VirtualMachineRelocateSpec;
            source: integrityService.vim.ManagedObjectReference;
            destination: integrityService.vim.ManagedObjectReference;
            sizeTransferred: number;
            spaceUtilSrcBefore?: number;
            spaceUtilDstBefore?: number;
            spaceUtilSrcAfter?: number;
            spaceUtilDstAfter?: number;
            ioLatencySrcBefore?: number;
            ioLatencyDstBefore?: number;
         }
         interface StoragePlacementAction extends integrityService.vim.ClusterAction {
            vm?: integrityService.vim.ManagedObjectReference;
            relocateSpec: integrityService.vim.VirtualMachineRelocateSpec;
            destination: integrityService.vim.ManagedObjectReference;
            spaceUtilBefore?: number;
            spaceUtilAfter?: number;
            ioLatencyBefore?: number;
         }
         interface StoragePlacementResult extends integrityService.vim.DynamicData {
            recommendations?: Array<integrityService.vim.ClusterRecommendation>;
            drsFault?: integrityService.vim.ClusterDrsFaults;
            task?: integrityService.vim.ManagedObjectReference;
         }
         enum StoragePlacementSpecPlacementType {
            "create",
            "reconfigure",
            "relocate",
            "clone",
         }
         interface StoragePlacementSpec extends integrityService.vim.DynamicData {
            type: string;
            priority?: integrityService.vim.VirtualMachineMovePriority;
            vm?: integrityService.vim.ManagedObjectReference;
            podSelectionSpec: integrityService.vim.StorageDrsPodSelectionSpec;
            cloneSpec?: integrityService.vim.VirtualMachineCloneSpec;
            cloneName?: string;
            configSpec?: integrityService.vim.VirtualMachineConfigSpec;
            relocateSpec?: integrityService.vim.VirtualMachineRelocateSpec;
            resourcePool?: integrityService.vim.ManagedObjectReference;
            host?: integrityService.vim.ManagedObjectReference;
            folder?: integrityService.vim.ManagedObjectReference;
            disallowPrerequisiteMoves?: boolean;
            resourceLeaseDurationSec?: number;
         }
         interface VirtualDiskAntiAffinityRuleSpec extends integrityService.vim.ClusterRuleInfo {
            diskId: Array<number>;
         }
         interface StorageDrsVmConfigInfo extends integrityService.vim.DynamicData {
            vm?: integrityService.vim.ManagedObjectReference;
            enabled?: boolean;
            behavior?: string;
            intraVmAffinity?: boolean;
            intraVmAntiAffinity?: integrityService.vim.VirtualDiskAntiAffinityRuleSpec;
         }
         interface ArrayOfStorageDrsVmConfigInfo {
            StorageDrsVmConfigInfo?: Array<integrityService.vim.StorageDrsVmConfigInfo>;
         }
         interface VAppCloneSpecNetworkMappingPair extends integrityService.vim.DynamicData {
            source: integrityService.vim.ManagedObjectReference;
            destination: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfVAppCloneSpecNetworkMappingPair {
            VAppCloneSpecNetworkMappingPair?: Array<integrityService.vim.VAppCloneSpecNetworkMappingPair>;
         }
         interface VAppCloneSpecResourceMap extends integrityService.vim.DynamicData {
            source: integrityService.vim.ManagedObjectReference;
            parent?: integrityService.vim.ManagedObjectReference;
            resourceSpec?: integrityService.vim.ResourceConfigSpec;
            location?: integrityService.vim.ManagedObjectReference;
         }
         interface ArrayOfVAppCloneSpecResourceMap {
            VAppCloneSpecResourceMap?: Array<integrityService.vim.VAppCloneSpecResourceMap>;
         }
         enum VAppCloneSpecProvisioningType {
            "sameAsSource",
            "thin",
            "thick",
         }
         interface VAppCloneSpec extends integrityService.vim.DynamicData {
            location: integrityService.vim.ManagedObjectReference;
            host?: integrityService.vim.ManagedObjectReference;
            resourceSpec?: integrityService.vim.ResourceConfigSpec;
            vmFolder?: integrityService.vim.ManagedObjectReference;
            networkMapping?: Array<integrityService.vim.VAppCloneSpecNetworkMappingPair>;
            property?: Array<integrityService.vim.KeyValue>;
            resourceMapping?: Array<integrityService.vim.VAppCloneSpecResourceMap>;
            provisioning?: string;
         }
         enum VAppAutoStartAction {
            "none",
            "powerOn",
            "powerOff",
            "guestShutdown",
            "suspend",
         }
         interface VAppEntityConfigInfo extends integrityService.vim.DynamicData {
            key?: integrityService.vim.ManagedObjectReference;
            tag?: string;
            startOrder?: number;
            startDelay?: number;
            waitingForGuest?: boolean;
            startAction?: string;
            stopDelay?: number;
            stopAction?: string;
            destroyWithParent?: boolean;
         }
         interface ArrayOfVAppEntityConfigInfo {
            VAppEntityConfigInfo?: Array<integrityService.vim.VAppEntityConfigInfo>;
         }
         enum VAppIPAssignmentInfoIpAllocationPolicy {
            "dhcpPolicy",
            "transientPolicy",
            "fixedPolicy",
            "fixedAllocatedPolicy",
         }
         enum VAppIPAssignmentInfoAllocationSchemes {
            "dhcp",
            "ovfenv",
         }
         enum VAppIPAssignmentInfoProtocols {
            "IPv4",
            "IPv6",
         }
         interface VAppIPAssignmentInfo extends integrityService.vim.DynamicData {
            supportedAllocationScheme?: Array<string>;
            ipAllocationPolicy?: string;
            supportedIpProtocol?: Array<string>;
            ipProtocol?: string;
         }
         interface IpPoolIpPoolConfigInfo extends integrityService.vim.DynamicData {
            subnetAddress?: string;
            netmask?: string;
            gateway?: string;
            range?: string;
            dns?: Array<string>;
            dhcpServerAvailable?: boolean;
            ipPoolEnabled?: boolean;
         }
         interface IpPoolAssociation extends integrityService.vim.DynamicData {
            network?: integrityService.vim.ManagedObjectReference;
            networkName: string;
         }
         interface ArrayOfIpPoolAssociation {
            IpPoolAssociation?: Array<integrityService.vim.IpPoolAssociation>;
         }
         interface IpPool extends integrityService.vim.DynamicData {
            id?: number;
            name?: string;
            ipv4Config?: integrityService.vim.IpPoolIpPoolConfigInfo;
            ipv6Config?: integrityService.vim.IpPoolIpPoolConfigInfo;
            dnsDomain?: string;
            dnsSearchPath?: string;
            hostPrefix?: string;
            httpProxy?: string;
            networkAssociation?: Array<integrityService.vim.IpPoolAssociation>;
            availableIpv4Addresses?: number;
            availableIpv6Addresses?: number;
            allocatedIpv4Addresses?: number;
            allocatedIpv6Addresses?: number;
         }
         interface ArrayOfIpPool {
            IpPool?: Array<integrityService.vim.IpPool>;
         }
         interface VAppOvfSectionInfo extends integrityService.vim.DynamicData {
            key?: number;
            namespace?: string;
            type?: string;
            atEnvelopeLevel?: boolean;
            contents?: string;
         }
         interface ArrayOfVAppOvfSectionInfo {
            VAppOvfSectionInfo?: Array<integrityService.vim.VAppOvfSectionInfo>;
         }
         interface VAppProductInfo extends integrityService.vim.DynamicData {
            key: number;
            classId?: string;
            instanceId?: string;
            name?: string;
            vendor?: string;
            version?: string;
            fullVersion?: string;
            vendorUrl?: string;
            productUrl?: string;
            appUrl?: string;
         }
         interface ArrayOfVAppProductInfo {
            VAppProductInfo?: Array<integrityService.vim.VAppProductInfo>;
         }
         interface VAppPropertyInfo extends integrityService.vim.DynamicData {
            key: number;
            classId?: string;
            instanceId?: string;
            id?: string;
            category?: string;
            label?: string;
            type?: string;
            typeReference?: string;
            userConfigurable?: boolean;
            defaultValue?: string;
            value?: string;
            description?: string;
         }
         interface ArrayOfVAppPropertyInfo {
            VAppPropertyInfo?: Array<integrityService.vim.VAppPropertyInfo>;
         }
         interface VAppConfigInfo extends integrityService.vim.VmConfigInfo {
            entityConfig?: Array<integrityService.vim.VAppEntityConfigInfo>;
            annotation: string;
            instanceUuid?: string;
            managedBy?: integrityService.vim.ManagedByInfo;
         }
         interface VAppConfigSpec extends integrityService.vim.VmConfigSpec {
            entityConfig?: Array<integrityService.vim.VAppEntityConfigInfo>;
            annotation?: string;
            instanceUuid?: string;
            managedBy?: integrityService.vim.ManagedByInfo;
         }
         interface VirtualAppImportSpec extends integrityService.vim.ImportSpec {
            name: string;
            vAppConfigSpec: integrityService.vim.VAppConfigSpec;
            resourcePoolSpec: integrityService.vim.ResourceConfigSpec;
            child?: Array<integrityService.vim.ImportSpec>;
         }
         interface VmConfigInfo extends integrityService.vim.DynamicData {
            product?: Array<integrityService.vim.VAppProductInfo>;
            property?: Array<integrityService.vim.VAppPropertyInfo>;
            ipAssignment: integrityService.vim.VAppIPAssignmentInfo;
            eula?: Array<string>;
            ovfSection?: Array<integrityService.vim.VAppOvfSectionInfo>;
            ovfEnvironmentTransport?: Array<string>;
            installBootRequired: boolean;
            installBootStopDelay: number;
         }
         interface VmConfigSpec extends integrityService.vim.DynamicData {
            product?: Array<integrityService.vim.VAppProductSpec>;
            property?: Array<integrityService.vim.VAppPropertySpec>;
            ipAssignment?: integrityService.vim.VAppIPAssignmentInfo;
            eula?: Array<string>;
            ovfSection?: Array<integrityService.vim.VAppOvfSectionSpec>;
            ovfEnvironmentTransport?: Array<string>;
            installBootRequired?: boolean;
            installBootStopDelay?: number;
         }
         interface VAppProductSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.VAppProductInfo;
         }
         interface ArrayOfVAppProductSpec {
            VAppProductSpec?: Array<integrityService.vim.VAppProductSpec>;
         }
         interface VAppPropertySpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.VAppPropertyInfo;
         }
         interface ArrayOfVAppPropertySpec {
            VAppPropertySpec?: Array<integrityService.vim.VAppPropertySpec>;
         }
         interface VAppOvfSectionSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.VAppOvfSectionInfo;
         }
         interface ArrayOfVAppOvfSectionSpec {
            VAppOvfSectionSpec?: Array<integrityService.vim.VAppOvfSectionSpec>;
         }
         interface VirtualMachineAffinityInfo extends integrityService.vim.DynamicData {
            affinitySet?: Array<number>;
         }
         interface VirtualMachineBootOptionsBootableDevice extends integrityService.vim.DynamicData {
         }
         interface ArrayOfVirtualMachineBootOptionsBootableDevice {
            VirtualMachineBootOptionsBootableDevice?: Array<integrityService.vim.VirtualMachineBootOptionsBootableDevice>;
         }
         interface VirtualMachineBootOptionsBootableDiskDevice extends integrityService.vim.VirtualMachineBootOptionsBootableDevice {
            deviceKey: number;
         }
         interface VirtualMachineBootOptionsBootableEthernetDevice extends integrityService.vim.VirtualMachineBootOptionsBootableDevice {
            deviceKey: number;
         }
         interface VirtualMachineBootOptionsBootableFloppyDevice extends integrityService.vim.VirtualMachineBootOptionsBootableDevice {
         }
         interface VirtualMachineBootOptionsBootableCdromDevice extends integrityService.vim.VirtualMachineBootOptionsBootableDevice {
         }
         interface VirtualMachineBootOptions extends integrityService.vim.DynamicData {
            bootDelay?: number;
            enterBIOSSetup?: boolean;
            bootRetryEnabled?: boolean;
            bootRetryDelay?: number;
            bootOrder?: Array<integrityService.vim.VirtualMachineBootOptionsBootableDevice>;
         }
         interface VirtualMachineCapability extends integrityService.vim.DynamicData {
            snapshotOperationsSupported: boolean;
            multipleSnapshotsSupported: boolean;
            snapshotConfigSupported: boolean;
            poweredOffSnapshotsSupported: boolean;
            memorySnapshotsSupported: boolean;
            revertToSnapshotSupported: boolean;
            quiescedSnapshotsSupported: boolean;
            disableSnapshotsSupported?: boolean;
            lockSnapshotsSupported?: boolean;
            consolePreferencesSupported: boolean;
            cpuFeatureMaskSupported: boolean;
            s1AcpiManagementSupported: boolean;
            settingScreenResolutionSupported: boolean;
            toolsAutoUpdateSupported: boolean;
            vmNpivWwnSupported?: boolean;
            npivWwnOnNonRdmVmSupported?: boolean;
            vmNpivWwnDisableSupported?: boolean;
            vmNpivWwnUpdateSupported?: boolean;
            swapPlacementSupported?: boolean;
            toolsSyncTimeSupported?: boolean;
            virtualMmuUsageSupported?: boolean;
            diskSharesSupported?: boolean;
            bootOptionsSupported?: boolean;
            bootRetryOptionsSupported?: boolean;
            settingVideoRamSizeSupported?: boolean;
            settingDisplayTopologySupported?: boolean;
            recordReplaySupported?: boolean;
            changeTrackingSupported?: boolean;
            multipleCoresPerSocketSupported?: boolean;
            hostBasedReplicationSupported?: boolean;
            guestAutoLockSupported?: boolean;
            memoryReservationLockSupported?: boolean;
            featureRequirementSupported?: boolean;
            poweredOnMonitorTypeChangeSupported?: boolean;
            seSparseDiskSupported?: boolean;
            nestedHVSupported?: boolean;
            vPMCSupported?: boolean;
         }
         interface VirtualMachineCdromInfo extends integrityService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineCdromInfo {
            VirtualMachineCdromInfo?: Array<integrityService.vim.VirtualMachineCdromInfo>;
         }
         interface VirtualMachineCloneSpec extends integrityService.vim.DynamicData {
            location: integrityService.vim.VirtualMachineRelocateSpec;
            template: boolean;
            config?: integrityService.vim.VirtualMachineConfigSpec;
            customization?: integrityService.vim.CustomizationSpec;
            powerOn: boolean;
            snapshot?: integrityService.vim.ManagedObjectReference;
            memory?: boolean;
         }
         enum VirtualMachineConfigInfoNpivWwnType {
            "vc",
            "host",
            "external",
         }
         enum VirtualMachineConfigInfoSwapPlacementType {
            "inherit",
            "vmDirectory",
            "hostLocal",
         }
         interface VirtualMachineConfigInfoDatastoreUrlPair extends integrityService.vim.DynamicData {
            name: string;
            url: string;
         }
         interface ArrayOfVirtualMachineConfigInfoDatastoreUrlPair {
            VirtualMachineConfigInfoDatastoreUrlPair?: Array<integrityService.vim.VirtualMachineConfigInfoDatastoreUrlPair>;
         }
         interface VirtualMachineConfigInfoOverheadInfo extends integrityService.vim.DynamicData {
            initialMemoryReservation?: number;
            initialSwapReservation?: number;
         }
         interface VirtualMachineConfigInfo extends integrityService.vim.DynamicData {
            changeVersion: string;
            modified: Date;
            name: string;
            guestFullName: string;
            version: string;
            uuid: string;
            instanceUuid?: string;
            npivNodeWorldWideName?: Array<number>;
            npivPortWorldWideName?: Array<number>;
            npivWorldWideNameType?: string;
            npivDesiredNodeWwns?: number;
            npivDesiredPortWwns?: number;
            npivTemporaryDisabled?: boolean;
            npivOnNonRdmDisks?: boolean;
            locationId?: string;
            template: boolean;
            guestId: string;
            alternateGuestName?: string;
            annotation?: string;
            files: integrityService.vim.VirtualMachineFileInfo;
            tools?: integrityService.vim.ToolsConfigInfo;
            flags: integrityService.vim.VirtualMachineFlagInfo;
            consolePreferences?: integrityService.vim.VirtualMachineConsolePreferences;
            defaultPowerOps: integrityService.vim.VirtualMachineDefaultPowerOpInfo;
            hardware: integrityService.vim.VirtualHardware;
            cpuAllocation?: integrityService.vim.ResourceAllocationInfo;
            memoryAllocation?: integrityService.vim.ResourceAllocationInfo;
            latencySensitivity?: integrityService.vim.LatencySensitivity;
            memoryHotAddEnabled?: boolean;
            cpuHotAddEnabled?: boolean;
            cpuHotRemoveEnabled?: boolean;
            hotPlugMemoryLimit?: number;
            hotPlugMemoryIncrementSize?: number;
            cpuAffinity?: integrityService.vim.VirtualMachineAffinityInfo;
            memoryAffinity?: integrityService.vim.VirtualMachineAffinityInfo;
            networkShaper?: integrityService.vim.VirtualMachineNetworkShaperInfo;
            extraConfig?: Array<integrityService.vim.OptionValue>;
            cpuFeatureMask?: Array<integrityService.vim.HostCpuIdInfo>;
            datastoreUrl?: Array<integrityService.vim.VirtualMachineConfigInfoDatastoreUrlPair>;
            swapPlacement?: string;
            bootOptions?: integrityService.vim.VirtualMachineBootOptions;
            ftInfo?: integrityService.vim.FaultToleranceConfigInfo;
            vAppConfig?: integrityService.vim.VmConfigInfo;
            vAssertsEnabled?: boolean;
            changeTrackingEnabled?: boolean;
            firmware?: string;
            maxMksConnections?: number;
            guestAutoLockEnabled?: boolean;
            managedBy?: integrityService.vim.ManagedByInfo;
            memoryReservationLockedToMax?: boolean;
            initialOverhead?: integrityService.vim.VirtualMachineConfigInfoOverheadInfo;
            nestedHVEnabled?: boolean;
            vPMCEnabled?: boolean;
            scheduledHardwareUpgradeInfo?: integrityService.vim.ScheduledHardwareUpgradeInfo;
            vFlashCacheReservation?: number;
         }
         interface VirtualMachineConfigOption extends integrityService.vim.DynamicData {
            version: string;
            description: string;
            guestOSDescriptor: Array<integrityService.vim.GuestOsDescriptor>;
            guestOSDefaultIndex: number;
            hardwareOptions: integrityService.vim.VirtualHardwareOption;
            capabilities: integrityService.vim.VirtualMachineCapability;
            datastore: integrityService.vim.DatastoreOption;
            defaultDevice?: Array<integrityService.vim.VirtualDevice>;
            supportedMonitorType?: Array<string>;
            supportedOvfEnvironmentTransport?: Array<string>;
            supportedOvfInstallTransport?: Array<string>;
         }
         interface VirtualMachineConfigOptionDescriptor extends integrityService.vim.DynamicData {
            key: string;
            description?: string;
            host?: Array<integrityService.vim.ManagedObjectReference>;
            createSupported?: boolean;
            defaultConfigOption?: boolean;
            runSupported?: boolean;
            upgradeSupported?: boolean;
         }
         interface ArrayOfVirtualMachineConfigOptionDescriptor {
            VirtualMachineConfigOptionDescriptor?: Array<integrityService.vim.VirtualMachineConfigOptionDescriptor>;
         }
         enum VirtualMachineConfigSpecNpivWwnOp {
            "generate",
            "set",
            "remove",
            "extend",
         }
         interface VirtualMachineCpuIdInfoSpec extends integrityService.vim.ArrayUpdateSpec {
            info?: integrityService.vim.HostCpuIdInfo;
         }
         interface ArrayOfVirtualMachineCpuIdInfoSpec {
            VirtualMachineCpuIdInfoSpec?: Array<integrityService.vim.VirtualMachineCpuIdInfoSpec>;
         }
         interface VirtualMachineConfigSpec extends integrityService.vim.DynamicData {
            changeVersion?: string;
            name?: string;
            version?: string;
            uuid?: string;
            instanceUuid?: string;
            npivNodeWorldWideName?: Array<number>;
            npivPortWorldWideName?: Array<number>;
            npivWorldWideNameType?: string;
            npivDesiredNodeWwns?: number;
            npivDesiredPortWwns?: number;
            npivTemporaryDisabled?: boolean;
            npivOnNonRdmDisks?: boolean;
            npivWorldWideNameOp?: string;
            locationId?: string;
            guestId?: string;
            alternateGuestName?: string;
            annotation?: string;
            files?: integrityService.vim.VirtualMachineFileInfo;
            tools?: integrityService.vim.ToolsConfigInfo;
            flags?: integrityService.vim.VirtualMachineFlagInfo;
            consolePreferences?: integrityService.vim.VirtualMachineConsolePreferences;
            powerOpInfo?: integrityService.vim.VirtualMachineDefaultPowerOpInfo;
            numCPUs?: number;
            numCoresPerSocket?: number;
            memoryMB?: number;
            memoryHotAddEnabled?: boolean;
            cpuHotAddEnabled?: boolean;
            cpuHotRemoveEnabled?: boolean;
            virtualICH7MPresent?: boolean;
            virtualSMCPresent?: boolean;
            deviceChange?: Array<integrityService.vim.VirtualDeviceConfigSpec>;
            cpuAllocation?: integrityService.vim.ResourceAllocationInfo;
            memoryAllocation?: integrityService.vim.ResourceAllocationInfo;
            latencySensitivity?: integrityService.vim.LatencySensitivity;
            cpuAffinity?: integrityService.vim.VirtualMachineAffinityInfo;
            memoryAffinity?: integrityService.vim.VirtualMachineAffinityInfo;
            networkShaper?: integrityService.vim.VirtualMachineNetworkShaperInfo;
            cpuFeatureMask?: Array<integrityService.vim.VirtualMachineCpuIdInfoSpec>;
            extraConfig?: Array<integrityService.vim.OptionValue>;
            swapPlacement?: string;
            bootOptions?: integrityService.vim.VirtualMachineBootOptions;
            vAppConfig?: integrityService.vim.VmConfigSpec;
            ftInfo?: integrityService.vim.FaultToleranceConfigInfo;
            vAppConfigRemoved?: boolean;
            vAssertsEnabled?: boolean;
            changeTrackingEnabled?: boolean;
            firmware?: string;
            maxMksConnections?: number;
            guestAutoLockEnabled?: boolean;
            managedBy?: integrityService.vim.ManagedByInfo;
            memoryReservationLockedToMax?: boolean;
            nestedHVEnabled?: boolean;
            vPMCEnabled?: boolean;
            scheduledHardwareUpgradeInfo?: integrityService.vim.ScheduledHardwareUpgradeInfo;
            vmProfile?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface ConfigTarget extends integrityService.vim.DynamicData {
            numCpus: number;
            numCpuCores: number;
            numNumaNodes: number;
            smcPresent?: boolean;
            datastore?: Array<integrityService.vim.VirtualMachineDatastoreInfo>;
            network?: Array<integrityService.vim.VirtualMachineNetworkInfo>;
            opaqueNetwork?: Array<integrityService.vim.OpaqueNetworkTargetInfo>;
            distributedVirtualPortgroup?: Array<integrityService.vim.DistributedVirtualPortgroupInfo>;
            distributedVirtualSwitch?: Array<integrityService.vim.DistributedVirtualSwitchInfo>;
            cdRom?: Array<integrityService.vim.VirtualMachineCdromInfo>;
            serial?: Array<integrityService.vim.VirtualMachineSerialInfo>;
            parallel?: Array<integrityService.vim.VirtualMachineParallelInfo>;
            sound?: Array<integrityService.vim.VirtualMachineSoundInfo>;
            usb?: Array<integrityService.vim.VirtualMachineUsbInfo>;
            floppy?: Array<integrityService.vim.VirtualMachineFloppyInfo>;
            legacyNetworkInfo?: Array<integrityService.vim.VirtualMachineLegacyNetworkSwitchInfo>;
            scsiPassthrough?: Array<integrityService.vim.VirtualMachineScsiPassthroughInfo>;
            scsiDisk?: Array<integrityService.vim.VirtualMachineScsiDiskDeviceInfo>;
            ideDisk?: Array<integrityService.vim.VirtualMachineIdeDiskDeviceInfo>;
            maxMemMBOptimalPerf: number;
            resourcePool?: integrityService.vim.ResourcePoolRuntimeInfo;
            autoVmotion?: boolean;
            pciPassthrough?: Array<integrityService.vim.VirtualMachinePciPassthroughInfo>;
            sriov?: Array<integrityService.vim.VirtualMachineSriovInfo>;
            vFlashModule?: Array<integrityService.vim.VirtualMachineVFlashModuleInfo>;
         }
         interface VirtualMachineConsolePreferences extends integrityService.vim.DynamicData {
            powerOnWhenOpened?: boolean;
            enterFullScreenOnPowerOn?: boolean;
            closeOnPowerOffOrSuspend?: boolean;
         }
         interface VirtualMachineDatastoreInfo extends integrityService.vim.VirtualMachineTargetInfo {
            datastore: integrityService.vim.DatastoreSummary;
            capability: integrityService.vim.DatastoreCapability;
            maxFileSize: number;
            maxVirtualDiskCapacity?: number;
            mode: string;
            vStorageSupport?: string;
         }
         interface ArrayOfVirtualMachineDatastoreInfo {
            VirtualMachineDatastoreInfo?: Array<integrityService.vim.VirtualMachineDatastoreInfo>;
         }
         interface VirtualMachineDatastoreVolumeOption extends integrityService.vim.DynamicData {
            fileSystemType: string;
            majorVersion?: number;
         }
         interface ArrayOfVirtualMachineDatastoreVolumeOption {
            VirtualMachineDatastoreVolumeOption?: Array<integrityService.vim.VirtualMachineDatastoreVolumeOption>;
         }
         interface DatastoreOption extends integrityService.vim.DynamicData {
            unsupportedVolumes?: Array<integrityService.vim.VirtualMachineDatastoreVolumeOption>;
         }
         enum VirtualMachinePowerOpType {
            "soft",
            "hard",
            "preset",
         }
         enum VirtualMachineStandbyActionType {
            "checkpoint",
            "powerOnSuspend",
         }
         interface VirtualMachineDefaultPowerOpInfo extends integrityService.vim.DynamicData {
            powerOffType?: string;
            suspendType?: string;
            resetType?: string;
            defaultPowerOffType?: string;
            defaultSuspendType?: string;
            defaultResetType?: string;
            standbyAction?: string;
         }
         interface VirtualMachineDefinedProfileSpec extends integrityService.vim.VirtualMachineProfileSpec {
            profileId: string;
            profileData?: integrityService.vim.VirtualMachineProfileRawData;
         }
         interface VirtualMachineDeviceRuntimeInfoDeviceRuntimeState extends integrityService.vim.DynamicData {
         }
         enum VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm {
            "vmNptIncompatibleGuest",
            "vmNptIncompatibleGuestDriver",
            "vmNptIncompatibleAdapterType",
            "vmNptDisabledOrDisconnectedAdapter",
            "vmNptIncompatibleAdapterFeatures",
            "vmNptIncompatibleBackingType",
            "vmNptInsufficientMemoryReservation",
            "vmNptFaultToleranceOrRecordReplayConfigured",
            "vmNptConflictingIOChainConfigured",
            "vmNptMonitorBlocks",
            "vmNptConflictingOperationInProgress",
            "vmNptRuntimeError",
            "vmNptOutOfIntrVector",
            "vmNptVMCIActive",
         }
         enum VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther {
            "vmNptIncompatibleHost",
            "vmNptIncompatibleNetwork",
         }
         interface VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState extends integrityService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState {
            vmDirectPathGen2Active: boolean;
            vmDirectPathGen2InactiveReasonVm?: Array<string>;
            vmDirectPathGen2InactiveReasonOther?: Array<string>;
            vmDirectPathGen2InactiveReasonExtended?: string;
            reservationStatus?: string;
         }
         interface VirtualMachineDeviceRuntimeInfo extends integrityService.vim.DynamicData {
            runtimeState: integrityService.vim.VirtualMachineDeviceRuntimeInfoDeviceRuntimeState;
            key: number;
         }
         interface ArrayOfVirtualMachineDeviceRuntimeInfo {
            VirtualMachineDeviceRuntimeInfo?: Array<integrityService.vim.VirtualMachineDeviceRuntimeInfo>;
         }
         interface VirtualMachineDiskDeviceInfo extends integrityService.vim.VirtualMachineTargetInfo {
            capacity?: number;
            vm?: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface VirtualMachineEmptyProfileSpec extends integrityService.vim.VirtualMachineProfileSpec {
         }
         interface FaultToleranceConfigInfo extends integrityService.vim.DynamicData {
            role: number;
            instanceUuids: Array<string>;
            configPaths: Array<string>;
         }
         interface FaultTolerancePrimaryConfigInfo extends integrityService.vim.FaultToleranceConfigInfo {
            secondaries: Array<integrityService.vim.ManagedObjectReference>;
         }
         interface FaultToleranceSecondaryConfigInfo extends integrityService.vim.FaultToleranceConfigInfo {
            primaryVM: integrityService.vim.ManagedObjectReference;
         }
         interface FaultToleranceSecondaryOpResult extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            powerOnAttempted: boolean;
            powerOnResult?: integrityService.vim.ClusterPowerOnVmResult;
         }
         interface VirtualMachineFeatureRequirement extends integrityService.vim.DynamicData {
            key: string;
            featureName: string;
            value: string;
         }
         interface ArrayOfVirtualMachineFeatureRequirement {
            VirtualMachineFeatureRequirement?: Array<integrityService.vim.VirtualMachineFeatureRequirement>;
         }
         interface VirtualMachineFileInfo extends integrityService.vim.DynamicData {
            vmPathName?: string;
            snapshotDirectory?: string;
            suspendDirectory?: string;
            logDirectory?: string;
         }
         interface VirtualMachineFileLayoutDiskLayout extends integrityService.vim.DynamicData {
            key: number;
            diskFile: Array<string>;
         }
         interface ArrayOfVirtualMachineFileLayoutDiskLayout {
            VirtualMachineFileLayoutDiskLayout?: Array<integrityService.vim.VirtualMachineFileLayoutDiskLayout>;
         }
         interface VirtualMachineFileLayoutSnapshotLayout extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            snapshotFile: Array<string>;
         }
         interface ArrayOfVirtualMachineFileLayoutSnapshotLayout {
            VirtualMachineFileLayoutSnapshotLayout?: Array<integrityService.vim.VirtualMachineFileLayoutSnapshotLayout>;
         }
         interface VirtualMachineFileLayout extends integrityService.vim.DynamicData {
            configFile?: Array<string>;
            logFile?: Array<string>;
            disk?: Array<integrityService.vim.VirtualMachineFileLayoutDiskLayout>;
            snapshot?: Array<integrityService.vim.VirtualMachineFileLayoutSnapshotLayout>;
            swapFile?: string;
         }
         enum VirtualMachineFileLayoutExFileType {
            "config",
            "extendedConfig",
            "diskDescriptor",
            "diskExtent",
            "digestDescriptor",
            "digestExtent",
            "diskReplicationState",
            "log",
            "stat",
            "namespaceData",
            "nvram",
            "snapshotData",
            "snapshotList",
            "snapshotManifestList",
            "suspend",
            "swap",
            "uwswap",
            "core",
            "screenshot",
         }
         interface VirtualMachineFileLayoutExFileInfo extends integrityService.vim.DynamicData {
            key: number;
            name: string;
            type: string;
            size: number;
            uniqueSize?: number;
         }
         interface ArrayOfVirtualMachineFileLayoutExFileInfo {
            VirtualMachineFileLayoutExFileInfo?: Array<integrityService.vim.VirtualMachineFileLayoutExFileInfo>;
         }
         interface VirtualMachineFileLayoutExDiskUnit extends integrityService.vim.DynamicData {
            fileKey: Array<number>;
         }
         interface ArrayOfVirtualMachineFileLayoutExDiskUnit {
            VirtualMachineFileLayoutExDiskUnit?: Array<integrityService.vim.VirtualMachineFileLayoutExDiskUnit>;
         }
         interface VirtualMachineFileLayoutExDiskLayout extends integrityService.vim.DynamicData {
            key: number;
            chain?: Array<integrityService.vim.VirtualMachineFileLayoutExDiskUnit>;
         }
         interface ArrayOfVirtualMachineFileLayoutExDiskLayout {
            VirtualMachineFileLayoutExDiskLayout?: Array<integrityService.vim.VirtualMachineFileLayoutExDiskLayout>;
         }
         interface VirtualMachineFileLayoutExSnapshotLayout extends integrityService.vim.DynamicData {
            key: integrityService.vim.ManagedObjectReference;
            dataKey: number;
            disk?: Array<integrityService.vim.VirtualMachineFileLayoutExDiskLayout>;
         }
         interface ArrayOfVirtualMachineFileLayoutExSnapshotLayout {
            VirtualMachineFileLayoutExSnapshotLayout?: Array<integrityService.vim.VirtualMachineFileLayoutExSnapshotLayout>;
         }
         interface VirtualMachineFileLayoutEx extends integrityService.vim.DynamicData {
            file?: Array<integrityService.vim.VirtualMachineFileLayoutExFileInfo>;
            disk?: Array<integrityService.vim.VirtualMachineFileLayoutExDiskLayout>;
            snapshot?: Array<integrityService.vim.VirtualMachineFileLayoutExSnapshotLayout>;
            timestamp: Date;
         }
         enum VirtualMachineHtSharing {
            "any",
            "none",
            "internal",
         }
         enum VirtualMachinePowerOffBehavior {
            "powerOff",
            "revert",
            "prompt",
         }
         enum VirtualMachineFlagInfoMonitorType {
            "release",
            "debug",
            "stats",
         }
         enum VirtualMachineFlagInfoVirtualMmuUsage {
            "automatic",
            "on",
            "off",
         }
         enum VirtualMachineFlagInfoVirtualExecUsage {
            "hvAuto",
            "hvOn",
            "hvOff",
         }
         interface VirtualMachineFlagInfo extends integrityService.vim.DynamicData {
            disableAcceleration?: boolean;
            enableLogging?: boolean;
            useToe?: boolean;
            runWithDebugInfo?: boolean;
            monitorType?: string;
            htSharing?: string;
            snapshotDisabled?: boolean;
            snapshotLocked?: boolean;
            diskUuidEnabled?: boolean;
            virtualMmuUsage?: string;
            virtualExecUsage?: string;
            snapshotPowerOffBehavior?: string;
            recordReplayEnabled?: boolean;
         }
         interface VirtualMachineFloppyInfo extends integrityService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineFloppyInfo {
            VirtualMachineFloppyInfo?: Array<integrityService.vim.VirtualMachineFloppyInfo>;
         }
         enum VirtualMachineToolsStatus {
            "toolsNotInstalled",
            "toolsNotRunning",
            "toolsOld",
            "toolsOk",
         }
         enum VirtualMachineToolsVersionStatus {
            "guestToolsNotInstalled",
            "guestToolsNeedUpgrade",
            "guestToolsCurrent",
            "guestToolsUnmanaged",
            "guestToolsTooOld",
            "guestToolsSupportedOld",
            "guestToolsSupportedNew",
            "guestToolsTooNew",
            "guestToolsBlacklisted",
         }
         enum VirtualMachineToolsRunningStatus {
            "guestToolsNotRunning",
            "guestToolsRunning",
            "guestToolsExecutingScripts",
         }
         interface GuestDiskInfo extends integrityService.vim.DynamicData {
            diskPath?: string;
            capacity?: number;
            freeSpace?: number;
         }
         interface ArrayOfGuestDiskInfo {
            GuestDiskInfo?: Array<integrityService.vim.GuestDiskInfo>;
         }
         interface GuestNicInfo extends integrityService.vim.DynamicData {
            network?: string;
            ipAddress?: Array<string>;
            macAddress?: string;
            connected: boolean;
            deviceConfigId: number;
            dnsConfig?: integrityService.vim.NetDnsConfigInfo;
            ipConfig?: integrityService.vim.NetIpConfigInfo;
            netBIOSConfig?: integrityService.vim.NetBIOSConfigInfo;
         }
         interface ArrayOfGuestNicInfo {
            GuestNicInfo?: Array<integrityService.vim.GuestNicInfo>;
         }
         interface GuestStackInfo extends integrityService.vim.DynamicData {
            dnsConfig?: integrityService.vim.NetDnsConfigInfo;
            ipRouteConfig?: integrityService.vim.NetIpRouteConfigInfo;
            ipStackConfig?: Array<integrityService.vim.KeyValue>;
            dhcpConfig?: integrityService.vim.NetDhcpConfigInfo;
         }
         interface ArrayOfGuestStackInfo {
            GuestStackInfo?: Array<integrityService.vim.GuestStackInfo>;
         }
         interface GuestScreenInfo extends integrityService.vim.DynamicData {
            width: number;
            height: number;
         }
         enum VirtualMachineGuestState {
            "running",
            "shuttingDown",
            "resetting",
            "standby",
            "notRunning",
            "unknown",
         }
         enum GuestInfoAppStateType {
            "none",
            "appStateOk",
            "appStateNeedReset",
         }
         interface GuestInfoNamespaceGenerationInfo extends integrityService.vim.DynamicData {
            key: string;
            generationNo: number;
         }
         interface ArrayOfGuestInfoNamespaceGenerationInfo {
            GuestInfoNamespaceGenerationInfo?: Array<integrityService.vim.GuestInfoNamespaceGenerationInfo>;
         }
         interface GuestInfo extends integrityService.vim.DynamicData {
            toolsStatus?: integrityService.vim.VirtualMachineToolsStatus;
            toolsVersionStatus?: string;
            toolsVersionStatus2?: string;
            toolsRunningStatus?: string;
            toolsVersion?: string;
            guestId?: string;
            guestFamily?: string;
            guestFullName?: string;
            hostName?: string;
            ipAddress?: string;
            net?: Array<integrityService.vim.GuestNicInfo>;
            ipStack?: Array<integrityService.vim.GuestStackInfo>;
            disk?: Array<integrityService.vim.GuestDiskInfo>;
            screen?: integrityService.vim.GuestScreenInfo;
            guestState: string;
            appHeartbeatStatus?: string;
            appState?: string;
            guestOperationsReady?: boolean;
            interactiveGuestOperationsReady?: boolean;
            generationInfo?: Array<integrityService.vim.GuestInfoNamespaceGenerationInfo>;
         }
         enum VirtualMachineGuestOsFamily {
            "windowsGuest",
            "linuxGuest",
            "netwareGuest",
            "solarisGuest",
            "darwinGuestFamily",
            "otherGuestFamily",
         }
         enum VirtualMachineGuestOsIdentifier {
            "dosGuest",
            "win31Guest",
            "win95Guest",
            "win98Guest",
            "winMeGuest",
            "winNTGuest",
            "win2000ProGuest",
            "win2000ServGuest",
            "win2000AdvServGuest",
            "winXPHomeGuest",
            "winXPProGuest",
            "winXPPro64Guest",
            "winNetWebGuest",
            "winNetStandardGuest",
            "winNetEnterpriseGuest",
            "winNetDatacenterGuest",
            "winNetBusinessGuest",
            "winNetStandard64Guest",
            "winNetEnterprise64Guest",
            "winLonghornGuest",
            "winLonghorn64Guest",
            "winNetDatacenter64Guest",
            "winVistaGuest",
            "winVista64Guest",
            "windows7Guest",
            "windows7_64Guest",
            "windows7Server64Guest",
            "windows8Guest",
            "windows8_64Guest",
            "windows8Server64Guest",
            "windowsHyperVGuest",
            "freebsdGuest",
            "freebsd64Guest",
            "redhatGuest",
            "rhel2Guest",
            "rhel3Guest",
            "rhel3_64Guest",
            "rhel4Guest",
            "rhel4_64Guest",
            "rhel5Guest",
            "rhel5_64Guest",
            "rhel6Guest",
            "rhel6_64Guest",
            "rhel7Guest",
            "rhel7_64Guest",
            "centosGuest",
            "centos64Guest",
            "oracleLinuxGuest",
            "oracleLinux64Guest",
            "suseGuest",
            "suse64Guest",
            "slesGuest",
            "sles64Guest",
            "sles10Guest",
            "sles10_64Guest",
            "sles11Guest",
            "sles11_64Guest",
            "sles12Guest",
            "sles12_64Guest",
            "nld9Guest",
            "oesGuest",
            "sjdsGuest",
            "mandrakeGuest",
            "mandrivaGuest",
            "mandriva64Guest",
            "turboLinuxGuest",
            "turboLinux64Guest",
            "ubuntuGuest",
            "ubuntu64Guest",
            "debian4Guest",
            "debian4_64Guest",
            "debian5Guest",
            "debian5_64Guest",
            "debian6Guest",
            "debian6_64Guest",
            "debian7Guest",
            "debian7_64Guest",
            "asianux3Guest",
            "asianux3_64Guest",
            "asianux4Guest",
            "asianux4_64Guest",
            "opensuseGuest",
            "opensuse64Guest",
            "fedoraGuest",
            "fedora64Guest",
            "other24xLinuxGuest",
            "other26xLinuxGuest",
            "otherLinuxGuest",
            "other3xLinuxGuest",
            "genericLinuxGuest",
            "other24xLinux64Guest",
            "other26xLinux64Guest",
            "other3xLinux64Guest",
            "otherLinux64Guest",
            "solaris6Guest",
            "solaris7Guest",
            "solaris8Guest",
            "solaris9Guest",
            "solaris10Guest",
            "solaris10_64Guest",
            "solaris11_64Guest",
            "os2Guest",
            "eComStationGuest",
            "eComStation2Guest",
            "netware4Guest",
            "netware5Guest",
            "netware6Guest",
            "openServer5Guest",
            "openServer6Guest",
            "unixWare7Guest",
            "darwinGuest",
            "darwin64Guest",
            "darwin10Guest",
            "darwin10_64Guest",
            "darwin11Guest",
            "darwin11_64Guest",
            "darwin12_64Guest",
            "darwin13_64Guest",
            "vmkernelGuest",
            "vmkernel5Guest",
            "otherGuest",
            "otherGuest64",
         }
         enum GuestOsDescriptorFirmwareType {
            "bios",
            "efi",
         }
         enum GuestOsDescriptorSupportLevel {
            "experimental",
            "legacy",
            "terminated",
            "supported",
            "unsupported",
            "deprecated",
            "techPreview",
         }
         interface GuestOsDescriptor extends integrityService.vim.DynamicData {
            id: string;
            family: string;
            fullName: string;
            supportedMaxCPUs: number;
            numSupportedPhysicalSockets?: number;
            numSupportedCoresPerSocket?: number;
            supportedMinMemMB: number;
            supportedMaxMemMB: number;
            recommendedMemMB: number;
            recommendedColorDepth: number;
            supportedDiskControllerList: Array<string>;
            recommendedSCSIController?: string;
            recommendedDiskController: string;
            supportedNumDisks: number;
            recommendedDiskSizeMB: number;
            recommendedCdromController?: string;
            supportedEthernetCard: Array<string>;
            recommendedEthernetCard?: string;
            supportsSlaveDisk?: boolean;
            cpuFeatureMask?: Array<integrityService.vim.HostCpuIdInfo>;
            smcRequired?: boolean;
            supportsWakeOnLan: boolean;
            supportsVMI?: boolean;
            supportsMemoryHotAdd?: boolean;
            supportsCpuHotAdd?: boolean;
            supportsCpuHotRemove?: boolean;
            supportedFirmware?: Array<string>;
            recommendedFirmware?: string;
            supportedUSBControllerList?: Array<string>;
            recommendedUSBController?: string;
            supports3D?: boolean;
            recommended3D?: boolean;
            smcRecommended?: boolean;
            ich7mRecommended?: boolean;
            usbRecommended?: boolean;
            supportLevel?: string;
            supportedForCreate?: boolean;
            vRAMSizeInKB?: integrityService.vim.IntOption;
         }
         interface ArrayOfGuestOsDescriptor {
            GuestOsDescriptor?: Array<integrityService.vim.GuestOsDescriptor>;
         }
         interface VirtualMachineIdeDiskDevicePartitionInfo extends integrityService.vim.DynamicData {
            id: number;
            capacity: number;
         }
         interface ArrayOfVirtualMachineIdeDiskDevicePartitionInfo {
            VirtualMachineIdeDiskDevicePartitionInfo?: Array<integrityService.vim.VirtualMachineIdeDiskDevicePartitionInfo>;
         }
         interface VirtualMachineIdeDiskDeviceInfo extends integrityService.vim.VirtualMachineDiskDeviceInfo {
            partitionTable?: Array<integrityService.vim.VirtualMachineIdeDiskDevicePartitionInfo>;
         }
         interface ArrayOfVirtualMachineIdeDiskDeviceInfo {
            VirtualMachineIdeDiskDeviceInfo?: Array<integrityService.vim.VirtualMachineIdeDiskDeviceInfo>;
         }
         interface VirtualMachineLegacyNetworkSwitchInfo extends integrityService.vim.DynamicData {
            name: string;
         }
         interface ArrayOfVirtualMachineLegacyNetworkSwitchInfo {
            VirtualMachineLegacyNetworkSwitchInfo?: Array<integrityService.vim.VirtualMachineLegacyNetworkSwitchInfo>;
         }
         interface VirtualMachineMessage extends integrityService.vim.DynamicData {
            id: string;
            argument?: Array<any>;
            text?: string;
         }
         interface ArrayOfVirtualMachineMessage {
            VirtualMachineMessage?: Array<integrityService.vim.VirtualMachineMessage>;
         }
         enum VirtualMachineMetadataManagerVmMetadataOwnerOwner {
            "ComVmwareVsphereHA",
         }
         interface VirtualMachineMetadataManagerVmMetadataOwner extends integrityService.vim.DynamicData {
            name: string;
         }
         enum VirtualMachineMetadataManagerVmMetadataOp {
            "Update",
            "Remove",
         }
         interface VirtualMachineMetadataManagerVmMetadata extends integrityService.vim.DynamicData {
            vmId: string;
            metadata?: string;
         }
         interface VirtualMachineMetadataManagerVmMetadataInput extends integrityService.vim.DynamicData {
            operation: string;
            vmMetadata: integrityService.vim.VirtualMachineMetadataManagerVmMetadata;
         }
         interface ArrayOfVirtualMachineMetadataManagerVmMetadataInput {
            VirtualMachineMetadataManagerVmMetadataInput?: Array<integrityService.vim.VirtualMachineMetadataManagerVmMetadataInput>;
         }
         interface VirtualMachineMetadataManagerVmMetadataResult extends integrityService.vim.DynamicData {
            vmMetadata: integrityService.vim.VirtualMachineMetadataManagerVmMetadata;
            error?: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVirtualMachineMetadataManagerVmMetadataResult {
            VirtualMachineMetadataManagerVmMetadataResult?: Array<integrityService.vim.VirtualMachineMetadataManagerVmMetadataResult>;
         }
         interface VirtualMachineNetworkInfo extends integrityService.vim.VirtualMachineTargetInfo {
            network: integrityService.vim.NetworkSummary;
         }
         interface ArrayOfVirtualMachineNetworkInfo {
            VirtualMachineNetworkInfo?: Array<integrityService.vim.VirtualMachineNetworkInfo>;
         }
         interface VirtualMachineNetworkShaperInfo extends integrityService.vim.DynamicData {
            enabled?: boolean;
            peakBps?: number;
            averageBps?: number;
            burstSize?: number;
         }
         interface OpaqueNetworkTargetInfo extends integrityService.vim.VirtualMachineTargetInfo {
            network: integrityService.vim.OpaqueNetworkSummary;
         }
         interface ArrayOfOpaqueNetworkTargetInfo {
            OpaqueNetworkTargetInfo?: Array<integrityService.vim.OpaqueNetworkTargetInfo>;
         }
         interface VirtualMachineParallelInfo extends integrityService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineParallelInfo {
            VirtualMachineParallelInfo?: Array<integrityService.vim.VirtualMachineParallelInfo>;
         }
         interface VirtualMachinePciPassthroughInfo extends integrityService.vim.VirtualMachineTargetInfo {
            pciDevice: integrityService.vim.HostPciDevice;
            systemId: string;
         }
         interface ArrayOfVirtualMachinePciPassthroughInfo {
            VirtualMachinePciPassthroughInfo?: Array<integrityService.vim.VirtualMachinePciPassthroughInfo>;
         }
         interface VirtualMachineProfileRawData extends integrityService.vim.DynamicData {
            extensionKey: string;
            objectData?: string;
         }
         interface VirtualMachineProfileSpec extends integrityService.vim.DynamicData {
         }
         interface ArrayOfVirtualMachineProfileSpec {
            VirtualMachineProfileSpec?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface VirtualMachineQuestionInfo extends integrityService.vim.DynamicData {
            id: string;
            text: string;
            choice: integrityService.vim.ChoiceOption;
            message?: Array<integrityService.vim.VirtualMachineMessage>;
         }
         enum VirtualMachineRelocateTransformation {
            "flat",
            "sparse",
         }
         interface VirtualMachineRelocateSpecDiskLocator extends integrityService.vim.DynamicData {
            diskId: number;
            datastore: integrityService.vim.ManagedObjectReference;
            diskMoveType?: string;
            diskBackingInfo?: integrityService.vim.VirtualDeviceBackingInfo;
            profile?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface ArrayOfVirtualMachineRelocateSpecDiskLocator {
            VirtualMachineRelocateSpecDiskLocator?: Array<integrityService.vim.VirtualMachineRelocateSpecDiskLocator>;
         }
         enum VirtualMachineRelocateDiskMoveOptions {
            "moveAllDiskBackingsAndAllowSharing",
            "moveAllDiskBackingsAndDisallowSharing",
            "moveChildMostDiskBacking",
            "createNewChildDiskBacking",
            "moveAllDiskBackingsAndConsolidate",
         }
         interface VirtualMachineRelocateSpec extends integrityService.vim.DynamicData {
            datastore?: integrityService.vim.ManagedObjectReference;
            diskMoveType?: string;
            pool?: integrityService.vim.ManagedObjectReference;
            host?: integrityService.vim.ManagedObjectReference;
            disk?: Array<integrityService.vim.VirtualMachineRelocateSpecDiskLocator>;
            transform?: integrityService.vim.VirtualMachineRelocateTransformation;
            deviceChange?: Array<integrityService.vim.VirtualDeviceConfigSpec>;
            profile?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface ReplicationInfoDiskSettings extends integrityService.vim.DynamicData {
            key: number;
            diskReplicationId: string;
         }
         interface ArrayOfReplicationInfoDiskSettings {
            ReplicationInfoDiskSettings?: Array<integrityService.vim.ReplicationInfoDiskSettings>;
         }
         interface VirtualMachineRuntimeInfoDasProtectionState extends integrityService.vim.DynamicData {
            dasProtected: boolean;
         }
         interface VirtualMachineRuntimeInfo extends integrityService.vim.DynamicData {
            device?: Array<integrityService.vim.VirtualMachineDeviceRuntimeInfo>;
            host?: integrityService.vim.ManagedObjectReference;
            connectionState: integrityService.vim.VirtualMachineConnectionState;
            powerState: integrityService.vim.VirtualMachinePowerState;
            faultToleranceState?: integrityService.vim.VirtualMachineFaultToleranceState;
            dasVmProtection?: integrityService.vim.VirtualMachineRuntimeInfoDasProtectionState;
            toolsInstallerMounted: boolean;
            suspendTime?: Date;
            bootTime?: Date;
            suspendInterval?: number;
            question?: integrityService.vim.VirtualMachineQuestionInfo;
            memoryOverhead?: number;
            maxCpuUsage?: number;
            maxMemoryUsage?: number;
            numMksConnections: number;
            recordReplayState?: integrityService.vim.VirtualMachineRecordReplayState;
            cleanPowerOff?: boolean;
            needSecondaryReason?: string;
            onlineStandby?: boolean;
            minRequiredEVCModeKey?: string;
            consolidationNeeded?: boolean;
            offlineFeatureRequirement?: Array<integrityService.vim.VirtualMachineFeatureRequirement>;
            featureRequirement?: Array<integrityService.vim.VirtualMachineFeatureRequirement>;
            featureMask?: Array<integrityService.vim.HostFeatureMask>;
            vFlashCacheAllocation?: number;
         }
         enum ScheduledHardwareUpgradeInfoHardwareUpgradePolicy {
            "never",
            "onSoftPowerOff",
            "always",
         }
         enum ScheduledHardwareUpgradeInfoHardwareUpgradeStatus {
            "none",
            "pending",
            "success",
            "failed",
         }
         interface ScheduledHardwareUpgradeInfo extends integrityService.vim.DynamicData {
            upgradePolicy?: string;
            versionKey?: string;
            scheduledHardwareUpgradeStatus?: string;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface VirtualMachineScsiDiskDeviceInfo extends integrityService.vim.VirtualMachineDiskDeviceInfo {
            disk?: integrityService.vim.HostScsiDisk;
            transportHint?: string;
            lunNumber?: number;
         }
         interface ArrayOfVirtualMachineScsiDiskDeviceInfo {
            VirtualMachineScsiDiskDeviceInfo?: Array<integrityService.vim.VirtualMachineScsiDiskDeviceInfo>;
         }
         enum VirtualMachineScsiPassthroughType {
            "disk",
            "tape",
            "printer",
            "processor",
            "worm",
            "cdrom",
            "scanner",
            "optical",
            "media",
            "com",
            "raid",
            "unknown",
         }
         interface VirtualMachineScsiPassthroughInfo extends integrityService.vim.VirtualMachineTargetInfo {
            scsiClass: string;
            vendor: string;
            physicalUnitNumber: number;
         }
         interface ArrayOfVirtualMachineScsiPassthroughInfo {
            VirtualMachineScsiPassthroughInfo?: Array<integrityService.vim.VirtualMachineScsiPassthroughInfo>;
         }
         interface VirtualMachineSerialInfo extends integrityService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineSerialInfo {
            VirtualMachineSerialInfo?: Array<integrityService.vim.VirtualMachineSerialInfo>;
         }
         interface VirtualMachineSnapshotInfo extends integrityService.vim.DynamicData {
            currentSnapshot?: integrityService.vim.ManagedObjectReference;
            rootSnapshotList: Array<integrityService.vim.VirtualMachineSnapshotTree>;
         }
         interface VirtualMachineSnapshotTree extends integrityService.vim.DynamicData {
            snapshot: integrityService.vim.ManagedObjectReference;
            vm: integrityService.vim.ManagedObjectReference;
            name: string;
            description: string;
            id?: number;
            createTime: Date;
            state: integrityService.vim.VirtualMachinePowerState;
            quiesced: boolean;
            backupManifest?: string;
            childSnapshotList?: Array<integrityService.vim.VirtualMachineSnapshotTree>;
            replaySupported?: boolean;
         }
         interface ArrayOfVirtualMachineSnapshotTree {
            VirtualMachineSnapshotTree?: Array<integrityService.vim.VirtualMachineSnapshotTree>;
         }
         interface VirtualMachineSoundInfo extends integrityService.vim.VirtualMachineTargetInfo {
         }
         interface ArrayOfVirtualMachineSoundInfo {
            VirtualMachineSoundInfo?: Array<integrityService.vim.VirtualMachineSoundInfo>;
         }
         interface VirtualMachineSriovInfo extends integrityService.vim.VirtualMachinePciPassthroughInfo {
            virtualFunction: boolean;
            pnic?: string;
         }
         interface ArrayOfVirtualMachineSriovInfo {
            VirtualMachineSriovInfo?: Array<integrityService.vim.VirtualMachineSriovInfo>;
         }
         interface VirtualMachineUsageOnDatastore extends integrityService.vim.DynamicData {
            datastore: integrityService.vim.ManagedObjectReference;
            committed: number;
            uncommitted: number;
            unshared: number;
         }
         interface ArrayOfVirtualMachineUsageOnDatastore {
            VirtualMachineUsageOnDatastore?: Array<integrityService.vim.VirtualMachineUsageOnDatastore>;
         }
         interface VirtualMachineStorageInfo extends integrityService.vim.DynamicData {
            perDatastoreUsage?: Array<integrityService.vim.VirtualMachineUsageOnDatastore>;
            timestamp: Date;
         }
         interface VirtualMachineConfigSummary extends integrityService.vim.DynamicData {
            name: string;
            template: boolean;
            vmPathName: string;
            memorySizeMB?: number;
            cpuReservation?: number;
            memoryReservation?: number;
            numCpu?: number;
            numEthernetCards?: number;
            numVirtualDisks?: number;
            uuid?: string;
            instanceUuid?: string;
            guestId?: string;
            guestFullName?: string;
            annotation?: string;
            product?: integrityService.vim.VAppProductInfo;
            installBootRequired?: boolean;
            ftInfo?: integrityService.vim.FaultToleranceConfigInfo;
            managedBy?: integrityService.vim.ManagedByInfo;
         }
         interface VirtualMachineQuickStats extends integrityService.vim.DynamicData {
            overallCpuUsage?: number;
            overallCpuDemand?: number;
            guestMemoryUsage?: number;
            hostMemoryUsage?: number;
            guestHeartbeatStatus: integrityService.vim.ManagedEntityStatus;
            distributedCpuEntitlement?: number;
            distributedMemoryEntitlement?: number;
            staticCpuEntitlement?: number;
            staticMemoryEntitlement?: number;
            privateMemory?: number;
            sharedMemory?: number;
            swappedMemory?: number;
            balloonedMemory?: number;
            consumedOverheadMemory?: number;
            ftLogBandwidth?: number;
            ftSecondaryLatency?: number;
            ftLatencyStatus?: integrityService.vim.ManagedEntityStatus;
            compressedMemory?: number;
            uptimeSeconds?: number;
            ssdSwappedMemory?: number;
         }
         interface VirtualMachineGuestSummary extends integrityService.vim.DynamicData {
            guestId?: string;
            guestFullName?: string;
            toolsStatus?: integrityService.vim.VirtualMachineToolsStatus;
            toolsVersionStatus?: string;
            toolsVersionStatus2?: string;
            toolsRunningStatus?: string;
            hostName?: string;
            ipAddress?: string;
         }
         interface VirtualMachineStorageSummary extends integrityService.vim.DynamicData {
            committed: number;
            uncommitted: number;
            unshared: number;
            timestamp: Date;
         }
         interface VirtualMachineSummary extends integrityService.vim.DynamicData {
            vm?: integrityService.vim.ManagedObjectReference;
            runtime: integrityService.vim.VirtualMachineRuntimeInfo;
            guest?: integrityService.vim.VirtualMachineGuestSummary;
            config: integrityService.vim.VirtualMachineConfigSummary;
            storage?: integrityService.vim.VirtualMachineStorageSummary;
            quickStats: integrityService.vim.VirtualMachineQuickStats;
            overallStatus: integrityService.vim.ManagedEntityStatus;
            customValue?: Array<integrityService.vim.CustomFieldValue>;
         }
         interface ArrayOfVirtualMachineSummary {
            VirtualMachineSummary?: Array<integrityService.vim.VirtualMachineSummary>;
         }
         enum VirtualMachineTargetInfoConfigurationTag {
            "compliant",
            "clusterWide",
         }
         interface VirtualMachineTargetInfo extends integrityService.vim.DynamicData {
            name: string;
            configurationTag?: Array<string>;
         }
         enum UpgradePolicy {
            "manual",
            "upgradeAtPowerCycle",
         }
         interface ToolsConfigInfoToolsLastInstallInfo extends integrityService.vim.DynamicData {
            counter: number;
            fault?: integrityService.vim.LocalizedMethodFault;
         }
         interface ToolsConfigInfo extends integrityService.vim.DynamicData {
            toolsVersion?: number;
            afterPowerOn?: boolean;
            afterResume?: boolean;
            beforeGuestStandby?: boolean;
            beforeGuestShutdown?: boolean;
            beforeGuestReboot?: boolean;
            toolsUpgradePolicy?: string;
            pendingCustomization?: string;
            syncTimeWithHost?: boolean;
            lastInstallInfo?: integrityService.vim.ToolsConfigInfoToolsLastInstallInfo;
         }
         enum VirtualMachineUsbInfoSpeed {
            "low",
            "full",
            "high",
            "superSpeed",
            "unknownSpeed",
         }
         enum VirtualMachineUsbInfoFamily {
            "audio",
            "hid",
            "hid_bootable",
            "physical",
            "communication",
            "imaging",
            "printer",
            "storage",
            "hub",
            "smart_card",
            "security",
            "video",
            "wireless",
            "bluetooth",
            "wusb",
            "pda",
            "vendor_specific",
            "other",
            "unknownFamily",
         }
         interface VirtualMachineUsbInfo extends integrityService.vim.VirtualMachineTargetInfo {
            description: string;
            vendor: number;
            product: number;
            physicalPath: string;
            family?: Array<string>;
            speed?: Array<string>;
            summary?: integrityService.vim.VirtualMachineSummary;
         }
         interface ArrayOfVirtualMachineUsbInfo {
            VirtualMachineUsbInfo?: Array<integrityService.vim.VirtualMachineUsbInfo>;
         }
         interface VirtualMachineVFlashModuleInfo extends integrityService.vim.VirtualMachineTargetInfo {
            vFlashModule: integrityService.vim.HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
         }
         interface ArrayOfVirtualMachineVFlashModuleInfo {
            VirtualMachineVFlashModuleInfo?: Array<integrityService.vim.VirtualMachineVFlashModuleInfo>;
         }
         interface VirtualHardware extends integrityService.vim.DynamicData {
            numCPU: number;
            numCoresPerSocket?: number;
            memoryMB: number;
            virtualICH7MPresent?: boolean;
            virtualSMCPresent?: boolean;
            device?: Array<integrityService.vim.VirtualDevice>;
         }
         interface VirtualHardwareOption extends integrityService.vim.DynamicData {
            hwVersion: number;
            virtualDeviceOption: Array<integrityService.vim.VirtualDeviceOption>;
            deviceListReadonly: boolean;
            numCPU: Array<number>;
            numCoresPerSocket?: integrityService.vim.IntOption;
            numCpuReadonly: boolean;
            memoryMB: integrityService.vim.LongOption;
            numPCIControllers: integrityService.vim.IntOption;
            numIDEControllers: integrityService.vim.IntOption;
            numUSBControllers: integrityService.vim.IntOption;
            numUSBXHCIControllers?: integrityService.vim.IntOption;
            numSIOControllers: integrityService.vim.IntOption;
            numPS2Controllers: integrityService.vim.IntOption;
            licensingLimit?: Array<string>;
            numSupportedWwnPorts?: integrityService.vim.IntOption;
            numSupportedWwnNodes?: integrityService.vim.IntOption;
            resourceConfigOption?: integrityService.vim.ResourceConfigOption;
         }
         interface VirtualMachineImportSpec extends integrityService.vim.ImportSpec {
            configSpec: integrityService.vim.VirtualMachineConfigSpec;
            resPoolEntity?: integrityService.vim.ManagedObjectReference;
         }
         interface CheckResult extends integrityService.vim.DynamicData {
            vm?: integrityService.vim.ManagedObjectReference;
            host?: integrityService.vim.ManagedObjectReference;
            warning?: Array<integrityService.vim.LocalizedMethodFault>;
            error?: Array<integrityService.vim.LocalizedMethodFault>;
         }
         interface ArrayOfCheckResult {
            CheckResult?: Array<integrityService.vim.CheckResult>;
         }
         enum CheckTestType {
            "sourceTests",
            "hostTests",
            "resourcePoolTests",
            "datastoreTests",
            "networkTests",
         }
         interface CustomizationIPSettingsIpV6AddressSpec extends integrityService.vim.DynamicData {
            ip: Array<integrityService.vim.CustomizationIpV6Generator>;
            gateway?: Array<string>;
         }
         enum CustomizationNetBIOSMode {
            "enableNetBIOSViaDhcp",
            "enableNetBIOS",
            "disableNetBIOS",
         }
         interface CustomizationIPSettings extends integrityService.vim.DynamicData {
            ip: integrityService.vim.CustomizationIpGenerator;
            subnetMask?: string;
            gateway?: Array<string>;
            ipV6Spec?: integrityService.vim.CustomizationIPSettingsIpV6AddressSpec;
            dnsServerList?: Array<string>;
            dnsDomain?: string;
            primaryWINS?: string;
            secondaryWINS?: string;
            netBIOS?: integrityService.vim.CustomizationNetBIOSMode;
         }
         interface CustomizationSpec extends integrityService.vim.DynamicData {
            options?: integrityService.vim.CustomizationOptions;
            identity: integrityService.vim.CustomizationIdentitySettings;
            globalIPSettings: integrityService.vim.CustomizationGlobalIPSettings;
            nicSettingMap?: Array<integrityService.vim.CustomizationAdapterMapping>;
            encryptionKey?: Array<number>;
         }
         interface CustomizationName extends integrityService.vim.DynamicData {
         }
         interface CustomizationFixedName extends integrityService.vim.CustomizationName {
            name: string;
         }
         interface CustomizationPrefixName extends integrityService.vim.CustomizationName {
            base: string;
         }
         interface CustomizationVirtualMachineName extends integrityService.vim.CustomizationName {
         }
         interface CustomizationUnknownName extends integrityService.vim.CustomizationName {
         }
         interface CustomizationCustomName extends integrityService.vim.CustomizationName {
            argument?: string;
         }
         interface CustomizationPassword extends integrityService.vim.DynamicData {
            value: string;
            plainText: boolean;
         }
         interface CustomizationOptions extends integrityService.vim.DynamicData {
         }
         enum CustomizationSysprepRebootOption {
            "reboot",
            "noreboot",
            "shutdown",
         }
         interface CustomizationWinOptions extends integrityService.vim.CustomizationOptions {
            changeSID: boolean;
            deleteAccounts: boolean;
            reboot?: integrityService.vim.CustomizationSysprepRebootOption;
         }
         interface CustomizationLinuxOptions extends integrityService.vim.CustomizationOptions {
         }
         interface CustomizationGuiUnattended extends integrityService.vim.DynamicData {
            password?: integrityService.vim.CustomizationPassword;
            timeZone: number;
            autoLogon: boolean;
            autoLogonCount: number;
         }
         interface CustomizationUserData extends integrityService.vim.DynamicData {
            fullName: string;
            orgName: string;
            computerName: integrityService.vim.CustomizationName;
            productId: string;
         }
         interface CustomizationGuiRunOnce extends integrityService.vim.DynamicData {
            commandList: Array<string>;
         }
         interface CustomizationIdentification extends integrityService.vim.DynamicData {
            joinWorkgroup?: string;
            joinDomain?: string;
            domainAdmin?: string;
            domainAdminPassword?: integrityService.vim.CustomizationPassword;
         }
         enum CustomizationLicenseDataMode {
            "perServer",
            "perSeat",
         }
         interface CustomizationLicenseFilePrintData extends integrityService.vim.DynamicData {
            autoMode: integrityService.vim.CustomizationLicenseDataMode;
            autoUsers?: number;
         }
         interface CustomizationIdentitySettings extends integrityService.vim.DynamicData {
         }
         interface CustomizationSysprepText extends integrityService.vim.CustomizationIdentitySettings {
            value: string;
         }
         interface CustomizationSysprep extends integrityService.vim.CustomizationIdentitySettings {
            guiUnattended: integrityService.vim.CustomizationGuiUnattended;
            userData: integrityService.vim.CustomizationUserData;
            guiRunOnce?: integrityService.vim.CustomizationGuiRunOnce;
            identification: integrityService.vim.CustomizationIdentification;
            licenseFilePrintData?: integrityService.vim.CustomizationLicenseFilePrintData;
         }
         interface CustomizationLinuxPrep extends integrityService.vim.CustomizationIdentitySettings {
            hostName: integrityService.vim.CustomizationName;
            domain: string;
            timeZone?: string;
            hwClockUTC?: boolean;
         }
         interface CustomizationGlobalIPSettings extends integrityService.vim.DynamicData {
            dnsSuffixList?: Array<string>;
            dnsServerList?: Array<string>;
         }
         interface CustomizationIpGenerator extends integrityService.vim.DynamicData {
         }
         interface CustomizationDhcpIpGenerator extends integrityService.vim.CustomizationIpGenerator {
         }
         interface CustomizationFixedIp extends integrityService.vim.CustomizationIpGenerator {
            ipAddress: string;
         }
         interface CustomizationUnknownIpGenerator extends integrityService.vim.CustomizationIpGenerator {
         }
         interface CustomizationCustomIpGenerator extends integrityService.vim.CustomizationIpGenerator {
            argument?: string;
         }
         interface CustomizationIpV6Generator extends integrityService.vim.DynamicData {
         }
         interface ArrayOfCustomizationIpV6Generator {
            CustomizationIpV6Generator?: Array<integrityService.vim.CustomizationIpV6Generator>;
         }
         interface CustomizationDhcpIpV6Generator extends integrityService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationStatelessIpV6Generator extends integrityService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationFixedIpV6 extends integrityService.vim.CustomizationIpV6Generator {
            ipAddress: string;
            subnetMask: number;
         }
         interface CustomizationAutoIpV6Generator extends integrityService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationUnknownIpV6Generator extends integrityService.vim.CustomizationIpV6Generator {
         }
         interface CustomizationCustomIpV6Generator extends integrityService.vim.CustomizationIpV6Generator {
            argument?: string;
         }
         interface CustomizationAdapterMapping extends integrityService.vim.DynamicData {
            macAddress?: string;
            adapter: integrityService.vim.CustomizationIPSettings;
         }
         interface ArrayOfCustomizationAdapterMapping {
            CustomizationAdapterMapping?: Array<integrityService.vim.CustomizationAdapterMapping>;
         }
         interface HostDiskMappingPartitionInfo extends integrityService.vim.DynamicData {
            name: string;
            fileSystem: string;
            capacityInKb: number;
         }
         interface HostDiskMappingInfo extends integrityService.vim.DynamicData {
            physicalPartition?: integrityService.vim.HostDiskMappingPartitionInfo;
            name: string;
            exclusive?: boolean;
         }
         interface HostDiskMappingPartitionOption extends integrityService.vim.DynamicData {
            name: string;
            fileSystem: string;
            capacityInKb: number;
         }
         interface ArrayOfHostDiskMappingPartitionOption {
            HostDiskMappingPartitionOption?: Array<integrityService.vim.HostDiskMappingPartitionOption>;
         }
         interface HostDiskMappingOption extends integrityService.vim.DynamicData {
            physicalPartition?: Array<integrityService.vim.HostDiskMappingPartitionOption>;
            name: string;
         }
         interface ParaVirtualSCSIController extends integrityService.vim.VirtualSCSIController {
         }
         interface ParaVirtualSCSIControllerOption extends integrityService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualAHCIController extends integrityService.vim.VirtualSATAController {
         }
         interface VirtualAHCIControllerOption extends integrityService.vim.VirtualSATAControllerOption {
         }
         interface VirtualBusLogicController extends integrityService.vim.VirtualSCSIController {
         }
         interface VirtualBusLogicControllerOption extends integrityService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualCdromIsoBackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualCdromPassthroughBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
            exclusive: boolean;
         }
         interface VirtualCdromRemotePassthroughBackingInfo extends integrityService.vim.VirtualDeviceRemoteDeviceBackingInfo {
            exclusive: boolean;
         }
         interface VirtualCdromAtapiBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualCdromRemoteAtapiBackingInfo extends integrityService.vim.VirtualDeviceRemoteDeviceBackingInfo {
         }
         interface VirtualCdrom extends integrityService.vim.VirtualDevice {
         }
         interface VirtualCdromIsoBackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualCdromPassthroughBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
            exclusive: integrityService.vim.BoolOption;
         }
         interface VirtualCdromRemotePassthroughBackingOption extends integrityService.vim.VirtualDeviceRemoteDeviceBackingOption {
            exclusive: integrityService.vim.BoolOption;
         }
         interface VirtualCdromAtapiBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualCdromRemoteAtapiBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualCdromOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualController extends integrityService.vim.VirtualDevice {
            busNumber: number;
            device?: Array<number>;
         }
         interface VirtualControllerOption extends integrityService.vim.VirtualDeviceOption {
            devices: integrityService.vim.IntOption;
            supportedDevice?: Array<string>;
         }
         interface VirtualDeviceBackingInfo extends integrityService.vim.DynamicData {
         }
         interface VirtualDeviceFileBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            fileName: string;
            datastore?: integrityService.vim.ManagedObjectReference;
            backingObjectId?: string;
         }
         interface VirtualDeviceDeviceBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            deviceName: string;
            useAutoDetect?: boolean;
         }
         interface VirtualDeviceRemoteDeviceBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            deviceName: string;
            useAutoDetect?: boolean;
         }
         interface VirtualDevicePipeBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            pipeName: string;
         }
         interface VirtualDeviceURIBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            serviceURI: string;
            direction: string;
            proxyURI?: string;
         }
         enum VirtualDeviceConnectInfoStatus {
            "ok",
            "recoverableError",
            "unrecoverableError",
            "untried",
         }
         interface VirtualDeviceConnectInfo extends integrityService.vim.DynamicData {
            startConnected: boolean;
            allowGuestControl: boolean;
            connected: boolean;
            status?: string;
         }
         interface VirtualDeviceBusSlotInfo extends integrityService.vim.DynamicData {
         }
         interface VirtualDevicePciBusSlotInfo extends integrityService.vim.VirtualDeviceBusSlotInfo {
            pciSlotNumber: number;
         }
         interface VirtualDevice extends integrityService.vim.DynamicData {
            key: number;
            deviceInfo?: integrityService.vim.Description;
            backing?: integrityService.vim.VirtualDeviceBackingInfo;
            connectable?: integrityService.vim.VirtualDeviceConnectInfo;
            slotInfo?: integrityService.vim.VirtualDeviceBusSlotInfo;
            controllerKey?: number;
            unitNumber?: number;
         }
         interface ArrayOfVirtualDevice {
            VirtualDevice?: Array<integrityService.vim.VirtualDevice>;
         }
         interface VirtualDeviceBackingOption extends integrityService.vim.DynamicData {
            type: string;
         }
         interface ArrayOfVirtualDeviceBackingOption {
            VirtualDeviceBackingOption?: Array<integrityService.vim.VirtualDeviceBackingOption>;
         }
         enum VirtualDeviceFileExtension {
            "iso",
            "flp",
            "vmdk",
            "dsk",
            "rdm",
         }
         interface VirtualDeviceFileBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
            fileNameExtensions?: integrityService.vim.ChoiceOption;
         }
         interface VirtualDeviceDeviceBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
            autoDetectAvailable?: integrityService.vim.BoolOption;
         }
         interface VirtualDeviceRemoteDeviceBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
            autoDetectAvailable?: integrityService.vim.BoolOption;
         }
         interface VirtualDevicePipeBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
         }
         enum VirtualDeviceURIBackingOptionDirection {
            "server",
            "client",
         }
         interface VirtualDeviceURIBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
            directions: integrityService.vim.ChoiceOption;
         }
         interface VirtualDeviceConnectOption extends integrityService.vim.DynamicData {
            startConnected: integrityService.vim.BoolOption;
            allowGuestControl: integrityService.vim.BoolOption;
         }
         interface VirtualDeviceBusSlotOption extends integrityService.vim.DynamicData {
            type: string;
         }
         interface VirtualDeviceOption extends integrityService.vim.DynamicData {
            type: string;
            connectOption?: integrityService.vim.VirtualDeviceConnectOption;
            busSlotOption?: integrityService.vim.VirtualDeviceBusSlotOption;
            controllerType?: string;
            autoAssignController?: integrityService.vim.BoolOption;
            backingOption?: Array<integrityService.vim.VirtualDeviceBackingOption>;
            defaultBackingOptionIndex?: number;
            licensingLimit?: Array<string>;
            deprecated: boolean;
            plugAndPlay: boolean;
            hotRemoveSupported?: boolean;
         }
         interface ArrayOfVirtualDeviceOption {
            VirtualDeviceOption?: Array<integrityService.vim.VirtualDeviceOption>;
         }
         enum VirtualDeviceConfigSpecOperation {
            "add",
            "remove",
            "edit",
         }
         enum VirtualDeviceConfigSpecFileOperation {
            "create",
            "destroy",
            "replace",
         }
         interface VirtualDeviceConfigSpec extends integrityService.vim.DynamicData {
            operation?: integrityService.vim.VirtualDeviceConfigSpecOperation;
            fileOperation?: integrityService.vim.VirtualDeviceConfigSpecFileOperation;
            device: integrityService.vim.VirtualDevice;
            profile?: Array<integrityService.vim.VirtualMachineProfileSpec>;
         }
         interface ArrayOfVirtualDeviceConfigSpec {
            VirtualDeviceConfigSpec?: Array<integrityService.vim.VirtualDeviceConfigSpec>;
         }
         enum VirtualDiskDeltaDiskFormat {
            "redoLogFormat",
            "nativeFormat",
            "seSparseFormat",
         }
         interface VirtualDiskSparseVer1BackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            spaceUsedInKB?: number;
            contentId?: string;
            parent?: integrityService.vim.VirtualDiskSparseVer1BackingInfo;
         }
         interface VirtualDiskSparseVer2BackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            spaceUsedInKB?: number;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: integrityService.vim.VirtualDiskSparseVer2BackingInfo;
         }
         interface VirtualDiskFlatVer1BackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            contentId?: string;
            parent?: integrityService.vim.VirtualDiskFlatVer1BackingInfo;
         }
         interface VirtualDiskFlatVer2BackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            split?: boolean;
            writeThrough?: boolean;
            thinProvisioned?: boolean;
            eagerlyScrub?: boolean;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: integrityService.vim.VirtualDiskFlatVer2BackingInfo;
            deltaDiskFormat?: string;
            digestEnabled?: boolean;
            deltaGrainSize?: number;
         }
         interface VirtualDiskSeSparseBackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
            diskMode: string;
            writeThrough?: boolean;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: integrityService.vim.VirtualDiskSeSparseBackingInfo;
            deltaDiskFormat?: string;
            digestEnabled?: boolean;
            grainSize?: number;
         }
         interface VirtualDiskRawDiskVer2BackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
            descriptorFileName: string;
            uuid?: string;
            changeId?: string;
         }
         interface VirtualDiskPartitionedRawDiskVer2BackingInfo extends integrityService.vim.VirtualDiskRawDiskVer2BackingInfo {
            partition: Array<number>;
         }
         interface VirtualDiskRawDiskMappingVer1BackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
            lunUuid?: string;
            deviceName?: string;
            compatibilityMode?: string;
            diskMode?: string;
            uuid?: string;
            contentId?: string;
            changeId?: string;
            parent?: integrityService.vim.VirtualDiskRawDiskMappingVer1BackingInfo;
         }
         enum VirtualDiskVFlashCacheConfigInfoCacheConsistencyType {
            "strong",
            "weak",
         }
         enum VirtualDiskVFlashCacheConfigInfoCacheMode {
            "write_thru",
            "write_back",
         }
         interface VirtualDiskVFlashCacheConfigInfo extends integrityService.vim.DynamicData {
            vFlashModule?: string;
            reservationInMB?: number;
            cacheConsistencyType?: string;
            cacheMode?: string;
            blockSizeInKB?: number;
         }
         interface VirtualDisk extends integrityService.vim.VirtualDevice {
            capacityInKB: number;
            capacityInBytes?: number;
            shares?: integrityService.vim.SharesInfo;
            storageIOAllocation?: integrityService.vim.StorageIOAllocationInfo;
            diskObjectId?: string;
            vFlashCacheConfigInfo?: integrityService.vim.VirtualDiskVFlashCacheConfigInfo;
         }
         interface ArrayOfVirtualDisk {
            VirtualDisk?: Array<integrityService.vim.VirtualDisk>;
         }
         interface VirtualDiskId extends integrityService.vim.DynamicData {
            vm: integrityService.vim.ManagedObjectReference;
            diskId: number;
         }
         enum VirtualDiskMode {
            "persistent",
            "nonpersistent",
            "undoable",
            "independent_persistent",
            "independent_nonpersistent",
            "append",
         }
         enum VirtualDiskCompatibilityMode {
            "virtualMode",
            "physicalMode",
         }
         interface VirtualDiskSparseVer1BackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
            diskModes: integrityService.vim.ChoiceOption;
            split: integrityService.vim.BoolOption;
            writeThrough: integrityService.vim.BoolOption;
            growable: boolean;
         }
         interface VirtualDiskSparseVer2BackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
            diskMode: integrityService.vim.ChoiceOption;
            split: integrityService.vim.BoolOption;
            writeThrough: integrityService.vim.BoolOption;
            growable: boolean;
            hotGrowable?: boolean;
            uuid?: boolean;
         }
         interface VirtualDiskFlatVer1BackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
            diskMode: integrityService.vim.ChoiceOption;
            split: integrityService.vim.BoolOption;
            writeThrough: integrityService.vim.BoolOption;
            growable: boolean;
         }
         interface VirtualDiskDeltaDiskFormatsSupported extends integrityService.vim.DynamicData {
            datastoreType: string;
            deltaDiskFormat: integrityService.vim.ChoiceOption;
         }
         interface ArrayOfVirtualDiskDeltaDiskFormatsSupported {
            VirtualDiskDeltaDiskFormatsSupported?: Array<integrityService.vim.VirtualDiskDeltaDiskFormatsSupported>;
         }
         interface VirtualDiskFlatVer2BackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
            diskMode: integrityService.vim.ChoiceOption;
            split: integrityService.vim.BoolOption;
            writeThrough: integrityService.vim.BoolOption;
            growable: boolean;
            hotGrowable?: boolean;
            uuid?: boolean;
            thinProvisioned?: integrityService.vim.BoolOption;
            eagerlyScrub?: integrityService.vim.BoolOption;
            deltaDiskFormat?: integrityService.vim.ChoiceOption;
            deltaDiskFormatsSupported?: Array<integrityService.vim.VirtualDiskDeltaDiskFormatsSupported>;
         }
         interface VirtualDiskSeSparseBackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
            diskMode: integrityService.vim.ChoiceOption;
            writeThrough: integrityService.vim.BoolOption;
            growable: boolean;
            hotGrowable: boolean;
            uuid: boolean;
            deltaDiskFormatsSupported: Array<integrityService.vim.VirtualDiskDeltaDiskFormatsSupported>;
         }
         interface VirtualDiskRawDiskVer2BackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
            descriptorFileNameExtensions: integrityService.vim.ChoiceOption;
            uuid?: boolean;
         }
         interface VirtualDiskPartitionedRawDiskVer2BackingOption extends integrityService.vim.VirtualDiskRawDiskVer2BackingOption {
         }
         interface VirtualDiskRawDiskMappingVer1BackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
            descriptorFileNameExtensions?: integrityService.vim.ChoiceOption;
            compatibilityMode: integrityService.vim.ChoiceOption;
            diskMode: integrityService.vim.ChoiceOption;
            uuid?: boolean;
         }
         interface VirtualDiskOptionVFlashCacheConfigOption extends integrityService.vim.DynamicData {
            cacheConsistencyType: integrityService.vim.ChoiceOption;
            cacheMode: integrityService.vim.ChoiceOption;
            reservationInMB: integrityService.vim.LongOption;
            blockSizeInKB: integrityService.vim.LongOption;
         }
         interface VirtualDiskOption extends integrityService.vim.VirtualDeviceOption {
            capacityInKB: integrityService.vim.LongOption;
            ioAllocationOption?: integrityService.vim.StorageIOAllocationOption;
            vFlashCacheConfigOption?: integrityService.vim.VirtualDiskOptionVFlashCacheConfigOption;
         }
         interface VirtualDiskConfigSpec extends integrityService.vim.VirtualDeviceConfigSpec {
            migrateCache?: boolean;
         }
         interface VirtualE1000 extends integrityService.vim.VirtualEthernetCard {
         }
         interface VirtualE1000Option extends integrityService.vim.VirtualEthernetCardOption {
         }
         interface VirtualE1000e extends integrityService.vim.VirtualEthernetCard {
         }
         interface VirtualE1000eOption extends integrityService.vim.VirtualEthernetCardOption {
         }
         interface VirtualEnsoniq1371 extends integrityService.vim.VirtualSoundCard {
         }
         interface VirtualEnsoniq1371Option extends integrityService.vim.VirtualSoundCardOption {
         }
         interface VirtualEthernetCardNetworkBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
            network?: integrityService.vim.ManagedObjectReference;
            inPassthroughMode?: boolean;
         }
         interface VirtualEthernetCardLegacyNetworkBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualEthernetCardDistributedVirtualPortBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            port: integrityService.vim.DistributedVirtualSwitchPortConnection;
         }
         interface VirtualEthernetCardOpaqueNetworkBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            opaqueNetworkId: string;
            opaqueNetworkType: string;
         }
         interface VirtualEthernetCard extends integrityService.vim.VirtualDevice {
            addressType?: string;
            macAddress?: string;
            wakeOnLanEnabled?: boolean;
         }
         interface VirtualEthernetCardNetworkBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualEthernetCardOpaqueNetworkBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
         }
         enum VirtualEthernetCardLegacyNetworkDeviceName {
            "bridged",
            "nat",
            "hostonly",
         }
         interface VirtualEthernetCardLegacyNetworkBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualEthernetCardDVPortBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
         }
         enum VirtualEthernetCardMacType {
            "manual",
            "generated",
            "assigned",
         }
         interface VirtualEthernetCardOption extends integrityService.vim.VirtualDeviceOption {
            supportedOUI: integrityService.vim.ChoiceOption;
            macType: integrityService.vim.ChoiceOption;
            wakeOnLanEnabled: integrityService.vim.BoolOption;
            vmDirectPathGen2Supported?: boolean;
         }
         interface VirtualFloppyImageBackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualFloppyDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualFloppyRemoteDeviceBackingInfo extends integrityService.vim.VirtualDeviceRemoteDeviceBackingInfo {
         }
         interface VirtualFloppy extends integrityService.vim.VirtualDevice {
         }
         interface VirtualFloppyImageBackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualFloppyDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualFloppyRemoteDeviceBackingOption extends integrityService.vim.VirtualDeviceRemoteDeviceBackingOption {
         }
         interface VirtualFloppyOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualHdAudioCard extends integrityService.vim.VirtualSoundCard {
         }
         interface VirtualHdAudioCardOption extends integrityService.vim.VirtualSoundCardOption {
         }
         interface VirtualIDEController extends integrityService.vim.VirtualController {
         }
         interface VirtualIDEControllerOption extends integrityService.vim.VirtualControllerOption {
            numIDEDisks: integrityService.vim.IntOption;
            numIDECdroms: integrityService.vim.IntOption;
         }
         interface VirtualKeyboard extends integrityService.vim.VirtualDevice {
         }
         interface VirtualKeyboardOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualLsiLogicController extends integrityService.vim.VirtualSCSIController {
         }
         interface VirtualLsiLogicControllerOption extends integrityService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualLsiLogicSASController extends integrityService.vim.VirtualSCSIController {
         }
         interface VirtualLsiLogicSASControllerOption extends integrityService.vim.VirtualSCSIControllerOption {
         }
         interface VirtualPCIController extends integrityService.vim.VirtualController {
         }
         interface VirtualPCIControllerOption extends integrityService.vim.VirtualControllerOption {
            numSCSIControllers: integrityService.vim.IntOption;
            numEthernetCards: integrityService.vim.IntOption;
            numVideoCards: integrityService.vim.IntOption;
            numSoundCards: integrityService.vim.IntOption;
            numVmiRoms?: integrityService.vim.IntOption;
            numVmciDevices?: integrityService.vim.IntOption;
            numPCIPassthroughDevices?: integrityService.vim.IntOption;
            numSasSCSIControllers?: integrityService.vim.IntOption;
            numVmxnet3EthernetCards?: integrityService.vim.IntOption;
            numParaVirtualSCSIControllers?: integrityService.vim.IntOption;
            numSATAControllers?: integrityService.vim.IntOption;
         }
         interface VirtualPCIPassthroughDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
            id: string;
            deviceId: string;
            systemId: string;
            vendorId: number;
         }
         interface VirtualPCIPassthrough extends integrityService.vim.VirtualDevice {
         }
         interface VirtualPCIPassthroughDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualPCIPassthroughOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualPCNet32 extends integrityService.vim.VirtualEthernetCard {
         }
         interface VirtualPCNet32Option extends integrityService.vim.VirtualEthernetCardOption {
            supportsMorphing: boolean;
         }
         interface VirtualPS2Controller extends integrityService.vim.VirtualController {
         }
         interface VirtualPS2ControllerOption extends integrityService.vim.VirtualControllerOption {
            numKeyboards: integrityService.vim.IntOption;
            numPointingDevices: integrityService.vim.IntOption;
         }
         interface VirtualParallelPortFileBackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualParallelPortDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualParallelPort extends integrityService.vim.VirtualDevice {
         }
         interface VirtualParallelPortFileBackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualParallelPortDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualParallelPortOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualPointingDeviceDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
            hostPointingDevice: string;
         }
         interface VirtualPointingDevice extends integrityService.vim.VirtualDevice {
         }
         enum VirtualPointingDeviceHostChoice {
            "autodetect",
            "intellimouseExplorer",
            "intellimousePs2",
            "logitechMouseman",
            "microsoft_serial",
            "mouseSystems",
            "mousemanSerial",
            "ps2",
         }
         interface VirtualPointingDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
            hostPointingDevice: integrityService.vim.ChoiceOption;
         }
         interface VirtualPointingDeviceOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualSATAController extends integrityService.vim.VirtualController {
         }
         interface VirtualSATAControllerOption extends integrityService.vim.VirtualControllerOption {
            numSATADisks: integrityService.vim.IntOption;
            numSATACdroms: integrityService.vim.IntOption;
         }
         enum VirtualSCSISharing {
            "noSharing",
            "virtualSharing",
            "physicalSharing",
         }
         interface ArrayOfVirtualSCSISharing {
            VirtualSCSISharing?: Array<integrityService.vim.VirtualSCSISharing>;
         }
         interface VirtualSCSIController extends integrityService.vim.VirtualController {
            hotAddRemove?: boolean;
            sharedBus: integrityService.vim.VirtualSCSISharing;
            scsiCtlrUnitNumber?: number;
         }
         interface VirtualSCSIControllerOption extends integrityService.vim.VirtualControllerOption {
            numSCSIDisks: integrityService.vim.IntOption;
            numSCSICdroms: integrityService.vim.IntOption;
            numSCSIPassthrough: integrityService.vim.IntOption;
            sharing: Array<integrityService.vim.VirtualSCSISharing>;
            defaultSharedIndex: number;
            hotAddRemove: integrityService.vim.BoolOption;
            scsiCtlrUnitNumber: number;
         }
         interface VirtualSCSIPassthroughDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualSCSIPassthrough extends integrityService.vim.VirtualDevice {
         }
         interface VirtualSCSIPassthroughDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualSCSIPassthroughOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualSIOController extends integrityService.vim.VirtualController {
         }
         interface VirtualSIOControllerOption extends integrityService.vim.VirtualControllerOption {
            numFloppyDrives: integrityService.vim.IntOption;
            numSerialPorts: integrityService.vim.IntOption;
            numParallelPorts: integrityService.vim.IntOption;
         }
         interface VirtualSerialPortFileBackingInfo extends integrityService.vim.VirtualDeviceFileBackingInfo {
         }
         interface VirtualSerialPortDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualSerialPortPipeBackingInfo extends integrityService.vim.VirtualDevicePipeBackingInfo {
            endpoint: string;
            noRxLoss?: boolean;
         }
         interface VirtualSerialPortURIBackingInfo extends integrityService.vim.VirtualDeviceURIBackingInfo {
         }
         interface VirtualSerialPortThinPrintBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
         }
         interface VirtualSerialPort extends integrityService.vim.VirtualDevice {
            yieldOnPoll: boolean;
         }
         enum VirtualSerialPortEndPoint {
            "client",
            "server",
         }
         interface VirtualSerialPortFileBackingOption extends integrityService.vim.VirtualDeviceFileBackingOption {
         }
         interface VirtualSerialPortDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualSerialPortPipeBackingOption extends integrityService.vim.VirtualDevicePipeBackingOption {
            endpoint: integrityService.vim.ChoiceOption;
            noRxLoss: integrityService.vim.BoolOption;
         }
         interface VirtualSerialPortURIBackingOption extends integrityService.vim.VirtualDeviceURIBackingOption {
         }
         interface VirtualSerialPortThinPrintBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
         }
         interface VirtualSerialPortOption extends integrityService.vim.VirtualDeviceOption {
            yieldOnPoll: integrityService.vim.BoolOption;
         }
         interface VirtualSoundBlaster16 extends integrityService.vim.VirtualSoundCard {
         }
         interface VirtualSoundBlaster16Option extends integrityService.vim.VirtualSoundCardOption {
         }
         interface VirtualSoundCardDeviceBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualSoundCard extends integrityService.vim.VirtualDevice {
         }
         interface VirtualSoundCardDeviceBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualSoundCardOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualSriovEthernetCardSriovBackingInfo extends integrityService.vim.VirtualDeviceBackingInfo {
            physicalFunctionBacking?: integrityService.vim.VirtualPCIPassthroughDeviceBackingInfo;
            virtualFunctionBacking?: integrityService.vim.VirtualPCIPassthroughDeviceBackingInfo;
            virtualFunctionIndex?: number;
         }
         interface VirtualSriovEthernetCard extends integrityService.vim.VirtualEthernetCard {
            allowGuestOSMtuChange?: boolean;
            sriovBacking?: integrityService.vim.VirtualSriovEthernetCardSriovBackingInfo;
         }
         interface VirtualSriovEthernetCardSriovBackingOption extends integrityService.vim.VirtualDeviceBackingOption {
         }
         interface VirtualSriovEthernetCardOption extends integrityService.vim.VirtualEthernetCardOption {
         }
         interface VirtualUSBUSBBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
         }
         interface VirtualUSBRemoteHostBackingInfo extends integrityService.vim.VirtualDeviceDeviceBackingInfo {
            hostname: string;
         }
         interface VirtualUSBRemoteClientBackingInfo extends integrityService.vim.VirtualDeviceRemoteDeviceBackingInfo {
            hostname: string;
         }
         interface VirtualUSB extends integrityService.vim.VirtualDevice {
            connected?: boolean;
            vendor?: number;
            product?: number;
            family?: Array<string>;
            speed?: Array<string>;
         }
         interface VirtualUSBControllerPciBusSlotInfo extends integrityService.vim.VirtualDevicePciBusSlotInfo {
            ehciPciSlotNumber?: number;
         }
         interface VirtualUSBController extends integrityService.vim.VirtualController {
            autoConnectDevices?: boolean;
            ehciEnabled?: boolean;
         }
         interface VirtualUSBControllerOption extends integrityService.vim.VirtualControllerOption {
            autoConnectDevices: integrityService.vim.BoolOption;
            ehciSupported?: integrityService.vim.BoolOption;
            supportedSpeeds?: Array<string>;
         }
         interface VirtualUSBUSBBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualUSBRemoteHostBackingOption extends integrityService.vim.VirtualDeviceDeviceBackingOption {
         }
         interface VirtualUSBRemoteClientBackingOption extends integrityService.vim.VirtualDeviceRemoteDeviceBackingOption {
         }
         interface VirtualUSBOption extends integrityService.vim.VirtualDeviceOption {
         }
         interface VirtualUSBXHCIController extends integrityService.vim.VirtualController {
            autoConnectDevices?: boolean;
         }
         interface VirtualUSBXHCIControllerOption extends integrityService.vim.VirtualControllerOption {
            autoConnectDevices: integrityService.vim.BoolOption;
            supportedSpeeds: Array<string>;
         }
         interface VirtualMachineVMCIDevice extends integrityService.vim.VirtualDevice {
            id?: number;
            allowUnrestrictedCommunication?: boolean;
         }
         interface VirtualMachineVMCIDeviceOption extends integrityService.vim.VirtualDeviceOption {
            allowUnrestrictedCommunication: integrityService.vim.BoolOption;
         }
         interface VirtualMachineVMIROM extends integrityService.vim.VirtualDevice {
         }
         interface VirtualVMIROMOption extends integrityService.vim.VirtualDeviceOption {
         }
         enum VirtualMachineVideoCardUse3dRenderer {
            "automatic",
            "software",
            "hardware",
         }
         interface VirtualMachineVideoCard extends integrityService.vim.VirtualDevice {
            videoRamSizeInKB?: number;
            numDisplays?: number;
            useAutoDetect?: boolean;
            enable3DSupport?: boolean;
            use3dRenderer?: string;
         }
         interface VirtualVideoCardOption extends integrityService.vim.VirtualDeviceOption {
            videoRamSizeInKB?: integrityService.vim.LongOption;
            numDisplays?: integrityService.vim.IntOption;
            useAutoDetect?: integrityService.vim.BoolOption;
            support3D?: integrityService.vim.BoolOption;
            use3dRendererSupported?: integrityService.vim.BoolOption;
         }
         interface VirtualVmxnet extends integrityService.vim.VirtualEthernetCard {
         }
         interface VirtualVmxnet2 extends integrityService.vim.VirtualVmxnet {
         }
         interface VirtualVmxnet2Option extends integrityService.vim.VirtualVmxnetOption {
         }
         interface VirtualVmxnet3 extends integrityService.vim.VirtualVmxnet {
         }
         interface VirtualVmxnet3Option extends integrityService.vim.VirtualVmxnetOption {
         }
         interface VirtualVmxnetOption extends integrityService.vim.VirtualEthernetCardOption {
         }
         interface GuestFileAttributes extends integrityService.vim.DynamicData {
            modificationTime?: Date;
            accessTime?: Date;
            symlinkTarget?: string;
         }
         interface GuestPosixFileAttributes extends integrityService.vim.GuestFileAttributes {
            ownerId?: number;
            groupId?: number;
            permissions?: number;
         }
         interface GuestWindowsFileAttributes extends integrityService.vim.GuestFileAttributes {
            hidden?: boolean;
            readOnly?: boolean;
            createTime?: Date;
         }
         enum GuestFileType {
            "file",
            "directory",
            "symlink",
         }
         interface GuestFileInfo extends integrityService.vim.DynamicData {
            path: string;
            type: string;
            size: number;
            attributes: integrityService.vim.GuestFileAttributes;
         }
         interface ArrayOfGuestFileInfo {
            GuestFileInfo?: Array<integrityService.vim.GuestFileInfo>;
         }
         interface GuestListFileInfo extends integrityService.vim.DynamicData {
            files?: Array<integrityService.vim.GuestFileInfo>;
            remaining: number;
         }
         interface FileTransferInformation extends integrityService.vim.DynamicData {
            attributes: integrityService.vim.GuestFileAttributes;
            size: number;
            url: string;
         }
         interface GuestAuthentication extends integrityService.vim.DynamicData {
            interactiveSession: boolean;
         }
         interface NamePasswordAuthentication extends integrityService.vim.GuestAuthentication {
            username: string;
            password: string;
         }
         interface GuestProgramSpec extends integrityService.vim.DynamicData {
            programPath: string;
            arguments: string;
            workingDirectory?: string;
            envVariables?: Array<string>;
         }
         interface GuestWindowsProgramSpec extends integrityService.vim.GuestProgramSpec {
            startMinimized: boolean;
         }
         interface GuestProcessInfo extends integrityService.vim.DynamicData {
            name: string;
            pid: number;
            owner: string;
            cmdLine: string;
            startTime: Date;
            endTime?: Date;
            exitCode?: number;
         }
         interface ArrayOfGuestProcessInfo {
            GuestProcessInfo?: Array<integrityService.vim.GuestProcessInfo>;
         }
         interface SSPIAuthentication extends integrityService.vim.GuestAuthentication {
            sspiToken: string;
         }
         interface TicketedSessionAuthentication extends integrityService.vim.GuestAuthentication {
            ticket: string;
         }
         interface VsanClusterConfigInfoHostDefaultInfo extends integrityService.vim.DynamicData {
            uuid?: string;
            autoClaimStorage?: boolean;
         }
         interface VsanClusterConfigInfo extends integrityService.vim.DynamicData {
            enabled?: boolean;
            defaultConfig?: integrityService.vim.VsanClusterConfigInfoHostDefaultInfo;
         }
         interface VsanHostClusterStatusStateCompletionEstimate extends integrityService.vim.DynamicData {
            completeTime?: Date;
            percentComplete?: number;
         }
         interface VsanHostClusterStatusState extends integrityService.vim.DynamicData {
            state: string;
            completion?: integrityService.vim.VsanHostClusterStatusStateCompletionEstimate;
         }
         interface VsanHostClusterStatus extends integrityService.vim.DynamicData {
            uuid?: string;
            nodeUuid?: string;
            health: string;
            nodeState: integrityService.vim.VsanHostClusterStatusState;
            memberUuid?: Array<string>;
         }
         interface VsanHostConfigInfoStorageInfo extends integrityService.vim.DynamicData {
            autoClaimStorage?: boolean;
            diskMapping?: Array<integrityService.vim.VsanHostDiskMapping>;
         }
         interface VsanHostConfigInfoClusterInfo extends integrityService.vim.DynamicData {
            uuid?: string;
            nodeUuid?: string;
         }
         interface VsanHostConfigInfoNetworkInfoPortConfig extends integrityService.vim.DynamicData {
            ipConfig?: integrityService.vim.VsanHostIpConfig;
            device: string;
         }
         interface ArrayOfVsanHostConfigInfoNetworkInfoPortConfig {
            VsanHostConfigInfoNetworkInfoPortConfig?: Array<integrityService.vim.VsanHostConfigInfoNetworkInfoPortConfig>;
         }
         interface VsanHostConfigInfoNetworkInfo extends integrityService.vim.DynamicData {
            port?: Array<integrityService.vim.VsanHostConfigInfoNetworkInfoPortConfig>;
         }
         interface VsanHostConfigInfo extends integrityService.vim.DynamicData {
            enabled?: boolean;
            hostSystem?: integrityService.vim.ManagedObjectReference;
            clusterInfo?: integrityService.vim.VsanHostConfigInfoClusterInfo;
            storageInfo?: integrityService.vim.VsanHostConfigInfoStorageInfo;
            networkInfo?: integrityService.vim.VsanHostConfigInfoNetworkInfo;
         }
         interface ArrayOfVsanHostConfigInfo {
            VsanHostConfigInfo?: Array<integrityService.vim.VsanHostConfigInfo>;
         }
         enum VsanHostDecommissionModeObjectAction {
            "noAction",
            "ensureObjectAccessibility",
            "evacuateAllData",
         }
         interface VsanHostDecommissionMode extends integrityService.vim.DynamicData {
            objectAction: string;
         }
         interface VsanHostDiskMapResult extends integrityService.vim.DynamicData {
            mapping: integrityService.vim.VsanHostDiskMapping;
            diskResult?: Array<integrityService.vim.VsanHostDiskResult>;
            error?: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanHostDiskMapResult {
            VsanHostDiskMapResult?: Array<integrityService.vim.VsanHostDiskMapResult>;
         }
         interface VsanHostDiskMapping extends integrityService.vim.DynamicData {
            ssd: integrityService.vim.HostScsiDisk;
            nonSsd: Array<integrityService.vim.HostScsiDisk>;
         }
         interface ArrayOfVsanHostDiskMapping {
            VsanHostDiskMapping?: Array<integrityService.vim.VsanHostDiskMapping>;
         }
         enum VsanHostDiskResultState {
            "inUse",
            "eligible",
            "ineligible",
         }
         interface VsanHostDiskResult extends integrityService.vim.DynamicData {
            disk: integrityService.vim.HostScsiDisk;
            state: string;
            vsanUuid?: string;
            error?: integrityService.vim.LocalizedMethodFault;
         }
         interface ArrayOfVsanHostDiskResult {
            VsanHostDiskResult?: Array<integrityService.vim.VsanHostDiskResult>;
         }
         enum VsanHostHealthState {
            "unknown",
            "healthy",
            "unhealthy",
         }
         interface VsanHostIpConfig extends integrityService.vim.DynamicData {
            upstreamIpAddress: string;
            downstreamIpAddress: string;
         }
         interface VsanHostMembershipInfo extends integrityService.vim.DynamicData {
            nodeUuid: string;
            hostname: string;
         }
         interface ArrayOfVsanHostMembershipInfo {
            VsanHostMembershipInfo?: Array<integrityService.vim.VsanHostMembershipInfo>;
         }
         enum VsanHostNodeState {
            "error",
            "disabled",
            "agent",
            "master",
            "backup",
            "starting",
            "stopping",
            "enteringMaintenanceMode",
            "exitingMaintenanceMode",
            "decommissioning",
         }
         enum VsanDiskIssueType {
            "nonExist",
            "stampMismatch",
            "unknown",
         }
         interface VsanHostRuntimeInfoDiskIssue extends integrityService.vim.DynamicData {
            diskId: string;
            issue: string;
         }
         interface ArrayOfVsanHostRuntimeInfoDiskIssue {
            VsanHostRuntimeInfoDiskIssue?: Array<integrityService.vim.VsanHostRuntimeInfoDiskIssue>;
         }
         interface VsanHostRuntimeInfo extends integrityService.vim.DynamicData {
            membershipList?: Array<integrityService.vim.VsanHostMembershipInfo>;
            diskIssues?: Array<integrityService.vim.VsanHostRuntimeInfoDiskIssue>;
            accessGenNo?: number;
         }
         interface SysimageFaultFileNotFound extends integrityService.vim.NotFound {
            name: string;
         }
      }
   }
}

export = vsphereintegrity;